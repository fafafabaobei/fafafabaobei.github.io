<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>React Hocks</title>
      <link href="/2024/08/11/react/"/>
      <url>/2024/08/11/react/</url>
      
        <content type="html"><![CDATA[<h4 id="hook-简介"><a href="#hook-简介" class="headerlink" title="hook 简介"></a>hook 简介</h4><h5 id="什么是hook"><a href="#什么是hook" class="headerlink" title="什么是hook"></a>什么是hook</h5><p>hook 是React 16.8 的新增特性，它可以让你在不编写class的情况下使用state以及其他React其他特性</p><blockquote><p>hook官方文档：<a href="https://react.docschina.org/">React 官方中文文档 (docschina.org)</a></p></blockquote><h5 id="class-组件不足"><a href="#class-组件不足" class="headerlink" title="class 组件不足"></a>class 组件不足</h5><ol><li>组件间难以复用状态逻辑</li><li>复杂组件难以理解</li><li>使用class导致学习成本变高</li></ol><h4 id="hook-基础"><a href="#hook-基础" class="headerlink" title="hook 基础"></a>hook 基础</h4><h4 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h4>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> react </category>
          
          <category> react-hooks </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> react </tag>
            
            <tag> react-hooks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/08/08/js+vue/"/>
      <url>/2024/08/08/js+vue/</url>
      
        <content type="html"><![CDATA[<h3 id="js"><a href="#js" class="headerlink" title="js  &#96;&#96;&#96;&#96;"></a>js  &#96;&#96;&#96;&#96;</h3><h4 id="const-let-var"><a href="#const-let-var" class="headerlink" title="const let var"></a>const let var</h4><p>var 存在声明提升，值为undefined；可以重复声明，声明后被覆盖</p><p>let 不存在声明提升，所以会存在暂时性死区；在同一个作用域内不能重复声明</p><p>const 定义常量，所以一旦声明就需要立即初始化,在同一个作用域内不能重复声明</p><h4 id="js数据类型"><a href="#js数据类型" class="headerlink" title="js数据类型"></a>js数据类型</h4><ul><li><p>基本数据类型</p><ol><li>Number</li><li>String</li><li>Boolean</li><li>Undefined</li><li>null</li><li>symbol</li></ol></li><li><p>引用类型（object）</p><p>复杂数据类型统称为Object  es6新添加有 Set  Map</p></li></ul><p>基本数据类型存储在栈中；引用类型的对象存储在堆中</p><p>当变量赋值，解析器首先要确认是引用类型还是基本类型</p><ul><li>声明变量时不同的内存地址分配：<ul><li>基本类型的值存放在栈中，在栈中存放的是对应的值</li><li>引用类型对应的值存储在堆中，在栈中存放的是指向堆内存的地址</li></ul></li><li>不同的类型数据导致赋值变量时的不同：<ul><li>简单类型赋值，是生成相同的值，两个数据对应不同的地址</li><li>复杂类型赋值，是将保存对象的内存地址赋值给另一个变量。也就是两个变量指向堆内存中同一个对象</li></ul></li></ul><p>!!! es6新增基本数据类型Symbol</p><p>​因为对象属性的数据类型都是字符串，会导致属性名重复；symbol就是解决对象属性名重复，导致属性值被覆盖的问题</p><ul><li><p>唯一性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>() === <span class="title class_">Symbol</span>() )<span class="comment">//false</span></span><br><span class="line"><span class="comment">//类似于NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span>() === <span class="title class_">NaN</span>() )<span class="comment">//false</span></span><br></pre></td></tr></table></figure></li><li><p>不具备迭代器接口( !Symbo.iterator ) 不能用for in  或 for of 循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">12</span>,</span><br><span class="line">    [<span class="title class_">Symbol</span>(<span class="string">&#x27;level&#x27;</span>)]: <span class="string">&#x27;A&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//需要用Reflect.ownKeys() 才能获取到所有的key</span></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(person)</span><br></pre></td></tr></table></figure></li><li><p>Symbol.for()  与 Symbol.keyFor()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">s1 == s2 <span class="comment">//true   创建Symbol.for(&#x27;foo&#x27;)会全局寻找是否之前创建过Symbol.for(&#x27;foo&#x27;)，如果有则直接使用以创建的没有则创建</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="数组常用方法"><a href="#数组常用方法" class="headerlink" title="数组常用方法"></a>数组常用方法</h4><ul><li>增<ul><li>push() unshift()splice()concat()</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//push()  接收任意数量参数，并添加到末尾，返回数组最新长度</span></span><br><span class="line"><span class="keyword">let</span> colors = []</span><br><span class="line"><span class="keyword">let</span> count = colors.<span class="title function_">push</span>(<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count) <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//unshift()  在数组开头添加任意多个值，然后返回新的数组长度</span></span><br><span class="line"><span class="keyword">let</span> colors = <span class="keyword">new</span> <span class="title class_">Array</span></span><br><span class="line"><span class="keyword">let</span> count = colors.<span class="title function_">unshift</span>(<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count) <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// splice() 传入3个参数，分别是(开始位置, 要删除的元素数量, 插入的元素...) ， 返回空数组 </span></span><br><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> removed = colors.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;orange&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors)<span class="comment">// [&quot;red&quot;, &quot;yellow&quot;, &quot;orange&quot;, &quot;blue&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(removed)  <span class="comment">//  []</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//concat()  会先创建当前数组的副本， 然后把参数添加到副本末尾，最后返回新构建的数组，不会影响原始数组</span></span><br><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> removed = colors.<span class="title function_">concat</span>(<span class="string">&quot;yellow&quot;</span>, [<span class="string">&quot;orange&quot;</span>, <span class="string">&quot;blue&quot;</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors)<span class="comment">//  [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;] </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(removed)  <span class="comment">//  [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;orange&quot;, &quot;blue&quot;]</span></span><br></pre></td></tr></table></figure><ul><li>删<ul><li>pop()shift()splice()slice()</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//pop() 用于删除数组的最后一项，返回被删除项</span></span><br><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> item = colors.<span class="title function_">pop</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item)  <span class="comment">//&quot;green&quot;</span></span><br><span class="line"><span class="variable language_">console</span>,<span class="title function_">log</span>(colors, colors.<span class="property">length</span>) <span class="comment">// [&quot;red&quot;] 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//shift() 用于删除数组第一项，同时返回删除项</span></span><br><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> item = colors.<span class="title function_">shift</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item)  <span class="comment">//&quot;red&quot;</span></span><br><span class="line"><span class="variable language_">console</span>,<span class="title function_">log</span>(colors, colors.<span class="property">length</span>) <span class="comment">// [&quot;green&quot;] 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//splice() 传入两个参数，不传第三个参数，只删减不添加,返回空数组</span></span><br><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> removed = colors.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors)<span class="comment">// [&quot;red&quot;, &quot;blue&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(removed)  <span class="comment">//  []</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//slice()用于创建一个原数组中包含的数组，生成系数组，不影响原数组</span></span><br><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;purple&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> colors2 = colors.<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> colors3 = colors.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">let</span> colors4 = colors.<span class="title function_">slice</span>(-<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> colors5 = colors.<span class="title function_">slice</span>(-<span class="number">2</span>);</span><br><span class="line"><span class="keyword">let</span> colors6 = colors.<span class="title function_">slice</span>(<span class="number">1</span>，-<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors)   <span class="comment">// [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;purple&quot;]</span></span><br><span class="line">concole.<span class="title function_">log</span>(colors2); <span class="comment">// [&quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;purple&quot;]</span></span><br><span class="line">concole.<span class="title function_">log</span>(colors3); <span class="comment">// [&quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;]</span></span><br><span class="line">concole.<span class="title function_">log</span>(colors4); <span class="comment">// [&quot;purple&quot;]</span></span><br><span class="line">concole.<span class="title function_">log</span>(colors5); <span class="comment">// [&quot;yellow&quot;, &quot;purple&quot;]</span></span><br><span class="line">concole.<span class="title function_">log</span>(colors6); <span class="comment">// [&quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;]</span></span><br></pre></td></tr></table></figure><ul><li>改<ul><li>splice()删一个加一个，相当于改</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下标</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">10</span>; <span class="comment">// 将数组中索引为2的元素修改为10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [1, 2, 10, 4, 5]</span></span><br><span class="line"><span class="comment">// splice()</span></span><br><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> removed = colors.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;red&quot;</span>, <span class="string">&quot;purple&quot;</span>); <span class="comment">// 插入两个值，删除一个元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors); <span class="comment">// red,red,purple,blue</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(removed); <span class="comment">// green，只有一个元素的数组</span></span><br></pre></td></tr></table></figure><ul><li>查<ul><li>indexOf()includes()find()</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// indexOf() 返回查找元素位置，找到返回index，找不到返回 -1</span></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line">numbers.<span class="title function_">indexOf</span>(<span class="number">4</span>) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//includes() 返回查找元素位置，找到返回true， 找不到返回 false</span></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line">numbers.<span class="title function_">includes</span>(<span class="number">4</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">find(callback[, thisArg])</span></span><br><span class="line"><span class="comment">第一个参数是函数类似一个for循环 (item, index, array) =&gt; item &gt; 10</span></span><br><span class="line"><span class="comment">element:数组中当前正在处理的元素</span></span><br><span class="line"><span class="comment">index:正在处理的元素在数组中的索引</span></span><br><span class="line"><span class="comment">array: 调用该方法的数组</span></span><br><span class="line"><span class="comment">将在调用 callbackFn 时用作 this 值*/</span></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line">numbers.<span class="title function_">find</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item &gt; <span class="number">3</span>) <span class="comment">// 当callback返回true时,会返回当前元素item，后结束循环;如果提供 thisArg 參數予 find，其將會被當作 callback 每次被呼叫的 this。若是沒提供，則會使用 undefined (en-US)。</span></span><br><span class="line"><span class="keyword">var</span> inventory = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;apples&quot;</span>, <span class="attr">quantity</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;bananas&quot;</span>, <span class="attr">quantity</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;cherries&quot;</span>, <span class="attr">quantity</span>: <span class="number">5</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isCherries</span>(<span class="params">fruit</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> fruit.<span class="property">name</span> === <span class="string">&quot;cherries&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(inventory.<span class="title function_">find</span>(isCherries));</span><br><span class="line"><span class="comment">// &#123; name: &#x27;cherries&#x27;, quantity: 5 &#125;</span></span><br></pre></td></tr></table></figure><ul><li>排序<ul><li>reverse() 反转 sort() 传入一个比较函数</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">compare</span>(<span class="params">value1, value2</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value1 &lt; value2) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;   <span class="comment">// value1 在前</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value1 &gt; value2) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//value2 在前</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//保持不变</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> values = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>];</span><br><span class="line">values.<span class="title function_">sort</span>(compare);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(values.<span class="title function_">sort</span>())<span class="comment">//[0,1,10,15,5]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(values); <span class="comment">// [0,1,5,10,15]</span></span><br></pre></td></tr></table></figure><ul><li><p>转换方法</p><ul><li>join() 方法接收一个参数，即字符串分隔符，返回包含所有项的字符串</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">12</span>,<span class="number">23</span>,<span class="number">34</span>]</span><br><span class="line"><span class="keyword">let</span> arr = array.<span class="title function_">join</span>(<span class="string">&quot;+&quot;</span>) <span class="comment">// &quot;12+23+34&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>迭代方法</p><ul><li>some()[ES6]every()[ES6]forEach()filter()map()</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//some()对数组每一项都运行传入的测试函数，如果至少有1个元素返回 true ，则这个方法返回 true</span></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> someResult = numbers.<span class="title function_">some</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item &gt; <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(someResult) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//every()对数组每一项都运行传入的测试函数，如果所有元素都返回 true ，则这个方法返回 true</span></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> everyResult = numbers.<span class="title function_">every</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item &gt; <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(everyResult) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//forEach()对数组每一项都运行传入的函数，没有返回值</span></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line">numbers.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 执行某些操作</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//filter()对数组每一项都运行传入的函数，函数返回 true 的项会组成数组之后返回</span></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> filterResult = numbers.<span class="title function_">filter</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item &gt; <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filterResult); <span class="comment">// [3,4,5,4,3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//map() 对数组每一项都运行传入的函数，返回由每次函数调用的结果，构成的数组</span></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> mapResult = numbers.<span class="title function_">map</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item * <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mapResult) <span class="comment">// [2,4,6,8,10,8,6,4,2]</span></span><br></pre></td></tr></table></figure><ul><li><p>ES6新增数组方法 </p><ul><li>Array构造函数新增方法：扩展运算符Array.from()Array.of()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//扩展运算符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])<span class="comment">// 1 2 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>, ...[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>)<span class="comment">// 1 2 3 4 5</span></span><br><span class="line">[...<span class="string">&#x27;hello&#x27;</span>]<span class="comment">// [ &quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot; ]</span></span><br><span class="line">[...<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>)]<span class="comment">// [&lt;div&gt;, &lt;div&gt;, &lt;div&gt;]   伪数组转成真数组</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">伪数组：伪数组没有Array.prototype，它只是一个对象；伪数组的索引，就是那些键值对的key，没有真正的顺序可言；长度是手动设置的</span></span><br><span class="line"><span class="comment">数组：数组有Array.prototype，他是对象的同时，也是数组；数组的索引和长度是内置属性</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Array.from()将对象value转为数组：类似数组的对象和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）</span></span><br><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="attr">length</span>: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="title class_">Array</span>.<span class="title function_">from</span>(arrayLike); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br><span class="line"><span class="comment">//还可以接受第二个参数，用来对每个元素进行处理</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function">(<span class="params">x</span>) =&gt;</span> x * x)<span class="comment">// [1, 4, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Array.of()// 创建数组</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">没有参数的时候，返回一个空数组;</span></span><br><span class="line"><span class="comment">将一组值，转换为数组*/</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">of</span>()         <span class="comment">// []</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">3</span>)<span class="comment">// [3]</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">3</span>, <span class="number">11</span>, <span class="number">8</span>) <span class="comment">// [3,11,8]</span></span><br></pre></td></tr></table></figure><ul><li>实例对象新增方法：copyWithin()    find()、findIndex()      fill()        entries()，keys()，values()          includes()         flat()，flatMap()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fill() 填充一个数组</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">3</span>).<span class="title function_">fill</span>(<span class="number">7</span>)<span class="comment">// [7, 7, 7]</span></span><br><span class="line"><span class="comment">//还可以带上参数，填充到指定位置</span></span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>].<span class="title function_">fill</span>(<span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>)<span class="comment">// [&#x27;a&#x27;, 7, &#x27;c&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//entries()，keys()，values()</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">entries()是对键值对的遍历</span></span><br><span class="line"><span class="comment">keys()是对键名的遍历</span></span><br><span class="line"><span class="comment">values()是对值的遍历*/</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [index, item] <span class="keyword">of</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].<span class="title function_">entries</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(index, item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0 &quot;a&quot;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].<span class="title function_">keys</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].<span class="title function_">values</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#x27;a&#x27;</span></span><br><span class="line"><span class="comment">// &#x27;b&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//flat()数组扁平化处理</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]].<span class="title function_">flat</span>(<span class="number">2</span>)<span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="comment">// flatMap() 在 map() 方法的基础上，对返回值进行了“扁平化”处理  </span></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].<span class="title function_">flatMap</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> [x, x * <span class="number">2</span>]) <span class="comment">//[2, 4, 3, 6, 4, 8]</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="字符串常用方法"><a href="#字符串常用方法" class="headerlink" title="字符串常用方法"></a>字符串常用方法</h4><ul><li>增concat</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//concat 用于将一个或多个字符串拼接成新字符串,不会改变原字符串</span></span><br><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello &quot;</span></span><br><span class="line"><span class="keyword">let</span> result = stringValue.<span class="title function_">concat</span>(<span class="string">&quot;work&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">//&quot;hello work&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue)  <span class="comment">//&quot;hello &quot;</span></span><br></pre></td></tr></table></figure><ul><li>删slice()substr()substring()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello word&quot;</span></span><br><span class="line"><span class="comment">//slice() 传入一个参数，或两个参数；开始截取位置，与结束位置</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">slice</span>(<span class="number">3</span>)); <span class="comment">// &quot;lo world&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">slice</span>(<span class="number">3</span>, <span class="number">7</span>)); <span class="comment">// &quot;lo w&quot;</span></span><br><span class="line"><span class="comment">//substring()传入一个参数，或两个参数；开始截取位置，与结束位置</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">substring</span>(<span class="number">3</span>)); <span class="comment">// &quot;lo world&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">substring</span>(<span class="number">3</span>,<span class="number">7</span>)); <span class="comment">// &quot;lo w&quot;</span></span><br><span class="line"><span class="comment">//substr() 传入一个参数，或两个参数；开始截取位置，与切取数量</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">substr</span>(<span class="number">3</span>)); <span class="comment">// &quot;lo world&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">substr</span>(<span class="number">3</span>, <span class="number">7</span>)); <span class="comment">// &quot;lo worl&quot;</span></span><br></pre></td></tr></table></figure><ul><li><p>改</p><ul><li>trim()trimLeft()trimRight()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;  hello world  &quot;</span></span><br><span class="line"><span class="comment">//trim()删除前后打头的所有空格符，返回新字符串</span></span><br><span class="line"><span class="keyword">let</span> trimStringValue = stringValue.<span class="title function_">trim</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(trimStringValue)   <span class="comment">// &quot;hello word&quot;</span></span><br><span class="line"><span class="comment">//trimLeft()删除前面打头所有空格，返回新字符串</span></span><br><span class="line"><span class="keyword">let</span> trimLeftStringValue = stringValue.<span class="title function_">trimLeft</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(trimLeftStringValue)<span class="comment">//“hello word  ”</span></span><br><span class="line"><span class="comment">//trimRight()删除后面打头所有空格，返回新字符串</span></span><br><span class="line"><span class="keyword">let</span> trimRightStringValue = stringValue.<span class="title function_">trimRight</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(trimRightStringValue)<span class="comment">//&quot;  hello word&quot;</span></span><br></pre></td></tr></table></figure><ul><li>repeat()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//repeat()接收一个整数参数，表示要将字符串复制多少，然后返回拼接所有副本后的结果</span></span><br><span class="line"><span class="keyword">let</span> strintValue = <span class="string">&quot;nana &quot;</span></span><br><span class="line"><span class="keyword">let</span> copyResult = stringValue.<span class="title function_">repeat</span>(<span class="number">2</span>) <span class="comment">//&quot;nana nana &quot;</span></span><br></pre></td></tr></table></figure><ul><li>padStart()    podEnd()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;foo&quot;</span></span><br><span class="line"><span class="comment">//padStart()复制字符串，如果小于指定长度，则在前面填充字符，直到长度满足,默认填充空格</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">padStart</span>(<span class="number">6</span>))<span class="comment">// &quot;   foo&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">padStart</span>(<span class="number">6</span>，<span class="string">&quot;a&quot;</span>))<span class="comment">// &quot;aaafoo&quot;</span></span><br><span class="line"><span class="comment">//padEnd()复制字符串，如果小于指定长度，则在后面填充字符，直到长度满足,默认填充空格</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">padEnd</span>(<span class="number">6</span>))<span class="comment">// &quot;foo   &quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">padEnd</span>(<span class="number">6</span>，<span class="string">&quot;a&quot;</span>))<span class="comment">// &quot;fooaaa&quot;</span></span><br></pre></td></tr></table></figure><ul><li>toLowerCase()      toUpperCase()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello word&quot;</span></span><br><span class="line"><span class="comment">// toLowerCase()  将字符串转成小写</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">toUpperCase</span>())<span class="comment">//&quot;&quot;hello word&quot;&quot;</span></span><br><span class="line"><span class="comment">// toUpperCase()  将字符串转成大写</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">toLowerCase</span>())<span class="comment">//&quot;HELLO WORD&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>查</p><ul><li>chatAt()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//chatAt()返回给定索引位置的字符</span></span><br><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello word&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">charAt</span>(<span class="number">2</span>))<span class="comment">//&quot;l&quot;</span></span><br></pre></td></tr></table></figure><ul><li>indexOf()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//indexOf()从字符串开头去搜索传入的字符串，并返回索引位置（没有找到，则返回-1）</span></span><br><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello word&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">indexOf</span>(<span class="string">&quot;o&quot;</span>))<span class="comment">//4</span></span><br></pre></td></tr></table></figure><ul><li>startsWith()includes()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从字符串中搜索传入字符串，并返回一个表示是否包含的返回布尔值</span></span><br><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello word&quot;</span></span><br><span class="line"><span class="comment">//startWith()</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">startsWith</span>(llo))<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">startsWith</span>(oll))<span class="comment">//false</span></span><br><span class="line"><span class="comment">//includes()</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">includes</span>(oll))<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">includes</span>(llo))<span class="comment">//true</span></span><br></pre></td></tr></table></figure></li><li><p>转换成数组</p><ul><li>splic() <a href="#%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95">跟 数组方法 join() 相反</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;12+13+14&quot;</span></span><br><span class="line"><span class="keyword">let</span> arr = str.<span class="title function_">split</span>(<span class="string">&quot;+&quot;</span>)<span class="comment">//[12, 23, 34]</span></span><br></pre></td></tr></table></figure></li><li><p>模板匹配</p><ul><li>match()search()replace()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;cat, bat, sat, fat&quot;</span></span><br><span class="line"><span class="comment">//match()接收一个参数，可以是正则表达式，也可以是RexExp对象，返回数组</span></span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/.at/</span>;</span><br><span class="line"><span class="keyword">let</span> matches = text.<span class="title function_">match</span>(pattern)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(matches[<span class="number">0</span>])<span class="comment">//&quot;cat&quot;只要遇到匹配的后续不会再进行匹配</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//search()接收一个参数，可以是一个正则表达式字符串，也可以是一个RegExp对象，找到则返回匹配索引，否则返回 -1</span></span><br><span class="line"><span class="keyword">let</span> pos = text.<span class="title function_">search</span>(<span class="regexp">/at/</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pos)<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//replace()接收两个参数，第一个参数为匹配的内容，第二个参数为替换的元素(可用函数),返回替换后的字符串，只会更换第一个匹配的字符串</span></span><br><span class="line"><span class="keyword">let</span> result = text.<span class="title function_">replace</span>(<span class="string">&quot;at&quot;</span>, <span class="string">&quot;omd&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)<span class="comment">//&quot;comd, bat, sat, fat&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>字符串反转（应用）</p></li></ul><ol><li>利用扩展运算符变成数组(或字符串的split() 方法)，对数组进行反转，在合并成字符串</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;123456&quot;</span></span><br><span class="line"><span class="keyword">let</span> unstr = [...str].<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);<span class="comment">//&quot;654321&quot;</span></span><br><span class="line"><span class="keyword">let</span> unstr = str.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);<span class="comment">//&quot;654321&quot;</span></span><br><span class="line"><span class="keyword">let</span> unstr = <span class="title class_">Array</span>.<span class="title function_">from</span>(str).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);<span class="comment">//&quot;654321&quot;</span></span><br><span class="line"><span class="comment">//附加什么样的数据结构能够使用扩展运算符</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>利用循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> res = [];</span><br><span class="line"><span class="keyword">for</span>(i = str.<span class="property">length</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">    res.<span class="title function_">push</span>(i+<span class="number">1</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> unstr = res.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>) <span class="comment">//&quot;654321&quot;;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><h5 id="对象便利-对象不具备迭代器数据结构，不能使用for-of-遍历"><a href="#对象便利-对象不具备迭代器数据结构，不能使用for-of-遍历" class="headerlink" title="对象便利 (对象不具备迭代器数据结构，不能使用for of 遍历)"></a>对象便利 (对象不具备迭代器数据结构，不能使用for of 遍历)</h5><ul><li>对象 for in 遍历</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">UID</span>: <span class="string">&#x27;561525&#x27;</span>,</span><br><span class="line">    <span class="attr">nickName</span>: <span class="string">&#x27;昵称&#x27;</span>,</span><br><span class="line">    <span class="attr">acatar</span>: <span class="string">&#x27;https://a.jpg&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历key</span></span><br><span class="line"><span class="keyword">for</span>(key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key)</span><br><span class="line">&#125;<span class="comment">//UIDnickNameacatat</span></span><br><span class="line"><span class="comment">//通过key遍历value</span></span><br><span class="line"><span class="keyword">for</span>(key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[key])</span><br><span class="line">&#125;<span class="comment">//561525昵称https://a.jpg</span></span><br></pre></td></tr></table></figure><ul><li>对象forEach遍历</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">UID</span>: <span class="string">&#x27;561525&#x27;</span>,</span><br><span class="line">    <span class="attr">nickName</span>: <span class="string">&#x27;昵称&#x27;</span>,</span><br><span class="line">    <span class="attr">acatar</span>: <span class="string">&#x27;https://a.jpg&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)</span><br><span class="line"><span class="comment">//返回的是一个数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(keys)<span class="comment">//[&quot;UID&quot;, &quot;nickName&quot;, &quot;acatat&quot;]</span></span><br><span class="line"><span class="comment">//获取对象值,通过forEach()</span></span><br><span class="line">keys.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;item&#125;</span>:<span class="subst">$&#123;obj[item]&#125;</span>`</span>)</span><br><span class="line">&#125;)<span class="comment">//UID:561525nickName:昵称acatat:https://a.jpg</span></span><br></pre></td></tr></table></figure><ul><li>对象values遍历</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">UID</span>: <span class="string">&#x27;561525&#x27;</span>,</span><br><span class="line">    <span class="attr">nickName</span>: <span class="string">&#x27;昵称&#x27;</span>,</span><br><span class="line">    <span class="attr">acatar</span>: <span class="string">&#x27;https://a.jpg&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">values</span>(obj).<span class="title function_">forEach</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;)<span class="comment">//561525昵称https://a.jpg</span></span><br></pre></td></tr></table></figure><ul><li>对象getOwnPropertyNames 遍历</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">UID</span>: <span class="string">&#x27;561525&#x27;</span>,</span><br><span class="line">    <span class="attr">nickName</span>: <span class="string">&#x27;昵称&#x27;</span>,</span><br><span class="line">    <span class="attr">acatar</span>: <span class="string">&#x27;https://a.jpg&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(obj).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key)</span><br><span class="line">&#125;)<span class="comment">//UIDnickNameacatat</span></span><br></pre></td></tr></table></figure><ul><li>使用Reflect.ownKeys(obj) 遍历</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">UID</span>: <span class="string">&#x27;561525&#x27;</span>,</span><br><span class="line">    <span class="attr">nickName</span>: <span class="string">&#x27;昵称&#x27;</span>,</span><br><span class="line">    <span class="attr">acatar</span>: <span class="string">&#x27;https://a.jpg&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key)</span><br><span class="line">&#125;)<span class="comment">//UIDnickNameacatat</span></span><br></pre></td></tr></table></figure><ul><li>属性简写</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    foo,<span class="comment">//value跟key一致时可以简写</span></span><br><span class="line">    <span class="title function_">method</span>(<span class="params"></span>) &#123;<span class="comment">// 方法也可以省略 function()</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello!&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//简写的对象方法不能用作构造函数，否则会报错</span></span><br><span class="line"><span class="keyword">new</span> obj.<span class="title function_">method</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以通过函数return &#123;&#125; 返回一个对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getPoint</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> x = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> y = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;x, y&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>属性名表达式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sysbol  ES6 允许字面量定义对象时，将表达式放在括号内</span></span><br><span class="line"><span class="comment">//属性名表达式与简洁表示法，不能同时使用，会报错</span></span><br><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">  <span class="string">&#x27;first word&#x27;</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">  [lastWord]: <span class="string">&#x27;world&#x27;</span>,</span><br><span class="line">  [<span class="string">&#x27;h&#x27;</span> + <span class="string">&#x27;ello&#x27;</span>]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hi&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">a[<span class="string">&#x27;first word&#x27;</span>] <span class="comment">// &quot;hello&quot;</span></span><br><span class="line">a[lastWord] <span class="comment">// &quot;world&quot;</span></span><br><span class="line">a.<span class="title function_">hello</span>() <span class="comment">// hi</span></span><br></pre></td></tr></table></figure><ul><li>super关键字</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//this关键字总是指向函数所在的当前对象，ES6 又新增了另一个类似的关键字super，指向当前对象的原型对象</span></span><br><span class="line"><span class="keyword">const</span> proto = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="string">&#x27;world&#x27;</span>,</span><br><span class="line">  <span class="title function_">find</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="property">foo</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(obj, proto); <span class="comment">// 为obj设置原型对象</span></span><br><span class="line">obj.<span class="title function_">find</span>() <span class="comment">// &quot;hello&quot;</span></span><br></pre></td></tr></table></figure><ul><li>扩展运算符的应用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; x, y, ...z &#125; = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> &#125;;</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 2</span></span><br><span class="line">z <span class="comment">// &#123; a: 3, b: 4 &#125;</span></span><br><span class="line"><span class="comment">//解构赋值是浅拷贝</span></span><br><span class="line"><span class="comment">//对象的扩展运算符等同于使用Object.assign()方法</span></span><br></pre></td></tr></table></figure><ul><li>ES6对象新增的方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>() <span class="comment">//严格判断两个值是否相等，与 === 行为基本一致。</span></span><br><span class="line"><span class="comment">//不同点1. +0不等于-02.NaN等于自身 (这两点与 === 相反)</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>()</span><br><span class="line"><span class="comment">//Object.assign()方法用于对象的合并，将源对象source的所有可枚举属性，复制到目标对象target</span></span><br><span class="line"><span class="keyword">const</span> target = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> source1 = &#123; <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(target, source1);</span><br><span class="line">target <span class="comment">// &#123;a:1, b:2, c:3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptors</span>()<span class="comment">//返回指定对象所有自身属性（非继承属性）的描述对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Object.setPrototypeOf方法用来设置一个对象的原型对象</span></span><br><span class="line"><span class="comment">//Object.getPrototypeOf用于读取一个对象的原型对象</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>()，<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>()，<span class="title class_">Object</span>.<span class="title function_">values</span>()，<span class="title class_">Object</span>.<span class="title function_">entries</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于将一个键值对数组转为对象</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">fromEntries</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象解构</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;fafafa&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">23</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;name, age, play&#125; = person</span><br><span class="line"><span class="comment">// name = &#x27;fafafa&#x27;   age = 23  play = undefined</span></span><br></pre></td></tr></table></figure><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><h5 id="ES6新增方法"><a href="#ES6新增方法" class="headerlink" title="ES6新增方法"></a>ES6新增方法</h5><ul><li>默认参数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">&#123;x, y = <span class="number">5</span>&#125; = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// undefined 5</span></span><br></pre></td></tr></table></figure><ul><li>函数的length属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.length将返回没有指定默认值的参数个数</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params">a</span>) &#123;&#125;).<span class="property">length</span> <span class="comment">// 1</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params">a = <span class="number">5</span></span>) &#123;&#125;).<span class="property">length</span> <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.rest 参数也不会计入length属性</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params">...args</span>) &#123;&#125;).<span class="property">length</span> <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.设置了默认值的参数不是尾参数，那么length属性也不再计入后面的参数了(只数默认参数前的参数数量)</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params">a = <span class="number">0</span>, b, c</span>) &#123;&#125;).<span class="property">length</span> <span class="comment">// 0</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params">a, b = <span class="number">1</span>, c</span>) &#123;&#125;).<span class="property">length</span> <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><ul><li>name属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回该函数的函数名</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line">f.<span class="property">name</span> <span class="comment">// &quot;&quot;</span></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line">f.<span class="property">name</span> <span class="comment">// &quot;f&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将一个具名函数赋值给一个变量，则 name属性都返回这个具名函数原本的名字</span></span><br><span class="line"><span class="keyword">const</span> bar = <span class="keyword">function</span> <span class="title function_">baz</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line">bar.<span class="property">name</span> <span class="comment">// &quot;baz&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Function构造函数返回的函数实例，name属性的值为anonymous</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">Function</span>).<span class="property">name</span> <span class="comment">// &quot;anonymous&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//bind返回的函数，name属性值会加上bound前缀</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line">foo.<span class="title function_">bind</span>(&#123;&#125;).<span class="property">name</span> <span class="comment">// &quot;bound foo&quot;</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;).<span class="title function_">bind</span>(&#123;&#125;).<span class="property">name</span> <span class="comment">// &quot;bound &quot;</span></span><br></pre></td></tr></table></figure><h4 id="ES6新增"><a href="#ES6新增" class="headerlink" title="ES6新增"></a>ES6新增</h4><h5 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h5><p>Set是es6新增的数据结构，类似于数组，但是成员的值都是唯一的，没有重复的值，我们一般称为集合  </p><ul><li>增添加某个值，返回 <code>Set</code> 结构本身</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"><span class="comment">//add()</span></span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">1</span>).<span class="title function_">add</span>(<span class="number">2</span>).<span class="title function_">add</span>(<span class="number">2</span>); <span class="comment">// 2只被添加了一次</span></span><br></pre></td></tr></table></figure><ul><li>删删除某个值，返回一个布尔值，表示删除是否成功</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"><span class="comment">//delete()</span></span><br><span class="line">s.<span class="title function_">delete</span>(<span class="number">1</span>) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><ul><li>查          判断值是否存在</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">s.<span class="title function_">has</span>(<span class="number">2</span>) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><ul><li>clear()  清除所有成员，没有返回值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">s.<span class="title function_">clear</span>()</span><br></pre></td></tr></table></figure><ul><li>遍历</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]);</span><br><span class="line"><span class="comment">//keys()：返回键名的遍历器</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.<span class="title function_">keys</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//values()：返回键值的遍历器</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.<span class="title function_">values</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//entries()：返回键值对的遍历器</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//forEach()：使用回调函数遍历每个成员</span></span><br><span class="line">set.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, key</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&#x27; : &#x27;</span> + value))</span><br></pre></td></tr></table></figure><h5 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h5><p><code>Map</code>类型是键值对的有序列表，而键和值都可以是任意类型</p><ul><li>增设置键名<code>key</code>对应的键值为<code>value</code>，然后返回整个 Map 结构;可采用链式写法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">m.<span class="title function_">set</span>(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>).<span class="title function_">set</span>(<span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>).<span class="title function_">set</span>(<span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>) <span class="comment">// 链式操作</span></span><br></pre></td></tr></table></figure><ul><li>删delete<code>方法删除某个键，返回</code>true<code>。如果删除失败，返回</code>false</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">m.<span class="title function_">delete</span>(<span class="literal">undefined</span>)</span><br></pre></td></tr></table></figure><ul><li>改<code>key</code>已经有值，则键值会被更新，否则就新生成该键</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">m.<span class="title function_">set</span>(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">m.<span class="title function_">set</span>(<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">m.<span class="title function_">get</span>(<span class="number">1</span>) <span class="comment">// &#x27;b&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>查<code>has</code>方法返回一个布尔值，表示某个键是否在当前 Map 对象之中</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;edition&#x27;</span>, <span class="number">6</span>);</span><br><span class="line">m.<span class="title function_">has</span>(<span class="string">&#x27;edition&#x27;</span>)     <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>getget<code>方法读取</code>key<code>对应的键值，如果找不到</code>key<code>，返回</code>undefined</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">m.<span class="title function_">set</span>(hello, <span class="string">&#x27;Hello ES6!&#x27;</span>) <span class="comment">// 键是函数</span></span><br><span class="line">m.<span class="title function_">get</span>(hello)  <span class="comment">// Hello ES6!</span></span><br></pre></td></tr></table></figure><ul><li>size属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;bar&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">map.<span class="property">size</span> <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><ul><li>clear <code>clear</code>方法清除所有成员，没有返回值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;bar&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line">map.<span class="title function_">clear</span>()</span><br><span class="line">map.<span class="property">size</span> <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><ul><li>遍历</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;no&#x27;</span>],[<span class="string">&#x27;T&#x27;</span>,  <span class="string">&#x27;yes&#x27;</span>]]);</span><br><span class="line"><span class="comment">//keys()：返回键名的遍历器</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> map.<span class="title function_">keys</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;F&quot;</span></span><br><span class="line"><span class="comment">// &quot;T&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//values()：返回键值的遍历器</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> map.<span class="title function_">values</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;no&quot;</span></span><br><span class="line"><span class="comment">// &quot;yes&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//entries()：返回所有成员的遍历器</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> map.<span class="title function_">entries</span>()) &#123; </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item[<span class="number">0</span>], item[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;F&quot; &quot;no&quot;</span></span><br><span class="line"><span class="comment">// &quot;T&quot; &quot;yes&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//forEach()：遍历 Map 的所有成员</span></span><br><span class="line">map.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">value, key, map</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Key: %s, Value: %s&quot;</span>, key, value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>ES6 之前， 如果对象属性是对象，则后面会覆盖前面的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;aa&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;bb&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj3 = &#123;</span><br><span class="line">    [obj1]: <span class="string">&#x27;11&#x27;</span>,</span><br><span class="line">    [obj2]: <span class="string">&#x27;22&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当属性用key存储时，如果key不是str,则会调用toString()方法把他变成str,就会变成[object Object]，两个[object Object]一样就会覆盖前面的属性</span></span><br><span class="line"><span class="comment">// 可以用Map代替对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj3) <span class="comment">// &#123;[object Object]:22&#125;</span></span><br></pre></td></tr></table></figure><h5 id="WeakSet-和-WeakMap"><a href="#WeakSet-和-WeakMap" class="headerlink" title="WeakSet 和 WeakMap"></a>WeakSet 和 WeakMap</h5><ul><li><p>WeakSet</p><ul><li><p><code>WeakSet</code>可以接受一个具有 <code>Iterable</code>接口的对象作为参数</p></li><li><p>没有遍历操作的<code>API</code></p></li><li><p>没有<code>size</code>属性</p></li><li><p><code>WeakSet</code>只能成员只能是引用类型，而不能是其他类型的值；<code>WeakSet</code>里面的引用只要在外部消失，它在 <code>WeakSet</code>里面的引用就会自动消失</p></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ws=<span class="keyword">new</span> <span class="title class_">WeakSet</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 成员不是引用类型</span></span><br><span class="line"><span class="keyword">let</span> weakSet=<span class="keyword">new</span> <span class="title class_">WeakSet</span>([<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(weakSet) <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 成员为引用类型</span></span><br><span class="line"><span class="keyword">let</span> obj1=&#123;<span class="attr">name</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">let</span> obj2=&#123;<span class="attr">name</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">let</span> ws=<span class="keyword">new</span> <span class="title class_">WeakSet</span>([obj1,obj2]); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ws) <span class="comment">//WeakSet &#123;&#123;…&#125;, &#123;…&#125;&#125;</span></span><br></pre></td></tr></table></figure><ul><li><p>WeakMap</p><ul><li><code>WeakMap</code>结构与<code>Map</code>结构类似，也是用于生成键值对的集合；在<code>API</code>中<code>WeakMap</code>与<code>Map</code>有两个区别:<ul><li>没有遍历操作的<code>API</code></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// WeakMap 可以使用 set 方法添加成员</span></span><br><span class="line"><span class="keyword">const</span> wm1 = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line"><span class="keyword">const</span> key = &#123;<span class="attr">foo</span>: <span class="number">1</span>&#125;;</span><br><span class="line">wm1.<span class="title function_">set</span>(key, <span class="number">2</span>);</span><br><span class="line">wm1.<span class="title function_">get</span>(key) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// WeakMap 也可以接受一个数组，</span></span><br><span class="line"><span class="comment">// 作为构造函数的参数</span></span><br><span class="line"><span class="keyword">const</span> k1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> k2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> wm2 = <span class="keyword">new</span> <span class="title class_">WeakMap</span>([[k1, <span class="string">&#x27;foo&#x27;</span>], [k2, <span class="string">&#x27;bar&#x27;</span>]]);</span><br><span class="line">wm2.<span class="title function_">get</span>(k2) <span class="comment">// &quot;bar&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>WeakMap</code>只接受对象作为键名（<code>null</code>除外），不接受其他类型的值作为键名；<code>WeakMap</code>的键名所指向的对象，一旦不再需要，里面的键名对象和所对应的键值对会自动消失</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// TypeError: 1 is not an object!</span></span><br><span class="line">map.<span class="title function_">set</span>(<span class="title class_">Symbol</span>(), <span class="number">2</span>)</span><br><span class="line"><span class="comment">// TypeError: Invalid value used as weak map key</span></span><br><span class="line">map.<span class="title function_">set</span>(<span class="literal">null</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// TypeError: Invalid value used as weak map key</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="typeof-和-instanceof-判断类型对象"><a href="#typeof-和-instanceof-判断类型对象" class="headerlink" title="typeof 和 instanceof 判断类型对象"></a>typeof 和 instanceof 判断类型对象</h4><ul><li>typeof : 适用于判断基本类型、方法对象等。判断所有对象，都返回对象[Object, Object]</li><li>instanceof : 适用于判断对象(Object)。判断对象比较详细</li></ul><h4 id="数组incloudes方法"><a href="#数组incloudes方法" class="headerlink" title="数组incloudes方法"></a>数组incloudes方法</h4><p>可以简便实现同一个属性的多种判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正常判断用法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printAnimals</span>(<span class="params">animal</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(animal === <span class="string">&#x27;dog&#x27;</span> || animal === <span class="string">&#x27;cat&#x27;</span> || animal === <span class="string">&#x27;hamster&#x27;</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`has a animal <span class="subst">$&#123;anomal&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用incloudes方法,也能实现上面的功能</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printAnimals</span>(<span class="params">animal</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> animals = [<span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;hamster&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span>(animals.<span class="title function_">includes</span>(animal))&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(animal)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">printAnimals</span>(<span class="string">&#x27;dog&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="对象解构赋值"><a href="#对象解构赋值" class="headerlink" title="对象解构赋值"></a>对象解构赋值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//解构后的变量为解构后的变量名</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">name</span>: name1, <span class="attr">age</span>: age1, hobby : hobby1&#125; = person</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">name</span>: name2, age : age2, hobby : hobby2 = <span class="string">&#x27;刷剧&#x27;</span>&#125; = person</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name1, age1, hobby1)<span class="comment">//张三 20 undefined</span></span><br><span class="line"><span class="comment">//当属性值为undefined， 我们就可以用 = 给默认值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name2, age2, hobby2) <span class="comment">//张三 20 刷剧</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象解构当遇到&#123;&#125;打头的参数前面已经声明过了需要加()或者开头打;</span></span><br><span class="line"><span class="keyword">let</span> x;</span><br><span class="line">(&#123;x&#125; = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;)</span><br><span class="line">;&#123;x&#125; = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="comment">//盲区   需要加;</span></span><br><span class="line">(&#123;&#125; = &#123;<span class="literal">true</span>， <span class="literal">false</span>&#125;);</span><br><span class="line">(&#123;&#125; = <span class="number">123</span>)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">拓展</span></span><br><span class="line"><span class="comment">JavaScript什么时候必须加分号;</span></span><br><span class="line"><span class="comment">①当一行代码是以 ( 开头的时候，则在前面补上一个分号用以避免一些语法解析错误。</span></span><br><span class="line"><span class="comment">②当一行代码是以 [ 开头的时候，则在前面补上一个分号用以避免一些语法解析错误</span></span><br><span class="line"><span class="comment">③当一行代码是以 ` 开头的时候，则在前面补上一个分号用以避免一些语法解析错误</span></span><br><span class="line"><span class="comment">JavaScript结尾时候必须加分号;</span></span><br><span class="line"><span class="comment">var name = 3</span></span><br><span class="line"><span class="comment">(function () &#123;&#125;)()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// 由于没有分号，上面的会被解析为下面的语句，导致出现报错</span></span><br><span class="line"><span class="comment">var name = 3(function () &#123;&#125;)()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="手写数组map函数和filter函数"><a href="#手写数组map函数和filter函数" class="headerlink" title="手写数组map函数和filter函数"></a>手写数组map函数和filter函数</h4><ul><li><p>map()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法实现</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">_map</span> = <span class="keyword">function</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> newArr = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="variable language_">this</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        newArr.<span class="title function_">push</span>(<span class="title function_">fn</span>(<span class="variable language_">this</span>[i],i))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法调用</span></span><br><span class="line">arr.<span class="title function_">_map</span>(<span class="function">(<span class="params">v</span>)=&gt;</span>v+<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li><li><p>filter()</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法实现</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">_filter</span> = <span class="keyword">function</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> newArr = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="variable language_">this</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_">fn</span>(<span class="params"><span class="variable language_">this</span>[i]</span>)&#123;</span><br><span class="line">            newArr.<span class="title function_">push</span>(<span class="title function_">fn</span>(<span class="variable language_">this</span>[i]))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法调用</span></span><br><span class="line">arr.<span class="title function_">_filter</span>(<span class="function">(<span class="params">v</span>)=&gt;</span>v==<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="对象字面量代替switch"><a href="#对象字面量代替switch" class="headerlink" title="对象字面量代替switch"></a>对象字面量代替switch</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子</span></span><br><span class="line"><span class="comment">//根据颜色打印水果</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printFruits</span>(<span class="params">color</span>)&#123;</span><br><span class="line">    <span class="keyword">switch</span>(color)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;red&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> [<span class="string">&#x27;apple&#x27;</span>]</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;yello&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> [<span class="string">&#x27;banana&#x27;</span>]</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对象字面量写法</span></span><br><span class="line"><span class="keyword">const</span> fruitsColor = &#123;</span><br><span class="line">    <span class="attr">red</span>: [<span class="string">&#x27;apple&#x27;</span>],</span><br><span class="line">    <span class="attr">yello</span>: [<span class="string">&#x27;banana&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printFruits</span>(<span class="params">color</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> fruitsColor[color] || []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="map数据类型使用实例"><a href="#map数据类型使用实例" class="headerlink" title="map数据类型使用实例"></a>map数据类型使用实例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj3 = &#123;</span><br><span class="line">    [obj1]: <span class="string">&#x27;11&#x27;</span>,</span><br><span class="line">    [obj2]: <span class="string">&#x27;22&#x27;</span></span><br><span class="line">    <span class="comment">// 对象key默认为字符串，如果传入的不是字符串而是对象，会将对象隐式转换为toString方法值也就是字符串，值为[Object Object] ,所以[obj2]: &#x27;22&#x27; 会覆盖[obj1]: &#x27;11&#x27; ，obj3打印只会打印&#123;[Object Object]: &#x27;22&#x27;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//而Map 数据类型就能够解决这个问题</span></span><br><span class="line"><span class="keyword">var</span> b =<span class="keyword">new</span> <span class="title class_">Map</span>().<span class="title function_">set</span>(obj1, <span class="string">&#x27;123&#x27;</span>).<span class="title function_">set</span>(obj2, <span class="string">&#x27;456&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Map(2) &#123;</span></span><br><span class="line"><span class="comment">  &#123; name: &#x27;张三&#x27; &#125; =&gt; &#x27;123&#x27;,</span></span><br><span class="line"><span class="comment">  &#123; name: &#x27;李四&#x27; &#125; =&gt; &#x27;456&#x27;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h4><ul><li><p>浅拷贝</p><p><img src="/2024/08/08/js+vue/Users\发发发宝贝\AppData\Roaming\Typora\typora-user-images\image-20231113002002898.png" alt="image-20231113002002898"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">shallowClone</span>(<span class="params">source</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> source !== <span class="string">&#x27;object&#x27;</span> || source == <span class="literal">null</span>）</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">return</span> source;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">let</span> target = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(source) ? [] : &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="comment">//source.hasOwnProperty(key) 判断是否是source自身的属性，不拷贝原型链的属性</span></span><br><span class="line">        <span class="keyword">if</span> (source.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">            <span class="comment">//shallowClone 实现对属性进行递归拷贝</span></span><br><span class="line">            target[key] = <span class="title function_">shallowClone</span>(source[key]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>深拷贝(复杂数据类型也会开辟新空间存储)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用json数据转换来达到深拷贝</span></span><br><span class="line"><span class="keyword">let</span> deePerson = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(person))</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者自己写递归循环实现深拷贝</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj, hash = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj == <span class="literal">null</span>) <span class="keyword">return</span> obj; <span class="comment">// 如果是null或者undefined我就不进行拷贝操作</span></span><br><span class="line">    <span class="comment">//如果是时间函数Date() 、正则表达式 RegExp()也直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(obj);</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(obj);</span><br><span class="line">  <span class="comment">// 可能是对象或者普通的值  如果是函数的话是不需要深拷贝</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&quot;object&quot;</span>) <span class="keyword">return</span> obj;</span><br><span class="line">  <span class="comment">// 是对象的话就要进行深拷贝</span></span><br><span class="line">  <span class="keyword">if</span> (hash.<span class="title function_">get</span>(obj)) <span class="keyword">return</span> hash.<span class="title function_">get</span>(obj);</span><br><span class="line">  <span class="keyword">let</span> cloneObj = <span class="keyword">new</span> obj.<span class="title function_">constructor</span>(<span class="params"></span>);</span><br><span class="line">  <span class="comment">// 找到的是所属类原型上的constructor,而原型上的 constructor指向的是当前类本身</span></span><br><span class="line">  hash.<span class="title function_">set</span>(obj, cloneObj);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">      <span class="comment">// 实现一个递归拷贝</span></span><br><span class="line">      cloneObj[key] = <span class="title function_">deepClone</span>(obj[key], hash);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cloneObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>拷贝弊端：不能拷贝函数 、正则表达式 RegExp()</p><h4 id="文件切片上传和重传"><a href="#文件切片上传和重传" class="headerlink" title="文件切片上传和重传"></a>文件切片上传和重传</h4><p>要实现重传效果，你可以考虑以下几个步骤：</p><ol><li>在前端实现切片上传时，记录每个切片的索引号和总数，并将这些信息发送到服务器端。</li><li>在服务器端接收到切片后，可以根据索引号和总数来判断是否有缺失的切片。</li><li>如果发现有缺失的切片，服务器端可以向前端发送一个请求，要求重新上传这些缺失的切片。</li><li>前端接收到服务器端的请求后，重新上传缺失的切片即可。</li></ol><p>在实现重传时，你可以考虑以下几点：</p><ul><li>在前端记录每个切片的上传状态，可以使用一个数组或对象来保存每个切片的状态信息。</li><li>当服务器端要求重传时，前端可以根据切片的状态信息，选择性地重新上传缺失的切片。</li><li>为了避免重复上传已经成功上传的切片，你可以在前端和服务器端都对已上传的切片进行标记或记录。</li></ul><h4 id="防抖节流-闭包的实际运用"><a href="#防抖节流-闭包的实际运用" class="headerlink" title="防抖节流(闭包的实际运用)"></a>防抖节流(闭包的实际运用)</h4><ul><li><p>防抖函数</p><p>当持续出发事件，一定时间没有再触发该事件，事件函数将执行一次</p><p>如果设定时间之前又触发了一次，则重新延时(定时器)；类似王者荣耀回城，再次点击回城重新计时  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timeout;</span><br><span class="line"><span class="comment">//利用闭包来延长timer 的声明周期和作用域</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="variable language_">this</span>; <span class="comment">// 保存this指向</span></span><br><span class="line">        <span class="keyword">let</span> args = <span class="variable language_">arguments</span>; <span class="comment">// 拿到event对象</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">clearTimeout</span>(timeout) <span class="comment">// 清除上一次的函数</span></span><br><span class="line">        timeout = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;  <span class="comment">// 创建新的事件，并重新计时</span></span><br><span class="line">            func.<span class="title function_">apply</span>(context, args)</span><br><span class="line">        &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>节流函数</p><p>当持续触发一个事件的时候，保证一段事件内，只调用一次事件处理；类似王者荣耀技能，只有当CD结束时才能再次释放</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttled2</span>(<span class="params">fn, delay = <span class="number">500</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line"> <span class="comment">//利用闭包来延长timer 的声明周期和作用域</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">                timer = <span class="literal">null</span></span><br><span class="line">            &#125;, delay);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>相同点：</p><ul><li>都可以通过使用 <code>setTimeout</code> 实现</li><li>目的都是，降低回调执行频率。节省资源</li></ul><p>应用场景：</p><p>​防抖：</p><ul><li>搜索框搜索输入。只需用户最后一次输入完，再发送请求</li><li>手机号、邮箱验证输入检测</li><li>窗口大小<code>resize</code>。只需窗口调整完成后，计算窗口大小。防止重复渲染。</li></ul><p>​节流：</p><ul><li>滚动加载，加载更多或滚到底部监听</li><li>搜索框，搜索联想功能</li></ul><h4 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h4><p>​图片懒加载是一种网页优化技术，用于延迟加载页面中的图片，以减少页面加载时间和带宽消耗。在网页中，当用户滚动浏览页面时，只有当图片进入可视窗口时才加载图片，而不是一次性加载所有图片</p><p>​思路：通过JavaScript监听滚动事件，当图片进入可视窗口时再动态加载图片。</p><ul><li>原生js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 获取所有带有.lazy-load类的图片元素</span></span><br><span class="line">  <span class="keyword">let</span> lazyImages = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.lazy-load&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 懒加载函数</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">lazyLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">    lazyImages.<span class="title function_">forEach</span>(<span class="function"><span class="params">img</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 判断图片是否进入可视区域并且有data-src属性</span></span><br><span class="line">      <span class="keyword">if</span> (img.<span class="title function_">getBoundingClientRect</span>().<span class="property">top</span> &lt; <span class="variable language_">window</span>.<span class="property">innerHeight</span> &amp;&amp; img.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-src&#x27;</span>)) &#123;</span><br><span class="line">        <span class="comment">// 将data-src属性的值赋给src属性，实现图片加载</span></span><br><span class="line">        img.<span class="property">src</span> = img.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-src&#x27;</span>);</span><br><span class="line">        <span class="comment">// 加载完成后移除data-src属性，避免重复加载</span></span><br><span class="line">        img.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;data-src&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听滚动事件和窗口大小改变事件，触发懒加载函数</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, lazyLoad);</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, lazyLoad);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 页面加载完成后立即执行一次懒加载函数</span></span><br><span class="line">  <span class="title function_">lazyLoad</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>vue3 setup 组合式api 写法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div ref=&quot;imageRef&quot;&gt;</span><br><span class="line">    &lt;img v-if=&quot;isVisible&quot; :src=&quot;imageSrc&quot; alt=&quot;Lazy Loaded Image&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, onMounted &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const imageSrc = &#x27;image.jpg&#x27;; // 图片的真实URL</span><br><span class="line">    const isVisible = ref(false); // 控制图片是否显示的变量</span><br><span class="line"></span><br><span class="line">    const imageRef = ref(null); // 图片元素的引用</span><br><span class="line"></span><br><span class="line">    // 创建 Intersection Observer 实例</span><br><span class="line">    const intersectionObserver = new IntersectionObserver((entries) =&gt; &#123;</span><br><span class="line">      entries.forEach(entry =&gt; &#123;</span><br><span class="line">        if (entry.isIntersecting) &#123;</span><br><span class="line">          isVisible.value = true; // 图片进入可视区域时显示图片</span><br><span class="line">          intersectionObserver.unobserve(imageRef.value); // 停止观察图片元素</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 在组件挂载后开始观察图片元素</span><br><span class="line">    onMounted(() =&gt; &#123;</span><br><span class="line">      intersectionObserver.observe(imageRef.value);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="上拉刷新，触底加载"><a href="#上拉刷新，触底加载" class="headerlink" title="上拉刷新，触底加载"></a>上拉刷新，触底加载</h4><ul><li>原生js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> content = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;content&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> isLoading = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// 上拉刷新</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handlePullToRefresh</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (content.<span class="property">scrollTop</span> === <span class="number">0</span> &amp;&amp; !isLoading) &#123;</span><br><span class="line">      isLoading = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">// 模拟数据加载</span></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 插入新内容到顶部</span></span><br><span class="line">        <span class="keyword">const</span> newContent = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        newContent.<span class="property">textContent</span> = <span class="string">&#x27;New Content&#x27;</span>;</span><br><span class="line">        content.<span class="title function_">insertBefore</span>(newContent, content.<span class="property">firstChild</span>);</span><br><span class="line">        isLoading = <span class="literal">false</span>;</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 触底加载</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleLoadMore</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (content.<span class="property">scrollHeight</span> - content.<span class="property">scrollTop</span> &lt;= content.<span class="property">clientHeight</span> &amp;&amp; !isLoading) &#123;</span><br><span class="line">      isLoading = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">// 模拟数据加载</span></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 插入新内容到底部</span></span><br><span class="line">        <span class="keyword">const</span> newContent = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        newContent.<span class="property">textContent</span> = <span class="string">&#x27;More Content&#x27;</span>;</span><br><span class="line">        content.<span class="title function_">appendChild</span>(newContent);</span><br><span class="line">        isLoading = <span class="literal">false</span>;</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 监听滚动事件，触发上拉刷新和触底加载</span></span><br><span class="line">  content.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">handlePullToRefresh</span>();</span><br><span class="line">    <span class="title function_">handleLoadMore</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>vue3 setup 组合式api 写法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;content&quot; @scroll=&quot;handleScroll&quot;&gt;</span><br><span class="line">    &lt;div v-for=&quot;item in items&quot; :key=&quot;item&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const items = ref([1, 2, 3, 4, 5]);</span><br><span class="line">    let isLoading = false;</span><br><span class="line"></span><br><span class="line">    // 上拉刷新</span><br><span class="line">    function handlePullToRefresh(e) &#123;</span><br><span class="line">      if (e.target.scrollTop === 0 &amp;&amp; !isLoading) &#123;</span><br><span class="line">        isLoading = true;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">          items.value.unshift(&#x27;New Content&#x27;);</span><br><span class="line">          isLoading = false;</span><br><span class="line">        &#125;, 1000);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 触底加载</span><br><span class="line">    function handleLoadMore(e) &#123;</span><br><span class="line">      if (e.target.scrollHeight - e.target.scrollTop &lt;= e.target.clientHeight &amp;&amp; !isLoading) &#123;</span><br><span class="line">        isLoading = true;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">          items.value.push(&#x27;More Content&#x27;);</span><br><span class="line">          isLoading = false;</span><br><span class="line">        &#125;, 1000);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 处理滚动事件</span><br><span class="line">    function handleScroll(e) &#123;</span><br><span class="line">      handlePullToRefresh(e);</span><br><span class="line">      handleLoadMore(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      items,</span><br><span class="line">      handleScroll</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="原生js实现路由"><a href="#原生js实现路由" class="headerlink" title="原生js实现路由"></a>原生js实现路由</h4><p>​背景： 再过去，路由切换只出现在后台，前端想要切换到某个页面，就需要向后端请求，随后完成路由切换。但随着spa单页面应用模型的发展，前端路由也逐渐火热，单页面顾名思义就是一个html页面，但当我们点击导航的时候url会改变，网页也会显示不同的内容。简而言之就是js监测url变化，从而改变内容</p><p>​实现思路：实现前端路由是为了在单页面应用中实现页面切换而不刷新整个页面。原生JavaScript可以通过监听URL的变化来实现简单的路由功能</p><p>​步骤：</p><ol><li><strong>使用<code>hash</code>实现路由</strong>：在URL中使用<code>#</code>后面的部分来表示路由路径，当<code>hash</code>发生变化时，可以通过监听<code>hashchange</code>事件来捕获路由变化。</li><li><strong>动态更新页面内容</strong>：根据不同的路由路径，动态更新页面内容，实现页面切换的效果</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自执行函数</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 定义 Router 构造函数</span></span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Router</span> = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">routers</span> = &#123;&#125; <span class="comment">//保存路由</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">curUrl</span> = <span class="string">&#x27;&#x27;</span> <span class="comment">//获取当前的hash</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 给构造函数Router原型添加初始化方法</span></span><br><span class="line">    <span class="title class_">Router</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">init</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;hashchange&#x27;</span>, <span class="variable language_">this</span>.<span class="property">reloadPage</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Router</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">reloadPage</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//获取当前hash值</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">curUrl</span> = location.<span class="property">hash</span>.<span class="title function_">substring</span>(<span class="number">1</span>) || <span class="string">&#x27;/&#x27;</span></span><br><span class="line">        <span class="comment">//运行hash值对应的函数</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">routers</span>[<span class="variable language_">this</span>.<span class="property">curUrl</span>]()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Router</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">map</span> = <span class="keyword">function</span>(<span class="params">key,callback</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">router</span>[key] = callback</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//暴露出去,挂载到oRou</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">oRou</span> = <span class="title class_">Router</span></span><br><span class="line">&#125;)&#123;&#125;</span><br><span class="line"><span class="comment">//实例化</span></span><br><span class="line"><span class="keyword">var</span> oRouter = <span class="keyword">new</span> <span class="title function_">oRou</span>()</span><br><span class="line">oROuter.<span class="title function_">init</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取路由并展示main可视区内容</span></span><br><span class="line">oRouter.<span class="title function_">map</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">var</span> oSidebar = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;sidebar&#x27;</span>)</span><br><span class="line">    oSidebar.<span class="property">innerHTML</span> = <span class="string">&#x27;我是主页&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">oRouter.<span class="title function_">map</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">var</span> oSidebar = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;sidebar&#x27;</span>)</span><br><span class="line">    oSidebar.<span class="property">innerHTML</span> = <span class="string">&#x27;我是html页面&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">oRouter.<span class="title function_">map</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">var</span> oSidebar = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;sidebar&#x27;</span>)</span><br><span class="line">    oSidebar.<span class="property">innerHTML</span> = <span class="string">&#x27;我是css页面&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>其他：</p><ol><li><strong>参数传递</strong>：可以在路由路径中传递参数，通过解析参数来动态展示页面内容。</li><li><strong>路由拦截</strong>：可以在路由处理函数中增加拦截逻辑，实现路由权限控制或其他逻辑。</li><li><strong>路由动画</strong>：可以在页面切换时添加动画效果，提升用户体验</li></ol><ul><li>使用history</li></ul><p>​通过<code>history</code>对象的<code>popstate</code>事件，我们可以在浏览历史记录发生变化时捕获路由的变化</p><p>​我们通过<code>window.addEventListener(&#39;popstate&#39;, function(event) &#123; ... &#125;)</code>来监听<code>popstate</code>事件，当浏览历史记录发生变化时，会触发该事件。在事件处理函数中，我们可以获取当前的URL，从而实现路由变化的监听和处理。</p><p>通过监听<code>history</code>对象的路由变化，我们可以实现更灵活的路由管理，同时可以结合<code>pushState</code>、<code>replaceState</code>等方法来改变路由并触发相应的事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听popstate事件</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;popstate&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理路由变化</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Current URL: &#x27;</span> + <span class="variable language_">document</span>.<span class="property">location</span>.<span class="property">href</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改变路由并触发popstate事件</span></span><br><span class="line">history.<span class="title function_">pushState</span>(&#123;<span class="attr">page</span>: <span class="number">1</span>&#125;, <span class="string">&quot;title 1&quot;</span>, <span class="string">&quot;/page1&quot;</span>);</span><br><span class="line">history.<span class="title function_">pushState</span>(&#123;<span class="attr">page</span>: <span class="number">2</span>&#125;, <span class="string">&quot;title 2&quot;</span>, <span class="string">&quot;/page2&quot;</span>);</span><br><span class="line">history.<span class="title function_">replaceState</span>(&#123;<span class="attr">page</span>: <span class="number">3</span>&#125;, <span class="string">&quot;title 3&quot;</span>, <span class="string">&quot;/page3&quot;</span>);</span><br><span class="line">history.<span class="title function_">back</span>(); <span class="comment">// 模拟后退操作</span></span><br><span class="line">history.<span class="title function_">forward</span>(); <span class="comment">// 模拟前进操作</span></span><br></pre></td></tr></table></figure><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><ul><li>箭头函数this指向 - 指向外层函数上下文</li><li>箭头函数不能当做构造函数</li><li>箭头函数不可以当做迭代器</li></ul><h4 id="this指向-谁调用我我指向谁"><a href="#this指向-谁调用我我指向谁" class="headerlink" title="this指向(谁调用我我指向谁)"></a>this指向(谁调用我我指向谁)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">content</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(content)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//两种调用是一样，get()可以看作get.call()语法糖</span></span><br><span class="line"><span class="title function_">get</span>(<span class="string">&#x27;调用函数get&#x27;</span>)</span><br><span class="line">get.<span class="title function_">call</span>(<span class="variable language_">window</span>, <span class="string">&#x27;调用函数get&#x27;</span>)  <span class="comment">// 浏览器为window，node环境中为global</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">run</span>: <span class="keyword">function</span>(<span class="params">time</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>+“在跑步，”+time+“分钟了”)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="title function_">run</span>(<span class="number">30</span>)</span><br><span class="line">person.<span class="property">run</span>.<span class="title function_">call</span>(person, <span class="number">30</span> )</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="number">222</span>;</span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="number">111</span>,</span><br><span class="line">    <span class="attr">say</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fun = a.<span class="property">say</span> <span class="comment">//赋值了a.say的方法地址给fun</span></span><br><span class="line"><span class="title function_">fun</span>()   <span class="comment">//可以看作fun.call(window) window是全局作用域 所以时222  在node运行环境下，值为undefined</span></span><br><span class="line">a.<span class="title function_">say</span>()   <span class="comment">//a.say.call(a)   所以时111</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vat b = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="number">333</span>,</span><br><span class="line">    <span class="attr">say</span>: <span class="keyword">function</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">        <span class="title function_">fn</span>()  <span class="comment">//调用可以看作 fn.call(window)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">b.<span class="title function_">say</span>(a.<span class="property">say</span>)  <span class="comment">//222  在node运行环境下，值为undefined</span></span><br><span class="line">b.<span class="property">say</span> = a.<span class="property">say</span>  <span class="comment">//将a的say方法指向地址覆盖到b的say方法</span></span><br><span class="line">b.<span class="title function_">say</span>()  <span class="comment">//b.say.call(b) //333</span></span><br></pre></td></tr></table></figure><h4 id="改变this指向"><a href="#改变this指向" class="headerlink" title="改变this指向"></a>改变this指向</h4><p>箭头函数没有自己的this，this是外层代码块的this，this是在定义函数时绑定的。不能够使用做构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="number">11</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="number">22</span>,</span><br><span class="line">    <span class="attr">say</span>: <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">say</span>()  <span class="comment">//不适用obj.say.call(obj),箭头函数this将指向它的外层     //11  //如果外层没有name，则为undefined</span></span><br></pre></td></tr></table></figure><p>手写call、apply</p><p>作用：改变this指向 </p><p>场景:  js的继承(原型链继承；构造函数继承(使用call实现) )</p><ul><li><p>call</p><p>可以用作</p><ol><li>继承</li><li>判断复杂数据类型</li></ol><p><img src="/2024/08/08/js+vue/Users\发发发宝贝\AppData\Roaming\Typora\typora-user-images\image-20231115000045019.png" alt="image-20231115000045019"></p><ol start="3"><li><p>伪数组转换成数组</p><p><img src="/2024/08/08/js+vue/Users\发发发宝贝\AppData\Roaming\Typora\typora-user-images\image-20231115000349050.png" alt="image-20231115000349050"></p></li><li><p>手写call方法</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">getName</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//以函数的形式调用对象方法则指向window(浏览器环境)|global(nodejs环境)，以方法的形式调用时，this指向调用方法的对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: ”张三“</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为call方法是对象直接调用，有点类似是类的静态变量，每个对象方法都能调用，实现方法是直接挂在到Function构造函数的原型上。</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span>(<span class="params">context</span>) &#123;</span><br><span class="line">    <span class="comment">//这里面的this是调用该myCall方法的对象方法function</span></span><br><span class="line">    <span class="comment">//所以传入的参数第一个参数必须是function类型,不是function返回错误</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果参数为空则直接this指向window</span></span><br><span class="line">    context = context || <span class="variable language_">window</span></span><br><span class="line">    <span class="comment">//获取除第一个参数的其余参数</span></span><br><span class="line">    <span class="keyword">var</span> args = [...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">//这里直接使用this，则直接指向getName,以函数的方式调用，所以getName的this指向window，获取到的name是全局变量。但是我们可以用context传入的参数来改变getName的this</span></span><br><span class="line">    <span class="comment">//首先是确定context传入的参数对象有getName方法，直接赋予getName方法</span></span><br><span class="line">    context.<span class="property">fn</span> = <span class="variable language_">this</span></span><br><span class="line">    <span class="comment">//最后返回传入对象参数context.fn,也就是context.getName</span></span><br><span class="line">    <span class="keyword">let</span> result = contest.<span class="title function_">fn</span>(...args)<span class="comment">//对数组args解构  </span></span><br><span class="line">    <span class="keyword">delete</span> context.<span class="property">fn</span></span><br><span class="line">    <span class="keyword">return</span> result </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实际实现方法就是将传入的对象赋予该对象调用的函数，然后再用传入进去的对象调用该函数，从而达到改变this指向</span></span><br><span class="line">person.<span class="property">getName</span>.<span class="title function_">myCall</span>(person1, <span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure></li><li><p>apply</p></li></ul><p>​手写apply(其实与call方法一致，只是传入参数方式不同)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">getName</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//以函数的形式调用对象方法则指向window(浏览器环境)|global(nodejs环境)，以方法的形式调用时，this指向调用方法的对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: ”张三“</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为call方法是对象直接调用，有点类似是类的静态变量，每个对象方法都能调用，实现方法是直接挂在到Function构造函数的原型上。</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span>(<span class="params">context</span>) &#123;</span><br><span class="line">    <span class="comment">//这里面的this是调用该myCall方法的对象方法function</span></span><br><span class="line">    <span class="comment">//所以传入的参数第一个参数必须是function类型,不是function返回错误</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果参数为空则直接this指向window</span></span><br><span class="line">    context = context || <span class="variable language_">window</span></span><br><span class="line">    <span class="comment">//这里直接使用this，则直接指向getName,以函数的方式调用，所以getName的this指向window，获取到的name是全局变量。但是我们可以用context传入的参数来改变getName的this</span></span><br><span class="line">    <span class="comment">//首先是确定context传入的参数对象有getName方法，直接赋予getName方法</span></span><br><span class="line">    context.<span class="property">fn</span> = <span class="variable language_">this</span></span><br><span class="line">    <span class="comment">//判断是否传入了数组</span></span><br><span class="line">    <span class="keyword">let</span> result</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">arguments</span>[<span class="number">1</span>])&#123;</span><br><span class="line">        result = contest.<span class="title function_">fn</span>(...<span class="variable language_">arguments</span>[<span class="number">1</span>])</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        result = contest.<span class="title function_">fn</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> context.<span class="property">fn</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实际实现方法就是将传入的对象赋予该对象调用的函数，然后再用传入进去的对象调用该函数，从而达到改变this指向</span></span><br><span class="line">person.<span class="property">getName</span>.<span class="title function_">myApply</span>(person1, [<span class="number">1</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure><h4 id="js事件循环机制；宏任务与微任务-事件队列"><a href="#js事件循环机制；宏任务与微任务-事件队列" class="headerlink" title="js事件循环机制；宏任务与微任务 事件队列"></a>js事件循环机制；宏任务与微任务 事件队列</h4><ul><li><p>js语言特点 </p><ul><li>单线程</li><li>解释性语言(解释一行执行一行)</li></ul></li><li><p>event-loop</p><ul><li><p>事件循环机制 由三部分组成</p><p>调用栈、微任务队列、消息队列</p><ul><li>event-loop开始时，会从全局一行一行执行，遇到函数调用，会压入到栈中，被压入的函数称为帧，函数调用返回后从调用栈中弹出</li><li>js中的异步操作比如fetch setTimeout setInterval 压入到调用栈中的时候里面的消息会进去到消息队列中去 ，消息队列会等到调用栈清空后再执行</li><li>像promise async await 的异步操作的时候会加入到微任务中去，调用栈中加入的微任务会立马执行</li></ul></li></ul></li></ul><h4 id="js执行顺序及异步实战技巧"><a href="#js执行顺序及异步实战技巧" class="headerlink" title="js执行顺序及异步实战技巧"></a>js执行顺序及异步实战技巧</h4><p><a href="https://www.bilibili.com/video/BV1KX4y1o7E7/?vd_source=ac54e1e5591688b467655879476d502c">吃透js执行顺序及异步实战管理技巧经验_哔哩哔哩_bilibili</a>        10:23</p><ol><li>js的执行顺序</li></ol><p><img src="/2024/08/08/js+vue/Users\发发发宝贝\AppData\Roaming\Typora\typora-user-images\image-20240612231536300.png" alt="image-20240612231536300"></p><ol start="2"><li>异步实战<ul><li>先把异步promise化</li><li>梳理清楚逻辑上的操作顺序</li><li>组织为队列，按顺序执行</li></ul></li></ol><h4 id="回调地狱优化"><a href="#回调地狱优化" class="headerlink" title="回调地狱优化"></a>回调地狱优化</h4><ul><li>利用es11 的可选链式操作符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">Animal</span> = (<span class="params">&#123;type, name, gender&#125;</span>)=&gt;&#123;</span><br><span class="line">    <span class="comment">//!animal 判断animal是否为假值（包括undefined、null、false、0、&#x27;&#x27;等），如果是，则返回&#x27;no animal&#x27;。</span></span><br><span class="line">    <span class="comment">//: !type ? &#x27;type&#x27; 如果animal存在，判断type是否为假值，如果是，则返回&#x27;type&#x27;。</span></span><br><span class="line">    <span class="comment">//: !name ? &#x27;name&#x27; 如果type存在，判断name是否为假值，如果是，则返回&#x27;name&#x27;。</span></span><br><span class="line">    <span class="keyword">return</span> !animal ? <span class="string">&#x27;no animal&#x27;</span> : !type ? <span class="string">&#x27;type&#x27;</span> : !name ? <span class="string">&#x27;name&#x27;</span> : gerder ?  <span class="string">`<span class="subst">$&#123;name&#125;</span>is  a<span class="subst">$&#123;gender&#125;</span>-<span class="subst">$&#123;type&#125;</span>`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>利用提前退出和提前返回</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">Animal</span> = (<span class="params">&#123;type, name, gender&#125;</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(!type) <span class="keyword">return</span> <span class="string">&#x27;no type&#x27;</span></span><br><span class="line">    <span class="keyword">if</span>(!name) <span class="keyword">return</span> <span class="string">&#x27;no name&#x27;</span></span><br><span class="line">    <span class="keyword">if</span>(!gender) <span class="keyword">return</span> <span class="string">&#x27;no gender&#x27;</span></span><br><span class="line">    <span class="comment">//因为js解释性语言, 能往下执行便是没有报错,当上面条件都通过时返回数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span>is  a<span class="subst">$&#123;gender&#125;</span>-<span class="subst">$&#123;type&#125;</span>`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="手写双向数据绑定-v-mode"><a href="#手写双向数据绑定-v-mode" class="headerlink" title="手写双向数据绑定(v-mode)"></a>手写双向数据绑定(v-mode)</h4><ul><li>使用Obiect.defineProperty() 实现双向数据绑定  vue2</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;input&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;input&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;p&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> obj=&#123;<span class="attr">name</span>: <span class="string">&quot;&quot;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//当set或者get obj对象属性，就会触发事件</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;name&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">val</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//input.value = val</span></span></span><br><span class="line"><span class="language-javascript">                    p.<span class="property">innerHTML</span> = val</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> val</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//监听input的修改,并赋值给中间对象obj</span></span></span><br><span class="line"><span class="language-javascript">            input.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                obj.<span class="property">name</span> = e.<span class="property">target</span>.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>使用Proxy( ES6 的新特性) 和Reflect 实现双向数据绑定  vue3</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</span><br><span class="line">&lt;title&gt;</span><br><span class="line">&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; id=&quot;input&quot;&gt;</span><br><span class="line">        &lt;p id=&quot;p&quot;&gt; &lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">            var input = document.getElementById(&#x27;input&#x27;)</span><br><span class="line">            var p = document.getElementById(&#x27;p&#x27;)</span><br><span class="line">var obj=&#123;&#125;</span><br><span class="line">            //Reflect 可以用于获取可以获取对象对象的行为，它与Object类似，但更易读,为操作对象提供一种更优雅地 方式。它地方法与Proxy是对应的</span><br><span class="line">            let newProxy = new Proxy(obj, &#123;</span><br><span class="line">                get: (target, key, recevier)=&gt;&#123;</span><br><span class="line">                    return Reflect.get(target, key, recrvier)</span><br><span class="line">                &#125;,</span><br><span class="line">                set: (target, key, value, recevier)=&gt;&#123;</span><br><span class="line">                    //监听newProxy是否有变化, 如果有则设置值</span><br><span class="line">                    if(key == &quot;text&quot;)&#123;</span><br><span class="line">                        input.value = val</span><br><span class="line">                        p.innerHTML = value;</span><br><span class="line">                    &#125;</span><br><span class="line">                    //将变化反射回原有对象</span><br><span class="line">                    return Reflect.set(target, key, value, recevier)</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            </span><br><span class="line">          //监听input的修改,并赋值给代理对象newProxy</span><br><span class="line">            input.addEventListener(&#x27;input&#x27;, function(e)&#123;</span><br><span class="line">                newProxy.text = e.target.value</span><br><span class="line">            &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="Object-defineProperty与-Proxy区别"><a href="#Object-defineProperty与-Proxy区别" class="headerlink" title="Object.defineProperty与 Proxy区别"></a>Object.defineProperty与 Proxy区别</h4><ol><li>所有属性监听</li></ol><ul><li>Object.defineProperty无法一次性监听对象所有属性，必须遍历或者递归来实现</li><li>Proxy的实现就不需要遍历<ul><li>Proxy 的get方法用于拦截某个属性的读取操作，可以接收三个参数，依次为目标、属性名和Proxy实例本身，其中最后一个参数为可选参数</li><li>set方法用来拦截某个属性的赋值操作，可以接受四个参数，依次为目标对象、属性名、属性值和Proxy实本身，其中最后一个为可选参数</li></ul></li></ul><ol start="2"><li>新增属性监听</li></ol><ul><li><p>Object.defineProPerty无法监听新增属性，如果需要监听新增属性，需要手动再做一次监听，在Vue中想动态监听属性，一般用Vue.set(对象实例, “新增对象属性”)这种形式来添加</p><p><img src="/2024/08/08/js+vue/Users\发发发宝贝\AppData\Roaming\Typora\typora-user-images\image-20231118181334295.png" alt="image-20231118181334295"></p></li><li><p>Proxy可以监听新增属性</p></li></ul><ol start="3"><li>数组操作</li></ol><ul><li><p>Object.defineProperty 无法响应数组操作</p><ul><li><p>可以监听数组变化，但无法对新增数组变化进行监听，因此Mobk中为了监听数组变化，默认将数组长度设置为1000，监听0-999的属性变化</p></li><li><p>如果想要监听push、shift、pop、unshift等方法，该怎么做？Vue和Mobx中都是通过重写原型的方法实现的：在定义变量的时候，判断是否是数组，如果是数组，那么就修改它的proto，将其指向subArrProto，从而实现重写原型链。</p><p>vue源码：</p><p><img src="/2024/08/08/js+vue/Users\发发发宝贝\AppData\Roaming\Typora\typora-user-images\image-20231118185609329.png" alt="image-20231118185609329"></p></li></ul></li></ul><p>场景：</p><ul><li>利用Proxy set get 应用proxy表单验证</li></ul> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//验证规则</span></span><br><span class="line"><span class="keyword">const</span> validators = &#123;</span><br><span class="line">    <span class="attr">name</span>: &#123;</span><br><span class="line">        <span class="title function_">validate</span>(<span class="params">value</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> value.<span class="property">length</span> &gt; <span class="number">6</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attr">message</span>:<span class="string">&#x27;用户名长度不能小于六&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">password</span>: &#123; </span><br><span class="line">        <span class="title function_">validate</span>(<span class="params">value</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> value.<span class="property">length</span> &gt; <span class="number">10</span>; </span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;密码长度不能小于十&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">moblie</span>: &#123;</span><br><span class="line">        <span class="title function_">validate</span>(<span class="params">value</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^1(3|5|기8|9)[0-9]&#123;9&#125;$/</span>.<span class="title function_">test</span>(value);</span><br><span class="line">        &#125;,</span><br><span class="line">        message：<span class="string">&#x27;手机号格式错误&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//验证方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">validator</span>(<span class="params">obj, validators</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">target, key, value</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> validator = validators[key]</span><br><span class="line">            <span class="keyword">if</span> (!validator) &#123; </span><br><span class="line">                target[key] = value;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (validator.<span class="title function_">validate</span>(value)) &#123; </span><br><span class="line">                target[key] = value;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123; alert (validator.<span class="property">message</span> <span class="string">&quot;&quot;</span>);&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> form = &#123;&#125;;</span><br><span class="line">form = <span class="title function_">validator</span>(form, validators);</span><br><span class="line">form.<span class="property">name</span> = <span class="string">&#x27;666&#x27;</span>; <span class="comment">//用户名长度不能小于六</span></span><br><span class="line">form.<span class="property">password</span> = <span class="string">&#x27;113123123123123&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>get 用来拦截私有属性的读取， 用_ 开头的属性是私有属性， 禁止私有属性读取</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person =&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">_sex</span>: <span class="string">&#x27;male&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(person, &#123; </span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, prop</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (prop[<span class="number">0</span>] === <span class="string">&#x27;_&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`<span class="subst">$&#123;prop&#125;</span> is private attribute`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> target[prop]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">proxy.<span class="property">name</span>; <span class="comment">//tom</span></span><br><span class="line">proxy.<span class="property">_sex</span>; <span class="comment">// _sex is private attribute</span></span><br></pre></td></tr></table></figure><ul><li>等等还有其他Proxy的方法使用 …….(get&#x2F; set&#x2F; apply&#x2F; construct&#x2F; has&#x2F; delete&#x2F; delete)</li><li>!!! Proxy 可以提高开发效率和代码质量，但在使用过程中需要注意性能优化、避免循环引用导致栈溢出、合理使用拦截器和兼容性等方面的细节。</li></ul><h4 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h4><ul><li><p>[…arr]</p></li><li><p>支持展开运算符是要有Symbol.iterator</p><p>arr[Symbol.iterator]</p></li></ul><p>面试题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我们能否以某种方式为下面的语句使用展开运算而不导致类型错误 ？</span></span><br><span class="line"><span class="comment">//错误代码示例</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">z</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...obj])<span class="comment">//报错 根本原因是因为对象是不具备迭代器属性的数据结构</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//正确代码</span></span><br><span class="line">obj[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">next</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> objArr = <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj)</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">index</span> &lt; objArr.<span class="property">length</span> -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">let</span> key = objArr[<span class="variable language_">this</span>.<span class="property">index</span>]</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">index</span>++</span><br><span class="line">                <span class="keyword">return</span>&#123;</span><br><span class="line">                    <span class="attr">value</span>: obj[key]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="attr">done</span>: <span class="literal">true</span>&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">index</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...obj])  <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以在Object 构造函数的原型上添加，为所有对象提供迭代器</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES7 也提出了新的写法</span></span><br><span class="line"><span class="comment">//console.log(&#123;...objj&#125;) 会涉及到对象的拷贝操作,相当于对obj进行了浅拷贝</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;...obj&#125;) <span class="comment">// &#123;x: 1, y: 2, z: 3&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>对象转数组案例</li></ul><ol><li>使用 Object.keys() 方法获取对象的所有键，然后使用 map() 方法将每个键对应的值存入新数组中。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="title function_">map</span>(<span class="function"><span class="params">key</span> =&gt;</span> obj[key]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用 Object.values() 方法获取对象的所有值，直接将值存入新数组中。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Object</span>.<span class="title function_">values</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><ol start="3"><li>使用 Object.entries() 方法获取对象的键值对数组，然后对每个键值对进行处理。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Object</span>.<span class="title function_">entries</span>(obj).<span class="title function_">map</span>(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> value);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 高效运算符  &#x27;?.&#x27; 和 &#x27;??&#x27; 和 &#x27;??=&#x27;  的区别</span><br><span class="line"></span><br><span class="line">* 可选链运算符(?.)</span><br><span class="line"></span><br><span class="line">可选链运算符, 允许读取位于连接对象深处的属性值，而不必明确验证链式中的每个引用是否有效。</span><br><span class="line"></span><br><span class="line">使用场景：当我们不确定一个对象是否存在时，调用对象属性，可以使用该操作符</span><br><span class="line"></span><br><span class="line">* 空值合并运算符(??)</span><br><span class="line"></span><br><span class="line">空值合并运算符，是一个逻辑运算符，当左侧的操作为null或undefined时，返回其右侧操作数，否则返回左侧操作数</span><br><span class="line"></span><br><span class="line">有点类似于 ||(逻辑或) ，与 || 区别在于 ??. 对0和 &quot; 会判断为真</span><br><span class="line"></span><br><span class="line">* 逻辑空赋值(??=)</span><br><span class="line"></span><br><span class="line">逻辑空赋值运算符(X ?? = Y) 仅在X是空值(null 或undefined) 时对其赋值。</span><br><span class="line"></span><br><span class="line">使用场景：当你需要通过if判断某个变量不存在时，才需要为该变量赋值时使用</span><br><span class="line"></span><br><span class="line">#### 原型和原型链</span><br><span class="line"></span><br><span class="line">1. **原型（Prototype）**：每个对象都有一个原型对象，可以通过`__proto__`属性来访问。原型对象可以包含共享的属性和方法，可以被对象实例共享。</span><br><span class="line">2. **原型链（Prototype Chain）**：当访问对象的属性或方法时，如果对象本身没有该属性或方法，JavaScript引擎会顺着原型链向上查找，直到找到对应的属性或方法或者到达原型链的顶端。</span><br><span class="line"></span><br><span class="line">~~~ js</span><br><span class="line">// 定义了一个构造函数Person，并在其原型对象上定义了一个方法greet。创建了一个Person对象实例person1，并演示了访问属性和方法以及原型链的关系</span><br><span class="line">function Person(name, age) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 在Person的原型对象上定义一个方法</span><br><span class="line">Person.prototype.greet = function() &#123;</span><br><span class="line">    console.log(`Hello, my name is $&#123;this.name&#125; and I am $&#123;this.age&#125; years old.`);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 创建一个Person对象实例</span><br><span class="line">let person1 = new Person(&#x27;Alice&#x27;, 30);</span><br><span class="line"></span><br><span class="line">// 访问实例对象的属性和方法</span><br><span class="line">console.log(person1.name); // Output: Alice</span><br><span class="line">person1.greet(); // Output: Hello, my name is Alice and I am 30 years old.</span><br><span class="line"></span><br><span class="line">// 演示原型链 实例的__proto__ === 其构造函数的prototype</span><br><span class="line">console.log(person1.__proto__ === Person.prototype); // Output: true</span><br><span class="line">// 构造函数的原型Object</span><br><span class="line">console.log(Person.prototype.__proto__ === Object.prototype); // Output: true</span><br><span class="line">// Object的原型为null</span><br><span class="line">console.log(Object.prototype.__proto__); // Output: null</span><br></pre></td></tr></table></figure><ul><li>其他<ul><li><strong>继承</strong>：通过原型链，我们可以实现对象之间的继承关系，子对象可以继承父对象的属性和方法。可以尝试创建一个新的构造函数，让它继承自<code>Person</code>构造函数，并添加新的属性或方法。</li><li><strong>原型修改</strong>：可以尝试修改<code>Person</code>构造函数的原型对象上的方法，然后看看实例对象是否能够访问到修改后的方法。</li><li><strong>原型链终止</strong>：在原型链的顶端是<code>Object.prototype</code>，它的原型是<code>null</code>。可以思考一下为什么原型链的顶端是<code>Object.prototype</code>，而不是其他对象。</li></ul></li></ul><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><ul><li><strong>原型链继承</strong></li></ul><p>​原型链继承是一种实现对象之间继承关系的方法，通过让一个对象的原型指向另一个对象，从而使得子对象可以继承父对象的属性和方法</p><p>​步骤：</p><ol><li><strong>创建父对象</strong>：首先创建一个父对象，可以是一个普通对象或者一个构造函数。</li><li><strong>创建子对象</strong>：然后创建一个子对象，通过将子对象的原型指向父对象来实现继承。</li><li><strong>继承属性和方法</strong>：子对象通过原型链继承了父对象的属性和方法，可以访问和使用它们</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建了一个父对象parent，其中包含一个sayHello方法。然后我们创建了一个子对象child，通过Object.create()方法将子对象的原型指向父对象</span></span><br><span class="line"><span class="keyword">let</span> parent = &#123;</span><br><span class="line">    <span class="attr">sayHello</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello from parent!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 创建一个子对象，并将其原型指向父对象</span></span><br><span class="line"><span class="keyword">let</span> child = <span class="title class_">Object</span>.<span class="title function_">create</span>(parent);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子对象继承父对象的方法</span></span><br><span class="line">child.<span class="title function_">sayHello</span>(); <span class="comment">// Output: Hello from parent!</span></span><br></pre></td></tr></table></figure><p>其他：</p><ol><li><strong>原型链继承的问题</strong>：原型链继承有一个问题，就是所有子对象共享父对象的属性和方法。这意味着<strong>如果一个子对象修改了继承的属性或方法，会影响到所有其他子对象。</strong>可以思考如何解决这个问题。</li><li><strong>多层继承</strong>：可以尝试创建多层继承关系，即子对象的原型指向另一个子对象，从而实现多层继承。</li><li><strong>构造函数和原型链结合</strong>：可以结合构造函数和原型链继承来实现更灵活的继承方式，即使用构造函数定义对象的特定属性，使用原型链继承共享的属性和方法</li></ol><ul><li><strong>构造函数继承</strong></li></ul><p>​构造函数继承是一种实现对象之间继承关系的方法，通过在子构造函数中调用父构造函数来实现属性的继承。这种继承方式也被称为经典继承或伪经典继承。</p><p>​步骤：</p><ol><li><strong>定义父构造函数</strong>：首先定义一个父构造函数，该构造函数包含要被继承的属性和方法。</li><li><strong>定义子构造函数</strong>：然后定义一个子构造函数，通过在子构造函数中调用父构造函数来继承父构造函数的属性。</li><li><strong>继承属性</strong>：子对象通过构造函数继承父对象的属性，每个子对象都有自己的一份属性副本。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义了一个父构造函数Animal和一个子构造函数Dog。在子构造函数中，通过Animal.call(this, name)调用父构造函数来继承父对象的属性。这样子对象就可以拥有父对象的属性和方法。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在父构造函数的原型上添加方法</span></span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;My name is &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义子构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dog</span>(<span class="params">name, breed</span>) &#123;</span><br><span class="line">    <span class="comment">// 继承父构造函数的属性</span></span><br><span class="line">    <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">breed</span> = breed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个子对象</span></span><br><span class="line"><span class="keyword">let</span> myDog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;Buddy&#x27;</span>, <span class="string">&#x27;Labrador&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子对象继承父对象的方法</span></span><br><span class="line">myDog.<span class="title function_">sayName</span>(); <span class="comment">// Output: My name is Buddy</span></span><br></pre></td></tr></table></figure><p>其他：</p><ol><li><strong>原型链与构造函数继承结合</strong>：可以结合原型链和构造函数继承来实现更灵活的继承方式，即使用构造函数继承属性，使用原型链继承共享的方法。</li><li><strong>继承多个构造函数</strong>：可以尝试在子构造函数中调用多个父构造函数来继承多个对象的属性。</li><li><strong>继承方法</strong>：除了继承属性，还可以尝试在子构造函数中继承父对象的方法，而不仅仅是属性。</li></ol><ul><li><strong>组合式继承</strong></li></ul><p>​组合式继承（Combination Inheritance）是一种结合了构造函数继承和原型链继承的继承方式，可以解决构造函数继承和原型链继承各自的缺点，实现属性和方法的有效继承</p><p>​步骤：</p><ol><li><strong>构造函数继承</strong>：通过在子构造函数中调用父构造函数来继承属性。</li><li><strong>原型链继承</strong>：通过将子构造函数的原型指向一个父构造函数的实例来继承方法。</li><li><strong>优点</strong>：组合式继承结合了构造函数继承和原型链继承的优点，避免了它们各自的缺点，实现了属性和方法的有效继承</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义了一个父构造函数Animal和一个子构造函数Dog。在子构造函数中，通过Animal.call(this, name)调用父构造函数来继承父对象的属性，然后通过Dog.prototype = Object.create(Animal.prototype)来继承父对象的方法。这样子对象就可以拥有父对象的属性和方法。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在父构造函数的原型上添加方法</span></span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;My name is &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义子构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dog</span>(<span class="params">name, breed</span>) &#123;</span><br><span class="line">    <span class="comment">// 继承父构造函数的属性</span></span><br><span class="line">    <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">breed</span> = breed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承父构造函数的方法</span></span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Dog</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个子对象</span></span><br><span class="line"><span class="keyword">let</span> myDog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;Buddy&#x27;</span>, <span class="string">&#x27;Labrador&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子对象继承父对象的属性和方法</span></span><br><span class="line">myDog.<span class="title function_">sayName</span>(); <span class="comment">// Output: My name is Buddy</span></span><br></pre></td></tr></table></figure><ol><li><strong>优化组合式继承</strong>：可以进一步优化组合式继承，避免调用两次父构造函数，以提高性能。</li><li><strong>ES6类继承</strong>：可以尝试使用ES6中的类继承语法来实现继承，更加简洁和易读。</li><li><strong>混合继承</strong>：可以结合多种继承方式，如构造函数继承、原型链继承、组合式继承等，来满足不同的继承需求。</li></ol><ul><li><strong>寄生组合式继承</strong></li></ul><p>​寄生组合式继承（Parasitic Combination Inheritance）是对组合式继承的一种优化，通过使用寄生式继承来减少调用父构造函数的次数，提高性能。</p><p>​优缺点：</p><ol><li><strong>组合式继承的缺点</strong>：组合式继承会调用两次父构造函数，一次是在子构造函数中继承属性时，另一次是在设置子构造函数的原型时。这样会导致父构造函数被调用两次，影响性能。</li><li><strong>寄生组合式继承的优化</strong>：寄生组合式继承通过使用一个空函数作为中介，来减少对父构造函数的不必要调用，提高性能。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义了一个寄生函数inheritPrototype，它通过创建父构造函数原型的副本，并将其赋值给子构造函数的原型，来实现寄生组合式继承。这样就避免了多次调用父构造函数，提高了性能。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在父构造函数的原型上添加方法</span></span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;My name is &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义寄生函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">inheritPrototype</span>(<span class="params">subType, superType</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> prototype = <span class="title class_">Object</span>.<span class="title function_">create</span>(superType.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// 创建父构造函数原型的副本</span></span><br><span class="line">    prototype.<span class="property">constructor</span> = subType; <span class="comment">// 修正constructor属性</span></span><br><span class="line">    subType.<span class="property"><span class="keyword">prototype</span></span> = prototype; <span class="comment">// 设置子构造函数的原型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义子构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dog</span>(<span class="params">name, breed</span>) &#123;</span><br><span class="line">    <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name); <span class="comment">// 继承父构造函数的属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">breed</span> = breed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用寄生式继承</span></span><br><span class="line"><span class="title function_">inheritPrototype</span>(<span class="title class_">Dog</span>, <span class="title class_">Animal</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个子对象</span></span><br><span class="line"><span class="keyword">let</span> myDog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;Buddy&#x27;</span>, <span class="string">&#x27;Labrador&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子对象继承父对象的属性和方法</span></span><br><span class="line">myDog.<span class="title function_">sayName</span>(); <span class="comment">// Output: My name is Buddy</span></span><br></pre></td></tr></table></figure><p>其他：</p><ol><li><strong>继承多个父对象</strong>：可以尝试在寄生函数中实现继承多个父对象的属性和方法。</li><li><strong>优化寄生式继承</strong>：可以进一步优化寄生式继承的实现方式，提高代码的可读性和性能。</li><li><strong>使用工厂模式</strong>：可以结合工厂模式来改进继承的实现方式，实现更灵活的继承方式</li></ol><h4 id="前端性能优化"><a href="#前端性能优化" class="headerlink" title="前端性能优化"></a>前端性能优化</h4><ol><li><p>减少http请求</p></li><li><p>使用http2.0</p></li><li><p>使用ssr服务端渲染</p><p><strong><code>SSR</code> 可以让首屏加载更快，带来更好的 <code>SEO</code></strong></p><p>前端基本上现在都是 <code>SPA</code> 单页应用，单页应用的缺陷就是首屏加载很慢。</p></li><li><p>合理使用cdn</p></li><li><p>将css放在文件头部，将js放在文件底部</p></li><li><p>使用精灵图&#x2F; 雪碧图, 减少请求次数</p></li><li><p>善用http缓存：强缓存&amp;协商缓存</p></li><li><p>其他</p><ul><li>首屏速度优化(SPA)——静态资源体积(tree-shaking、gzip)、异步引入、延迟加载</li><li>大量数据 渲染优化——一次渲染一部分；分页处理</li><li>用户体验优化——骨架屏、loading、页面状态缓存；搭配首屏加载</li><li>组件可扩展性和易用性能优化</li><li>错误处理 - 优化接口的出错处理，并发处理。让页面响应更快，体验更加</li></ul></li></ol><p>二者都是后端控制的东西，强缓存是响应头添加 <code>&#39;Cache-Control&#39;: &#39;max-age=xxx&#39;</code> 字段， <code>max-age</code> 是过期时间，强缓存后无法缓存输入 <code>url</code> 后的 <code>get </code>请求，想要缓存这个请求需要靠协商缓存来实现，协商缓存的实现是在强缓存的基础上添加一个 <code>&#39;Last-Modified&#39;: stats.mtimeMs</code> 或者 <code>etag</code> 字段，若检查到前端返回的 <code>If-Modified-Since</code> 时间一致，后端就返回 <code>304</code> 状态码给前端，浏览器就从缓存中读取静态资源</p><ol start="8"><li><p>压缩文件</p></li><li><p>懒加载</p></li></ol><p>懒加载的实现需要获取到可视区范围的高度，以及每张图片的高度，监听用户滚动的过程中图片是否进入范围内，进入时才赋值 <code>src</code> ， <code>src</code> 只要有值就一定会发送 <code>http</code> 请求，此前存放 <code>src</code> 的属性可以任意取名，当然一般我们取名为 <code>data-</code> 前缀，比如下面这样</p><img src data-src="****"><ol start="10"><li><p>尽量使用css，字体来代表图片</p></li><li><p>使用webp格式的图片</p></li></ol><p><code>webp</code> 格式的图片是谷歌推出的，这种格式的图像压缩算法能力要优于传统的 <code>jpg</code> ， <code>png</code> 等格式，在相同图片质量的情况下，空间大小会优化 30% 左右的样子</p><p>关于图片的性能优化就是小图用雪碧图，大图用 <code>webp</code> 格式</p><ol start="12"><li>webpack：tree-shaking  | 打包文件名 + hash</li></ol><p><code>tree-shaking</code> 的作用就是帮我们把项目中无用的代码给找出来，比如我们调试用的 <code>console.log</code> ，其实 <code>console.log</code> 对浏览器的开销还是蛮大的</p><ol start="13"><li>尽量减少回流重绘</li></ol><p>输入url到页面渲染后半段：回流，重绘，优化</p><p>回流（重排）就是计算布局，重绘就是给页面上色</p><ul><li><strong>尽量不用 js 去直接修改 css</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 案例一</span></span><br><span class="line">box.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;200px&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 案例二</span></span><br><span class="line">.<span class="property">more</span>&#123;</span><br><span class="line"> <span class="attr">width</span>: <span class="string">&#x27;200px&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">box.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;more&#x27;</span>)</span><br><span class="line"><span class="comment">// 一种方案就是直接修改 css ，第二种是添加类名。方案一会导致回流，方案二不会导致回流，因为添加类名并没有修改几何属性，它是间接交给了 css</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="14"><li>合理使用事件委托</li></ol><p>事件委托的机制是借助冒泡机制，把原本需要批量操作子组件的操作代理到一个父组件上</p><ol start="15"><li>if-else &amp; switch</li></ol><p><code>if-else</code> 有个判断顺序的，一定是从上往下走逐个走到目标，每次都判断一下，浪费性能。而 <code>switch</code> 不然， <code>switch</code> 是直接命中目标，只有一次判断</p><p><code>if-else</code> 会更加灵活，但是性能又没有 <code>switch</code> 来得好</p><ol start="16"><li><p>动画效果: requestAnimationFrame避免页面卡顿</p></li><li><p>Web Worker 开启多线程</p></li></ol><p>js默认情况下是单线程，但是v8引擎执行js的时候是可以多开辟线程，像页面上的图片有水印一般都是页面加载的时候实现，而非图片就有水印，像这种操作就是交给另一个线程来实现的(postMessge<code>和</code>onmessge  )</p><ol start="18"><li>css选择器复杂性要低</li></ol><p>浏览器读取css是从右往左读，尽量给每个标签打上类名，不要通过多层父容器</p><ol start="19"><li>尽量使用弹性布局</li></ol><p>flexbox性能会比较好</p><h3 id="ES6-ES11"><a href="#ES6-ES11" class="headerlink" title="ES6 - ES11"></a>ES6 - ES11</h3><h4 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h4><h5 id="怎么理解ES6-中的Promise；使用场景"><a href="#怎么理解ES6-中的Promise；使用场景" class="headerlink" title="怎么理解ES6 中的Promise；使用场景"></a><strong>怎么理解ES6 中的Promise；使用场景</strong></h5><ul><li>介绍</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">promise解决异步操作的优点：</span></span><br><span class="line"><span class="comment">1.链式操作减低了编码难度</span></span><br><span class="line"><span class="comment">2.代码可读性明显增强   */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//未使用promise</span></span><br><span class="line"><span class="title function_">doSomething</span>(<span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line">  <span class="title function_">doSomethingElse</span>(result, <span class="keyword">function</span>(<span class="params">newResult</span>) &#123;</span><br><span class="line">    <span class="title function_">doThirdThing</span>(newResult, <span class="keyword">function</span>(<span class="params">finalResult</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;得到最终结果: &#x27;</span> + finalResult);</span><br><span class="line">    &#125;, failureCallback);</span><br><span class="line">  &#125;, failureCallback);</span><br><span class="line">&#125;, failureCallback);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用promise</span></span><br><span class="line"><span class="title function_">doSomething</span>()</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">doSomethingElse</span>(result);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">newResult</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">doThirdThing</span>(newResult);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">finalResult</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;得到最终结果: &#x27;</span> + finalResult);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(failureCallback);</span><br></pre></td></tr></table></figure><ul><li>状态</li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">promise 有3种状态</span><br><span class="line">1.pending (进行中)</span><br><span class="line">2.fulfilled (已成功)</span><br><span class="line">3.rejected(已失败)</span><br></pre></td></tr></table></figure><ul><li>特点</li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.对象的状态不受外界影响，只有异步操作的结果，可以决定当前是哪一种状态</span><br><span class="line">2.一旦状态改变（从pending变为fulfilled和从pending变为rejected），就不会再变，任何时候都可以得到这个结果</span><br></pre></td></tr></table></figure><ul><li>流程</li></ul><p><img src="/2024/08/08/js+vue/Users\发发发宝贝\AppData\Roaming\Typora\typora-user-images\image-20231126211227519.png" alt="image-20231126211227519"></p><ul><li>用法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject</span></span><br><span class="line"><span class="comment">resolve函数的作用是，将Promise对象的状态从“未完成”变为“成功”</span></span><br><span class="line"><span class="comment">reject函数的作用是，将Promise对象的状态从“未完成”变为“失败” */</span></span><br></pre></td></tr></table></figure><ul><li><p>实例方法</p><ul><li><p><code>Promise</code>构建出来的实例存在以下方法：</p><ul><li>then()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">then()是实例状态发生改变时的回调函数，第一个参数是resolved状态的回调函数，第二个参数是rejected状态的回调函数</span></span><br><span class="line"><span class="comment">then方法返回的是一个新的Promise实例，也就是promise能链式书写的原因*/</span></span><br><span class="line"><span class="title function_">getJSON</span>(<span class="string">&quot;/posts.json&quot;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">json</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> json.<span class="property">post</span>;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">post</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>catch()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">catch()方法是.then(null, rejection)或.then(undefined, rejection)的别名，用于指定发生错误时的回调函数*/</span></span><br><span class="line"><span class="title function_">getJSON</span>(<span class="string">&#x27;/posts.json&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">posts</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// 处理 getJSON 和 前一个回调函数运行时发生的错误</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发生错误！&#x27;</span>, error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Promise对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止</span></span><br><span class="line"><span class="title function_">getJSON</span>(<span class="string">&#x27;/post/1.json&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">post</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">getJSON</span>(post.<span class="property">commentURL</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">comments</span>) &#123;</span><br><span class="line">  <span class="comment">// some code</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// 处理前面三个Promise产生的错误</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">一般来说，使用catch方法代替then()第二个参数</span></span><br><span class="line"><span class="comment">Promise对象抛出的错误不会传递到外层代码，即不会有任何反应*/</span></span><br></pre></td></tr></table></figure><ul><li>finally()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//finally()方法用于指定不管 Promise 对象最后状态如何，都会执行的操作</span></span><br><span class="line">promise</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;···&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;···&#125;)</span><br><span class="line">.<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;···&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>构造函数方法</p><ul><li>all()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Promise.all()方法用于将多个 Promise实例，包装成一个新的 Promise实例</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> result)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> e);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;报错了&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> result)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> e);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2])</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e));</span><br><span class="line"><span class="comment">//如果p2没有自己的catch方法，就会调用Promise.all()的catch方法</span></span><br></pre></td></tr></table></figure><ul><li>race()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将多个 Promise 实例，包装成一个新的 Promise 实例;只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">race</span>([</span><br><span class="line">  <span class="title function_">fetch</span>(<span class="string">&#x27;/resource-that-may-take-a-while&#x27;</span>),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;request timeout&#x27;</span>)), <span class="number">5000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">p</span><br><span class="line">.<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="variable language_">console</span>.<span class="property">error</span>);</span><br></pre></td></tr></table></figure><ul><li>allSettled()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Promise.allSettled()方法接受一组 Promise 实例作为参数，包装成一个新的 Promise 实例</span></span><br><span class="line"><span class="comment">//只有等到所有这些参数实例都返回结果，不管是fulfilled还是rejected，包装实例才会结束</span></span><br></pre></td></tr></table></figure><ul><li>resolve()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将现有对象转为 Promise对象</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&#x27;foo&#x27;</span>))</span><br></pre></td></tr></table></figure><ul><li>reject()</li><li>try()</li></ul></li><li><p>使用场景</p><ol><li>将图片的加载写成一个<code>Promise</code>，一旦加载完成，<code>Promise</code>的状态就发生变化</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> preloadImage = <span class="keyword">function</span> (<span class="params">path</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> image = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">    image.<span class="property">onload</span>  = resolve;</span><br><span class="line">    image.<span class="property">onerror</span> = reject;</span><br><span class="line">    image.<span class="property">src</span> = path;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>通过链式操作，将多个渲染数据分别给个<code>then</code>，让其各司其职。或当下个异步请求依赖上个请求结果的时候，我们也能够通过链式操作友好解决问题</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/ 各司其职</span><br><span class="line"><span class="title function_">getInfo</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; bannerList &#125; = res</span><br><span class="line">    <span class="comment">//渲染轮播图</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(bannerList)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> &#123; storeList &#125; = res</span><br><span class="line">    <span class="comment">//渲染店铺列表</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(storeList)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; categoryList &#125; = res</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(categoryList)</span><br><span class="line">    <span class="comment">//渲染分类列表</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li>通过<code>all()</code>实现多个请求合并在一起，汇总所有请求结果，只需设置一个<code>loading</code>即可</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">initLoad</span>(<span class="params"></span>)&#123;</span><br><span class="line">    loading.<span class="title function_">show</span>() <span class="comment">//加载loading</span></span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title function_">getBannerList</span>(),<span class="title function_">getStoreList</span>(),<span class="title function_">getCategoryList</span>()]).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">        loading.<span class="title function_">hide</span>() <span class="comment">//关闭loading</span></span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">        loading.<span class="title function_">hide</span>()<span class="comment">//关闭loading</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//数据初始化    </span></span><br><span class="line"><span class="title function_">initLoad</span>()</span><br></pre></td></tr></table></figure><ol start="4"><li>通过<code>race</code>可以设置图片请求超时</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//请求某个图片资源</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">requestImg</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">        img.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">           <span class="title function_">resolve</span>(img);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//img.src = &quot;https://b-gold-cdn.xitu.io/v3/static/img/logo.a7995ad.svg&quot;; 正确的</span></span><br><span class="line">        img.<span class="property">src</span> = <span class="string">&quot;https://b-gold-cdn.xitu.io/v3/static/img/logo.a7995ad.svg1&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//延时函数，用于给请求计时</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">timeout</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&#x27;图片请求超时&#x27;</span>);</span><br><span class="line">        &#125;, <span class="number">5000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span></span><br><span class="line">.<span class="title function_">race</span>([<span class="title function_">requestImg</span>(), <span class="title function_">timeout</span>()])</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">results</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h5 id="如何理解ES6中的Porxy-使用场景"><a href="#如何理解ES6中的Porxy-使用场景" class="headerlink" title="如何理解ES6中的Porxy; 使用场景"></a>如何理解ES6中的Porxy; 使用场景</h5><ul><li>介绍</li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Proxy 亦是如此，用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）</span><br></pre></td></tr></table></figure><ul><li><p>用法</p><ol><li><code>Proxy</code>为 构造函数，用来生成 <code>Proxy</code>实例</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">参数</span></span><br><span class="line"><span class="comment">target表示所要拦截的目标对象（任何类型的对象，包括原生数组，函数，甚至另一个代理））</span></span><br><span class="line"><span class="comment">handler通常以函数作为属性的对象，各属性中的函数分别定义了在执行各种操作时代理 p 的行为</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ol start="2"><li>参数 handler 解析</li></ol><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">关于handler拦截属性，有如下：</span><br><span class="line"></span><br><span class="line">get(target,propKey,receiver)：拦截对象属性的读取</span><br><span class="line">set(target,propKey,value,receiver)：拦截对象属性的设置</span><br><span class="line">has(target,propKey)：拦截propKey in proxy的操作，返回一个布尔值</span><br><span class="line">deleteProperty(target,propKey)：拦截delete proxy[propKey]的操作，返回一个布尔值</span><br><span class="line">ownKeys(target)：拦截Object.keys(proxy)、for...in等循环，返回一个数组</span><br><span class="line">getOwnPropertyDescriptor(target, propKey)：拦截Object.getOwnPropertyDescriptor(proxy, propKey)，返回属性的描述对象</span><br><span class="line">defineProperty(target, propKey, propDesc)：拦截Object.defineProperty(proxy, propKey, propDesc），返回一个布尔值</span><br><span class="line">preventExtensions(target)：拦截Object.preventExtensions(proxy)，返回一个布尔值</span><br><span class="line">getPrototypeOf(target)：拦截Object.getPrototypeOf(proxy)，返回一个对象</span><br><span class="line">isExtensible(target)：拦截Object.isExtensible(proxy)，返回一个布尔值</span><br><span class="line">setPrototypeOf(target, proto)：拦截Object.setPrototypeOf(proxy, proto)，返回一个布尔值</span><br><span class="line">apply(target, object, args)：拦截 Proxy 实例作为函数调用的操作</span><br><span class="line">construct(target, args)：拦截 Proxy 实例作为构造函数调用的操作</span><br></pre></td></tr></table></figure><ol start="3"><li>Reflect</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">若需要在<span class="title class_">Proxy</span>内部调用对象的默认行为，建议使用<span class="title class_">Reflect</span>，其是<span class="title class_">ES6</span>中操作对象而提供的新 <span class="variable constant_">API</span></span><br><span class="line"></span><br><span class="line">基本特点：</span><br><span class="line">只要<span class="title class_">Proxy</span>对象具有的代理方法，<span class="title class_">Reflect</span>对象全部具有，以静态方法的形式存在</span><br><span class="line">修改某些<span class="title class_">Object</span>方法的返回结果，让其变得更合理（定义不存在属性行为的时候不报错而是返回<span class="literal">false</span>）</span><br><span class="line">让<span class="title class_">Object</span>操作都变成函数行为</span><br></pre></td></tr></table></figure><ol start="4"><li><p>一些参数用法</p><ul><li>get()get接受三个参数，依次为目标对象、属性名和 proxy 实例本身，最后一个参数可选</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(person, &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params">target, propKey</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target,propKey)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">proxy.<span class="property">name</span> <span class="comment">// &quot;张三&quot;</span></span><br><span class="line"><span class="comment">//get能够对数组增删改查进行拦截，下面是试下你数组读取负数的索引</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createArray</span>(<span class="params">...elements</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> handler = &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, propKey, receiver</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> index = <span class="title class_">Number</span>(propKey);</span><br><span class="line">      <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        propKey = <span class="title class_">String</span>(target.<span class="property">length</span> + index);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, propKey, receiver);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> target = [];</span><br><span class="line">  target.<span class="title function_">push</span>(...elements);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = <span class="title function_">createArray</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">arr[-<span class="number">1</span>] <span class="comment">// c</span></span><br><span class="line"><span class="comment">//如果一个属性不可配置（configurable）且不可写（writable），则 Proxy 不能修改该属性，否则会报错</span></span><br><span class="line"><span class="keyword">const</span> target = <span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(&#123;&#125;, &#123;</span><br><span class="line">  <span class="attr">foo</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">123</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">target, propKey</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler);</span><br><span class="line"></span><br><span class="line">proxy.<span class="property">foo</span></span><br><span class="line"><span class="comment">// TypeError: Invariant check failed</span></span><br></pre></td></tr></table></figure><ul><li>set()拦截某个属性的赋值操作，可以接受四个参数，依次为目标对象、属性名、属性值和 <code>Proxy</code> 实例本身</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> validator = &#123;</span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">obj, prop, value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (prop === <span class="string">&#x27;age&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="title class_">Number</span>.<span class="title function_">isInteger</span>(value)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;The age is not an integer&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (value &gt; <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RangeError</span>(<span class="string">&#x27;The age seems invalid&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对于满足条件的 age 属性以及其他属性，直接保存</span></span><br><span class="line">    obj[prop] = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, validator);</span><br><span class="line">person.<span class="property">age</span> = <span class="number">100</span>;</span><br><span class="line">person.<span class="property">age</span> <span class="comment">// 100</span></span><br><span class="line">person.<span class="property">age</span> = <span class="string">&#x27;young&#x27;</span> <span class="comment">// 报错</span></span><br><span class="line">person.<span class="property">age</span> = <span class="number">300</span> <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果目标对象自身的某个属性，不可写且不可配置，那么set方法将不起作用</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;foo&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">obj, prop, value, receiver</span>) &#123;</span><br><span class="line">    obj[prop] = <span class="string">&#x27;baz&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, handler);</span><br><span class="line">proxy.<span class="property">foo</span> = <span class="string">&#x27;baz&#x27;</span>;</span><br><span class="line">proxy.<span class="property">foo</span> <span class="comment">// &quot;bar&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//严格模式下，set代理如果没有返回true，就会报错</span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">obj, prop, value, receiver</span>) &#123;</span><br><span class="line">    obj[prop] = receiver;</span><br><span class="line">    <span class="comment">// 无论有没有下面这一行，都会报错</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, handler);</span><br><span class="line">proxy.<span class="property">foo</span> = <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"><span class="comment">// TypeError: &#x27;set&#x27; on proxy: trap returned falsish for property &#x27;foo&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>deleteProperty()<code>deleteProperty</code>方法用于拦截<code>delete</code>操作，如果这个方法抛出错误或者返回<code>false</code>，当前属性就无法被<code>delete</code>命令删除</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  deleteProperty (target, key) &#123;</span><br><span class="line">    <span class="title function_">invariant</span>(key, <span class="string">&#x27;delete&#x27;</span>);</span><br><span class="line">    <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target,key)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">invariant</span> (key, action) &#123;</span><br><span class="line">  <span class="keyword">if</span> (key[<span class="number">0</span>] === <span class="string">&#x27;_&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`无法删除私有属性`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> target = &#123; <span class="attr">_prop</span>: <span class="string">&#x27;foo&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler);</span><br><span class="line"><span class="keyword">delete</span> proxy.<span class="property">_prop</span></span><br><span class="line"><span class="comment">// Error: 无法删除私有属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//目标对象自身的不可配置（configurable）的属性，不能被deleteProperty方法删除，否则报错</span></span><br></pre></td></tr></table></figure><ul><li>取消代理</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Proxy</span>.<span class="title function_">revocable</span>(target, handler);</span><br></pre></td></tr></table></figure></li></ol></li><li><p>使用场景</p><p><code>Proxy</code>其功能非常类似于设计模式中的代理模式，常用功能如下：</p><ul><li>拦截和监视外部对对象的访问</li><li>降低函数或类的复杂度</li><li>在复杂操作前对操作进行校验或对所需资源进行管理</li></ul><ol><li>使用 <code>Proxy</code> 保障数据类型的准确性</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numericDataStore = &#123; <span class="attr">count</span>: <span class="number">0</span>, <span class="attr">amount</span>: <span class="number">1234</span>, <span class="attr">total</span>: <span class="number">14</span> &#125;;</span><br><span class="line">numericDataStore = <span class="keyword">new</span> <span class="title class_">Proxy</span>(numericDataStore, &#123;</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, key, value, proxy</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> value !== <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">&quot;属性只能是number类型&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value, proxy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">numericDataStore.<span class="property">count</span> = <span class="string">&quot;foo&quot;</span></span><br><span class="line"><span class="comment">// Error: 属性只能是number类型</span></span><br><span class="line"></span><br><span class="line">numericDataStore.<span class="property">count</span> = <span class="number">333</span></span><br><span class="line"><span class="comment">// 赋值成功</span></span><br></pre></td></tr></table></figure><ol start="2"><li>声明了一个私有的 <code>apiKey</code>，便于 <code>api</code> 这个对象内部的方法调用，但不希望从外部也能够访问 <code>api._apiKey</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> api = &#123;</span><br><span class="line">    <span class="attr">_apiKey</span>: <span class="string">&#x27;123abc456def&#x27;</span>,</span><br><span class="line">    <span class="attr">getUsers</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123; &#125;,</span><br><span class="line">    <span class="attr">getUser</span>: <span class="keyword">function</span>(<span class="params">userId</span>)&#123; &#125;,</span><br><span class="line">    <span class="attr">setUser</span>: <span class="keyword">function</span>(<span class="params">userId, config</span>)&#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">RESTRICTED</span> = [<span class="string">&#x27;_apiKey&#x27;</span>];</span><br><span class="line">api = <span class="keyword">new</span> <span class="title class_">Proxy</span>(api, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, key, proxy</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable constant_">RESTRICTED</span>.<span class="title function_">indexOf</span>(key) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span> 不可访问.`</span>);</span><br><span class="line">        &#125; <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, proxy);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, key, value, proxy</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable constant_">RESTRICTED</span>.<span class="title function_">indexOf</span>(key) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span> 不可修改`</span>);</span><br><span class="line">        &#125; <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, value, proxy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(api.<span class="property">_apiKey</span>)</span><br><span class="line">api.<span class="property">_apiKey</span> = <span class="string">&#x27;987654321&#x27;</span></span><br><span class="line"><span class="comment">// 上述都抛出错误</span></span><br></pre></td></tr></table></figure><ol start="3"><li>观察者模式（Observer mode）指的是函数自动观察数据对象，一旦对象有变化，函数就会自动执行； observable函数返回一个原始对象的 Proxy 代理，拦截赋值操作，触发充当观察者的各个函数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> queuedObservers = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">observe</span> = fn =&gt; queuedObservers.<span class="title function_">add</span>(fn);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">observable</span> = obj =&gt; <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;set&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">set</span>(<span class="params">target, key, value, receiver</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value, receiver);</span><br><span class="line">  queuedObservers.<span class="title function_">forEach</span>(<span class="function"><span class="params">observer</span> =&gt;</span> <span class="title function_">observer</span>());</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//观察者函数都放进Set集合，当修改obj的值，在会set函数中拦截，自动执行Set所有的观察者</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="怎么理解ES6中Generator；使用场景"><a href="#怎么理解ES6中Generator；使用场景" class="headerlink" title="怎么理解ES6中Generator；使用场景"></a><strong>怎么理解ES6中Generator；使用场景</strong></h5><ul><li><p>介绍</p><ul><li><p>执行 <code>Generator</code> 函数会返回一个遍历器对象，可以依次遍历 <code>Generator</code> 函数内部的每一个状态</p><p>形式上，<code>Generator</code>函数是一个普通函数，但是有两个特征：</p><ul><li><code>function</code>关键字与函数名之间有一个星号</li><li>函数体内部使用<code>yield</code>表达式，定义不同的内部状态</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">helloWorldGenerator</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;ending&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用</p><ul><li><code>Generator</code> 函数会返回一个遍历器对象，即具有<code>Symbol.iterator</code>属性，并且返回给自己</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// some code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = <span class="title function_">gen</span>();</span><br><span class="line"></span><br><span class="line">g[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() === g</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>通过<code>yield</code>关键字可以暂停<code>generator</code>函数返回的遍历器对象的状态</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">helloWorldGenerator</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;ending&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> hw = <span class="title function_">helloWorldGenerator</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">上述存在三个状态：hello、world、return</span></span><br><span class="line"><span class="comment">通过next方法才会遍历到下一个内部状态，其运行逻辑如下：</span></span><br><span class="line"><span class="comment">1.遇到yield表达式，就暂停执行后面的操作，并将紧跟在yield后面的那个表达式的值，作为返回的对象的value属性值。</span></span><br><span class="line"><span class="comment">2.下一次调用next方法时，再继续往下执行，直到遇到下一个yield表达式</span></span><br><span class="line"><span class="comment">3.如果没有再遇到新的yield表达式，就一直运行到函数结束，直到return语句为止，并将return语句后面的表达式的值，作为返回的对象的value属性值。</span></span><br><span class="line"><span class="comment">4.如果该函数没有return语句，则返回的对象的value属性值为undefined</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">hw.<span class="title function_">next</span>()</span><br><span class="line"><span class="comment">// &#123; value: &#x27;hello&#x27;, done: false &#125;</span></span><br><span class="line">hw.<span class="title function_">next</span>()</span><br><span class="line"><span class="comment">// &#123; value: &#x27;world&#x27;, done: false &#125;</span></span><br><span class="line">hw.<span class="title function_">next</span>()</span><br><span class="line"><span class="comment">// &#123; value: &#x27;ending&#x27;, done: true &#125;</span></span><br><span class="line">hw.<span class="title function_">next</span>()</span><br><span class="line"><span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">done用来判断是否存在下个状态，value对应状态值</span></span><br><span class="line"><span class="comment">yield表达式本身没有返回值，或者说总是返回undefined</span></span><br><span class="line"><span class="comment">通过调用next方法可以带一个参数，该参数就会被当作上一个yield表达式的返回值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> y = <span class="number">2</span> * (<span class="keyword">yield</span> (x + <span class="number">1</span>));</span><br><span class="line">  <span class="keyword">var</span> z = <span class="keyword">yield</span> (y / <span class="number">3</span>);</span><br><span class="line">  <span class="keyword">return</span> (x + y + z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="title function_">foo</span>(<span class="number">5</span>);</span><br><span class="line">a.<span class="title function_">next</span>() <span class="comment">// Object&#123;value:6, done:false&#125;</span></span><br><span class="line">a.<span class="title function_">next</span>() <span class="comment">// Object&#123;value:NaN, done:false&#125;</span></span><br><span class="line">a.<span class="title function_">next</span>() <span class="comment">// Object&#123;value:NaN, done:true&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="title function_">foo</span>(<span class="number">5</span>);</span><br><span class="line">b.<span class="title function_">next</span>() <span class="comment">// &#123; value:6, done:false &#125;</span></span><br><span class="line">b.<span class="title function_">next</span>(<span class="number">12</span>) <span class="comment">// &#123; value:8, done:false &#125;</span></span><br><span class="line">b.<span class="title function_">next</span>(<span class="number">13</span>) <span class="comment">// &#123; value:42, done:true &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//正因为Generator函数返回Iterator对象，因此我们还可以通过for...of进行遍历</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> <span class="title function_">foo</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 2 3 4 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//原生对象没有遍历接口，通过Generator函数为它加上这个接口，就能使用for...of进行遍历了</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">objectEntries</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> propKeys = <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> propKey <span class="keyword">of</span> propKeys) &#123;</span><br><span class="line">    <span class="keyword">yield</span> [propKey, obj[propKey]];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jane = &#123; <span class="attr">first</span>: <span class="string">&#x27;Jane&#x27;</span>, <span class="attr">last</span>: <span class="string">&#x27;Doe&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> <span class="title function_">objectEntries</span>(jane)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// first: Jane</span></span><br><span class="line"><span class="comment">// last: Doe</span></span><br></pre></td></tr></table></figure></li><li><p>异步解决方案</p><ul><li>回调函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//回调函数，就是把任务的第二段单独写在一个函数里面，等到重新执行这个任务的时候，再调用这个函数</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;/etc/fstab&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  fs.<span class="title function_">readFile</span>(<span class="string">&#x27;/etc/shells&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//readFile函数的第三个参数，就是回调函数，等到操作系统返回了/etc/passwd这个文件以后，回调函数才会执行</span></span><br></pre></td></tr></table></figure><ul><li>Promise 对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Promise就是为了解决回调地狱而产生的，将回调函数的嵌套，改成链式调用</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readFile = <span class="keyword">function</span> (<span class="params">fileName</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(fileName, <span class="keyword">function</span>(<span class="params">error, data</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (error) <span class="keyword">return</span> <span class="title function_">reject</span>(error);</span><br><span class="line">      <span class="title function_">resolve</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">readFile</span>(<span class="string">&#x27;/etc/fstab&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">readFile</span>(<span class="string">&#x27;/etc/shells&#x27;</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//这种链式操作形式，使异步任务的两段执行更清楚了，但是也存在了很明显的问题，代码变得冗杂了，语义化并不强</span></span><br></pre></td></tr></table></figure><ul><li>generator 函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//yield表达式可以暂停函数执行，next方法用于恢复函数执行，这使得Generator函数非常适合将异步任务同步化</span></span><br><span class="line"><span class="keyword">const</span> gen = <span class="keyword">function</span>* () &#123;</span><br><span class="line">  <span class="keyword">const</span> f1 = <span class="keyword">yield</span> <span class="title function_">readFile</span>(<span class="string">&#x27;/etc/fstab&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> f2 = <span class="keyword">yield</span> <span class="title function_">readFile</span>(<span class="string">&#x27;/etc/shells&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(f1.<span class="title function_">toString</span>());</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(f2.<span class="title function_">toString</span>());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>async&#x2F;await</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将上面Generator函数改成async/await形式，更为简洁，语义化更强了</span></span><br><span class="line"><span class="keyword">const</span> asyncReadFile = <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> f1 = <span class="keyword">await</span> <span class="title function_">readFile</span>(<span class="string">&#x27;/etc/fstab&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> f2 = <span class="keyword">await</span> <span class="title function_">readFile</span>(<span class="string">&#x27;/etc/shells&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(f1.<span class="title function_">toString</span>());</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(f2.<span class="title function_">toString</span>());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>区别：</p></li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">通过上述代码进行分析，将promise、Generator、async/await进行比较：</span><br><span class="line">1.promise和async/await是专门用于处理异步操作的</span><br><span class="line">2.Generator并不是为异步而设计出来的，它还有其他功能（对象迭代、控制输出、部署Interator接口...）</span><br><span class="line">3.promise编写代码相比Generator、async更为复杂化，且可读性也稍差</span><br><span class="line">4.Generator、async需要与promise对象搭配处理异步情况</span><br><span class="line">5.async实质是Generator的语法糖，相当于会自动执行Generator函数</span><br><span class="line">6.async使用上更为简洁，将异步代码以同步的形式进行编写，是处理异步编程的最终方案</span><br></pre></td></tr></table></figure><ul><li><p>使用场景</p><ol><li><code>Generator</code>是异步解决的一种方案，最大特点则是将异步操作同步化表达出来</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">loadUI</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">showLoadingScreen</span>();</span><br><span class="line">  <span class="keyword">yield</span> <span class="title function_">loadUIDataAsynchronously</span>();</span><br><span class="line">  <span class="title function_">hideLoadingScreen</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> loader = <span class="title function_">loadUI</span>();</span><br><span class="line"><span class="comment">// 加载UI</span></span><br><span class="line">loader.<span class="title function_">next</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 卸载UI</span></span><br><span class="line">loader.<span class="title function_">next</span>()</span><br></pre></td></tr></table></figure><ol start="2"><li>包括<code>redux-saga</code>中间件也充分利用了<code>Generator</code>特性</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; call, put, takeEvery, takeLatest &#125; <span class="keyword">from</span> <span class="string">&#x27;redux-saga/effects&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Api</span> <span class="keyword">from</span> <span class="string">&#x27;...&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">fetchUser</span>(<span class="params">action</span>) &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> user = <span class="keyword">yield</span> <span class="title function_">call</span>(<span class="title class_">Api</span>.<span class="property">fetchUser</span>, action.<span class="property">payload</span>.<span class="property">userId</span>);</span><br><span class="line">      <span class="keyword">yield</span> <span class="title function_">put</span>(&#123;<span class="attr">type</span>: <span class="string">&quot;USER_FETCH_SUCCEEDED&quot;</span>, <span class="attr">user</span>: user&#125;);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">yield</span> <span class="title function_">put</span>(&#123;<span class="attr">type</span>: <span class="string">&quot;USER_FETCH_FAILED&quot;</span>, <span class="attr">message</span>: e.<span class="property">message</span>&#125;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">mySaga</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="title function_">takeEvery</span>(<span class="string">&quot;USER_FETCH_REQUESTED&quot;</span>, fetchUser);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">mySaga</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="title function_">takeLatest</span>(<span class="string">&quot;USER_FETCH_REQUESTED&quot;</span>, fetchUser);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> mySaga;</span><br></pre></td></tr></table></figure><ol start="3"><li>还能利用<code>Generator</code>函数，在对象上实现<code>Iterator</code>接口</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">iterEntries</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i &lt; keys.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> key = keys[i];</span><br><span class="line">    <span class="keyword">yield</span> [key, obj[key]];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myObj = &#123; <span class="attr">foo</span>: <span class="number">3</span>, <span class="attr">bar</span>: <span class="number">7</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> <span class="title function_">iterEntries</span>(myObj)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// foo 3</span></span><br><span class="line"><span class="comment">// bar 7</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="怎么理解ES6中Module-使用场景"><a href="#怎么理解ES6中Module-使用场景" class="headerlink" title="怎么理解ES6中Module; 使用场景"></a>怎么理解ES6中Module; 使用场景</h5><ul><li><p>介绍</p><p>模块，（Module），是能够单独命名并独立地完成一定功能的程序语句的<strong>集合（即程序代码和数据结构的集合体）</strong>。</p><p>两个基本的特征：外部特征和内部特征</p><ul><li>外部特征是指模块跟外部环境联系的接口（即其他模块或程序调用该模块的方式，包括有输入输出参数、引用的全局变量）和模块的功能</li><li>内部特征是指模块的内部环境具有的特点（即该模块的局部数据和程序代码</li></ul><p><strong>为什么需要模块化</strong></p><ul><li>代码抽象</li><li>代码封装</li><li>代码复用</li><li>依赖管理</li></ul></li><li><p>使用</p><p><code>ES6</code>模块内部自动采用了严格模式，这里就不展开严格模式的限制，毕竟这是<code>ES5</code>之前就已经规定好</p><p>模块功能主要由两个命令构成：</p><ul><li><code>export</code>：用于规定模块的对外接口</li><li><code>import</code>：用于输入其他模块提供的功能</li></ul><ol><li>export</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// profile.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> firstName = <span class="string">&#x27;Michael&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> lastName = <span class="string">&#x27;Jackson&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> year = <span class="number">1958</span>;</span><br><span class="line"><span class="comment">//或 </span></span><br><span class="line"><span class="comment">// 建议使用下面写法，这样能瞬间确定输出了哪些变量</span></span><br><span class="line"><span class="keyword">var</span> firstName = <span class="string">&#x27;Michael&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> lastName = <span class="string">&#x27;Jackson&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> year = <span class="number">1958</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; firstName, lastName, year &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出函数或类</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过as可以进行输出变量的重命名</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">v1</span>(<span class="params"></span>) &#123; ... &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">v2</span>(<span class="params"></span>) &#123; ... &#125;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  v1 <span class="keyword">as</span> streamV1,</span><br><span class="line">  v2 <span class="keyword">as</span> streamV2,</span><br><span class="line">  v2 <span class="keyword">as</span> streamLatestVersion</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>import</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用export命令定义了模块的对外接口以后，其他 JS 文件就可以通过import命令加载这个模块</span></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; firstName, lastName, year &#125; <span class="keyword">from</span> <span class="string">&#x27;./profile.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setName</span>(<span class="params">element</span>) &#123;</span><br><span class="line">  element.<span class="property">textContent</span> = firstName + <span class="string">&#x27; &#x27;</span> + lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//同样如果想要输入变量起别名，通过as关键字</span></span><br><span class="line"><span class="keyword">import</span> &#123; lastName <span class="keyword">as</span> surname &#125; <span class="keyword">from</span> <span class="string">&#x27;./profile.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//当加载整个模块的时候，需要用到星号*</span></span><br><span class="line"><span class="comment">// circle.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">area</span>(<span class="params">radius</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">PI</span> * radius * radius;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">circumference</span>(<span class="params">radius</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span> * radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> circle <span class="keyword">from</span> <span class="string">&#x27;./circle&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(circle)   <span class="comment">// &#123;area:area,circumference:circumference&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输入的变量都是只读的，不允许修改，但是如果是对象，允许修改属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果不需要知道变量名或函数就完成加载，就要用到export default命令，为模块指定默认输出</span></span><br><span class="line"><span class="comment">//加载该模块的时候，import命令可以为该函数指定任意名字</span></span><br><span class="line"><span class="comment">// export-default.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// import-default.js</span></span><br><span class="line"><span class="keyword">import</span> customName <span class="keyword">from</span> <span class="string">&#x27;./export-default&#x27;</span>;</span><br><span class="line"><span class="title function_">customName</span>(); <span class="comment">// &#x27;foo&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>动态加载</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">允许您仅在需要时动态加载模块，而不必预先加载所有模块，这存在明显的性能优势</span></span><br><span class="line"><span class="comment">这个新功能允许您将import()作为函数调用，将其作为参数传递给模块的路径。 它返回一个 promise，它用一个模块对象来实现，让你可以访问该对象的导出</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span>(<span class="string">&#x27;/modules/myModule.mjs&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params"><span class="variable language_">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Do something with the module.</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//复合写法</span></span><br><span class="line"><span class="comment">//如果在一个模块之中，先输入后输出同一个模块，import语句可以与export语句写在一起</span></span><br><span class="line"><span class="keyword">export</span> &#123; foo, bar &#125; <span class="keyword">from</span> <span class="string">&#x27;my_module&#x27;</span>;</span><br><span class="line"><span class="comment">// 可以简单理解为</span></span><br><span class="line"><span class="keyword">import</span> &#123; foo, bar &#125; <span class="keyword">from</span> <span class="string">&#x27;my_module&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; foo, bar &#125;;</span><br></pre></td></tr></table></figure><h5 id="怎么理解Decorator-装饰器-；-使用场景"><a href="#怎么理解Decorator-装饰器-；-使用场景" class="headerlink" title="怎么理解Decorator (装饰器)； 使用场景"></a><strong>怎么理解Decorator (装饰器)； 使用场景</strong></h5><ul><li><p>介绍</p><p>即装饰器，在不改变原类和使用继承的情况下，动态地扩展对象功能</p><p>优点：</p><ol><li>代码可读性变强了，装饰器命名相当于一个注释</li><li>在不改变原有代码情况下，对原来功能进行扩展</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个类，什么属性值，方法也没有</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">soldier</span>&#123; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个方法，作为装饰器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">strong</span>(<span class="params">target</span>)&#123;</span><br><span class="line">    target.<span class="property">AK</span> = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将装饰器装饰在类上</span></span><br><span class="line">@strong</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">soldier</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用类的AK属性</span></span><br><span class="line">soldier.<span class="property">AK</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>用法</p><p><code>Docorator</code>修饰对象为下面两种：</p><ul><li>类的装饰</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">类的装饰</span></span><br><span class="line"><span class="comment">当对类本身进行装饰的时候，能够接受一个参数，即类本身</span></span><br><span class="line"><span class="comment">将装饰器行为进行分解，大家能够有个更深入的了解</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">@decorator</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line">A = <span class="title function_">decorator</span>(A) || A;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//下面@testable就是一个装饰器，target就是传入的类，即MyTestableClass，实现了为类添加静态属性</span></span><br><span class="line">@testable</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyTestableClass</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">testable</span>(<span class="params">target</span>) &#123;</span><br><span class="line">  target.<span class="property">isTestable</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">MyTestableClass</span>.<span class="property">isTestable</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果想要传递参数，可以在装饰器外层再封装一层函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">testable</span>(<span class="params">isTestable</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">target</span>) &#123;</span><br><span class="line">    target.<span class="property">isTestable</span> = isTestable;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="title function_">testable</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyTestableClass</span> &#123;&#125;</span><br><span class="line"><span class="title class_">MyTestableClass</span>.<span class="property">isTestable</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">@<span class="title function_">testable</span>(<span class="literal">false</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;&#125;</span><br><span class="line"><span class="title class_">MyClass</span>.<span class="property">isTestable</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li>类属性的装饰</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">类属性的装饰</span></span><br><span class="line"><span class="comment">当对类属性进行装饰的时候，能够接受三个参数：</span></span><br><span class="line"><span class="comment">1.类的原型对象</span></span><br><span class="line"><span class="comment">2.需要装饰的属性名</span></span><br><span class="line"><span class="comment">3.装饰属性名的描述对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//首先定义一个readonly装饰器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readonly</span>(<span class="params">target, name, descriptor</span>)&#123;</span><br><span class="line">  descriptor.<span class="property">writable</span> = <span class="literal">false</span>; <span class="comment">// 将可写属性设为false</span></span><br><span class="line">  <span class="keyword">return</span> descriptor;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用readonly装饰类的name方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  @readonly</span><br><span class="line">  <span class="title function_">name</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.first&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.last&#125;</span>`</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//相当于以下调用</span></span><br><span class="line"><span class="title function_">readonly</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">&#x27;name&#x27;</span>, descriptor);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果一个方法有多个装饰器，就像洋葱一样，先从外到内进入，再由内到外执行</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dec</span>(<span class="params">id</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;evaluated&#x27;</span>, id);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">target, property, descriptor</span>) =&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;executed&#x27;</span>, id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">    @<span class="title function_">dec</span>(<span class="number">1</span>)</span><br><span class="line">    @<span class="title function_">dec</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="title function_">method</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// evaluated 1</span></span><br><span class="line"><span class="comment">// evaluated 2</span></span><br><span class="line"><span class="comment">// executed 2</span></span><br><span class="line"><span class="comment">// executed 1</span></span><br><span class="line"><span class="comment">//外层装饰器@dec(1)先进入，但是内层装饰器@dec(2)先执行</span></span><br></pre></td></tr></table></figure></li><li><p>注意项</p><p>装饰器不能用于修饰函数，因为函数存在变量声明情况</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> add = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  counter++;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">@add</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编译阶段，变成下面</span></span><br><span class="line"><span class="keyword">var</span> counter;</span><br><span class="line"><span class="keyword">var</span> add;</span><br><span class="line"></span><br><span class="line">@add</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">add = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  counter++;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//意图是执行后counter等于 1，但是实际上结果是counter等于 0</span></span><br></pre></td></tr></table></figure></li><li><p>使用场景</p><p>基于<code>Decorator</code>强大的作用，我们能够完成各种场景的需求，下面简单列举几种：</p><ol><li>使用<code>react-redux</code>的时候，如果写成下面这种形式，既不雅观也很麻烦</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyReactComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(mapStateToProps, mapDispatchToProps)(<span class="title class_">MyReactComponent</span>);</span><br><span class="line"><span class="comment">//通过装饰器就变得简洁多了</span></span><br><span class="line">@<span class="title function_">connect</span>(mapStateToProps, mapDispatchToProps)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">MyReactComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>将<code>mixins</code>，也可以写成装饰器，让使用更为简洁了</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mixins</span>(<span class="params">...list</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">target</span>) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">assign</span>(target.<span class="property"><span class="keyword">prototype</span></span>, ...list);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="title function_">foo</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo&#x27;</span>) &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">@<span class="title function_">mixins</span>(<span class="title class_">Foo</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">obj.<span class="title function_">foo</span>() <span class="comment">// &quot;foo&quot;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>讲讲<code>core-decorators.js</code>几个常见的装饰器</li></ol></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@antobind</span></span><br><span class="line"><span class="comment">//autobind装饰器使得方法中的this对象，绑定原始对象</span></span><br><span class="line"><span class="keyword">import</span> &#123; autobind &#125; <span class="keyword">from</span> <span class="string">&#x27;core-decorators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  @autobind</span><br><span class="line">  <span class="title function_">getPerson</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="keyword">let</span> getPerson = person.<span class="property">getPerson</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getPerson</span>() === person;</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//@readonly</span></span><br><span class="line"><span class="comment">//readonly装饰器使得属性或方法不可写</span></span><br><span class="line"><span class="keyword">import</span> &#123; readonly &#125; <span class="keyword">from</span> <span class="string">&#x27;core-decorators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Meal</span> &#123;</span><br><span class="line">  @readonly</span><br><span class="line">  entree = <span class="string">&#x27;steak&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dinner = <span class="keyword">new</span> <span class="title class_">Meal</span>();</span><br><span class="line">dinner.<span class="property">entree</span> = <span class="string">&#x27;salmon&#x27;</span>;</span><br><span class="line"><span class="comment">// Cannot assign to read only property &#x27;entree&#x27; of [object Object]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//@deprecate</span></span><br><span class="line"><span class="comment">//deprecate或deprecated装饰器在控制台显示一条警告，表示该方法将废除</span></span><br><span class="line"><span class="keyword">import</span> &#123; deprecate &#125; <span class="keyword">from</span> <span class="string">&#x27;core-decorators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  @deprecate</span><br><span class="line">  <span class="title function_">facepalm</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  @<span class="title function_">deprecate</span>(<span class="string">&#x27;功能废除了&#x27;</span>)</span><br><span class="line">  <span class="title function_">facepalmHard</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line">person.<span class="title function_">facepalm</span>();</span><br><span class="line"><span class="comment">// DEPRECATION Person#facepalm: This function will be removed in future versions.</span></span><br><span class="line"></span><br><span class="line">person.<span class="title function_">facepalmHard</span>();</span><br><span class="line"><span class="comment">// DEPRECATION Person#facepalmHard: 功能废除了</span></span><br></pre></td></tr></table></figure><h5 id="ES6-class"><a href="#ES6-class" class="headerlink" title="ES6 class"></a>ES6 class</h5><p>​class 没有声明提升</p><h6 id="类方法-constructor"><a href="#类方法-constructor" class="headerlink" title="类方法 constructor"></a>类方法 constructor</h6><p>​这个方法类似于其他语言，类的init方法，每次new实例时都会调用</p><h6 id="关键字-extends-继承"><a href="#关键字-extends-继承" class="headerlink" title="关键字 extends (继承)"></a>关键字 extends (继承)</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Son_of_Bullshit</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Bullshit</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h6 id="关键字-super"><a href="#关键字-super" class="headerlink" title="关键字 super"></a>关键字 super</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当我们获取父类属性时，需要用到super进行获取</span></span><br><span class="line"><span class="comment">// 例如子类写了constructor ， 父类的属性就需要super进行获取</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bullshit</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span> (text, color)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">text</span> = text;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son_of_Bullshit</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Bullshit</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span> (text, color, fontSize) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(text, color)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">fontSize</span> = fontSize</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="关键字-static"><a href="#关键字-static" class="headerlink" title="关键字 static"></a>关键字 static</h6><p>​在类里，静态属性、方法是属于类自身的，当调用时直接使用类调用即可</p><p>​静态方法里的this是类而非实例对象，所以静态方法里面可以调用另外一个静态方法</p><h5 id="关键字setter-getter-设置属性和获取属性"><a href="#关键字setter-getter-设置属性和获取属性" class="headerlink" title="关键字setter getter (设置属性和获取属性)"></a>关键字setter getter (设置属性和获取属性)</h5><h6 id="class实现单例模式"><a href="#class实现单例模式" class="headerlink" title="class实现单例模式"></a>class实现单例模式</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingletonApple</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, creator, products</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">creator</span> = creator;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">products</span> = prodcts;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">getInstance</span>(<span class="params">name, creator, products</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">instance</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">instance</span> = <span class="keyword">new</span> <span class="title class_">SingletonApple</span>(name, creator,products);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">instance</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> appleComany = <span class="title class_">SingletonApple</span>()</span><br><span class="line"><span class="keyword">let</span> copyApple = <span class="title class_">SingletonApple</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(appleComany === copyApple)  <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><h4 id="对vue的理解"><a href="#对vue的理解" class="headerlink" title="对vue的理解"></a>对vue的理解</h4><ol><li><strong>是什么</strong></li></ol><p>是一个用于创建用户界面的开源JavaScript框架 , 也是一个创建单页应用的Web应用框架</p><ol><li><strong>核心特点</strong></li></ol><ul><li><p>数据驱动（MVVM)</p><ul><li><p>Model：模型层，负责处理业务逻辑以及和服务器端进行交互</p></li><li><p>View：视图层：负责将数据模型转化为UI展示出来，可以简单的理解为HTML页面</p></li><li><p>ViewModel：视图模型层，用来连接Model和View，是Model和View之间的通信桥梁</p></li></ul></li><li><p>组件化</p><ul><li>就是把图形、非图形的各种逻辑均抽象为一个统一的概念（组件）来实现开发的模式, 在<code>Vue</code>中每一个<code>.vue</code>文件都可以视为一个组件</li><li>组件化优势：<ol><li>降低整个系统的耦合度</li><li>调试方便</li><li>提高可维护性</li></ol></li></ul></li><li><p>指令系统</p></li></ul><p>​带有 v- 前缀的特殊属性作用， 当表达式的值改变时，响应式地作用于 DOM</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">常用的指令</span><br><span class="line">- 条件渲染指令 `v-if`</span><br><span class="line">- 列表渲染指令`v-for`</span><br><span class="line">- 属性绑定指令`v-bind`</span><br><span class="line">- 事件绑定指令`v-on`</span><br><span class="line">- 双向数据绑定指令`v-model`   // 如果在子组件上用v-model，会默认向子组件发送modelValue，modelValue为父组件v-model的值</span><br></pre></td></tr></table></figure><p>v-model:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">inpuy</span> <span class="attr">v-model</span>=<span class="string">&quot;a&quot;</span> /&gt;</span></span><br><span class="line">// 等价于</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;a&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;(e)=&gt;&#123;a=e.target.value&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">// 当v-model 用于自定义组件键上时</span><br><span class="line"></span><br><span class="line">// vue2</span><br><span class="line"><span class="tag">&lt;<span class="name">son</span> <span class="attr">v-model</span>=<span class="string">&quot;a&quot;</span>/&gt;</span></span><br><span class="line">//等价于</span><br><span class="line"><span class="tag">&lt;<span class="name">son</span> <span class="attr">:value</span>=<span class="string">&quot;a&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;(a)=&gt;&#123;a=e&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">// vue3</span><br><span class="line"><span class="tag">&lt;<span class="name">son</span> <span class="attr">v-model</span>=<span class="string">&quot;a&quot;</span>/&gt;</span></span><br><span class="line">//等价于</span><br><span class="line"><span class="tag">&lt;<span class="name">son</span> <span class="attr">:modelValue</span>=<span class="string">&quot;a&quot;</span> @<span class="attr">update:modelValue</span>=<span class="string">&quot;(e)=&gt;&#123;a=e&#125;&quot;</span>/&gt;</span></span><br><span class="line">// 子组件可以直接用defindprops接受modelValue</span><br><span class="line">// 全称为</span><br><span class="line"><span class="tag">&lt;<span class="name">son</span> <span class="attr">v-model:modelValue</span>=<span class="string">&quot;a&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>使用场景：</p><ul><li>弹窗(直接v-moel绑定父组件的值，这样v-model就能轻松地控制显影)</li><li>业务里一些功能操作( 直接把操作结果绑定到父组件的data，不用父组件传值和监听)</li></ul><ol><li><strong>跟传统开发的区别</strong></li></ol><ul><li>传统开发是直接操作DOM节点，但操作DOM节点要消耗的资源比较大</li><li><code>vue</code>基本不操作<code>dom</code>节点，而是通过修改变量值，来控制虚拟DOM的节点属性</li></ul><ol start="2"><li><strong>和react区别</strong></li></ol><ul><li>相同点<ul><li>都有组件化思想</li><li>都支持服务器端渲染</li><li>都有Virtual DOM（虚拟dom）</li><li>数据驱动视图</li><li>都有支持native的方案：<code>Vue</code>的<code>weex</code>、<code>React</code>的<code>React native</code></li><li>都有自己的构建工具：<code>Vue</code>的<code>vue-cli</code>、<code>React</code>的<code>Create React App</code></li></ul></li><li>区别<ul><li>数据流向的不同。<code>react</code>从诞生开始就推崇单向数据流，而<code>Vue</code>是双向数据流</li><li>数据变化的实现原理不同。<code>react</code>使用的是不可变数据，而<code>Vue</code>使用的是可变的数据</li><li>组件化通信的不同。<code>react</code>中我们通过使用回调函数来进行通信的，而<code>Vue</code>中子组件向父组件传递消息有两种方式：事件和回调函数</li><li>diff算法不同。<code>react</code>主要使用diff队列保存需要更新哪些DOM，得到patch树，再统一操作批量更新DOM。<code>Vue</code> 使用双向指针，边对比，边更新DOM</li></ul></li></ul><ol start="4"><li><p><strong>利用v-model提升组件的方便性</strong></p></li><li><p><strong>虚拟dom</strong></p><p>vue是由 模版语法 -&gt; render() -&gt; VNode -&gt; 真实dom</p><ul><li>render()函数是用来构建虚拟DOM的函数，它返回一个VNode节点</li><li>vue的虚拟DOM（Virtual DOM）是一个轻量级的JavaScript对象，用来描述真实DOM树的结构。</li><li>VNode（虚拟节点）是虚拟DOM中的一个节点，它包含了DOM元素的所有信息，比如标签名、属性、子节点等。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// render 函数生成虚拟dom函数节点 vnode</span><br><span class="line"></span><br><span class="line">// html 模版</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;h1&gt;&#123;&#123; title &#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;p&gt;我是&#123;&#123; name &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">// 转化后的render函数</span><br><span class="line">function render()&#123;</span><br><span class="line">var _vm = this</span><br><span class="line">var _h = _vm.$createElement</span><br><span class="line">var _c = _vm._self._c || _h</span><br><span class="line">// 第一个参数时根节点， 第二个参数时该节点的属性 (可忽略)， 第三个参数是该节点内容或者子节点</span><br><span class="line">return _c(&quot;div&quot;, &#123; attrs: &#123; id: &quot;app&quot;&#125;&#125;, [</span><br><span class="line">_c(&quot;h1&quot;,[_vm._v(_vm._s(_vm.title))]),</span><br><span class="line">_c(&quot;p&quot;,[_vm._v(&quot;我是&quot;+_vm._s(_vm.name))])</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="Vue-模板语法插值"><a href="#Vue-模板语法插值" class="headerlink" title="Vue 模板语法插值"></a>Vue 模板语法插值</h4><ul><li><p>v-once: 模板只渲染一次</p></li><li><p>v-html: 以html语法形式渲染，会将字符串内html标签转化为元素</p></li><li><p>v-text: 以纯文本形式输出</p></li><li><p>v-on: (缩写 @)</p><ul><li>v-on:click : 点击触发事件</li></ul></li><li><p>v-bind：(缩写 :)</p><ul><li>v-bind:[属性名]  : 直接在元素添加相应属性名  例如： v-bind:style&#x3D;”width:100px,height:100px”      v-bind:class&#x3D;” ‘red’ “   :style&#x3D;”{ padding: ‘0 ‘ + paddingValue }”<ul><li>动态参数：(缩写 :[])<ul><li>v-bind:[sky]: 在定义属性参数sky时，sky会被替换(除class外)</li></ul></li></ul></li></ul></li></ul><h4 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h4><p> computed</p><h4 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h4><h5 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h5><h5 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h5><ul><li><p>插槽</p></li><li><p>具名插槽</p><ul><li>利用<code>template</code> 加上属性v-slot:aaa 来为插槽添加具名，在调用时只需在<code>&lt;slot&gt;&lt;/slot&gt;</code> 中添加属性name&#x3D;aaa</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//插槽组件</span><br><span class="line">&lt;Table&gt;</span><br><span class="line">    &lt;!-- 只会显示aaa的插槽 --&gt;</span><br><span class="line">    &lt;slot name=&#x27;aaa&#x27;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;slot name=&#x27;bbb&#x27;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/Table&gt;</span><br><span class="line">//调用组件</span><br><span class="line">&lt;Table&gt;</span><br><span class="line">    &lt;h1&gt;具名插槽&lt;/h1&gt;</span><br><span class="line">    &lt;!-- aaa的插槽命名如果冲突只会取第一个 --&gt;</span><br><span class="line">    &lt;template v-slot:aaa&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">            具名插槽aaa</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;template v-slot:bbb&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">            具名插槽bbb</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;!-- 如果起名了为default，则在调用插槽组件时必须要带命名，如果没有则不显示 --&gt;</span><br><span class="line">    &lt;template v-slot:default&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">            具名插槽default</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/Table&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>插槽数据交互</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 利用具名插槽的特性，调用的插槽&lt;slot&gt;会将属性带给这个具名插槽</span><br><span class="line">//插槽组件</span><br><span class="line">&lt;Table&gt;</span><br><span class="line">    &lt;!-- 如果子组件含有参数myArr=[1, 2, 3, 4, 5]，aaa的插槽提供自定义属性调用子组件数据 --&gt;</span><br><span class="line">    &lt;slot name=&#x27;aaa&#x27; :dateSoup=&quot;myArr&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;slot name=&#x27;bbb&#x27;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/Table&gt;</span><br><span class="line">//调用组件</span><br><span class="line">&lt;Table&gt;</span><br><span class="line">    &lt;h1&gt;具名插槽&lt;/h1&gt;</span><br><span class="line">    &lt;!-- 父组件调用子组件参数 --&gt;</span><br><span class="line">    &lt;template v-slot:aaa=&quot;aaa&quot; &gt;</span><br><span class="line">&lt;p v-for=&quot;item in aaa.dateSoup&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/Table&gt;</span><br></pre></td></tr></table></figure><ul><li>ES6 解构赋值和解构插槽prop</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 利用解构赋值简化上述的取值</span><br><span class="line">//插槽组件</span><br><span class="line">&lt;Table&gt;</span><br><span class="line">    &lt;!-- 如果子组件含有参数myArr=[1, 2, 3, 4, 5]，aaa的插槽提供自定义属性调用子组件数据 --&gt;</span><br><span class="line">    &lt;slot name=&#x27;aaa&#x27; :dateSoup=&quot;myArr&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;slot name=&#x27;bbb&#x27;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/Table&gt;</span><br><span class="line">//调用组件</span><br><span class="line">&lt;Table&gt;</span><br><span class="line">    &lt;h1&gt;具名插槽&lt;/h1&gt;</span><br><span class="line">    &lt;!-- 父组件调用子组件参数 --&gt;</span><br><span class="line">    &lt;template #aaa=&quot;&#123;myArr:mA&#125;&quot; &gt;</span><br><span class="line">&lt;p v-for=&quot;item in mA&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/Table&gt;</span><br></pre></td></tr></table></figure><ul><li>动态插槽</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v-slot:[header] = &#123;item&#125;</span><br><span class="line">#[header] = &#123;item&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h5><h5 id="组件的其他写入方式"><a href="#组件的其他写入方式" class="headerlink" title="组件的其他写入方式"></a>组件的其他写入方式</h5><h5 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h5><h4 id="vue3-ref跟reactive"><a href="#vue3-ref跟reactive" class="headerlink" title="vue3   ref跟reactive"></a>vue3   ref跟reactive</h4><p>​一般对象和数组是使用ref或reactive是根据你的赋值方式决定的</p><ul><li>ref</li></ul><p><img src="/2024/08/08/js+vue/Users\发发发宝贝\AppData\Roaming\Typora\typora-user-images\image-20240527003316501.png" alt="image-20240527003316501"></p><p>​当给ref赋值数组 [1, 2, 3]时，value的值为 {0:1, 1:2, 2:3}; 经过proxy包装后数组会包装成类数组对象</p><p>​<img src="/2024/08/08/js+vue/Users\发发发宝贝\AppData\Roaming\Typora\typora-user-images\image-20240527003453883.png" alt="image-20240527003453883"></p><ul><li><p>ref 和 shallowRef</p><ul><li><p><code>ref</code> 函数会对嵌套对象的所有属性进行递归地转换为响应式数据。这意味着当对象的属性值发生变化时，视图会自动更新。</p></li><li><p><code>shallowRef</code> 函数只会对对象的第一层属性进行转换为响应式数据。这意味着当对象的属性值发生变化时，只有第一层属性会触发视图更新，而深层属性不会触发更新。</p></li></ul></li><li><p>特性</p><ol><li>ref得到变量必须 ‘.value’ 赋值，你染等于把ref变成了普通数据，失去响应式</li><li>ref的值如果是对象，里面的对象是响应式的，因为引用类型会包装成proxy在赋值。所以ref的值如果是对象，可以修改其中的属性而引发响应式</li><li>如果是浅ref(shallowRef)则对象不会包装成proxy</li></ol></li></ul><h4 id="ref和toRef"><a href="#ref和toRef" class="headerlink" title="ref和toRef"></a>ref和toRef</h4><ul><li>使用ref修改的变量，具有响应式，通过.value修改值，但实际值是不会变的</li><li>toRef修饰的变量，并不是一个响应式的数据。但实际值是被改变了;当该元素数据重新渲染时，就会显示修改后的数据</li></ul><h4 id="render函数和jsx"><a href="#render函数和jsx" class="headerlink" title="render函数和jsx"></a>render函数和jsx</h4><ul><li><p>render函数</p><p>vue组件最终也会被编译成render函数，render函数可以动态创建标签，render函数会传入一个createElement参数，在函数中执行createElement()  ，接受三个参数。分别为：该元素的html标签名或vue组件，对象( html属性)，子元素或该元素文本内容</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过render函数创建元素</span></span><br><span class="line"><span class="keyword">let</span> status = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;tag&quot;</span>,</span><br><span class="line">    <span class="attr">props</span>: [],</span><br><span class="line">    <span class="title function_">render</span>(<span class="params">createElement</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">createElement</span>(</span><br><span class="line">            <span class="comment">// 该元素的html标签名或vue组件</span></span><br><span class="line">            <span class="string">&quot;h1&quot;</span>,</span><br><span class="line">            <span class="comment">// 对象( html属性css样式)</span></span><br><span class="line">            &#123; </span><br><span class="line">                <span class="attr">attrs</span>:&#123;<span class="attr">class</span>: <span class="string">&quot;test&quot;</span>&#125;</span><br><span class="line">                <span class="attr">style</span>: <span class="string">&quot;backgroundColor&quot;</span>+ color,</span><br><span class="line">                <span class="attr">on</span>:&#123;<span class="attr">click</span>: <span class="title function_">testClick</span>()&#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             <span class="comment">// 子元素或该元素文本内容</span></span><br><span class="line">             people.<span class="property">value</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">name</span>)=&gt;</span>&#123;</span><br><span class="line">                 <span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>, &#123;&#125;, <span class="string">`<span class="subst">$&#123;name&#125;</span>`</span>)</span><br><span class="line">             &#125;)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> status;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过render函数渲染组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Test</span> <span class="keyword">from</span> <span class="string">&quot;./test&quot;</span></span><br><span class="line"><span class="keyword">let</span> status = <span class="title function_">render</span>(<span class="params">createElement</span>)&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;tag&quot;</span>,</span><br><span class="line">    <span class="attr">props</span>: [],</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">createElement</span>(<span class="title class_">Test</span>, &#123;&#125; )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> status;</span><br></pre></td></tr></table></figure><ul><li><p>vue 中使用jsx</p><p>jsx 模板中跟reate一致，调用参数使用{} ; jsx可以在组件内script中使用； 也可以新建jsx文件，引入vue的defineComponent来生成组件，并暴露出去；参数可以是一个函数，类似于setup()；也可以传入一个对象，类似于script标签</p></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Demo.jsx</span></span><br><span class="line"><span class="comment">// 需vue项目提前引入了jsx库</span></span><br><span class="line"><span class="keyword">import</span> &#123;defineComponent, ref&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&quot;./Child&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>:&#123;</span><br><span class="line">            <span class="attr">type</span>:<span class="title class_">String</span>,</span><br><span class="line">            <span class="attr">default</span>: <span class="string">&quot;未知用户&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params">props</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> countRef = <span class="title function_">ref</span>(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">render</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                Hello, &#123;props.name&#125;, &#123;countRef.value&#125;</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Child</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//App.vue 引入 jsx</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;Demo/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import Demo from &quot;./Demo.jsx&quot;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h4><p>在Vue 2中，您可以通过全局方法<code>Vue.directive</code>或在组件选项中的<code>directives</code>属性来创建自定义指令。您可以定义<code>bind</code>，<code>inserted</code>，<code>update</code>和<code>componentUpdated</code>等生命周期钩子函数来处理指令的行为。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// Vue 2 中创建自定义指令</span><br><span class="line">Vue.directive(&#x27;custom-directive&#x27;, &#123;</span><br><span class="line">  bind(el, binding, vnode) &#123;</span><br><span class="line">    // 在元素绑定指令时调用</span><br><span class="line">  &#125;,</span><br><span class="line">  inserted(el, binding, vnode) &#123;</span><br><span class="line">    // 在元素插入到父节点时调用</span><br><span class="line">  &#125;,</span><br><span class="line">  update(el, binding, vnode, oldVnode) &#123;</span><br><span class="line">    // 在组件更新时调用</span><br><span class="line">  &#125;,</span><br><span class="line">  componentUpdated(el, binding, vnode, oldVnode) &#123;</span><br><span class="line">    // 在组件更新完成后调用</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在Vue 3中，您可以使用<code>app.directive</code>方法来创建自定义指什。与Vue 2不同，Vue 3中的自定义指令不再具有钩子函数，而是使用<code>mounted</code>和<code>beforeUnmount</code>生命周期函数来处理指令的行为。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// Vue 3 中创建自定义指令</span><br><span class="line">const app = Vue.createApp(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">app.directive(&#x27;custom-directive&#x27;, &#123;</span><br><span class="line">  mounted(el, binding, vnode) &#123;</span><br><span class="line">    // 指令绑定到元素时调用</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeUnmount(el, binding, vnode) &#123;</span><br><span class="line">    // 指令与元素解绑时调用</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol><li><code>el</code>：表示指令绑定的元素。这是一个原生的DOM元素，在指令的钩子函数中可以通过<code>el</code>来操作元素的DOM属性、样式等。</li><li><code>binding</code>：是一个对象，包含了指令的信息。<code>binding</code>对象中包含了以下属性：<ul><li><code>name</code>：指令的名称，不包括<code>v-</code>前缀。</li><li><code>value</code>：指令的绑定值，可以是一个变量、表达式或者对象。</li><li><code>oldValue</code>：指令之前的绑定值，在<code>update</code>和<code>componentUpdated</code>钩子函数中可用。</li><li><code>expression</code>：指令的表达式，通常是一个字符串。</li><li><code>arg</code>：指令的参数，如<code>v-custom:arg</code>中的<code>arg</code>。</li><li><code>modifiers</code>：一个包含修饰符的对象，如<code>v-custom.modifier</code>中的修饰符。</li></ul></li><li><code>vnode</code>：表示虚拟节点，是Vue中的一个概念，用来描述DOM节点的JavaScript对象。<code>vnode</code>是一个包含了节点信息的对象，包括节点的标签名、属性、子节点等。在指令的钩子函数中，可以通过<code>vnode</code>获取节点的信息。</li></ol><h4 id="vue-拖拽组件"><a href="#vue-拖拽组件" class="headerlink" title="vue 拖拽组件"></a>vue 拖拽组件</h4><h4 id="SPA单页面理解，优缺点，如何实现，以及怎么做SEO"><a href="#SPA单页面理解，优缺点，如何实现，以及怎么做SEO" class="headerlink" title="SPA单页面理解，优缺点，如何实现，以及怎么做SEO"></a>SPA单页面理解，优缺点，如何实现，以及怎么做SEO</h4><ol><li><p><strong>什么是SPA</strong></p><ul><li>是一种网络应用程序或网站的模型， 所有必要的代码都通过单个页面的加载而检索， 想 react、vue、angular都属于SPA</li></ul></li><li><p><strong>SPA和MPA的区别</strong></p><table><thead><tr><th align="left">单页面应用（SPA）</th><th align="left">多页面应用（MPA）</th><th></th></tr></thead><tbody><tr><td align="left">组成</td><td align="left">一个主页面和多个页面片段</td><td>多个主页面</td></tr><tr><td align="left">刷新方式</td><td align="left">局部刷新</td><td>整页刷新</td></tr><tr><td align="left">url模式</td><td align="left">哈希模式</td><td>历史模式</td></tr><tr><td align="left">SEO搜索引擎优化</td><td align="left">难实现，可使用SSR方式改善</td><td>容易实现</td></tr><tr><td align="left">数据传递</td><td align="left">容易</td><td>通过url、cookie、localStorage等传递</td></tr><tr><td align="left">页面切换</td><td align="left">速度快，用户体验良好</td><td>切换加载资源，速度慢，用户体验差</td></tr><tr><td align="left">维护成本</td><td align="left">相对容易</td><td>相对复杂</td></tr></tbody></table><ul><li>单页应用优缺点</li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">优点：</span><br><span class="line">1. 具有桌面应用的即时性、网站的可移植性和可访问性</span><br><span class="line">2. 用户体验好、快，内容的改变不需要重新加载整个页面</span><br><span class="line">3. 良好的前后端分离，分工更明确</span><br><span class="line"></span><br><span class="line">缺点：</span><br><span class="line">1. 不利于搜索引擎的抓取</span><br><span class="line">2. 首次渲染速度相对较慢</span><br></pre></td></tr></table></figure></li><li><p><strong>SPA原理</strong></p><ol><li>监听地址栏中<code>hash</code>或<code>history</code>浏览器历史变化</li><li>以当前hash为索引，加载对应资源</li><li>等待资源加载完毕，影藏之前界面，执行回调</li><li>显示当前界面</li></ol></li><li><p><strong>SPA如何做SEO(搜索引擎优化)</strong></p><ol><li><p><strong>SSR服务端渲染</strong></p><p>将组件或页面通过服务器生成html，再返回给浏览器</p></li><li><p><strong>静态化</strong></p><ol><li>通过程序将动态页面抓取并保存为静态页面，这样的页面的实际存在于服务器的硬盘中</li><li>通过WEB服务器的 <code>URL Rewrite</code>的方式， 通过web服务器内部模块按一定规则将外部的URL请求转化为内部的文件地址</li></ol></li><li><p><strong>使用<code>Phantomjs</code>针对爬虫处理</strong></p><p>原理是通过<code>Nginx</code>配置，判断访问来源是否为爬虫，如果是则搜索引擎的爬虫请求会转发到一个<code>node server</code>，再通过<code>PhantomJS</code>来解析完整的<code>HTML</code>，返回给爬虫</p></li></ol></li></ol><h4 id="v-show和v-if的区别和使用场景"><a href="#v-show和v-if的区别和使用场景" class="headerlink" title="v-show和v-if的区别和使用场景"></a>v-show和v-if的区别和使用场景</h4><ol><li>v**-show与v-if的共同点**<ul><li>当表达式为<code>true</code>的时候，都会占据页面的位置</li><li>当表达式都为<code>false</code>时，都不会占据页面位置</li></ul></li><li><strong>v-show与v-if的区别</strong><ul><li>控制手段不同<ul><li>v-show<code>隐藏则是为该元素添加</code>css–display:none,是直接操作css，没有操作dom</li><li><code>v-if</code>显示隐藏是将<code>dom</code>元素整个添加或删除，会操作到dom</li></ul></li><li>编译过程不同<ul><li><code>v-if</code>切换有一个局部编译&#x2F;卸载的过程，切换过程会销毁和重建内部的事件监听和子组件</li><li><code>v-show</code>只是简单的基于css切换，只是隐藏起来，不会出发生命周期</li></ul></li><li>编译条件不同<ul><li><code>v-if</code>是真正的条件渲染，由<code>false</code>变为<code>true</code>的时候，触发组件的<code>beforeCreate</code>、<code>create</code>、<code>beforeMount</code>、<code>mounted</code>钩子，由<code>true</code>变为<code>false</code>的时候触发组件的<code>beforeDestory</code>、<code>destoryed</code>方法</li><li><code>v-show</code> 由<code>false</code>变为<code>true</code>的时候不会触发组件的生命周期</li></ul></li><li>性能消耗<ul><li><code>v-if</code>有更高的切换消耗</li><li><code>v-show</code>有更高的初始渲染消耗</li></ul></li></ul></li><li><strong>v-show与v-if的使用场景</strong><ul><li>如果需要非常频繁地切换，则使用 v-show </li><li>如果在运行时条件很少改变，则使用 v-if</li></ul></li></ol><h4 id="vue实例挂在过程"><a href="#vue实例挂在过程" class="headerlink" title="vue实例挂在过程"></a>vue实例挂在过程</h4><ul><li><code>new Vue</code>的时候调用会调用<code>_init</code>方法<ul><li>定义 <code>$set</code>、<code>$get</code> 、<code>$delete</code>、<code>$watch</code> 等方法</li><li>定义 <code>$on</code>、<code>$off</code>、<code>$emit</code>、<code>$off</code>等事件</li><li>定义 <code>_update</code>、<code>$forceUpdate</code>、<code>$destroy</code>生命周期</li></ul></li><li>调用<code>$mount</code>进行页面的挂载</li><li>挂载的时候主要是通过<code>mountComponent</code>方法</li><li>定义<code>updateComponent</code>更新函数</li><li>执行<code>render</code>生成虚拟<code>DOM</code></li><li><code>_update</code>将虚拟<code>DOM</code>生成真实<code>DOM</code>结构，并且渲染到页面中</li></ul><h4 id="Vue-main-js-中use-的原理-案例-组件库开发-vite"><a href="#Vue-main-js-中use-的原理-案例-组件库开发-vite" class="headerlink" title="Vue main.js 中use() 的原理 ( 案例 组件库开发 [vite]  )"></a>Vue main.js 中use() 的原理 ( 案例 组件库开发 [vite]  )</h4><p>use() 方法需传入一个对象，这个对象需要一个install 方法，他会去自动的执行这个对象的install方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> myUi <span class="keyword">from</span> <span class="string">&quot;myUi&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">    .<span class="title function_">use</span>(myUi)</span><br><span class="line">.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// myUi 组件库的入口文件 index.js</span></span><br><span class="line"><span class="comment">// 自定义组件库的组件文件 test1 ，test2</span></span><br><span class="line"><span class="keyword">import</span> test1 <span class="keyword">from</span> <span class="string">&quot;./test/test1.vue&quot;</span></span><br><span class="line"><span class="keyword">import</span> test2 <span class="keyword">from</span> <span class="string">&quot;./test/test2.vue&quot;</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    test1,</span><br><span class="line">    test2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局导入 一般使用在main.js 中的vue.ues()</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="comment">// install 方法调用时会接收到vue实例</span></span><br><span class="line">    <span class="title function_">install</span>(<span class="params">vue</span>)&#123;</span><br><span class="line">        <span class="comment">// 通过循环给Vue实例注册全局组件库</span></span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">            vue.<span class="title function_">component</span>(key, obj[key])</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 局部导入  使用在局部组件通过 结构对象属性导入   import &#123;test1,test2&#125; form &quot;myUi&quot;  按需引入</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">test1, test2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="组件库开发-vue-vite"><a href="#组件库开发-vue-vite" class="headerlink" title="组件库开发 (vue-vite)"></a>组件库开发 (vue-vite)</h4><ul><li>步骤</li></ul><p><img src="/2024/08/08/js+vue/Users\发发发宝贝\AppData\Roaming\Typora\typora-user-images\image-20240610105838424.png" alt="image-20240610105838424"></p><ul><li>workspaces定义连接( 需要16版本以上) ： 在项目中package.json 中添加</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;workspaces&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;package/*&quot;</span>  <span class="comment">// 添加组件库路径</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><ul><li><p>组件库文件初始化package.json 文件，需映射到model_value文件中</p></li><li><p>npm install 时会将组件库链接到model_value中，只需改原组件库文件即可</p></li><li><p>组件库打包</p><ul><li>新建配置文件 lib.config.js 用来打包组件库</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为组件库使用了vue文件类型</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig&#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    <span class="attr">build</span>: &#123;</span><br><span class="line">        <span class="attr">lib</span>:&#123;</span><br><span class="line">            <span class="attr">entry</span>: <span class="string">&quot;./package/myUi/index.js&quot;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;myUi&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">outDir</span>: <span class="string">&quot;lib&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="title function_">vue</span>(),</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>在package.json 中添加打包语句</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;script&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;build:myUi&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite build --lib.config.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><p>打包后会有favicon.io  myUipro.mjs   myUipro.umd.js</p><p>myUipro.mjs    适配import引入</p><p>myUipro.umd.js适配浏览器引入，使用script标签引入</p></li></ul></li></ul><h4 id="vue生命周期；created和mounted这两个生命周期中请求数据有什么区别"><a href="#vue生命周期；created和mounted这两个生命周期中请求数据有什么区别" class="headerlink" title="vue生命周期；created和mounted这两个生命周期中请求数据有什么区别"></a>vue生命周期；created和mounted这两个生命周期中请求数据有什么区别</h4><ul><li><p><strong>介绍</strong></p><p>在<code>Vue</code>中实例从创建到销毁的过程就是生命周期， <code>Vue</code>生命周期钩子会自动绑定 <code>this</code> 上下文到实例中</p></li><li><p><strong>生命周期有哪些</strong></p><p>Vue生命周期总共可以分为8个阶段：创建前后, 载入前后,更新前后,销毁前销毁后</p><table><thead><tr><th align="left">生命周期</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">beforeCreate</td><td align="left">组件实例被创建之初</td></tr><tr><td align="left">created</td><td align="left">组件实例已经完全创建</td></tr><tr><td align="left">beforeMount</td><td align="left">组件挂载之前</td></tr><tr><td align="left">mounted</td><td align="left">组件挂载到实例上去之后</td></tr><tr><td align="left">beforeUpdate</td><td align="left">组件数据发生变化，更新之前</td></tr><tr><td align="left">updated</td><td align="left">组件数据更新之后</td></tr><tr><td align="left">beforeDestroy    vue3更名为beforeunmount</td><td align="left">组件实例销毁之前</td></tr><tr><td align="left">destroyed           vue3更名为unmount</td><td align="left">组件实例销毁之后</td></tr><tr><td align="left">activated             vue3新增</td><td align="left">keep-alive 缓存的组件激活时</td></tr><tr><td align="left">deactivated        vue3新增</td><td align="left">keep-alive 缓存的组件停用时调用</td></tr><tr><td align="left">errorCaptured     vue3新增</td><td align="left">捕获一个来自子孙组件的错误时被调用</td></tr></tbody></table><ul><li>具体分析</li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">beforeCreate -&gt; created</span><br><span class="line">初始化vue实例，进行数据观测</span><br><span class="line"></span><br><span class="line">created</span><br><span class="line">1. 完成数据观测，属性与方法的运算，watch、event事件回调的配置</span><br><span class="line">2. 可调用methods中的方法，访问和修改data数据触发响应式渲染dom，可通过computed和watch完成数据计算</span><br><span class="line">3. 此时vm.$el 并没有被创建</span><br><span class="line"></span><br><span class="line">created -&gt; beforeMount</span><br><span class="line">1. 判断是否存在el选项，若不存在则停止编译，直到调用vm.$mount(el)才会继续编译</span><br><span class="line">2. 优先级：render &gt; template &gt; outerHTML</span><br><span class="line">3. vm.el获取到的是挂载DOM的</span><br><span class="line"></span><br><span class="line">beforeMount</span><br><span class="line">1. 在此阶段可获取到vm.el</span><br><span class="line">2. 此阶段vm.el虽已完成DOM初始化，但并未挂载在el选项上</span><br><span class="line"></span><br><span class="line">beforeMount -&gt; mounted</span><br><span class="line">此阶段vm.el完成挂载，vm.$el生成的DOM替换了el选项所对应的DOM</span><br><span class="line"></span><br><span class="line">mounted</span><br><span class="line">vm.el已完成DOM的挂载与渲染，此刻打印vm.$el，发现之前的挂载点及内容已被替换成新的DOM</span><br><span class="line"></span><br><span class="line">beforeUpdate</span><br><span class="line">1. 更新的数据必须是被渲染在模板上的（el、template、render之一）</span><br><span class="line">2. 此时view层还未更新</span><br><span class="line">3. 若在beforeUpdate中再次修改数据，不会再次触发更新方法</span><br><span class="line"></span><br><span class="line">updated</span><br><span class="line">1. 完成view层的更新</span><br><span class="line">3. 若在updated中再次修改数据，会再次触发更新方法（beforeUpdate、updated）</span><br><span class="line"></span><br><span class="line">beforeDestroy</span><br><span class="line">实例被销毁前调用，此时实例属性与方法仍可访问</span><br><span class="line"></span><br><span class="line">destroyed</span><br><span class="line">1. 完全销毁一个实例。可清理它与其它实例的连接，解绑它的全部指令及事件监听器</span><br><span class="line">2. 并不能清除DOM，仅仅销毁实例</span><br></pre></td></tr></table></figure><ul><li>使用场景分析</li></ul><table><thead><tr><th align="left">生命周期</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">beforeCreate</td><td align="left">执行时组件实例还未创建，通常用于插件开发中执行一些初始化任务</td></tr><tr><td align="left">created</td><td align="left">组件初始化完毕，各种数据可以使用，常用于异步数据获取</td></tr><tr><td align="left">beforeMount</td><td align="left">未执行渲染、更新，dom未创建</td></tr><tr><td align="left">mounted</td><td align="left">初始化结束，dom已创建，可用于获取访问数据和dom元素</td></tr><tr><td align="left">beforeUpdate</td><td align="left">更新前，可用于获取更新前各种状态</td></tr><tr><td align="left">updated</td><td align="left">更新后，所有状态已是最新</td></tr><tr><td align="left">beforeDestroy</td><td align="left">销毁前，可用于一些定时器或订阅的取消</td></tr><tr><td align="left">destroyed</td><td align="left">组件已销毁，作用同上</td></tr></tbody></table></li><li><p><strong>数据请求在created和mouted的区别</strong></p><p><code>created</code>是在组件实例一旦创建完成的时候立刻调用，这时候页面<code>dom</code>节点并未生成；<code>mounted</code>是在页面<code>dom</code>节点渲染完毕之后就立刻执行的;  <code>mounted</code>中的请求有可能导致页面闪动; 因为页面<code>dom</code>结构已经生成，所以放在created中更合适</p><p>!!! <strong>为什么不在beforeCreate中发送请求</strong></p><ul><li>在 <code>beforeCreate</code> 钩子函数中，实例还没有被初始化，发送请求可能会出现数据依赖没有准备好的情况，在 <code>created</code> 钩子函数中，实例已经初始化完成，方便发送请求并处理数据。</li></ul></li><li><p><strong>父组件引入子组件生命周期过程</strong></p><ul><li><p>vue2</p><p>父:beforeCreate - 父:created - 父:beforeMount - 子:beforeCreate - 子:created - 子:beforeMount - 子:mounted - 父:mounted</p></li></ul></li><li><p><strong>在mounted生命周期之前怎么获取DOM</strong></p><p>​通过js的事件循环机制，代码会先执行同步的。最后执行异步。只需要在异步方法中获取( 例如 nextTick() )</p></li></ul><h4 id="v-if-和v-for-vue2"><a href="#v-if-和v-for-vue2" class="headerlink" title="v-if 和v- for(vue2)"></a>v-if 和v- for(vue2)</h4><ul><li><p><strong>优先级</strong></p><p><code>v-if</code>与<code>v-for</code>都是<code>vue</code>模板系统中的指令； 在<code>vue</code>模板编译的时候，会将指令系统转化成可执行的<code>render</code>函数； 在进行<code>if</code>判断的时候，<code>v-for</code>是比<code>v-if</code>先进行判断； <code>v-for</code>优先级比<code>v-if</code>高</p></li><li><p>注意事项</p><ul><li><code>v-if</code> 和 <code>v-for</code> 同时用在同一个元素上使用</li></ul></li></ul><h4 id="SPA首屏加载慢"><a href="#SPA首屏加载慢" class="headerlink" title="SPA首屏加载慢"></a>SPA首屏加载慢</h4><p>减少首屏渲染时间的方法有很多，总的来讲可以分成两大部分 ：资源加载优化 和 页面渲染优化</p><p>* </p><ul><li><p><strong>加载慢的原因</strong></p><ul><li>网络延时问题</li><li>资源文件体积是否过大</li><li>资源是否重复发送请求去加载了</li><li>加载脚本的时候，渲染内容堵塞了</li></ul></li><li><p><strong>解决方案</strong></p><ol><li><p>资源加载优化</p><ul><li><p>减少资源大小</p><ul><li>代码压缩</li><li>Gzip</li><li>图片压缩</li><li>代码拆分</li></ul></li><li><p>减少http请求次数</p><ul><li>http强缓存</li><li>Service Worker</li><li>本地缓存( localStorage 等)</li><li>合并请求( nginx-http-concat 模块、 雪碧图等)</li></ul></li><li><p>提高http请求响应速度</p><ul><li>CDN</li><li>http弱缓存</li><li>DNS Prefetch</li><li>http2</li></ul></li><li><p>优化资源加载时机</p><ul><li>按需加载</li><li>懒加载</li><li>预加载( preload 等)</li></ul></li><li><p>优化资源、 内容加载方式</p><ul><li>客户端内H5页面可以考虑离线包方式</li><li>内容直出</li></ul></li></ul></li><li><p>页面渲染优化</p></li></ol><ul><li>优化html代码<ul><li>js外链底部</li><li>css外链顶部</li><li>减少DOM数量</li></ul></li><li>优化js、css代码<ul><li>使用webworker</li><li>长任务分片执行</li><li>减少重拍、重绘</li><li>降低css选择器复杂性</li></ul></li><li>优化动画效果<ul><li>使用 requestAnimationFrame</li><li>使用 transform和 opacity 属性实现动画</li><li>合理使用 will-change 或 translate 来提升某些元素到新元素的合成</li></ul></li></ul></li></ul><h4 id="为什么vue2-组件的data属性是一个函数而不是对象，vue2实例可以是函数和对象，Vue3已更改为函数"><a href="#为什么vue2-组件的data属性是一个函数而不是对象，vue2实例可以是函数和对象，Vue3已更改为函数" class="headerlink" title="为什么vue2 组件的data属性是一个函数而不是对象，vue2实例可以是函数和对象，Vue3已更改为函数"></a>为什么vue2 组件的data属性是一个函数而不是对象，vue2实例可以是函数和对象，Vue3已更改为函数</h4><h4 id="组件传值"><a href="#组件传值" class="headerlink" title="组件传值"></a>组件传值</h4><p>1、父传子</p><p>主要用到<strong>props属性</strong>传递，父组件通过自定义属性给子组件传值，子组件用props接收</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;span class=&quot;pub-title&quot;&gt;&#123;&#123; title &#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script setup&gt;</span><br><span class="line"> </span><br><span class="line">// defineProps 可以直接使用，不需要另外引入</span><br><span class="line">/**</span><br><span class="line"> * @property &#123;String&#125; title  标题</span><br><span class="line"> */</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">    title: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        default: &quot;&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;title-more title=&quot;基本信息&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import TitleMore from &quot;@components/TitleMore.vue&quot;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>2.子传父</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;span class=&quot;pub-title&quot; @click=&quot;onClick&quot;&gt;&#123;&#123; title &#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script setup&gt;</span><br><span class="line"> </span><br><span class="line">// defineEmits 可以直接使用，不需要另外引入</span><br><span class="line"> </span><br><span class="line">const emits = defineEmits([&quot;click&quot;])</span><br><span class="line">const onClick = () =&gt; &#123;</span><br><span class="line">    emits(&quot;click&quot;,&#x27;123&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;title-more title=&quot;基本信息&quot; @click=&quot;handleClick&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import TitleMore from &quot;@components/TitleMore.vue&quot;</span><br><span class="line"> </span><br><span class="line">const handleClick = (val) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;val&#x27;,val)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>3.兄弟之间通信</p><ul><li>一种方法是父组件允当两个子组件之间的中间件</li><li>全局事件总线—EventBus（可以用于兄弟、爷孙、任意组件通信）</li></ul><p>4.父组件充当中间件</p><p>​假设有A、B、C页面，其中A、B为兄弟组件、C为父组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 组件A</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;span class=&quot;pub-title&quot;&gt;&#123;&#123; title &#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">    title: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        default: &quot;&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// B组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;span class=&quot;pub-title&quot; @click=&quot;onClick&quot;&gt;12&lt;/span&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const emits = defineEmits([&quot;click&quot;])</span><br><span class="line">const onClick = () =&gt; &#123;</span><br><span class="line">    emits(&quot;click&quot;,&#x27;123&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// A和B的父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    // A组件</span><br><span class="line">    &lt;other :title=&quot;title&quot; /&gt;    </span><br><span class="line"> </span><br><span class="line">    // B组件</span><br><span class="line">    &lt;title-more @click=&quot;handleClick&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;</span><br><span class="line">import TitleMore from &quot;@components/TitleMore.vue&quot;</span><br><span class="line"> </span><br><span class="line">const title = ref(&#x27;&#x27;)</span><br><span class="line">const handleClick = (val) =&gt; &#123;</span><br><span class="line">    title.value = val</span><br><span class="line">    console.log(&#x27;val&#x27;,val)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>5.全局事件总线—EventBus</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 安装</span><br><span class="line">npm install mitt -S</span><br><span class="line">// 在assets新建个common文件夹，接着再创建event-bus.js（这个文件命名根据你们的情况来定）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// event-bus.js</span><br><span class="line">import mitt from &quot;mitt&quot;;</span><br><span class="line">const EventBus = mitt()</span><br><span class="line">export default EventBus</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;span @click=&quot;onClick&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;</span><br><span class="line">import EventBus from &quot;@common/event-bus&quot;</span><br><span class="line"> </span><br><span class="line">const onClick = () =&gt; &#123;</span><br><span class="line">    EventBus.emit(&quot;p-click&quot;, &#x27;父传子文本信息&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// 子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;span&gt;&#123;&#123; text &#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref,onBeforeUnmount &#125; from &quot;vue&quot;</span><br><span class="line">import EventBus from &quot;@common/event-bus&quot;</span><br><span class="line"> </span><br><span class="line">const text = ref(&#x27;&#x27;)</span><br><span class="line"> </span><br><span class="line">// 第一种</span><br><span class="line">EventBus.on(&#x27;p-click&#x27;, (val)=&gt;&#123;</span><br><span class="line">  text.value = val </span><br><span class="line">  console.log(&#x27;获取的值val&#x27;,&#x27;val&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">// 另一种写法</span><br><span class="line">const funs = (xxx) =&gt;&#123;</span><br><span class="line">    console.log(&#x27;接收的值为&#x27;,xxx)</span><br><span class="line">&#125;</span><br><span class="line">EventBus.on(&#x27;p-click&#x27;,funs)</span><br><span class="line">EventBus.off(&#x27;p-click&#x27;,funs)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">onBeforeUnmount(() =&gt; &#123;</span><br><span class="line">    // 取消单个监听-第一种</span><br><span class="line">    EventBus.off(&#x27;p-click&#x27;)</span><br><span class="line">    </span><br><span class="line">    // 全部取消</span><br><span class="line">    EventBus.all.clear()</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>6.爷孙之间通信</p><ul><li>provide&#x2F;inject</li><li>EventBus</li></ul><p><strong>eventBus</strong>上述有讲过这里就不讲了，讲一下<strong>provide&#x2F;inject</strong></p><p>爷孙组件无论任何一个组件内的值发生改变，两个组件的值都会进行响应式的数据更新。</p><figure class="highlight plaintext"><figcaption><span>&#123; reactive,provide,ref &#125; from 'vue';</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">provide(&#x27;page&#x27;, ref(&#x27;1&#x27;))</span><br><span class="line">provide(&#x27;user&#x27;, reactive(&#123;</span><br><span class="line">  age: 11,</span><br><span class="line">  name: &#x27;张三&#x27;</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 子组件</span><br><span class="line">import &#123; inject &#125; from &#x27;vue&#x27;;</span><br><span class="line">const user = inject(&quot;user&quot;);</span><br><span class="line">const page = inject(&quot;page&quot;);</span><br></pre></td></tr></table></figure><p>7、任意组件、全局</p><ul><li>provide&#x2F;inject</li><li>EventBus</li><li>Vuex</li><li>Pinia</li></ul><h4 id="vue2与vue3的区别"><a href="#vue2与vue3的区别" class="headerlink" title="vue2与vue3的区别"></a>vue2与vue3的区别</h4><ol><li><p><a href="#%E6%89%8B%E5%86%99%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A(v-mode)">vue2和vue3使用的双向绑定数据的方法不同</a></p><ul><li><p>vue2使用的是object.defindperty()</p><p>​后期添加的属性是获取不到的</p></li><li><p>vue3使用的是 new Proxy()</p></li></ul></li></ol><p>​后期添加的属性也能获取到</p><p>​不需要循环属性进行监听</p><ol start="2"><li>$set 在vue3中去除了，因为Proxy不需要</li><li>v-if 和v-for 优先级不同</li><li>生命周期钩子函数不同</li><li>定义变量和方法不同</li><li>指令插槽使用不同</li><li>api类型</li><li>父子传参不同</li><li>ref $children</li><li>vue2使用选择式api；vue3可以使用选择式api，也可以使用组合式api或setup语法糖的形式</li></ol><h4 id="使用setup组织代码"><a href="#使用setup组织代码" class="headerlink" title="使用setup组织代码"></a>使用setup组织代码</h4><p>​vue3 hooks相当于把一些功能从vue文件中提取出来，封装并抛出，在vue文件中直接导入使用</p><h4 id="setup-如何获取this"><a href="#setup-如何获取this" class="headerlink" title="setup 如何获取this"></a>setup 如何获取this</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建的js，将其放入到vue全局中</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">install</span>(<span class="params">app</span>)&#123;</span><br><span class="line">        app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$loading</span> = <span class="string">&#x27;加载中。。。&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//main.js</span><br><span class="line">import &#123;createApp&#125; form &#x27;vue&#x27;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line">import router form &#x27;./router&#x27;</span><br><span class="line">import store from &#x27;./store&#x27;</span><br><span class="line">//导入loading</span><br><span class="line">import loading from &#x27;@/components/loading/&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">createApp(App)</span><br><span class="line">.use(store)</span><br><span class="line">.use(router)</span><br><span class="line">//全局导入</span><br><span class="line">.use(loading)</span><br><span class="line">.mount(&#x27;#app&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//vue组件中使用</span><br><span class="line">import &#123;getCurrentInstance&#125; form &#x27;vue&#x27;</span><br><span class="line">let app = getCurrentInstance();</span><br><span class="line">console.log( app.appContext.app.config.globlaProperties.$loading) //加载中。。。</span><br></pre></td></tr></table></figure><h4 id="Vue3常用api"><a href="#Vue3常用api" class="headerlink" title="Vue3常用api"></a>Vue3常用api</h4><ol><li>createApp()</li></ol><p>​创建一个实例应用；等于Vue2的 ‘ new Vue() ’; </p><p>​使用场景：写插件或分装全局组件会使用</p><ol start="2"><li>provide &#x2F; inject</li></ol><p>​依赖注入；其实就是传值；</p><p>​使用场景： 某父组件传值到后代组件，层次过多传递麻烦，可以使用</p><p>​缺点： 不好维护及不好查询数据来源</p><ol start="3"><li>directive</li></ol><p>​自定义指令</p><p>​场景：后台管理系统中按钮权限控制（一个用户拥有某些权限，但只能查看和修改，不能删除）</p><ol start="4"><li><p>mixin</p><p>全局混入；局部</p><p>场景：可以添加生命周期，在小程序的分享功能会用到</p><p>缺点： 不好维护和查询数据来源</p></li><li><p>app.config.globalProperties</p></li></ol><p>​获取vue这个全局对象的属性和方法</p><p>​自己封装插件的时候需要把方法添加到对象中</p><ol start="6"><li>nextTick</li></ol><p>​等待下一次DOM更新刷新的工具方法；nextTick返回一个Pormise，回调函数是放在Promise中，所以是异步执行</p><p>​场景：dom更新，vue是数据驱动dom，所以数据赋值就要在nextTick进行</p><ol start="7"><li><p>computed </p><p>计算属性；有缓存</p></li><li><p>reactuve、ref</p></li></ol><p>​用来定义数据和vue2 的data类型</p><ol start="9"><li>watch</li></ol><p>​监听（vue3不需要深度监听）</p><ol start="10"><li>markRaw()</li></ol><p>​不被new Proxy代理，说白了就是静态数据</p><ol start="11"><li>defineProps()</li></ol><p>​父组件传递的值，子组件使用setup的形式，需要用defineProps接收</p><ol start="12"><li>defineEmits()</li></ol><p>​当前组件使用setup形式，自定义事件需要使用defineEmits</p><ol start="13"><li>slot</li></ol><p>​分为匿名、具名、作用域</p><p>​后台管理系统、左侧是固定菜单、右侧是不固定内容，右侧就是slot</p><h4 id="介绍下vue3常用的响应式数据类型"><a href="#介绍下vue3常用的响应式数据类型" class="headerlink" title="介绍下vue3常用的响应式数据类型"></a>介绍下vue3常用的响应式数据类型</h4><ul><li>ref、reactive、toRef、toRefs</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//ref 普通数据类型响应式</span><br><span class="line">let sum = ref(10)</span><br><span class="line"></span><br><span class="line">//引用数据类型响应式，模板中使用：&#123;&#123;obj.name&#125;&#125;</span><br><span class="line">let obj = reactive(&#123;</span><br><span class="line">name: &#x27;张三&#x27;，</span><br><span class="line">age: 18,</span><br><span class="line">sex: &#x27;男&#x27;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//toRef()相当于解构, 在模板中直接使用&#123;&#123;name&#125;&#125;</span><br><span class="line">let name = toRef(obj,&#x27;name&#x27;)</span><br><span class="line"></span><br><span class="line">//toRefs() 解构所有属性，</span><br><span class="line">let &#123;name,age,sex&#125; = toRefs(obj)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="teleport-组件使用场景"><a href="#teleport-组件使用场景" class="headerlink" title="teleport 组件使用场景"></a>teleport 组件使用场景</h4><p>类似于传送，将其他元素子元素，传送到其他元素内</p><p>场景： 置顶弹窗，将其居中对齐，但并非全屏居中。只要加了<teleport to="body">弹窗组件 <teleport>，就可在body居中</teleport></teleport></p><h4 id="Nuxt解决SSR"><a href="#Nuxt解决SSR" class="headerlink" title="Nuxt解决SSR"></a>Nuxt解决SSR</h4><ol><li>首先，安装Nuxt.js：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install nuxt</span><br></pre></td></tr></table></figure><ol><li>创建一个Nuxt.js项目：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-nuxt-app my-nuxt-app</span><br></pre></td></tr></table></figure><ol><li>在<code>nuxt.config.js</code>文件中配置服务器端渲染：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  mode: &#x27;universal&#x27;,</span><br><span class="line">  server: &#123;</span><br><span class="line">    host: &#x27;0.0.0.0&#x27;,</span><br><span class="line">    port: process.env.PORT || 3000</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>创建一个页面组件（例如<code>pages/index.vue</code>）：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;Welcome to Nuxt.js SSR!&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ol><li>运行项目：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>以上代码案例简单展示了如何使用Nuxt.js实现服务器端渲染。当访问应用时，Nuxt.js会在服务端渲染页面内容，并将渲染好的页面发送给客户端。这样可以提高页面加载速度和SEO表现。</p><h4 id="vue实例-重复小组件处理-弹窗封装"><a href="#vue实例-重复小组件处理-弹窗封装" class="headerlink" title="vue实例: 重复小组件处理( 弹窗封装)"></a>vue实例: 重复小组件处理( 弹窗封装)</h4><p>render函数  jsx  插槽组件</p><h4 id="vue更新机制和项目优化"><a href="#vue更新机制和项目优化" class="headerlink" title="vue更新机制和项目优化"></a>vue更新机制和项目优化</h4><ol><li><p>常见渲染问题和优化方案</p><p>场景：每次修改倒计时对应的变量，就会引起vue整个组件的跟新机制；如果页面特别庞大，倒计时会频繁的导致diff算法去对比dom，会产生很多内存和新能的消耗</p><p>解决：</p><ul><li>把倒计时区域提取为组件，数据通过props传递给组件，这样更新和对比都只会出发组件本身，而组件的代码非常小，就一个倒计时。所以性能较优；注意传递的时候不要传递ref</li><li>绕开vue体系，使用原生dom操作，设置innerHTML的方式(简单设置文字内容可以考虑)</li></ul></li><li><p>vue的更新机制原理</p><ul><li><p>知识点一： vue更新是以组件为最小单位统计的</p><p>​vue的响应式原理是get和set，set部分在修改数据的时候触发更新，而get会有一个依赖收集的过程</p><p><img src="/2024/08/08/js+vue/Users\发发发宝贝\AppData\Roaming\Typora\typora-user-images\image-20240525180218590.png" alt="image-20240525180218590"></p></li><li><p>知识点二：更新过程和diff对比策略</p></li></ul><p><img src="/2024/08/08/js+vue/Users\发发发宝贝\AppData\Roaming\Typora\typora-user-images\image-20240526001236378.png" alt="image-20240526001236378"></p><p><img src="/2024/08/08/js+vue/Users\发发发宝贝\AppData\Roaming\Typora\typora-user-images\image-20240526001420827.png" alt="image-20240526001420827"></p><p>总结：</p><ol><li>如果有一些特别频繁的区域，可以把区域从页面中提取出来作为一个组件。尤其页面比较庞大的时候</li><li>尽量复用之前的dom，避免相似的结构用v-if 切换</li></ol></li><li><p>类比react</p><ol><li>react优化需要认为操作，因为react更新并不能获取到修改的dom，反而导致整个页面更新</li></ol></li></ol><h4 id="vue2-和-vue3-的区别"><a href="#vue2-和-vue3-的区别" class="headerlink" title="vue2 和 vue3 的区别"></a>vue2 和 vue3 的区别</h4><ol><li>在使用上<ul><li>用组合式api代替了选项式api，方便逻辑更加聚合，但是没有this</li><li>生命周期没有creat; setup等同于create，卸载改成unmount</li><li>vue3中v-if 优先级高于v-for</li><li>根实例的创建从new App变成了createApp方法</li><li>一些全局注册，比如mixin，注册全局组件，use改成了用app实例调用，而不是vue类调用</li><li>新增传送门teleport组件</li><li>template模板可以不包在一个div里</li></ul></li><li>原理上<ul><li>响应式原理改成了用proxy，解决了数组无法通过下标修改，无法监听到对象属性的新增和删除问题。也提升了响应效率</li><li>vue3并不是完全抛弃了defineProperty，通过reactive定义的响应式数据使用proxy包装出来，而ref还是用的defineProperty去给一个空对象，定义了一个value属性来做的响应式</li><li>组合式api的写发下，源码改成了函数式编程，方便按需引入，因为tree-shaking功能必须配合按需引入写法。所以vue3更好地配合tree-sharking能让打包体积更小</li><li>性能优化，增加了静态节点标记。会标记静态节点，不对静态节点进行对比。从而增加效率</li></ul></li><li>进阶<ul><li>vue3不推荐使用mixin进行复用逻辑提取，而是推荐写成hook</li><li>v-model应用于组件时，监听的事件和传递的值改变</li><li>更好的配合ts</li></ul></li></ol><h4 id="全家桶-vueRoute"><a href="#全家桶-vueRoute" class="headerlink" title="全家桶-vueRoute"></a>全家桶-vueRoute</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter, createWebHashHistory, createWebHistory&#125; <span class="keyword">from</span> <span class="string">&quot;vue-route&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line"><span class="attr">component</span>: <span class="function">()=&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/index.vue&quot;</span>)</span><br><span class="line">&#125;,</span><br><span class="line">    &#123;</span><br><span class="line"><span class="attr">path</span>: <span class="string">&quot;/content&quot;</span>,</span><br><span class="line"><span class="attr">component</span>: <span class="function">()=&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/content.vue&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由 传入一个对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="comment">// history 两个选项 createWebHashHistory() &amp; createWebHistory()</span></span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">    <span class="comment">// 上面的路由配置</span></span><br><span class="line">    router</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将router暴露出去,在main.js 中use() 全局引入</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><ul><li>vue2路由传参</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路由配置</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/user/:userId&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">User</span>,</span><br><span class="line">    <span class="attr">props</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// vue组件调用</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>, <span class="attr">params</span>: &#123; <span class="attr">userId</span>: <span class="number">123</span> &#125; &#125;);</span><br></pre></td></tr></table></figure><ul><li>vue3路由传参</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRoute, useRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> route = <span class="title function_">useRoute</span>();</span><br><span class="line">    <span class="keyword">const</span> router = <span class="title function_">useRouter</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">navigateToUser</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      router.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>, <span class="attr">params</span>: &#123; <span class="attr">userId</span>: <span class="number">123</span> &#125; &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在需要的地方调用导航方法</span></span><br><span class="line">    <span class="title function_">navigateToUser</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      route,</span><br><span class="line">      router</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>路由定义别名alias 和 name属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">        <span class="comment">// 别名</span></span><br><span class="line">        <span class="attr">alias</span>: [<span class="string">&#x27;/home&#x27;</span>,<span class="string">&#x27;/index&#x27;</span>],  <span class="comment">// 在浏览器中 /home 也可以跳转这个路由</span></span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;userList&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>: <span class="function">()=&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/index.vue&quot;</span>),</span><br><span class="line">&#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/info&quot;</span>,</span><br><span class="line">        <span class="comment">// 路由重定向</span></span><br><span class="line">        <span class="attr">redirect</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">        <span class="comment">// 或</span></span><br><span class="line">        <span class="attr">redirect</span>: &#123; <span class="attr">name</span>:<span class="string">&#x27;useList&#x27;</span>, <span class="attr">params</span>: &#123;<span class="attr">id</span>:<span class="number">200</span>, <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>routerView 和 routerLink 标签</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- 该标签其实就是相当于a标签，进行路由跳转 --&gt;</span><br><span class="line">&lt;routerLink to=&quot;/hone&quot;/&gt;</span><br><span class="line">&lt;!-- routerLink传参 --&gt;</span><br><span class="line">&lt;routerLink :to=&#123; path:&#x27;/home&#x27;, query: &#123;id:200,title:&#x27;vue3&#x27;&#125; &#125;&gt;传参&lt;/routerLink&gt;</span><br><span class="line">&lt;!-- 通过params传递参数,相当于router.push--&gt;</span><br><span class="line">&lt;routerLink :to=&#123; name:&#x27;useList&#x27;, params: &#123;id:200, name: &#x27;user&#x27;&#125;&#125;&gt;&lt;/routerLink&gt;</span><br><span class="line">&lt;!-- 该标签显示该路由下的相关组件 --&gt;</span><br><span class="line">&lt;routerView /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;useRouter&#125; from &#x27;vue-router&#x27;</span><br><span class="line">    </span><br><span class="line">    const router = useRotuer()</span><br><span class="line">    </span><br><span class="line">    const queryRouter = ()=&gt;router.push(&quot;/home?id=200&amp;title=vue3&quot;)</span><br><span class="line">    const paramsRouter = ()=&gt;router.push(&#123; name:&#x27;/useList&#x27;, params: &#123;id:200, name: &#x27;user&#x27;&#125;&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>嵌套路由( 子路由 )和共享组件</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">        <span class="comment">// 别名</span></span><br><span class="line"><span class="attr">alias</span>: [<span class="string">&#x27;/home&#x27;</span>,<span class="string">&#x27;/index&#x27;</span>],  <span class="comment">// 在浏览器中 /home 也可以跳转这个路由</span></span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;userList&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>: <span class="function">()=&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/index.vue&quot;</span>), <span class="comment">//父组件需要routerView 来渲染子路由页面</span></span><br><span class="line">        <span class="comment">// 子路由  </span></span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>: <span class="string">&quot;&quot;</span>, <span class="comment">// 不填为默认子路由,</span></span><br><span class="line"><span class="attr">component</span>: <span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&quot;@/views/vip/default.vue&quot;</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>: <span class="string">&quot;order&quot;</span>, <span class="comment">// 不填为默认子路由,</span></span><br><span class="line"><span class="attr">component</span>: <span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&quot;@/views/vip/order.vue&quot;</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>: <span class="string">&quot;info&quot;</span>, <span class="comment">// 不填为默认子路由,</span></span><br><span class="line"><span class="attr">component</span>: <span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&quot;@/views/vip/info.vue&quot;</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>全局路由守卫</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(to,<span class="keyword">from</span>,next)=&gt;&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    to : 即将要进入的路由(往哪去)</span></span><br><span class="line"><span class="comment">    from : 即将要离开的路由(从哪来)</span></span><br><span class="line"><span class="comment">    next : 一个方法  ， 允许通过时next() , 拒绝通过时 next(false)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="全家桶-Vuex"><a href="#全家桶-Vuex" class="headerlink" title="全家桶-Vuex"></a>全家桶-Vuex</h4><ul><li><p>vuex概述+ 工作流程</p><p>uex 是一个专门为 Vue.js 应用程序开发的状态管理模式库，用于管理应用程序中所有组件的状态。</p><p>用户通过 <code>dispatch</code> 触发 actions ，actions 通过 <code>commit </code>将数据提交到 mutations ，通过mutations改变state中的参数，从而伴随state数据的改变重新渲染页面</p><p>action 支持的是异步操作( 与后端调用接口异步)； mutations 支持是同步操作</p><p>！！！ 用户可以直接操作mutations修改数据</p><p><img src="/2024/08/08/js+vue/Users\发发发宝贝\AppData\Roaming\Typora\typora-user-images\image-20240626164502878.png" alt="image-20240626164502878"></p></li><li><p>基本使用</p><ul><li>安装vuex</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex --save</span><br></pre></td></tr></table></figure><ul><li>创建store对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 创建一个 Vuex store 实例</span></span><br><span class="line"><span class="comment">// import &#123; createStore &#125; from &#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// vue3 使用const store = new createStore(&#123;&#125;) 创建</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="comment">// 定义一些状态</span></span><br><span class="line">      <span class="attr">count</span>: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="comment">// 定义一些更改状态的方法</span></span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      <span class="comment">// 变更状态</span></span><br><span class="line">    state.<span class="property">count</span>++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="comment">// 定义一些异步操作</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="comment">// 定义一些派生状态</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure><ul><li>vuex 挂载到vue 实例</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue2   main.js</span></span><br><span class="line"><span class="comment">// 引入 Vuex 和 Vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; store &#125; <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTi</span></span><br><span class="line"><span class="comment">// 使用 Vuex 插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个 Vue 实例</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  store, <span class="comment">// 将 Vuex store 挂载到 Vue 实例中,在组件中可以使用this.$store调用store</span></span><br><span class="line">  <span class="comment">// 其他配置项</span></span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span>=&gt;</span><span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//++++++++++++++++</span></span><br><span class="line"><span class="comment">// vue3  main.js</span></span><br><span class="line"><span class="comment">// 引入 Vuex 和 createApp</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; provide &#125; <span class="keyword">from</span> <span class="string">&#x27;@vueuse/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; store &#125; <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span> <span class="comment">// 导入你的 Vuex store</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router/index.js&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>核心属性</p><ul><li><p>state</p><p>State就是提供公共数据的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 创建一个 Vuex store 实例</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="comment">// 定义一些状态</span></span><br><span class="line">      <span class="attr">count</span>: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">)&#125;</span><br></pre></td></tr></table></figure><p>所有共享的数据都要统一放到Store的State中进行存储</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">//Vue2用法</span><br><span class="line">import &#123;mapState&#125; from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">import &#123;mapGetters&#125; from &#x27;vuex&#x27;</span><br><span class="line">app = new Vue(&#123;</span><br><span class="line">  date(): &#123;</span><br><span class="line">    return &#123;&#125;</span><br><span class="line">   &#125;,</span><br><span class="line">// 将store全局数据，映射为当前组件的计算属性</span><br><span class="line">  computed: &#123;</span><br><span class="line">    count () &#123;</span><br><span class="line">      return this.$store.state.count</span><br><span class="line">    &#125;,</span><br><span class="line">    //vue2 除了用this.$store 调用store 还可以使用按需导入的方法,使用辅助函数mapState()</span><br><span class="line">    ...mapState([&#x27;count&#x27;]),</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// vue3</span><br><span class="line">import &#123; useStore &#125; from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  setup () &#123;</span><br><span class="line">    const store = useStore()  // store.count调用</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>Getters</p><p>从 store 中的获取state 中状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">const</span> store =  <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="comment">//Getter 接受 state 作为其第一个参数</span></span><br><span class="line">    showNumber (state) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`返回的count数据为：<span class="subst">$&#123;state.count&#125;</span>`</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- 第一种方法可以直接调用插值表达式 --&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &#123;&#123;$store.getter.showNum&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &#123;&#123;showNum&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">// vue2</span><br><span class="line">// 导入辅助函数  mapGetters</span><br><span class="line">import &#123;mapMutations&#125; from &#x27;vuex&#x27;</span><br><span class="line">app = new Vue(&#123;</span><br><span class="line">date(): &#123;</span><br><span class="line">return &#123;&#125;</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">// 方法二 直接将方法挂载到实例上，后续通过this.add()调用</span><br><span class="line">...mapGetters([&#x27;showNum&#x27;])</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// vue3</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- 第一种方法可以直接调用插值表达式 --&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &#123;&#123;store.getters.showNum&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">import &#123;useStore&#125; from &#x27;vuex&#x27;</span><br><span class="line">const store = useStore()</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>mutations</p><p>mutation 非常类似于事件，更改 Vuex 的 store 中的状态的唯一方法是提交 mutation，每个 mutation 都有一个字符串的事件类型 (type)和一个回调函数 (handler)</p><ul><li>只能通过mutation变更Store数据，不可以直接操作Store中的数据</li><li>通过这种方式虽然操作起来稍微繁琐一些，但是可以集中所有数据的变化，方便后期</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./store.js</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">add (state) &#123;</span><br><span class="line">      <span class="comment">// 变更状态</span></span><br><span class="line">      state.<span class="property">count</span>++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// vue2</span><br><span class="line">import &#123;mapState&#125; from &#x27;vuex&#x27;</span><br><span class="line">// 按需导入辅助函数 mapMutations </span><br><span class="line">import &#123;mapMutations&#125; from &#x27;vuex&#x27;</span><br><span class="line">app = new Vue(&#123;</span><br><span class="line">date(): &#123;</span><br><span class="line">return &#123;&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">// 方法二 直接将方法挂载到实例上，后续通过this.add()调用</span><br><span class="line">// 通过刚才导入的mapMutations函数，将需要的mutations函数，映射为当前组件的methods方法</span><br><span class="line">...mapMutations([&#x27;add&#x27;]),</span><br><span class="line">    btnHandle(num)&#123;</span><br><span class="line">            this.add(num)</span><br><span class="line">        &#125;</span><br><span class="line">    // 方法一   this.$store.commit(&#x27;add&#x27;) 调用</span><br><span class="line">    hendel()&#123;</span><br><span class="line">    //触发mutations</span><br><span class="line">    this.$store.commit(&#x27;add&#x27;)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//vue3</span><br><span class="line">import &#123;useStore&#125; from &#x27;vuex&#x27;</span><br><span class="line">const store = useStore()</span><br><span class="line">// 触发mutations的add()</span><br><span class="line">const handle = ()=&gt;&#123;</span><br><span class="line">    store.commit(&#x27;add&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>Mutations 传参 ( 提交载荷)</p><p>向 <code>store.commit</code> 传入额外的参数，即 mutation 的载荷（payload)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./store.js</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">add (state, numberStep) &#123;</span><br><span class="line">      <span class="comment">// 变更状态</span></span><br><span class="line">      state.<span class="property">count</span> += numberStep</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">// vue2</span><br><span class="line">import &#123;mapState&#125; from &#x27;vuex&#x27;</span><br><span class="line">app = new Vue(&#123;</span><br><span class="line">date(): &#123;</span><br><span class="line">return &#123;&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">...mapMutations([&#x27;add&#x27;]),</span><br><span class="line">    btnHandle(num)&#123;</span><br><span class="line">            this.add(&#x27;add&#x27;,num)</span><br><span class="line">        &#125;,</span><br><span class="line">    hendel()&#123;</span><br><span class="line">    // 触发mutations</span><br><span class="line">    this.$store.commit(&#x27;add&#x27;,3)</span><br><span class="line">&#125;,          </span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">//vue3</span><br><span class="line">import &#123;useStore&#125; from &#x27;vuex&#x27;</span><br><span class="line">const store = useStore()</span><br><span class="line">// 触发mutations的add()</span><br><span class="line">const handle = ()=&gt;&#123;</span><br><span class="line">    store.commit(&#x27;add&#x27;,3)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>Actions</p><p>Actions 类似于 mutations，不同在于：</p><ul><li>Actions 提交的是 mutations，而不是直接变更状态。</li><li>Actions 可以包含任意异步操作。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./store.js</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        add (state, numStep) &#123;</span><br><span class="line">            <span class="comment">// 变更状态</span></span><br><span class="line">            state.<span class="property">count</span>++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 触发actions 异步任务时携带参数</span></span><br><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line">        <span class="title function_">addAsync</span>(<span class="params">context, numStep</span>) &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(()=&#123;</span><br><span class="line">                context.<span class="title function_">commit</span>(<span class="string">&#x27;add&#x27;</span>, numStep)</span><br><span class="line">            &#125;,<span class="number">1000</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">// vue2</span><br><span class="line">import &#123;mapState&#125; from &#x27;vuex&#x27;</span><br><span class="line">// 导入辅助函数 mapActions </span><br><span class="line">import &#123;mapActions&#125; from &#x27;vuex&#x27;</span><br><span class="line">    </span><br><span class="line">app = new Vue(&#123;</span><br><span class="line">date(): &#123;</span><br><span class="line">return &#123;&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">//第二种， 直接将方法挂载到实例上，this.addAsync(num)调用</span><br><span class="line">...mapActions([&#x27;addAsync&#x27;])</span><br><span class="line">btnHandle(num)&#123;</span><br><span class="line">            this.addAsync(num)</span><br><span class="line">        &#125;</span><br><span class="line">handle(num)&#123;</span><br><span class="line">    // 第一种方式，通过this.$store调用dispatch函数触发action</span><br><span class="line">    this.$store.dispatch(&#x27;addAsync&#x27;, num)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// vue3</span><br><span class="line">import &#123;useStore&#125; from &#x27;vuex&#x27;</span><br><span class="line">const store = useStore()</span><br><span class="line"></span><br><span class="line">hendle = (num)=&gt;&#123;</span><br><span class="line">store.dispatch(&#x27;addAsync&#x27;, num)    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>Module</p><p>Vuex 允许我们将 store 分割成<strong>模块（module）</strong>。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123; ... &#125;),</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123; ... &#125;),</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    <span class="attr">a</span>: moduleA,</span><br><span class="line">    <span class="attr">b</span>: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.<span class="property">state</span>.<span class="property">a</span> <span class="comment">// -&gt; moduleA 的状态</span></span><br><span class="line">store.<span class="property">state</span>.<span class="property">b</span> <span class="comment">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>Vuex刷新页面数据丢失，怎么做数据持久化</p><ul><li>使用pinia， 相比较vuex，更轻便，使用也更方便</li><li>存储在localStorage</li></ul></li></ul><h4 id="Pinia"><a href="#Pinia" class="headerlink" title="Pinia"></a>Pinia</h4><ul><li><p>pinia优缺点</p><ul><li><p>pinia 是轻量级状态管理工具，大小只有1KB.</p></li><li><p>pinia 刷新数据不会丢失</p></li><li><p>pinia 模块化设计，方便拆分。</p></li><li><p>pinia 没有 mutations，直接在 actions 中操作 state</p></li><li><p>pinia 支持多个 store。</p></li></ul></li><li><p>pinia 基本使用</p><ul><li>安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install pinia</span><br><span class="line">yarn add pinia</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果使用vue2， 还需要安装组合式api包 @vue/composition-api</span></span><br></pre></td></tr></table></figure><ul><li>引入</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue2   main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;createPinia, piniaVuePlugin&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">PiniaVuePlugin</span>)</span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span>=&gt;</span><span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">    pinia</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// vue3  main.js</span></span><br><span class="line"><span class="comment">// 引入 Vuex 和 createApp</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; provide &#125; <span class="keyword">from</span> <span class="string">&#x27;@vueuse/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;createPinia&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router/index.js&#x27;</span></span><br><span class="line"><span class="title class_">App</span>.<span class="title function_">createApp</span>().<span class="title function_">use</span>(router).<span class="title function_">use</span>(<span class="title function_">createPinia</span>()).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>创建pinia 实例</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./store.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="comment">//  第一个参数是容器id，唯一</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Store</span> = <span class="title function_">defineStore</span>(<span class="string">&#x27;main&#x27;</span>, &#123;</span><br><span class="line">    <span class="comment">// state 必须是箭头函数</span></span><br><span class="line">    <span class="comment">// 函数可以在服务端渲染避免交叉请求导致数据污染</span></span><br><span class="line">    <span class="comment">// 箭头函数是为了更好的ts类型推导</span></span><br><span class="line">    <span class="attr">state</span>:<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="attr">getters</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>使用pinia 实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// app.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &#123;&#123;store.count&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import &#123;storeToRefs&#125; from &#x27;pinia&#x27;</span><br><span class="line">import &#123; Store &#125; from &#x27;./store.js&#x27;</span><br><span class="line">    // 方法一</span><br><span class="line">    const store = Store()</span><br><span class="line">// 方法二 解构 ,不使用storeToRefs得到的数据不是响应式</span><br><span class="line">    const &#123;count&#125; = storeToRefs(store)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>状态更新</p><ul><li>actions</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./store.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Store</span> = <span class="title function_">defineStore</span>(<span class="string">&#x27;main&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">state</span>:<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="attr">getters</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        <span class="title function_">changeCount</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// app.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &#123;&#123;store.count&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import &#123;storeToRefs&#125; from &#x27;pinia&#x27;</span><br><span class="line">import &#123; Store &#125; from &#x27;./store.js&#x27;</span><br><span class="line">    const store = Store()</span><br><span class="line">    // 触发action直接修改state</span><br><span class="line">    store.changeCount()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>getters</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./store.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Store</span> = <span class="title function_">defineStore</span>(<span class="string">&#x27;main&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">state</span>:<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 有缓存功能，只会调用一次</span></span><br><span class="line"><span class="attr">getters</span>: &#123;</span><br><span class="line">        <span class="title function_">getCount</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`count: <span class="subst">$&#123;<span class="variable language_">this</span>.count&#125;</span>`</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        <span class="title function_">changeCount</span>(<span class="params"></span>)&#123;</span><br><span class="line">            state.<span class="property">count</span>++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &#123;&#123;store.getCount&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import &#123;storeToRefs&#125; from &#x27;pinia&#x27;</span><br><span class="line">import &#123; Store &#125; from &#x27;./store.js&#x27;</span><br><span class="line">    const store = Store()</span><br><span class="line">    // 触发action直接修改state</span><br><span class="line">    const countReturn = store.getCount()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Nuxt3框架-服务端渲染"><a href="#Nuxt3框架-服务端渲染" class="headerlink" title="Nuxt3框架 ( 服务端渲染)"></a>Nuxt3框架 ( 服务端渲染)</h3><h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h4><ol><li><p>什么是SSR</p><p>服务器渲染，指的是在服务器上完成网页渲染并将其他送给客户端的过程</p></li><li><p>为什么需要SSR</p><p>SSR发送给客户端的是包含了完整内容的网页，这样用户可以先看到网页内容，而不需要等待( 网页加载&gt;执行)js&gt;加载数据&gt;渲染网页), 从而提升用户体验；另一方面，因为网页内容已经包含了具体内容，对SEO也更加友好</p></li><li><p>SSR 优点 ， 加载速度快，页面切换时不会全部重新加载</p></li><li><p>SSR 一般构成</p><ul><li>服务器段应用程序</li><li>路由</li><li>模板引擎</li><li>数据获取</li><li>状态管理</li><li>客户端交互</li></ul></li><li><p>Nuxt3 的SSR组件</p><ul><li><code>&lt;suspense&gt;</code> 与异步组件</li><li><code>useAsyncData</code> 和 <code>useLazyAsycData</code></li><li><code>useFetch</code> 和 <code> useLazyFetch</code></li><li>用 <code>process.client</code> 和 <code>&lt;client-only&gt;</code> 来处理仅限浏览器内部使用的功能</li><li>用 <code>process.server</code> 来处理仅限服务器使用的功能</li></ul></li><li><p>Nuxt3 的渲染规则与缓存处理</p><p>3中不同的渲染模式：</p><ul><li>SSR：默认，即在服务器端渲染之后再发给客户端</li><li>ISR：部署后，渲染之后即保留缓存至下次渲染</li><li>SWR：保留缓存，并在指定时间后校验缓存</li><li>prerender：部署时生成静态页面</li></ul></li><li><p>鉴别用户身份</p><p>​传统SPA，所有请求都是后请求吗，这些请求，可以认为完全由开发者控制。</p><p>​Nuxt，因为SSR的存在，请求会被分成两类，页面渲染类和数据交互类。在网络环境里，存在大量缓存节点。如果将用户相关数据渲染成html，缓存到CDN里，会造成数据安全隐患。所以Nuxt在SSR机器内部发起请求时，不会携带cookie。用户主动发起请求，才会携带cookie</p></li></ol><p><img src="/2024/08/08/js+vue/Users\发发发宝贝\AppData\Roaming\Typora\typora-user-images\image-20240620180453798.png" alt="image-20240620180453798"></p><p><img src="/2024/08/08/js+vue/Users\发发发宝贝\AppData\Roaming\Typora\typora-user-images\image-20240620181622648.png" alt="image-20240620181622648"></p><p><img src="/2024/08/08/js+vue/Users\发发发宝贝\AppData\Roaming\Typora\typora-user-images\image-20240620183219434.png" alt="image-20240620183219434"></p><h4 id="框架安装"><a href="#框架安装" class="headerlink" title="框架安装"></a>框架安装</h4><ol><li><p>安装命令 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-nuxt-app &lt;项目名&gt;     ||       yarn create-nuxt-app &lt;项目名&gt;</span><br></pre></td></tr></table></figure><p>选了SSR渲染模式，运行时会执行两个server，因为是SSR在服务器返回渲染好的html</p></li></ol><h4 id="基本路由-Nuxt-框架的路由可以根据文件自动生成"><a href="#基本路由-Nuxt-框架的路由可以根据文件自动生成" class="headerlink" title="基本路由 (Nuxt 框架的路由可以根据文件自动生成)"></a>基本路由 (Nuxt 框架的路由可以根据文件自动生成)</h4><ol><li>项目根目录</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// app.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;h1&gt;项目根组件&lt;/h1&gt;</span><br><span class="line">        &lt;nuxt-page /&gt;    &lt;!-- 挖个洞，留个显示区域，用于显示路由组件内容 --&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>路由组件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 创建 /pages/about.vue  - 对应路由地址为 /about - 需要重启</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h1&gt;</span><br><span class="line">        Nuxt框架</span><br><span class="line">    &lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>创建带目录的路由组件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 创建 /pages/users/createEdit.vue   - 对应地址为 /user/createEdit</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h1&gt;</span><br><span class="line">        Nuxt框架</span><br><span class="line">    &lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li>默认路由组件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 创建 /pages/index.vue   - 对应地址为 /</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h1&gt;</span><br><span class="line">        Nuxt框架</span><br><span class="line">    &lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li>路由导航跟传参</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 路由跳转     使用原生a标签会导致刷新</span><br><span class="line">// app.vue</span><br><span class="line">&lt;templage&gt;</span><br><span class="line">&lt;h2&gt;APP&lt;/h2&gt;</span><br><span class="line">    &lt;nuxt-lick to=&quot;/home&quot;&gt;首页&lt;/nuxt-lick&gt;</span><br><span class="line">    &lt;nuxt-lick to=&quot;/list&quot;&gt;列表&lt;/nuxt-lick&gt;</span><br><span class="line">    &lt;nuxt-lick to=&quot;/about&quot;&gt;关于&lt;/nuxt-lick&gt;</span><br><span class="line">    &lt;nuxt-page /&gt;</span><br><span class="line">&lt;/templage&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 路由传参</span><br><span class="line">/**</span><br><span class="line">创建 ./course/[id].vue   - 对应地址为 /course/:id</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        获取路由参数:&#123;&#123;route.params.id&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const route = useRoute()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="6"><li>自定义路由</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /app/router.options.ts</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">RouterConfig</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nuxt/schema&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &lt;<span class="title class_">RouterConfig</span>&gt; &#123;</span><br><span class="line">    <span class="attr">routes</span>: <span class="function">(<span class="params">_routes</span>) =&gt;</span> [</span><br><span class="line">        <span class="comment">// 这里将原路由添加</span></span><br><span class="line">        ..._routes,</span><br><span class="line">        <span class="comment">// 在添加自己想添加的路由</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;~/page/home.vue&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h4><p>​当在components下创建的vue会被当做全局组件，可以直接调用，其他用法与vue类似</p><p>​如果在components下创建xxx.vue ; 则直接使用 <xxx></xxx></p><p>​如果在components下创建 user&#x2F;userList.vue ; 则直接使用 <user-userList>或<UserUserList></UserUserList></user-userList></p><h4 id="布局处理"><a href="#布局处理" class="headerlink" title="布局处理"></a>布局处理</h4><ul><li>可以使用<NuxtPage></NuxtPage></li><li>可以去掉app.vue , 创建 &#x2F;layouts&#x2F;default.vue 路由内容使用 <slot></slot></li><li>如果要想使用app.vue ，又要layout生效。可以再app.vue中使用 <NuxtLayout></NuxtLayout></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// app.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;NuxtLayout :name=&#x27;layout&#x27;&gt;</span><br><span class="line">    &lt;NuxtPage /&gt;</span><br><span class="line">    &lt;/NuxtLayout&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h4 id="SEO配置"><a href="#SEO配置" class="headerlink" title="SEO配置"></a>SEO配置</h4><ol><li>在html中加入mate标签信息 (这个方式不允许使用响应式数据)</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// nuxt.config.ts</span></span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtConfig</span>(&#123;</span><br><span class="line">     <span class="attr">app</span>: &#123;</span><br><span class="line">         <span class="attr">head</span>:&#123;</span><br><span class="line">            <span class="comment">// 默认值</span></span><br><span class="line">           <span class="attr">charset</span>: <span class="string">&#x27;utf-16&#x27;</span>,</span><br><span class="line">           <span class="attr">viewport</span>: <span class="string">&#x27;width=500, initial-scale=1&#x27;</span>,</span><br><span class="line">           <span class="attr">title</span>: <span class="string">&quot;标题&quot;</span>,</span><br><span class="line">             <span class="comment">//html中加入mate标签</span></span><br><span class="line">           <span class="attr">meta</span>: [</span><br><span class="line">             &#123;<span class="attr">name</span>:<span class="string">&#x27;description&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;My amazing site&#x27;</span>&#125;  </span><br><span class="line">           ],</span><br><span class="line">           <span class="attr">script</span>: [],</span><br><span class="line">           <span class="attr">link</span>: [],</span><br><span class="line">           <span class="attr">style</span>: [],</span><br><span class="line">           <span class="attr">noscript</span>: [],</span><br><span class="line">         &#125;,</span><br><span class="line">     &#125;,</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li>另一种方法时在app.vue 标签中使用useHead() 参数是一个对象, 也就是上面nuxt.config.ts 中的app.head的属性内容 (可以使用响应式数据)</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// app.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">userHead(&#123;</span><br><span class="line">     // 默认值</span><br><span class="line">    charset: &#x27;utf-16&#x27;,</span><br><span class="line">    viewport: &#x27;width=500, initial-scale=1&#x27;,</span><br><span class="line">    title: &quot;标题&quot;,</span><br><span class="line">    //html中加入mate标签</span><br><span class="line">    meta: [</span><br><span class="line">        &#123;name:&#x27;description&#x27;, content: &#x27;My amazing site&#x27;&#125;  </span><br><span class="line">    ],</span><br><span class="line">    // 第二个参数, 默认为false，如果为true 则会将script标签放在body最底部</span><br><span class="line">    script: [&#123;&#125;,body:true], </span><br><span class="line">    link: [],</span><br><span class="line">    style: [],</span><br><span class="line">    noscript: [],</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>第三种方法可以在 <template> 中使用 ,首字母需要大写，可以使用响应式数据</template></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// app.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;Head&gt;</span><br><span class="line">        &lt;Title&gt;&#123;&#123;title&#125;&#125;&lt;/Title&gt;    </span><br><span class="line">    &lt;/Head&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h4 id="静态资源缓存"><a href="#静态资源缓存" class="headerlink" title="静态资源缓存"></a>静态资源缓存</h4><p>​public&#x2F; 目录相当于服务器的根目录  路径：&#x2F;</p><p>​assets&#x2F;   css 图片等路径：~&#x2F;assets&#x2F;</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// nuxt.config.ts</span></span><br><span class="line"><span class="comment">// css 全局样式导入 配置</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtConfig</span>(&#123;</span><br><span class="line">    <span class="attr">vute</span>:&#123;</span><br><span class="line">        <span class="attr">css</span>:&#123;</span><br><span class="line">            <span class="attr">preprocessorOptions</span>: &#123;</span><br><span class="line">                <span class="attr">scss</span>:&#123;</span><br><span class="line">                    <span class="attr">additionalData</span>: <span class="string">&#x27;@use &quot;@assets/_colors.scss&quot; as *;&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="配置与访问"><a href="#配置与访问" class="headerlink" title="配置与访问"></a>配置与访问</h4><ol><li>nuxt.config.ts</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// nuxt.config.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtConfig</span>(&#123;</span><br><span class="line">    <span class="attr">runtimeConfig</span>: &#123;</span><br><span class="line">        <span class="comment">// 这个只能在服务器端使用的值，客户端会显示undefined</span></span><br><span class="line">        <span class="attr">userNumber</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="comment">// public 两端都能访问</span></span><br><span class="line">        <span class="attr">public</span>: &#123;</span><br><span class="line">            <span class="attr">apiBase</span>:<span class="string">&quot;/api&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// .env 设置了 会覆盖 nuxt的runtimeConfig的变量</span><br><span class="line">//  根目录创建 .env 文件</span><br><span class="line">NUXT_USER_NUMBER = 700</span><br><span class="line">NUXT_PUBLIC_API_BASE = &quot;/api&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    // 获取runtimeConfig对象</span><br><span class="line">    const runtimeConfig = useRuntimeConfig()</span><br><span class="line">    consloe.log(runtimeConfig.userNumber)</span><br><span class="line">    consloe.log(runtimeConfig.public.apiBase)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>app.config.ts    与nuxt.config.ts 类似</li></ol><h4 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h4><ol><li><p>axios (与vue类似，可以封账使用)</p></li><li><p>内置函数 useFetch()  返回一个promise</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const &#123;data:users, pending, refresh, error &#125; = awiat useFetch(&#x27;/post&#x27;,&#123;</span><br><span class="line">        method: &#x27;GET&#x27;,</span><br><span class="line">        baseURL: &quot;/api/user&quot;,</span><br><span class="line">    &#125;).then(res =&gt; &#123;</span><br><span class="line">        console.log(res)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">  /**</span><br><span class="line">  返回值</span><br><span class="line">  data: 请求结果</span><br><span class="line">  pending： 一个布尔值，指示是否任在获取数据</span><br><span class="line">  refresh：可用于刷新处理程序函数返回的数据函数</span><br><span class="line">  error：如果数据获取失败，则返回错误对象</span><br><span class="line">  */</span><br><span class="line">   /**</span><br><span class="line">   refresh() 调用会自动取消之前请求，继续发送新请求</span><br><span class="line">   */</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="/2024/08/08/js+vue/Users\发发发宝贝\AppData\Roaming\Typora\typora-user-images\image-20240621142910631.png" alt="image-20240621142910631"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">// 使用useAsyncData()</span><br><span class="line"></span><br><span class="line">useAsyncData(&#x27;获取用户列表&#x27;, ()=&gt;$fetch(&#x27;/post&#x27;, &#123;</span><br><span class="line">method: &#x27;GET&#x27;,</span><br><span class="line">    baseURL: &quot;/api/user&quot;,</span><br><span class="line">&#125;)).then(res =&gt; &#123;</span><br><span class="line">        console.log(res)</span><br><span class="line">&#125;)</span><br><span class="line">    </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>userFetch()  useAsyncData()    和  useLazyFetch()   useLazyAsyncData()  区别</p><p>加了lazy的在请求发送时，首先更新页面，数据为空，获取到数据后再显示数据 (只有在网速慢时能体验到)</p><p>没有加lazy的请求方法， 会等待数据加载完后，再整体更新页面</p></li></ul></li><li><p>请求拦截器 和 响应拦截器</p><p>onRequest()       onResponse()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">   &lt;script setup&gt;</span><br><span class="line">       const &#123; data &#125; = await useLazyFetch(&#x27;/post&#x27;,&#123;</span><br><span class="line">           method: &#x27;GET&#x27;,</span><br><span class="line">           params: &#123; id:3 &#125;,</span><br><span class="line">       baseURL: &quot;/api/user&quot;,</span><br><span class="line">           onRequest(&#123;request, options&#125;)&#123;console.log(&quot;请求拦截器&quot;)&#125;,</span><br><span class="line">           onResponse(&#123;request, options, response&#125;)&#123;console.log(&quot;响应拦截器&quot;)&#125;</span><br><span class="line">       &#125;)</span><br><span class="line">   &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">#### cookie 和 token 处理</span><br><span class="line"></span><br><span class="line">​SSR服务器端渲染没法拿到浏览器端的cookie存储，所以需要获取请求中的cookie，然后带到下一个请求的请求头中</span><br><span class="line"></span><br><span class="line">~~~ vue</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const headers = useRequestHeaders([&#x27;cookie&#x27;])</span><br><span class="line">    const &#123;data&#125; = await useFetch(&#x27;/api/user&#x27;,&#123; headers &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h4 id="服务端接口"><a href="#服务端接口" class="headerlink" title="服务端接口"></a>服务端接口</h4><ol><li><p>接口编写</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建文件 server/api/hello.js    响应接口路径： /api/hello</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineEventHandler</span>(<span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">code</span>: <span class="number">10001</span>,</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;hello work&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建文件 server/routes/hello.js    响应接口路径：/hello</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineEventHandler</span>(<span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">code</span>: <span class="number">10001</span>,</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;hello work&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>路由参数设计</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建文件 server/api/hello/[name].ts    响应接口路径：/api/hello/userName</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineEventHandler</span>(<span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取参数 </span></span><br><span class="line">    <span class="keyword">const</span> userName = event.<span class="property">context</span>.<span class="property">params</span>.<span class="property">name</span></span><br><span class="line">    <span class="keyword">return</span> userName</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建文件 server/api/user.ts     响应接口路劲： /api/user?name=123&amp;age=321</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineEventHandler</span>(<span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取参数 </span></span><br><span class="line">    <span class="keyword">const</span> query = <span class="title function_">getQuery</span>(event)</span><br><span class="line">    <span class="keyword">return</span> query</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>路由请求方式设定</p><p>通过 .get   .post   .put    .delete</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GET 创建文件 server/api/user.get.ts   GET 方式接口请求</span></span><br><span class="line"><span class="comment">// POST 创建文件 server/api/user.post.ts  POST 方式接口请求</span></span><br></pre></td></tr></table></figure></li><li><p>处理带有body的post请求</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建文件  server/api/user.post.ts   响应接口： /api/user    请求数据在请求体</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineEventHandler</span>(<span class="keyword">async</span> (event)=&gt;&#123;</span><br><span class="line"><span class="keyword">const</span> body = <span class="keyword">await</span> <span class="title function_">readBody</span>(event)</span><br><span class="line">    <span class="keyword">return</span> body</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>[…].ts 路由文件</p></li></ol>   <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建文件  server/[...].ts      相应接口：当访问不存在接口时，就会响应该接口</span></span><br></pre></td></tr></table></figure><ol start="6"><li><p>获取运行时的配置 和 cookie</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineEventHandler</span>(<span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">const</span> config = <span class="title function_">userRuntimeConfig</span>()</span><br><span class="line">    <span class="keyword">const</span> cookies = <span class="title function_">parseCookies</span>(event)</span><br><span class="line">    <span class="keyword">return</span> &#123; config, cookie &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>另一种写法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;h3&#x27;</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>()</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">()=&gt;</span> <span class="string">&#x27;hello word&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li><li><p>设置数据库存储</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtConfig</span>(&#123;</span><br><span class="line">    <span class="attr">nitro</span>: &#123;</span><br><span class="line">        <span class="attr">storage</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;redis&#x27;</span>:&#123;</span><br><span class="line">                <span class="attr">driver</span>: <span class="string">&#x27;redis&#x27;</span>,</span><br><span class="line">                <span class="attr">port</span>: <span class="number">6379</span>,</span><br><span class="line">                <span class="attr">host</span>:<span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">                <span class="attr">username</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">                <span class="attr">password</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">                <span class="attr">db</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">tls</span>: &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// post请求保存到redis数据库</span></span><br><span class="line"><span class="comment">// 创建 server/api/test.post.ts      </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineEventHandler</span>(<span class="title function_">async</span>(event)=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> body = <span class="keyword">await</span> <span class="title function_">readBody</span>(event)</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">userStorage</span>().<span class="title function_">setItem</span>(<span class="string">&#x27;redis:test&#x27;</span>, body)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Data is set&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 server/api/test.get.ts</span></span><br><span class="line"><span class="comment">// get 请求并保存数据到redis</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineEventHandler</span>((<span class="title function_">async</span>(event)=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">useStorage</span>().<span class="title function_">getItem</span>(<span class="string">&#x27;redis:test&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure></li></ol><h4 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h4><h4 id="构建-部署"><a href="#构建-部署" class="headerlink" title="构建-部署"></a>构建-部署</h4><ol><li><p>使用PM2 </p><p>PM2可以用于生产环境的Nodejs的进程管理，并且它内置一个负载均衡</p><p>它不仅可以保证服务不会中断一直在线，并且提供0秒reload功能</p><p>安装：  npm i pm2 -g</p><p>创建并编辑：ecosystem.config.js</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 打包后的 .out  文件夹下创建 ecosystem.config.js</span></span><br><span class="line"> </span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="string">&quot;app&quot;</span>: [&#123;</span><br><span class="line">        <span class="comment">// 入口文件</span></span><br><span class="line">        <span class="attr">script</span>: <span class="string">&quot;./server/index.js&quot;</span>,</span><br><span class="line">        <span class="comment">// args 等同于 node ./server/index.js -p 3000</span></span><br><span class="line">        <span class="attr">args</span>: [<span class="string">&quot;-p&quot;</span>,<span class="string">&quot;3000&quot;</span>],</span><br><span class="line">        <span class="comment">// node_args    运行模式</span></span><br><span class="line">        <span class="attr">node_args</span>: <span class="string">&quot;--harmony&quot;</span>,</span><br><span class="line">        <span class="attr">merge_logs</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">cwd</span>: <span class="string">&quot;./&quot;</span>,</span><br><span class="line">        <span class="attr">log_file</span>: <span class="string">&quot;./log/combined.outeer.log&quot;</span>,</span><br><span class="line">        <span class="attr">out_file</span>: <span class="string">&quot;./log/out.log&quot;</span>,</span><br><span class="line">        <span class="attr">error_file</span>: <span class="string">&quot;./log/err.log&quot;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;my_project&quot;</span>,</span><br><span class="line">        <span class="attr">exec_mode</span>: <span class="string">&quot;cluster&quot;</span>,</span><br><span class="line">        <span class="attr">instances</span>: <span class="string">&#x27;max&#x27;</span>,</span><br><span class="line">        <span class="attr">env</span>:&#123;</span><br><span class="line">            <span class="comment">// node 的env 参数，可以通过process.env.xxx 获取</span></span><br><span class="line">            <span class="attr">NIDE_ENV</span>: <span class="string">&quot;production&quot;</span>,</span><br><span class="line">            <span class="attr">PORT</span>: <span class="string">&quot;8080&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>开启pm2管理     pm2 start</li><li>查看开启项目     pm2 ls</li><li>停止项目          pm2 stop <id></id></li><li>重新启动       pm2 restart <id></id></li><li>删除项目       pm2 delete <id></id></li></ul><h4 id="路由渲染策略"><a href="#路由渲染策略" class="headerlink" title="路由渲染策略"></a>路由渲染策略</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtConfig</span>(&#123;</span><br><span class="line">    <span class="comment">// 路由渲染策略</span></span><br><span class="line">    <span class="attr">routeRules</span>: &#123;</span><br><span class="line">        <span class="comment">// 具体内容看官方文档</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 预渲染  SSG</span></span><br><span class="line">    <span class="attr">nitro</span>: &#123;</span><br><span class="line">    <span class="attr">prerender</span>: &#123;</span><br><span class="line">            <span class="attr">routers</span>:[]</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><ul><li><p>服务端生命周期</p><ul><li><p>nuxtServerInit(store, context) {}</p><p>store: vuex上下文</p><p>context：nuxt上下文</p></li><li><p>middlware(store, route, redirect, params, query, req, res){}                          导航守卫验证</p></li><li><p>validate( {params,query} )</p></li></ul></li></ul><h4 id="Vue3-—-Nuxt3-SPA-SSR"><a href="#Vue3-—-Nuxt3-SPA-SSR" class="headerlink" title="Vue3 —&gt; Nuxt3 (SPA-&gt;SSR)"></a>Vue3 —&gt; Nuxt3 (SPA-&gt;SSR)</h4><p>Pug 模版引擎</p><h3 id="TS项目经验-G-代码库-前端-web大前端练习库-Typescript"><a href="#TS项目经验-G-代码库-前端-web大前端练习库-Typescript" class="headerlink" title="TS项目经验 (G:\代码库\前端\web大前端练习库\Typescript)"></a>TS项目经验 (G:\代码库\前端\web大前端练习库\Typescript)</h3><ul><li><p>用来做什么</p><p>ts最大意义就是，避免你写错，漏写，能基本上屏蔽你的低级错误</p><ol><li>编写一些共用方法和全局配置对象，用于提醒使用者别传错或者参数值</li><li>编写组件的时候用于提示使用者有没有写错props</li><li>一些第三方库如果是ts编写，可以检测到你有没有调用错方法，写错配置</li></ol></li><li><p>常见问题</p><ol><li>现阶段类型不匹配，ts报错   &#x2F;&#x2F; 断言</li><li>调用ts编写的第三方库时，需要定义某个东西为第三方库类型     &#x2F;&#x2F; 如果第三方定义了类型，可以可以从第三方库中传入类型 ; 一般是在pageage.json ，type参数中</li><li>一些常见的dom类报错  &#x2F;&#x2F;断言</li></ol></li></ul><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><h4 id="盒子模型的理解"><a href="#盒子模型的理解" class="headerlink" title="盒子模型的理解"></a>盒子模型的理解</h4><p>浏览器的渲染引擎会根据CSS 基础框盒模型，将所有元素表示为一个个矩形的盒子，盒子由四个部分组成：<code>content</code>、<code>padding</code>、<code>border</code>、<code>margin</code></p><p>CSS 中的 box-sizing 属性定义了引擎应该如何计算一个元素的总宽度和总高度</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-sizing</span>: content-box|border-box|inherit:</span><br></pre></td></tr></table></figure><ul><li>content-box 默认值，元素的 width&#x2F;height 不包含padding，border，与标准盒子模型表现一致</li><li>border-box 元素的 width&#x2F;height 包含 padding，border，与怪异盒子模型表现一致</li><li>inherit 指定 box-sizing 属性的值，应该从父元素继承</li></ul><h4 id="css选择器有哪些？优先级？哪些属性可以继承？"><a href="#css选择器有哪些？优先级？哪些属性可以继承？" class="headerlink" title="css选择器有哪些？优先级？哪些属性可以继承？"></a>css选择器有哪些？优先级？哪些属性可以继承？</h4><h5 id="一、常用："><a href="#一、常用：" class="headerlink" title="一、常用："></a>一、常用：</h5><ul><li><p>id选择器（#box），选择id为box的元素</p></li><li><p>类选择器（.one），选择类名为one的所有元素</p></li><li><p>标签选择器（div），选择标签为div的所有元素</p></li><li><p>后代选择器（#box div），选择id为box元素内部所有的div元素</p></li><li><p>子选择器（.one&gt;one_1），选择父元素为.one的所有.one_1的元素</p></li><li><p>相邻同胞选择器（.one+.two），选择紧接在.one之后的所有.two元素</p></li><li><p>群组选择器（div,p），选择div、p的所有元素</p></li><li><p>伪类选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:link</span> ：选择未被访问的链接</span><br><span class="line"><span class="selector-pseudo">:visited</span>：选取已被访问的链接</span><br><span class="line"><span class="selector-pseudo">:active</span>：选择活动链接</span><br><span class="line"><span class="selector-pseudo">:hover</span> ：鼠标指针浮动在上面的元素</span><br><span class="line"><span class="selector-pseudo">:focus</span> ：选择具有焦点的</span><br><span class="line"><span class="selector-pseudo">:first</span>-child：父元素的首个子元素</span><br></pre></td></tr></table></figure></li><li><p>伪元素选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:first</span>-letter ：用于选取指定选择器的首字母</span><br><span class="line"><span class="selector-pseudo">:first</span>-line ：选取指定选择器的首行</span><br><span class="line"><span class="selector-pseudo">:before</span> : 选择器在被选元素的内容前面插入内容</span><br><span class="line">:after : 选择器在被选元素的内容后面插入内容</span><br></pre></td></tr></table></figure></li><li><p>属性选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[attribute]</span> 选择带有attribute属性的元素</span><br><span class="line"><span class="selector-attr">[attribute=value]</span> 选择所有使用attribute=value的元素</span><br><span class="line"><span class="selector-attr">[attribute~=value]</span> 选择attribute属性包含value的元素</span><br><span class="line"><span class="selector-attr">[attribute|=value]</span>：选择attribute属性以value开头的元素</span><br></pre></td></tr></table></figure></li></ul><p><code>CSS3</code>中新增的选择器有如下：</p><ul><li><p>层次选择器（p~ul），选择前面有p元素的每个ul元素</p></li><li><p>伪类选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:first</span>-of-type 表示一组同级元素中其类型的第一个元素</span><br><span class="line"><span class="selector-pseudo">:last-of-type</span> 表示一组同级元素中其类型的最后一个元素</span><br><span class="line"><span class="selector-pseudo">:only-of-type</span> 表示没有同类型兄弟元素的元素</span><br><span class="line"><span class="selector-pseudo">:only-child</span> 表示没有任何兄弟的元素</span><br><span class="line"><span class="selector-pseudo">:nth-child</span>(n) 根据元素在一组同级中的位置匹配元素</span><br><span class="line"><span class="selector-pseudo">:nth-last-of-type</span>(n) 匹配给定类型的元素，基于它们在一组兄弟元素中的位置，从末尾开始计数</span><br><span class="line"><span class="selector-pseudo">:last-child</span> 表示一组兄弟元素中的最后一个元素</span><br><span class="line"><span class="selector-pseudo">:root</span> 设置<span class="selector-tag">HTML</span>文档</span><br><span class="line"><span class="selector-pseudo">:empty</span> 指定空的元素</span><br><span class="line"><span class="selector-pseudo">:enabled</span> 选择可用元素</span><br><span class="line"><span class="selector-pseudo">:disabled</span> 选择被禁用元素</span><br><span class="line"><span class="selector-pseudo">:checked</span> 选择选中的元素</span><br><span class="line"><span class="selector-pseudo">:not</span>(selector) 选择与 &lt;selector&gt; 不匹配的所有元素</span><br></pre></td></tr></table></figure></li><li><p>属性选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[attribute*=value]</span>：选择attribute属性值包含value的所有元素</span><br><span class="line"><span class="selector-attr">[attribute^=value]</span>：选择attribute属性开头为value的所有元素</span><br><span class="line"><span class="selector-attr">[attribute$=value]</span>：选择attribute属性结尾为value的所有元素</span><br></pre></td></tr></table></figure></li></ul><h5 id="二、优先级"><a href="#二、优先级" class="headerlink" title="二、优先级"></a>二、优先级</h5><p>内联 &gt; ID选择器 &gt; 类选择器 &gt; 标签选择器</p><p>经过上面的优先级计算规则，我们知道内联样式的优先级最高，如果外部样式需要覆盖内联样式，就需要使用<code>!important</code></p><h5 id="三、继承属性"><a href="#三、继承属性" class="headerlink" title="三、继承属性"></a>三、继承属性</h5><ul><li><p>字体系列属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font</span>:组合字体</span><br><span class="line">font-family:规定元素的字体系列</span><br><span class="line">font-weight:设置字体的粗细</span><br><span class="line">font-size:设置字体的尺寸</span><br><span class="line">font-style:定义字体的风格</span><br><span class="line">font-variant:偏大或偏小的字体</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>文本系列属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-indent</span>：文本缩进</span><br><span class="line"><span class="attribute">text-align</span>：文本水平对刘</span><br><span class="line"><span class="attribute">line-height</span>：行高</span><br><span class="line"><span class="attribute">word-spacing</span>：增加或减少单词间的空白</span><br><span class="line"><span class="attribute">letter-spacing</span>：增加或减少字符间的空白</span><br><span class="line"><span class="attribute">text-transform</span>：控制文本大小写</span><br><span class="line"><span class="attribute">direction</span>：规定文本的书写方向</span><br><span class="line"><span class="attribute">color</span>：文本颜色</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>元素可见性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">visibility</span></span><br></pre></td></tr></table></figure></li><li><p>表格布局属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">caption-side</span>：定位表格标题位置</span><br><span class="line"><span class="attribute">border-collapse</span>：合并表格边框</span><br><span class="line"><span class="attribute">border-spacing</span>：设置相邻单元格的边框间的距离</span><br><span class="line"><span class="attribute">empty-cells</span>：单元格的边框的出现与消失</span><br><span class="line"><span class="attribute">table-layout</span>：表格的宽度由什么决定</span><br></pre></td></tr></table></figure></li><li><p>列表属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">list-style-type</span>：文字前面的小点点样式</span><br><span class="line"><span class="attribute">list-style-position</span>：小点点位置</span><br><span class="line"><span class="attribute">list-style</span>：以上的属性可通过这属性集合</span><br></pre></td></tr></table></figure></li><li><p>引用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">quotes</span>：设置嵌套引用的引号类型</span><br></pre></td></tr></table></figure></li><li><p>光标属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cursor</span>：箭头可以变成需要的形状</span><br></pre></td></tr></table></figure></li></ul><p>继承中比较特殊的几点：</p><ul><li>a 标签的字体颜色不能被继承</li><li>h1-h6标签字体的大下也是不能被继承的</li></ul><h5 id="四、无继承的属性"><a href="#四、无继承的属性" class="headerlink" title="四、无继承的属性"></a>四、无继承的属性</h5><ul><li>display</li><li>文本属性：vertical-align、text-decoration</li><li>盒子模型的属性：宽度、高度、内外边距、边框等</li><li>背景属性：背景图片、颜色、位置等</li><li>定位属性：浮动、清除浮动、定位position等</li><li>生成内容属性：content、counter-reset、counter-increment</li><li>轮廓样式属性：outline-style、outline-width、outline-color、outline</li><li>页面样式属性：size、page-break-before、page-break-after</li></ul><h4 id="说说em-px-rem-vh-vw区别"><a href="#说说em-px-rem-vh-vw区别" class="headerlink" title="说说em&#x2F;px&#x2F;rem&#x2F;vh&#x2F;vw区别"></a>说说em&#x2F;px&#x2F;rem&#x2F;vh&#x2F;vw区别</h4><h5 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h5><p>传统的项目开发中，我们只会用到<code>px</code>、<code>%</code>、<code>em</code>这几个单位，它可以适用于大部分的项目开发，且拥有比较良好的兼容性</p><p>从<code>CSS3</code>开始，浏览器对计量单位的支持又提升到了另外一个境界，新增了<code>rem</code>、<code>vh</code>、<code>vw</code>、<code>vm</code>等一些新的计量单位</p><h5 id="二、单位"><a href="#二、单位" class="headerlink" title="二、单位"></a>二、单位</h5><table><thead><tr><th>CSS单位</th><th></th></tr></thead><tbody><tr><td>相对长度单位</td><td>em、ex、ch、rem、vw、vh、vmin、vmax、%</td></tr><tr><td>绝对长度单位</td><td>cm、mm、in、px、pt、pc</td></tr></tbody></table><ul><li><p>px</p><p><code>px</code>为绝对单位，在于<code>px</code>的大小和元素的其他属性无关</p></li><li><p>em</p><p>em是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸（<code>1em = 16px</code>）</p><ul><li>em 的值并不是固定的</li><li>em 会继承父级元素的字体大小</li><li>em 是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸</li><li>任意浏览器的默认字体高都是 16px</li></ul></li><li><p>rem</p></li></ul><p>  rem，相对单位，相对的只是HTML根元素<code>font-size</code>的值</p><p>  特点：</p><ul><li>rem单位可谓集相对大小和绝对大小的优点于一身</li><li>和em不同的是rem总是相对于根元素，而不像em一样使用级联的方式来计算尺寸</li></ul><ul><li>vh、vw</li></ul><p>  vw ，就是根据窗口的宽度，分成100等份，100vw就表示满宽，50vw就表示一半宽。（vw 始终是针对窗口的宽），同理，<code>vh</code>则为窗口的高度</p><ul><li>对于普通定位元素就是我们理解的父元素</li><li>对于position: absolute;的元素是相对于已定位的父元素</li><li>对于position: fixed;的元素是相对于 ViewPort（可视窗口）</li></ul><h5 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h5><p><strong>px</strong>：绝对单位，页面按精确像素展示</p><p><strong>em</strong>：相对单位，基准点为父节点字体的大小，如果自身定义了<code>font-size</code>按自身来计算，整个页面内<code>1em</code>不是一个固定的值</p><p><strong>rem</strong>：相对单位，可理解为<code>root em</code>, 相对根节点<code>html</code>的字体大小来计算</p><p><strong>vh、vw</strong>：主要用于页面视口大小布局，在页面布局上更加方便简单</p><h4 id="css中，有哪些方式可以隐藏页面元素？区别"><a href="#css中，有哪些方式可以隐藏页面元素？区别" class="headerlink" title="css中，有哪些方式可以隐藏页面元素？区别?"></a>css中，有哪些方式可以隐藏页面元素？区别?</h4><p><strong>通过<code>css</code>实现隐藏元素方法有如下：</strong></p><ul><li><p>display:none</p><p>特点：元素不可见，不占据空间，无法响应点击事件</p></li><li><p>visibility:hidden</p><p>特点：元素不可见，占据页面空间，无法响应点击事件</p></li><li><p>opacity:0</p><p>不会引发重排，一般情况下也会引发重绘</p><p>特点：改变元素透明度，元素不可见，占据页面空间，可以响应点击事件</p></li><li><p>设置height、width模型属性为0</p><p>如果元素内有子元素或内容，还应该设置其<code>overflow:hidden</code>来隐藏其子元素</p><p>特点：元素不可见，不占据页面空间，无法响应点击事件</p></li><li><p>position:absolute</p><p>将元素移出可视区域</p><p>特点：元素不可见，不影响页面布局</p></li><li><p>clip-path</p><p>通过裁剪的形式</p><p>特点：元素不可见，占据页面空间，无法响应点击事件</p></li></ul><p><strong>区别</strong></p><table><thead><tr><th align="left">display: none</th><th align="left">visibility: hidden</th><th>opacity: 0</th><th></th></tr></thead><tbody><tr><td align="left">页面中</td><td align="left">不存在</td><td>存在</td><td>存在</td></tr><tr><td align="left">重排</td><td align="left">会</td><td>不会</td><td>不会</td></tr><tr><td align="left">重绘</td><td align="left">会</td><td>会</td><td>不一定</td></tr><tr><td align="left">自身绑定事件</td><td align="left">不触发</td><td>不触发</td><td>可触发</td></tr><tr><td align="left">transition</td><td align="left">不支持</td><td>支持</td><td>支持</td></tr><tr><td align="left">子元素可复原</td><td align="left">不能</td><td>能</td><td>不能</td></tr><tr><td align="left">被遮挡的元素可触发事件</td><td align="left">能</td><td>能</td><td>不能</td></tr></tbody></table><h4 id="谈谈你对BFC的理解"><a href="#谈谈你对BFC的理解" class="headerlink" title="谈谈你对BFC的理解"></a>谈谈你对BFC的理解</h4><h5 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h5><p>​<code>BFC</code>目的是形成一个相对于外界完全独立的空间，让内部的子元素不会影响到外部的元素</p><h5 id="二、触发条件"><a href="#二、触发条件" class="headerlink" title="二、触发条件"></a>二、触发条件</h5><p>​触发<code>BFC</code>的条件包含不限于：</p><ul><li>根元素，即HTML元素</li><li>浮动元素：float值为left、right</li><li>overflow值不为 visible，为 auto、scroll、hidden</li><li>display的值为inline-block、inltable-cell、table-caption、table、inline-table、flex、inline-flex、grid、inline-grid</li><li>position的值为absolute或fixed</li></ul><h5 id="三、应用场景"><a href="#三、应用场景" class="headerlink" title="三、应用场景"></a>三、应用场景</h5><ul><li>防止margin重叠(塌陷)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#f55</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="number">#fcc</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Haha&lt;/p &gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hehe&lt;/p &gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>两个<code>p</code>元素之间的距离为<code>100px</code>，发生了<code>margin</code>重叠（塌陷），以最大的为准，如果第一个P的<code>margin</code>为80的话，两个P之间的距离还是100，以最大的为准。</p><p>前面讲到，同一个<code>BFC</code>的俩个相邻的盒子的<code>margin</code>会发生重叠</p><p>可以在<code>p</code>外面包裹一层容器，并触发这个容器生成一个<code>BFC</code>，那么两个<code>p</code>就不属于同一个<code>BFC</code>，则不会出现<code>margin</code>重叠</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow</span>: hidden;// 新的BFC</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#f55</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="number">#fcc</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Haha&lt;/p &gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hehe&lt;/p &gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>清除内部浮动</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.par</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#fcc</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#f66</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;par&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>而<code>BFC</code>在计算高度时，浮动元素也会参与，所以我们可以触发<code>.par</code>元素生成<code>BFC</code>，则内部浮动元素计算高度时候也会计算</p><ul><li>自适应多栏布局</li></ul><p>这里举个两栏的布局</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.aside</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="number">#f66</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.main</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="number">#fcc</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;aside&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>前面讲到，每个元素的左外边距与包含块的左边界相接触</p><p>因此，虽然<code>.aslide</code>为浮动元素，但是<code>main</code>的左边依然会与包含块的左边相接触</p><p>而<code>BFC</code>的区域不会与浮动盒子重叠</p><p>所以我们可以通过触发<code>main</code>生成<code>BFC</code>，以此适应两栏布局</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候，新的<code>BFC</code>不会与浮动的<code>.aside</code>元素重叠。因此会根据包含块的宽度，和<code>.aside</code>的宽度，自动变窄</p><h4 id="元素水平垂直居中的方法有哪些？如果元素不定宽高呢？"><a href="#元素水平垂直居中的方法有哪些？如果元素不定宽高呢？" class="headerlink" title="元素水平垂直居中的方法有哪些？如果元素不定宽高呢？"></a>元素水平垂直居中的方法有哪些？如果元素不定宽高呢？</h4><ul><li>居中元素（子元素）的宽高已知</li><li>居中元素宽高未知</li></ul><h5 id="一、实现方式"><a href="#一、实现方式" class="headerlink" title="一、实现方式"></a>一、实现方式</h5><p>实现元素水平垂直居中的方式：</p><ul><li><p>利用定位+margin:auto</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.father</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>:<span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#0a3b98</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.son</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="number">#f0a238</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">right</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">bottom</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>:auto;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>利用定位+margin:负值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: skyblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>:-<span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>:-<span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>利用定位+transform</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-class">.father</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">background</span>: skyblue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.son</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">background</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;father&quot;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;son&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>table布局</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: table-cell;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: skyblue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">vertical-align</span>: middle;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>flex布局</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: skyblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>grid网格布局</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>:center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: skyblue;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid red</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="如何实现两栏布局，右侧自适应？三栏布局中间自适应呢？"><a href="#如何实现两栏布局，右侧自适应？三栏布局中间自适应呢？" class="headerlink" title="如何实现两栏布局，右侧自适应？三栏布局中间自适应呢？"></a>如何实现两栏布局，右侧自适应？三栏布局中间自适应呢？</h4><ul><li>两栏布局<ul><li>实现思路也非常的简单：<ul><li>使用 float 左浮左边栏</li><li>右边模块使用 margin-left 撑出内容块做内容展示</li><li>为父级元素添加BFC，防止下方元素飞到上方内容</li></ul></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow</span>: hidden; 添加BFC</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: gray;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: <span class="number">210px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightgray;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>左边<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>右边<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用flex弹性布局</p><p>注意的是，<code>flex</code>容器的一个默认属性值:<code>align-items: stretch;</code></p><p>这个属性导致了列等高的效果。 为了让两个盒子高度自动，需要设置: <code>align-items: flex-start</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>左边<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>右边<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>三栏布局<ul><li>实现三栏布局中间自适应的布局方式有：<ul><li>两边使用 float，中间使用 margin</li><li>两边使用 absolute，中间使用 margin</li><li>两边使用 float 和负 margin</li><li>display: table 实现</li><li>flex实现</li><li>grid网格布局</li></ul></li></ul></li></ul><p>两边使用 float，中间使用 margin</p><p>原理如下：</p><ul><li>两边固定宽度，中间宽度自适应。</li><li>利用中间元素的margin值控制两边的间距</li><li>宽度小于左右部分宽度之和时，右侧部分会被挤下去</li></ul><p>这种实现方式存在缺陷：</p><ul><li>主体内容是最后加载的。</li><li>右边在主体内容之前，如果是响应式设计，不能简单的换行展示</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="number">#eee</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow</span>: hidden; &lt;!-- 生成BFC，计算高度时考虑浮动的元素 --&gt;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: coral;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: lightblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.middle</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: <span class="number">220px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: lightpink;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-right</span>: <span class="number">140px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>左侧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>右侧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;middle&quot;</span>&gt;</span>中间<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="说说flexbox（弹性盒布局模型）-以及适用场景？"><a href="#说说flexbox（弹性盒布局模型）-以及适用场景？" class="headerlink" title="说说flexbox（弹性盒布局模型）,以及适用场景？"></a>说说flexbox（弹性盒布局模型）,以及适用场景？</h4><h5 id="一、是什么-1"><a href="#一、是什么-1" class="headerlink" title="一、是什么"></a>一、是什么</h5><p><code>Flexible Box</code> 简称 <code>flex</code>，意为”弹性布局”，可以简便、完整、响应式地实现各种页面布局</p><p>采用Flex布局的元素，称为<code>flex</code>容器<code>container</code></p><p>它的所有子元素自动成为容器成员，称为<code>flex</code>项目<code>item</code></p><h5 id="二、属性"><a href="#二、属性" class="headerlink" title="二、属性"></a>二、属性</h5><ul><li><p>flex-direction</p><p>决定主轴的方向(即项目的排列方向)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;   </span><br><span class="line">    <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;  </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">row（默认值）：主轴为水平方向，起点在左端</span></span><br><span class="line"><span class="comment">row-reverse：主轴为水平方向，起点在右端</span></span><br><span class="line"><span class="comment">column：主轴为垂直方向，起点在上沿。</span></span><br><span class="line"><span class="comment">column-reverse：主轴为垂直方向，起点在下沿</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>flex-wrap</p><p>弹性元素永远沿主轴排列，那么如果主轴排不下，通过<code>flex-wrap</code>决定容器内项目是否可换行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;  </span><br><span class="line">    <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">nowrap（默认值）：不换行</span></span><br><span class="line"><span class="comment">wrap：换行，第一行在下方</span></span><br><span class="line"><span class="comment">wrap-reverse：换行，第一行在上方</span></span><br><span class="line"><span class="comment">默认情况是不换行，但这里也不会任由元素直接溢出容器，会涉及到元素的弹性伸缩</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>flex-flow</p><p>是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>justify-content</p><p>定义了项目在主轴上的对齐方式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">flex-start（默认值）：左对齐</span></span><br><span class="line"><span class="comment">flex-end：右对齐</span></span><br><span class="line"><span class="comment">center：居中</span></span><br><span class="line"><span class="comment">space-between：两端对齐，项目之间的间隔都相等</span></span><br><span class="line"><span class="comment">space-around：两个项目两侧间隔相等</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>align-items</p><p>定义项目在交叉轴上如何对齐</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">flex-start：交叉轴的起点对齐</span></span><br><span class="line"><span class="comment">flex-end：交叉轴的终点对齐</span></span><br><span class="line"><span class="comment">center：交叉轴的中点对齐</span></span><br><span class="line"><span class="comment">baseline: 项目的第一行文字的基线对齐</span></span><br><span class="line"><span class="comment">stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>align-content</p><p>定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">flex-start：与交叉轴的起点对齐</span></span><br><span class="line"><span class="comment">flex-end：与交叉轴的终点对齐</span></span><br><span class="line"><span class="comment">center：与交叉轴的中点对齐</span></span><br><span class="line"><span class="comment">space-between：与交叉轴两端对齐，轴线之间的间隔平均分布</span></span><br><span class="line"><span class="comment">space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍</span></span><br><span class="line"><span class="comment">stretch（默认值）：轴线占满整个交叉轴</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>容器成员属性如下：</p><ul><li><p><code>order</code></p><p>定义项目的排列顺序。数值越小，排列越靠前，默认为0</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: &lt;integer&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>flex-grow</code></p><p>上面讲到当容器设为<code>flex-wrap: nowrap;</code>不换行的时候，容器宽度有不够分的情况，弹性元素会根据<code>flex-grow</code>来决定</p><p>定义项目的放大比例（容器宽度&gt;元素总宽度时如何伸展）</p><p>默认为<code>0</code>，即如果存在剩余空间，也不放大</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: &lt;number&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>flex-shrink</code></p><p>定义了项目的缩小比例（容器宽度&lt;元素总宽度时如何收缩），默认为1，即如果空间不足，该项目将缩小</p><p>如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小</p><p>如果一个项目的<code>flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: &lt;number&gt;; <span class="comment">/* default 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>flex-basis</code></p><p>浏览器根据这个属性，计算主轴是否有多余空间，默认值为<code>auto</code>，即项目的本来大小，如设置了<code>width</code>则元素尺寸由<code>width/height</code>决定（主轴方向），没有设置则由内容决定</p><p>当设置为0的是，会根据内容撑开</p><p>它可以设为跟<code>width</code>或<code>height</code>属性一样的值（比如350px），则项目将占据固定空间</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">   <span class="attribute">flex-basis</span>: &lt;length&gt; | auto; <span class="comment">/* default auto */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>flex</code></p><p><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>，也是比较难懂的一个复合属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: none | [ &lt;<span class="string">&#x27;flex-grow&#x27;</span>&gt; &lt;<span class="string">&#x27;flex-shrink&#x27;</span>&gt;? || &lt;<span class="string">&#x27;flex-basis&#x27;</span>&gt; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>align-self</code></p><p>允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性</p><p>默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h4><p>​左右两侧固定，中间由窗口适应</p><p>​两种实现方式</p><ul><li>浮动实现</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;center&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding-left</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding-right</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#container</span> <span class="selector-class">.column</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#center</span> &#123;</span></span><br><span class="line"><span class="language-css">        // 当<span class="attribute">width</span>为<span class="number">100%</span>，占据所有空间，<span class="attribute">left</span>跟<span class="attribute">right</span>会跑到第二行</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>:<span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#left</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        //设置负的外边距让他边在center左边置顶</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        // 再用相对定位，由左边推相同的自身大小</span></span><br><span class="line"><span class="language-css">        <span class="attribute">right</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#right</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>:<span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        //设置负的自身外边距让他边在center右边置顶</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-right</span>: -<span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>flex实现</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;center&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#center</span> &#123;</span></span><br><span class="line"><span class="language-css">// 占据剩余宽度，随窗口变动</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#left</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#right</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>:<span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="介绍一下felx网格布局"><a href="#介绍一下felx网格布局" class="headerlink" title="介绍一下felx网格布局"></a>介绍一下felx网格布局</h4><h4 id="介绍一下grid网格布局"><a href="#介绍一下grid网格布局" class="headerlink" title="介绍一下grid网格布局"></a>介绍一下grid网格布局</h4><h3 id="tailwindCSS-CSS框架"><a href="#tailwindCSS-CSS框架" class="headerlink" title="tailwindCSS(CSS框架)"></a>tailwindCSS(CSS框架)</h3><ol><li><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install tailwindcss</span><br></pre></td></tr></table></figure></li><li><p>使用</p></li></ol><h3 id="bootstrap5-UI-框架"><a href="#bootstrap5-UI-框架" class="headerlink" title="bootstrap5 (UI 框架)"></a>bootstrap5 (UI 框架)</h3><ol><li><p>快速上手</p><ul><li>包的管理工具安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i bootstrap@5.3.0-alpha1</span><br></pre></td></tr></table></figure><ul><li>html <link> 等方式；  直接下载本地，导入</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 新 Bootstrap5 核心 CSS 文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.staticfile.net/twitter-bootstrap/5.1.1/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!--  popper.min.js 用于弹窗、提示、下拉菜单 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.net/popper.js/2.9.3/umd/popper.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 最新的 Bootstrap5 核心 JavaScript 文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.net/twitter-bootstrap/5.1.1/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>断点</p><p>当视口达到某个节点，就会做响应的调整</p><table><thead><tr><th>断点</th><th>标识</th><th>尺寸</th></tr></thead><tbody><tr><td>X-Small</td><td>None</td><td>&lt;576px</td></tr><tr><td>Small</td><td>sm</td><td>&gt;&#x3D;576px</td></tr><tr><td>Medium</td><td>md</td><td>&gt;&#x3D;768px</td></tr><tr><td>Large</td><td>lg</td><td>&gt;&#x3D;992px</td></tr><tr><td>Extra large</td><td>xl</td><td>&gt;&#x3D;1200px</td></tr><tr><td>Extra extra large</td><td>xxl</td><td>&gt;&#x3D;1400px</td></tr></tbody></table></li><li><p>容器</p><ul><li><code>.container </code>          用于固定宽度并支持响应式布局的容器(会随根据视口宽度到达断点发生变化；一个阶段内的断点改变视口宽度会改变内边距)</li><li><code>.container-fluid</code>      用于 100% 宽度，占据全部视口的容器 (不会受断点影响)</li></ul></li><li><p>网格系统</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认占满， 所以小于sm时不受控制</span></span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    .col-8</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6&quot;</span>&gt;</span>.col-6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6&quot;</span>&gt;</span>.col-6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span>.col-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><img src="/2024/08/08/js+vue/Users\发发发宝贝\AppData\Roaming\Typora\typora-user-images\image-20240621221724872.png" alt="image-20240621221724872"></p><table><thead><tr><th></th><th>&lt;576px</th><th>&gt;&#x3D;576px</th><th>&gt;&#x3D;768px</th><th>&gt;&#x3D;992px</th><th>&gt;&#x3D;1200px</th><th>&gt;&#x3D;1400px</th></tr></thead><tbody><tr><td>类前缀</td><td>.col-</td><td>.col-sm-</td><td>.col-md-</td><td>.col-lg-</td><td>.col-xl-</td><td>.col-xxl-</td></tr><tr><td>列数量和</td><td>12</td><td>12</td><td>12</td><td>12</td><td>12</td><td>12</td></tr><tr><td>间隙宽度</td><td>1.5rem</td><td>1.5rem</td><td>1.5rem</td><td>1.5rem</td><td>1.5rem</td><td>1.5rem</td></tr></tbody></table></li><li><p>文字排版</p><ul><li><p>可以使用 <code>class=&quot;h1&quot;</code> 来代替</p><h1><p></p></h1></li><li><p>标题类    .display   标题可以输出更大更粗的字体样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;display-1&quot;</span>&gt;</span>Display 1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;display-2&quot;</span>&gt;</span>Display 2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;display-3&quot;</span>&gt;</span>Display 3<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;display-4&quot;</span>&gt;</span>Display 4<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>副标题   <small> 元素用于字号更小的颜色更浅的文本</small></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>h1 标题 <span class="tag">&lt;<span class="name">small</span>&gt;</span>副标题<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>h2 标题 <span class="tag">&lt;<span class="name">small</span>&gt;</span>副标题<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>h3 标题 <span class="tag">&lt;<span class="name">small</span>&gt;</span>副标题<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>h4 标题 <span class="tag">&lt;<span class="name">small</span>&gt;</span>副标题<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>h5 标题 <span class="tag">&lt;<span class="name">small</span>&gt;</span>副标题<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>h6 标题 <span class="tag">&lt;<span class="name">small</span>&gt;</span>副标题<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>高亮显示   <mark> 高亮文本</mark></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>使用 mark 元素来 <span class="tag">&lt;<span class="name">mark</span>&gt;</span>高亮<span class="tag">&lt;/<span class="name">mark</span>&gt;</span> 文本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>下滑虚线   <abbr></abbr></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The <span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">&quot;World Health Organization&quot;</span>&gt;</span>WHO<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span> was founded in 1948.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>引用文本    .blockquote</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">class</span>=<span class="string">&quot;blockquote&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>For 50 years, WWF has been protecting the future of nature. The world&#x27;s leading conservation organization, WWF works in 100 countries and is supported by 1.2 million members in the United States and close to 5 million globally.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">&quot;blockquote-footer&quot;</span>&gt;</span>From WWF&#x27;s website<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>左对齐    <strong>.text-start</strong></p></li><li><p>居中        <strong>.text-center</strong></p></li><li><p>右对齐     <strong>.text-end</strong></p></li><li><p>设定文本对齐，段落中超出屏幕部分文字自动换行    <strong>.text-justufy</strong></p></li><li><p>段落中超出屏幕部分不换行     <strong>.text-nowrap</strong></p></li><li><p>将所有列表<li>项放置同一行     <strong>.list-inline</strong></li></p></li></ul></li><li><p>颜色</p></li></ol>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>代表指定意义的文本颜色<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-muted&quot;</span>&gt;</span>柔和的文本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-primary&quot;</span>&gt;</span>重要的文本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-success&quot;</span>&gt;</span>执行成功的文本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-info&quot;</span>&gt;</span>代表一些提示信息的文本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-warning&quot;</span>&gt;</span>警告文本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-danger&quot;</span>&gt;</span>危险操作文本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-secondary&quot;</span>&gt;</span>副标题。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-dark&quot;</span>&gt;</span>深灰色文字。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-body&quot;</span>&gt;</span>默认颜色，为黑色。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-light&quot;</span>&gt;</span>浅灰色文本（白色背景上看不清楚）。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-white&quot;</span>&gt;</span>白色文本（白色背景上看不清楚）。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-black-50&quot;</span>&gt;</span>透明度为 50% 的黑色文本，背景为白色。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-white-50 bg-dark&quot;</span>&gt;</span>透明度为 50% 的白色文本，背景为黑色。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text-muted&quot;</span>&gt;</span>柔和的链接。<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text-primary&quot;</span>&gt;</span>主要链接。<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text-success&quot;</span>&gt;</span>成功链接。<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text-info&quot;</span>&gt;</span>信息文本链接。<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text-warning&quot;</span>&gt;</span>警告链接。<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text-danger&quot;</span>&gt;</span>危险链接。<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text-secondary&quot;</span>&gt;</span>副标题链接。<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text-dark&quot;</span>&gt;</span>深灰色链接。<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text-light&quot;</span>&gt;</span>浅灰色链接。<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;bg-primary text-white&quot;</span>&gt;</span>重要的背景颜色。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;bg-success text-white&quot;</span>&gt;</span>执行成功背景颜色。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;bg-info text-white&quot;</span>&gt;</span>信息提示背景颜色。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;bg-warning text-white&quot;</span>&gt;</span>警告背景颜色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;bg-danger text-white&quot;</span>&gt;</span>危险背景颜色。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;bg-secondary text-white&quot;</span>&gt;</span>副标题背景颜色。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;bg-dark text-white&quot;</span>&gt;</span>黑色背景颜色。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;bg-light text-dark&quot;</span>&gt;</span>浅灰背景颜色。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="7"><li><p>表格    <strong>.class</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Firstname<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Lastname<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;table-primary&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Primary<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Joe<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>joe@example.com<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;table-success&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Success<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Doe<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>john@example.com<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;table-danger&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Danger<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Moe<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>mary@example.com<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;table-info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Info<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Dooley<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>july@example.com<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;table-warning&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Warning<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Refs<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>bo@example.com<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;table-active&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Active<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Activeson<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>act@example.com<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>图像</p><ul><li>圆角图片             <strong>.rounded</strong></li><li>椭圆图片            <strong>.rounded-circle</strong></li><li>缩略图               <strong>.img-thumbnail</strong></li><li>图片对齐方式       使用 <strong>.float-start</strong> 类来设置图片左对齐，使用 <strong>.float-end</strong> 类设置图片右对齐</li><li>图片居中          使用 <strong>.mx-auto (margin:auto)</strong> 和 .<strong>d-block (display:block)</strong> 类来设置图片居中对齐</li><li>响应式图片       <strong>.img-fluid</strong> 类设置了 <strong>max-width: 100%;</strong> 、 <strong>height: auto;</strong></li></ul></li><li><p>信息提示框</p><p><strong>.alert</strong> 类, 后面加上 <strong>.alert-success</strong>, <strong>.alert-info</strong>, <strong>.alert-warning</strong>, <strong>.alert-danger</strong>, <strong>.alert-primary</strong>, <strong>.alert-secondary</strong>, <strong>.alert-light</strong> 或 <strong>.alert-dark</strong> 类来实现</p></li><li><p>按钮</p><ul><li>实例</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>基本按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>主要按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-secondary&quot;</span>&gt;</span>次要按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-success&quot;</span>&gt;</span>成功<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-info&quot;</span>&gt;</span>信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-warning&quot;</span>&gt;</span>警告<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger&quot;</span>&gt;</span>危险<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-dark&quot;</span>&gt;</span>黑色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-light&quot;</span>&gt;</span>浅色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-link&quot;</span>&gt;</span>链接<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 也可以使用在input 和a 标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-info&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span>&gt;</span>链接按钮<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-info&quot;</span> <span class="attr">value</span>=<span class="string">&quot;输入框按钮&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>设置镂空效果</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-outline-primary&quot;</span>&gt;</span>主要按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-outline-secondary&quot;</span>&gt;</span>次要按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-outline-success&quot;</span>&gt;</span>成功<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-outline-info&quot;</span>&gt;</span>信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-outline-warning&quot;</span>&gt;</span>警告<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-outline-danger&quot;</span>&gt;</span>危险<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-outline-dark&quot;</span>&gt;</span>黑色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-outline-light text-dark&quot;</span>&gt;</span>浅色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>大小设置</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-lg&quot;</span>&gt;</span>大号按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>默认按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-sm&quot;</span>&gt;</span>小号按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>块级按钮—— 占一整行</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;d-grid&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-block&quot;</span>&gt;</span>按钮 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 有多个块级可以使用  .gap-* 设置间距 最高为5--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;d-grid .gap-3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-block&quot;</span>&gt;</span>按钮 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-block&quot;</span>&gt;</span>按钮 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-block&quot;</span>&gt;</span>按钮 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>激活和禁用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary active&quot;</span>&gt;</span>点击后的按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">disabled</span>&gt;</span>禁止点击的按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary disabled&quot;</span>&gt;</span>禁止点击的链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>按钮 loading 效果</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;spinner-border spinner-border-sm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  Loading..</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">disabled</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;spinner-border spinner-border-sm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  Loading..</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">disabled</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;spinner-grow spinner-grow-sm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  Loading..</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>按钮组</p><ul><li>实例</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Samsung<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Sony<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>.btn-group-lg|sm</strong> 类来设置按钮组的大小</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group btn-group-lg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Samsung<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Sony<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>默认横向分布，**.btn-group-vertical** 类改编成垂直分布</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group-vertical&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Samsung<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Sony<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>横向内嵌下拉菜单   <strong>.dropdown-menu</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Samsung<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary dropdown-toggle&quot;</span> <span class="attr">data-bs-toggle</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">       Sony</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Tablet<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Smartphone<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>垂直按钮组及下拉菜单             <strong>.dropdown-menu</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group-vertical&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Samsung<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary dropdown-toggle&quot;</span> <span class="attr">data-bs-toggle</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span>Sony<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Tablet<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Smartphone<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>带间距的按钮组</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 利用 btn-group 默认间隔 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container mt-3&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>多个按钮组并排<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group mr-3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Samsung<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Sony<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>BMW<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Mercedes<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Volvo<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>tag 标签</p><ul><li>实例</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;badge bg-primary&quot;</span>&gt;</span>主要<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;badge bg-secondary&quot;</span>&gt;</span>次要<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;badge bg-success&quot;</span>&gt;</span>成功<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;badge bg-danger&quot;</span>&gt;</span>危险<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;badge bg-warning&quot;</span>&gt;</span>警告<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;badge bg-info&quot;</span>&gt;</span>信息<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;badge bg-light&quot;</span>&gt;</span>浅色<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;badge bg-dark&quot;</span>&gt;</span>深色<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>椭圆效果     <strong>.rounded-pill</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;badge rounded-pill bg-default&quot;</span>&gt;</span>默认<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;badge rounded-pill bg-primary&quot;</span>&gt;</span>主要<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>可以插入元素内部使用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span></span><br><span class="line">    Messages <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;badge bg-danger&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>进度条</p><ul><li>实例</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-bar bg-success&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:40%&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>.progress-bar-striped</code> 类来设置条纹进度条</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-bar progress-bar-striped&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:40%&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>.progress-bar-animated</code> 类可以为进度条条纹添加动画效果</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-bar progress-bar-striped progress-bar-animated&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 40%&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>loading </p><ul><li>转圈 loading   <strong>.spinner-border</strong>          <strong>.text-muted</strong> 为颜色</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;spinner-border text-muted&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;spinner-border text-primary&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;spinner-border text-success&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;spinner-border text-info&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;spinner-border text-warning&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;spinner-border text-danger&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;spinner-border text-secondary&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;spinner-border text-dark&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;spinner-border text-light&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>闪烁 loading     <strong>spinner-grow</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;spinner-grow text-muted&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;spinner-grow text-primary&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>设置大小   <strong>.spinner-border-sm</strong>     <strong>.spinner-grow-sm</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;spinner-border spinner-border-sm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;spinner-grow spinner-grow-sm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>按钮loading   ( 上面有)</li></ul></li><li><p>页码</p><ul><li>实例    <strong>.active</strong> 当前页高亮显示</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;pagination&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;page-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;page-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Previous<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;page-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;page-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;page-item active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;page-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;page-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;page-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;page-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;page-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>.disabled</strong>  设置分页链接不可点击</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;pagination&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;page-item disabled&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;page-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>大小设置       <strong>.pagination-lg</strong>    <strong>.pagination-sm</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 大 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;pagination pagination-lg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 默认 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;pagination&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 小 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;pagination pagination-sm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>对齐方式     <strong>.justify-content-center</strong>    <strong>.ustify-content-end</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 默认靠左 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;pagination&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 居中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;pagination justify-content-center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 靠右--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;pagination justify-content-end&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>面包屑</p><ul><li>实例    <strong>.breadcrumb</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container mt-3&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>面包屑导航<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>.breadcrumb 和 .breadcrumb-item 类用于设置面包屑导航：<span class="tag">&lt;/<span class="name">p</span>&gt;</span>                  </span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;breadcrumb&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;breadcrumb-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Photos<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;breadcrumb-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Summer 2017<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;breadcrumb-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Italy<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;breadcrumb-item active&quot;</span>&gt;</span>Rome<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>列表组</p><ul><li>实例   <strong>.list-group</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item list-group-item-success&quot;</span>&gt;</span>成功列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item list-group-item-secondary&quot;</span>&gt;</span>次要列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item list-group-item-info&quot;</span>&gt;</span>信息列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item list-group-item-warning&quot;</span>&gt;</span>警告列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item list-group-item-danger&quot;</span>&gt;</span>危险列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item list-group-item-primary&quot;</span>&gt;</span>主要列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item list-group-item-dark&quot;</span>&gt;</span>深灰色列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item list-group-item-light&quot;</span>&gt;</span>浅色列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>水平列表组     <strong>.list-group-horizontal</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list-group list-group-horizontal&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>第一项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>第二项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>第三项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>第四项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>移除列表边框     <strong>.list-group-flush</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list-group list-group-flush&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>第一项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>第二项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>第三项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>第四项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>高亮显示选中列表     <strong>.active</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item active&quot;</span>&gt;</span>激活列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>第二项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>第三项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>禁用的列表项    <strong>.disabled</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item disabled&quot;</span>&gt;</span>禁用项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>第二项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>第三项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>下拉菜单</p><ul><li>实例</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary dropdown-toggle&quot;</span> <span class="attr">data-bs-toggle</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">    下拉菜单按钮</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>链接 1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>链接 2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>链接 3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>添加分割线   <strong>.dropdown-divider</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>标题</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-header&quot;</span>&gt;</span>标题 1<span class="tag">&lt;/<span class="name">h5</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>常规  高亮选中  禁用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>常规项<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-item active&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>激活项<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-item disabled&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>禁用项<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>定位</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 靠左 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dropdown dropend&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary dropdown-toggle&quot;</span> <span class="attr">data-bs-toggle</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">        右边显示菜单</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>常规项<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-item active&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>激活项<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-item disabled&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>禁用项<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 靠右 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dropdown dropstart&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary dropdown-toggle&quot;</span> <span class="attr">data-bs-toggle</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">        右边显示菜单</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>常规项<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-item active&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>激活项<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-item disabled&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>禁用项<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>弹出菜单方向</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 右下--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dropdown dropdown-menu-end&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 向上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dropup&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 向左 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dropstart&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>收缩数据元素</p><ul><li>实例</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">data-bs-toggle</span>=<span class="string">&quot;collapse&quot;</span> <span class="attr">data-bs-target</span>=<span class="string">&quot;#demo&quot;</span>&gt;</span>折叠<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;collapse&quot;</span>&gt;</span></span><br><span class="line">    这里是一些测试的内容。。。这里是一些测试的内容。。。这里是一些测试的内容。。。这里是一些测试的内容。。。这里是一些测试的内容。。。</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>手风琴</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container mt-3&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>手风琴实例<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>注意：<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> 使用 <span class="tag">&lt;<span class="name">strong</span>&gt;</span>data-parent<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> 属性来确保所有的折叠元素在指定的父元素下，这样就能实现在一个折叠选项显示时其他选项就隐藏。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;accordion&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-header&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">data-bs-toggle</span>=<span class="string">&quot;collapse&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#collapseOne&quot;</span>&gt;</span></span><br><span class="line">                选项一</span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;collapseOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;collapse show&quot;</span> <span class="attr">data-bs-parent</span>=<span class="string">&quot;#accordion&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-body&quot;</span>&gt;</span></span><br><span class="line">                #1 内容</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-header&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;collapsed btn&quot;</span> <span class="attr">data-bs-toggle</span>=<span class="string">&quot;collapse&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#collapseTwo&quot;</span>&gt;</span></span><br><span class="line">                选项二</span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;collapseTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;collapse&quot;</span> <span class="attr">data-bs-parent</span>=<span class="string">&quot;#accordion&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-body&quot;</span>&gt;</span></span><br><span class="line">                #2 内容</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-header&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;collapsed btn&quot;</span> <span class="attr">data-bs-toggle</span>=<span class="string">&quot;collapse&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#collapseThree&quot;</span>&gt;</span></span><br><span class="line">                选项三</span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;collapseThree&quot;</span> <span class="attr">class</span>=<span class="string">&quot;collapse&quot;</span> <span class="attr">data-bs-parent</span>=<span class="string">&quot;#accordion&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-body&quot;</span>&gt;</span></span><br><span class="line">                #3 内容</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>导航栏</p><ul><li>高亮+下拉菜单+禁用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav nav-pills&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link active&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Active<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item dropdown&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link dropdown-toggle&quot;</span> <span class="attr">data-bs-toggle</span>=<span class="string">&quot;dropdown&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Dropdown<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Link 1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Link 2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Link 3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link disabled&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Disabled<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>选项卡</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container mt-3&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>选项卡切换<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Nav tabs --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- nav-pills胶囊选项卡   .nav-tabs普通选项卡--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav nav-tabs&quot;</span> <span class="attr">role</span>=<span class="string">&quot;tablist&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link active&quot;</span> <span class="attr">data-bs-toggle</span>=<span class="string">&quot;tab&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span> <span class="attr">data-bs-toggle</span>=<span class="string">&quot;tab&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#menu1&quot;</span>&gt;</span>Menu 1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span> <span class="attr">data-bs-toggle</span>=<span class="string">&quot;tab&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#menu2&quot;</span>&gt;</span>Menu 2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Tab panes --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;home&quot;</span> <span class="attr">class</span>=<span class="string">&quot;container tab-pane active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>HOME<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;menu1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;container tab-pane fade&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Menu 1<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;menu2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;container tab-pane fade&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Menu 2<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>轮播</p><ul><li>实例</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 轮播 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;carousel slide&quot;</span> <span class="attr">data-bs-ride</span>=<span class="string">&quot;carousel&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment">&lt;!-- 指示符 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-indicators&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-bs-target</span>=<span class="string">&quot;#demo&quot;</span> <span class="attr">data-bs-slide-to</span>=<span class="string">&quot;0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-bs-target</span>=<span class="string">&quot;#demo&quot;</span> <span class="attr">data-bs-slide-to</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-bs-target</span>=<span class="string">&quot;#demo&quot;</span> <span class="attr">data-bs-slide-to</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 轮播图片 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-inner&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-item active&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://static.jyshare.com/images/mix/img_fjords_wide.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;d-block&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:100%&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-item&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://static.jyshare.com/images/mix/img_nature_wide.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;d-block&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:100%&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-item&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://static.jyshare.com/images/mix/img_mountains_wide.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;d-block&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:100%&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 左右切换按钮 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;carousel-control-prev&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-bs-target</span>=<span class="string">&quot;#demo&quot;</span> <span class="attr">data-bs-slide</span>=<span class="string">&quot;prev&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;carousel-control-prev-icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;carousel-control-next&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-bs-target</span>=<span class="string">&quot;#demo&quot;</span> <span class="attr">data-bs-slide</span>=<span class="string">&quot;next&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;carousel-control-next-icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>遮罩</p><ul><li>实例</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 模态框 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可添加动画  .fade --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myModal&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 尺寸 小：.modal-sm 大：.modal-lg 超大：.modal-xl 全屏：.modal-fullscreen 居中：modal-dialog-centered  添加内部滚动条(默认外部)：modal-dialog-scrollable--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment">&lt;!-- 模态框头部 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-header&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;modal-title&quot;</span>&gt;</span>模态框标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn-close&quot;</span> <span class="attr">data-bs-dismiss</span>=<span class="string">&quot;modal&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment">&lt;!-- 模态框内容 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span></span><br><span class="line">        模态框内容..</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment">&lt;!-- 模态框底部 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-footer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger&quot;</span> <span class="attr">data-bs-dismiss</span>=<span class="string">&quot;modal&quot;</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>点击弹框</p><ul><li>实例<ul><li><strong>data-bs-trigger&#x3D;”focus”</strong> 点击外部元素关闭弹窗</li><li><strong>data-bs-trigger</strong>  鼠标移出关闭弹窗</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">title</span>=<span class="string">&quot;标题&quot;</span> <span class="attr">data-bs-toggle</span>=<span class="string">&quot;popover&quot;</span> <span class="attr">data-bs-trigger</span>=<span class="string">&quot;focus&quot;</span> <span class="attr">data-bs-placement</span>=<span class="string">&quot;top&quot;</span> <span class="attr">data-bs-content</span>=<span class="string">&quot;我是内容部分&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">title</span>=<span class="string">&quot;标题&quot;</span> <span class="attr">data-bs-toggle</span>=<span class="string">&quot;popover&quot;</span> <span class="attr">data-bs-trigger</span>=<span class="string">&quot;focus&quot;</span> <span class="attr">data-bs-placement</span>=<span class="string">&quot;bottom&quot;</span> <span class="attr">data-bs-content</span>=<span class="string">&quot;我是内容部分&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">title</span>=<span class="string">&quot;标题&quot;</span> <span class="attr">data-bs-toggle</span>=<span class="string">&quot;popover&quot;</span> <span class="attr">data-bs-trigger</span>=<span class="string">&quot;focus&quot;</span> <span class="attr">data-bs-placement</span>=<span class="string">&quot;left&quot;</span> <span class="attr">data-bs-content</span>=<span class="string">&quot;我是内容部分&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">title</span>=<span class="string">&quot;标题&quot;</span> <span class="attr">data-bs-toggle</span>=<span class="string">&quot;popover&quot;</span> <span class="attr">data-bs-trigger</span>=<span class="string">&quot;focus&quot;</span> <span class="attr">data-bs-placement</span>=<span class="string">&quot;right&quot;</span> <span class="attr">data-bs-content</span>=<span class="string">&quot;我是内容部分&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>点击弹窗</p><ul><li>使用 . show  来设置显影</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toast show&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toast-header&quot;</span>&gt;</span></span><br><span class="line">    弹窗标题</span><br><span class="line">      <span class="comment">&lt;!-- 弹窗默认是关闭的，可以使用 .show 来设置显示，关闭弹窗可以在 &lt;button&gt;元素上添加 data-bs-dismiss=&quot;toast&quot; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn-close&quot;</span> <span class="attr">data-bs-dismiss</span>=<span class="string">&quot;toast&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toast-body&quot;</span>&gt;</span></span><br><span class="line">    这是一个Bootstrap 5弹窗示例。</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Element-UI框架"><a href="#Element-UI框架" class="headerlink" title="Element (UI框架)"></a>Element (UI框架)</h3><ol><li><p>layout 布局</p><ul><li><p>row 和 col</p><p>通过 row 和 col 组件，并通过 col 组件的 span 属性我们就可以自由地组合布局</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;24&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>基于断点的隐藏类</p><p>Element Plus 额外提供了一系列类名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus/lib/theme-chalk/display.css&#x27;</span></span><br></pre></td></tr></table></figure><p>包含的类名及其含义为：</p><ul><li>hidden-xs-only - 当视口在 xs 尺寸时隐藏</li><li>hidden-sm-only - 当视口在 sm 尺寸时隐藏</li><li>hidden-sm-and-down - 当视口在 sm 及以下尺寸时隐藏</li><li>hidden-sm-and-up - 当视口在 sm 及以上尺寸时隐藏</li><li>hidden-md-only - 当视口在 md 尺寸时隐藏</li><li>hidden-md-and-down - 当视口在 md 及以下尺寸时隐藏</li><li>hidden-md-and-up - 当视口在 md 及以上尺寸时隐藏</li><li>hidden-lg-only - 当视口在 lg 尺寸时隐藏</li><li>hidden-lg-and-down - 当视口在 lg 及以下尺寸时隐藏</li><li>hidden-lg-and-up - 当视口在 lg 及以上尺寸时隐藏</li><li>hidden-xl-only - 当视口在 xl 尺寸时隐藏</li></ul></li><li><p>参数</p><ul><li>el-row</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">gutter</td><td align="left">栅格间隔</td><td align="left">number</td><td align="left">—</td><td align="left">0</td></tr><tr><td align="left">justify</td><td align="left">flex 布局下的水平排列方式</td><td align="left">string</td><td align="left">start&#x2F;end&#x2F;center&#x2F;space-around&#x2F;space-between</td><td align="left">start</td></tr><tr><td align="left">align</td><td align="left">flex 布局下的垂直排列方式</td><td align="left">string</td><td align="left">top&#x2F;middle&#x2F;bottom</td><td align="left">top</td></tr><tr><td align="left">tag</td><td align="left">自定义元素标签</td><td align="left">string</td><td align="left">*</td><td align="left">div</td></tr></tbody></table><ul><li>el-col</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">span</td><td align="left">栅格占据的列数</td><td align="left">number</td><td align="left">—</td><td align="left">24</td></tr><tr><td align="left">offset</td><td align="left">栅格左侧的间隔格数</td><td align="left">number</td><td align="left">—</td><td align="left">0</td></tr><tr><td align="left">push</td><td align="left">栅格向右移动格数</td><td align="left">number</td><td align="left">—</td><td align="left">0</td></tr><tr><td align="left">pull</td><td align="left">栅格向左移动格数</td><td align="left">number</td><td align="left">—</td><td align="left">0</td></tr><tr><td align="left">xs</td><td align="left"><code>&lt;768px</code> 响应式栅格数或者栅格属性对象</td><td align="left">number&#x2F;object (例如： {span: 4, offset: 4})</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">sm</td><td align="left"><code>≥768px</code> 响应式栅格数或者栅格属性对象</td><td align="left">number&#x2F;object (例如： {span: 4, offset: 4})</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">md</td><td align="left"><code>≥992px</code> 响应式栅格数或者栅格属性对象</td><td align="left">number&#x2F;object (例如： {span: 4, offset: 4})</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">lg</td><td align="left"><code>≥1200px</code> 响应式栅格数或者栅格属性对象</td><td align="left">number&#x2F;object (例如： {span: 4, offset: 4})</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">xl</td><td align="left"><code>≥1920px</code> 响应式栅格数或者栅格属性对象</td><td align="left">number&#x2F;object (例如： {span: 4, offset: 4})</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">tag</td><td align="left">自定义元素标签</td><td align="left">string</td><td align="left">*</td><td align="left">div</td></tr></tbody></table></li></ul></li><li><p>布局容器</p><ul><li>圣杯布局</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-aside</span> <span class="attr">width</span>=<span class="string">&quot;200px&quot;</span>&gt;</span>Aside<span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-header</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">el-header</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-main</span>&gt;</span>Main<span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-footer</span>&gt;</span>Footer<span class="tag">&lt;/<span class="name">el-footer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li>el-containner</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">direction</td><td align="left">子元素的排列方向</td><td align="left">string</td><td align="left">horizontal &#x2F; vertical</td><td align="left">子元素中有 <code>el-header</code> 或 <code>el-footer</code> 时为 vertical，否则为 horizontal</td></tr></tbody></table><ul><li>el-header</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">height</td><td align="left">顶栏高度</td><td align="left">string</td><td align="left">—</td><td align="left">60px</td></tr></tbody></table><ul><li>el-aside</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">width</td><td align="left">侧边栏宽度</td><td align="left">string</td><td align="left">—</td><td align="left">300px</td></tr></tbody></table><ul><li>el-footer</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">height</td><td align="left">底栏高度</td><td align="left">string</td><td align="left">—</td><td align="left">60px</td></tr></tbody></table></li></ul></li><li><p>颜色</p><ul><li>Success   #67C23A</li><li>Waring     #E6A23C</li><li>Danger    #F56C6C</li><li>Info          #909399</li></ul></li><li><p>图标   ( 当前图标只适用于vue3)</p><ul><li><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yarn add @element-plus/icons</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install @element-plus/icons</span></span><br></pre></td></tr></table></figure></li><li><p>基本用法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">!-- 用 el-icon 为 SVG 提供属性 --&gt;</span><br><span class="line">&lt;el-icon :size=&quot;size&quot; :color=&quot;color&quot;&gt;</span><br><span class="line">  &lt;edit /&gt;</span><br><span class="line">&lt;/el-icon&gt;</span><br><span class="line">&lt;!-- 或者单独使用，不从祖先节点继承任何属性 --&gt;</span><br><span class="line">&lt;edit /&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; Edit &#125; from &#x27;@element-plus/icons&#x27;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>按钮</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-row&gt;</span><br><span class="line">      &lt;el-button&gt;默认按钮&lt;/el-button&gt;</span><br><span class="line">      &lt;el-button type=&quot;primary&quot;&gt;主要按钮&lt;/el-button&gt;</span><br><span class="line">      &lt;el-button type=&quot;success&quot;&gt;成功按钮&lt;/el-button&gt;</span><br><span class="line">      &lt;el-button type=&quot;info&quot;&gt;信息按钮&lt;/el-button&gt;</span><br><span class="line">      &lt;el-button type=&quot;warning&quot;&gt;警告按钮&lt;/el-button&gt;</span><br><span class="line">      &lt;el-button type=&quot;danger&quot;&gt;危险按钮&lt;/el-button&gt;</span><br><span class="line">    &lt;/el-row&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    </span><br><span class="line">&lt;!-- 按钮组 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-button-group&gt;</span><br><span class="line">      &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-arrow-left&quot;&gt;上一页&lt;/el-button&gt;</span><br><span class="line">      &lt;el-button type=&quot;primary&quot;&gt;下一页&lt;i class=&quot;el-icon-arrow-right el-icon--right&quot;&gt;&lt;/i</span><br><span class="line">      &gt;&lt;/el-button&gt;</span><br><span class="line">  &lt;/el-button-group&gt;</span><br><span class="line">  &lt;el-button-group&gt;</span><br><span class="line">      &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-edit&quot;&gt;&lt;/el-button&gt;</span><br><span class="line">      &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-share&quot;&gt;&lt;/el-button&gt;</span><br><span class="line">      &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-delete&quot;&gt;&lt;/el-button&gt;</span><br><span class="line">  &lt;/el-button-group&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li>el-button</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">size</td><td align="left">尺寸</td><td align="left">string</td><td align="left">medium &#x2F; small &#x2F; mini</td><td align="left">—</td></tr><tr><td align="left">type</td><td align="left">类型</td><td align="left">string</td><td align="left">primary &#x2F; success &#x2F; warning &#x2F; danger &#x2F; info &#x2F; text</td><td align="left">—</td></tr><tr><td align="left">plain</td><td align="left">是否朴素按钮</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">round</td><td align="left">是否圆角按钮</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">circle</td><td align="left">是否圆形按钮</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">loading</td><td align="left">是否加载中状态</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">disabled</td><td align="left">是否禁用状态</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">icon</td><td align="left">图标类名</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">autofocus</td><td align="left">是否默认聚焦</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">native-type</td><td align="left">原生 type 属性</td><td align="left">string</td><td align="left">button &#x2F; submit &#x2F; reset</td><td align="left">button</td></tr></tbody></table></li><li><p>el-button-group</p><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">size</td><td align="left">用于控制该按钮组内按钮的尺寸</td><td align="left">string</td><td align="left">medium &#x2F; small &#x2F; mini</td><td align="left">—</td></tr></tbody></table></li><li><p>el-button-group   Slots( 提供插槽方式)</p><table><thead><tr><th align="left">Name</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">default</td><td align="left">自定义按钮组内容</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;el-button-group&quot;&gt;  </span><br><span class="line">      &lt;!-- 使用插槽的方式传入按钮内容 --&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt; </span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;ElButtonGroup&#x27;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>文字链接</p><ul><li><p>实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">          &lt;el-link href=&quot;https://element.eleme.io&quot; rel=&quot;external nofollow&quot; target=&quot;_blank&quot;  target=&quot;_blank&quot;&gt;默认链接&lt;/el-link&gt;</span><br><span class="line">          &lt;el-link type=&quot;primary&quot;&gt;主要链接&lt;/el-link&gt;</span><br><span class="line">          &lt;el-link type=&quot;success&quot;&gt;成功链接&lt;/el-link&gt;</span><br><span class="line">          &lt;el-link type=&quot;warning&quot;&gt;警告链接&lt;/el-link&gt;</span><br><span class="line">          &lt;el-link type=&quot;danger&quot;&gt;危险链接&lt;/el-link&gt;</span><br><span class="line">          &lt;el-link type=&quot;info&quot;&gt;信息链接&lt;/el-link&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>参数</p><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">type</td><td align="left">类型</td><td align="left">string</td><td align="left">primary &#x2F; success &#x2F; warning &#x2F; danger &#x2F; info</td><td align="left">default</td></tr><tr><td align="left">underline</td><td align="left">是否下划线</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">disabled</td><td align="left">是否禁用状态</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">href</td><td align="left">原生 href 属性</td><td align="left">string</td><td align="left">—</td><td align="left">-</td></tr><tr><td align="left">icon</td><td align="left">图标类名</td><td align="left">string</td><td align="left">—</td><td align="left">-</td></tr></tbody></table></li></ul></li><li><p>间距</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div style=&quot;margin-bottom: 15px&quot;&gt;</span><br><span class="line">      direction:</span><br><span class="line">      &lt;el-radio v-model=&quot;direction&quot; label=&quot;horizontal&quot;&gt;horizontal&lt;/el-radio&gt;</span><br><span class="line">      &lt;el-radio v-model=&quot;direction&quot; label=&quot;vertical&quot;&gt;vertical&lt;/el-radio&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div style=&quot;margin-bottom: 15px&quot;&gt;</span><br><span class="line">      fillRatio:&lt;el-slider v-model=&quot;fillRatio&quot;&gt;&lt;/el-slider&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;el-space</span><br><span class="line">      fill</span><br><span class="line">      wrap</span><br><span class="line">      :fillRatio=&quot;fillRatio&quot;</span><br><span class="line">      :direction=&quot;direction&quot;</span><br><span class="line">      style=&quot; width: 100%&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;el-card class=&quot;box-card&quot; v-for=&quot;i in 5&quot; :key=&quot;i&quot;&gt;</span><br><span class="line">        &lt;template #header&gt;</span><br><span class="line">          &lt;div class=&quot;card-header&quot;&gt;</span><br><span class="line">            &lt;span&gt;Card name&lt;/span&gt;</span><br><span class="line">            &lt;el-button class=&quot;button&quot; type=&quot;text&quot;&gt;Operation button&lt;/el-button&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">        &lt;div v-for=&quot;o in 4&quot; :key=&quot;o&quot; class=&quot;text item&quot;&gt;</span><br><span class="line">          &#123;&#123; &#x27;List item &#x27; + o &#125;&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/el-card&gt;</span><br><span class="line">    &lt;/el-space&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li>el-space</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">alignment</td><td align="left">对齐的方式</td><td align="left">string</td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/align-items">align-items</a></td><td align="left">‘center’</td></tr><tr><td align="left">class</td><td align="left">类名</td><td align="left">string &#x2F; Array&lt;Object | String&gt; &#x2F; Object</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">direction</td><td align="left">排列的方向</td><td align="left">string</td><td align="left">vertical&#x2F;horizontal</td><td align="left">horizontal</td></tr><tr><td align="left">prefixCls</td><td align="left">给 space-items 的类名前缀</td><td align="left">string</td><td align="left">el-space</td><td align="left">-</td></tr><tr><td align="left">style</td><td align="left">额外样式</td><td align="left">string &#x2F; Array&lt;Object | String&gt; &#x2F; Object</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">spacer</td><td align="left">间隔符</td><td align="left">string &#x2F; number &#x2F; VNode</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">size</td><td align="left">间隔大小</td><td align="left">string &#x2F; number &#x2F; [number, number]</td><td align="left">-</td><td align="left">‘small’</td></tr><tr><td align="left">wrap</td><td align="left">设置是否自动折行</td><td align="left">boolean</td><td align="left">true &#x2F; false</td><td align="left">false</td></tr><tr><td align="left">fill</td><td align="left">子元素是否填充父容器</td><td align="left">boolean</td><td align="left">true &#x2F; false</td><td align="left">false</td></tr><tr><td align="left">fillRatio</td><td align="left">填充父容器的比例</td><td align="left">number</td><td align="left">-</td><td align="left">100</td></tr></tbody></table></li></ul></li><li><p>滚动条</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-scrollbar height=&quot;400px&quot;&gt;</span><br><span class="line">    &lt;p class=&quot;item&quot; v-for=&quot;item in 20&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/el-scrollbar&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li>el-scrollbar</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">height</td><td align="left">滚动条高度</td><td align="left">string &#x2F; number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">max-height</td><td align="left">滚动条最大高度</td><td align="left">string &#x2F; number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">native</td><td align="left">是否使用原生滚动条样式</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">wrap-style</td><td align="left">包裹容器的自定义样式</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">wrap-class</td><td align="left">包裹容器的自定义类名</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">view-style</td><td align="left">视图的自定义样式</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">view-class</td><td align="left">视图的自定义类名</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">noresize</td><td align="left">不响应容器尺寸变化，如果容器尺寸不会发生变化，最好设置它可以优化性能</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">tag</td><td align="left">视图的元素标签</td><td align="left">string</td><td align="left">—</td><td align="left">div</td></tr><tr><td align="left">always</td><td align="left">滚动条总是显示</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">min-size</td><td align="left">滚动条最小尺寸</td><td align="left">number</td><td align="left">—</td><td align="left">20</td></tr></tbody></table><ul><li>el-scrollbar 事件</li></ul><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">scroll</td><td align="left">滚动时触发的事件</td><td align="left">滚动距离 { scrollLeft, scrollTop }</td></tr></tbody></table><ul><li>el-scrollbar  方法</li></ul><table><thead><tr><th align="left">方法名</th><th align="left">说明</th><th align="left">参数</th></tr></thead><tbody><tr><td align="left">setScrollTop</td><td align="left">设置滚动条到顶部的距离</td><td align="left">(scrollTop: number)</td></tr><tr><td align="left">setScrollLeft</td><td align="left">设置滚动条到左边的距离</td><td align="left">(scrollLeft: number)</td></tr><tr><td align="left">update</td><td align="left">手动更新滚动条状态</td><td align="left">—</td></tr></tbody></table></li></ul></li><li><p>全局配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-config-provider :locale=&quot;locale&quot;&gt;</span><br><span class="line">    &lt;app /&gt;</span><br><span class="line">  &lt;/el-config-provider&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123; defineComponent &#125; from &#x27;vue&#x27;</span><br><span class="line">  import &#123; ElConfigProvider &#125; from &#x27;element-plus&#x27;</span><br><span class="line"></span><br><span class="line">  import zhCn from &#x27;element-plus/lib/locale/lang/zh-cn&#x27;</span><br><span class="line"></span><br><span class="line">  export default defineComponent(&#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">      ElConfigProvider,</span><br><span class="line">    &#125;,</span><br><span class="line">    setup() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        locale: zhCn,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>单选框</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-radio v-model=&quot;radio1&quot; label=&quot;1&quot;&gt;备选项1&lt;/el-radio&gt;</span><br><span class="line">    &lt;el-radio v-model=&quot;radio1&quot; label=&quot;2&quot;&gt;备选项2&lt;/el-radio&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-radio v-model=&quot;radio2&quot; label=&quot;1&quot; size=&quot;medium&quot;&gt;备选项1&lt;/el-radio&gt;</span><br><span class="line">    &lt;el-radio v-model=&quot;radio2&quot; label=&quot;2&quot; size=&quot;medium&quot;&gt;备选项2&lt;/el-radio&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-radio v-model=&quot;radio3&quot; label=&quot;1&quot; size=&quot;small&quot;&gt;备选项1&lt;/el-radio&gt;</span><br><span class="line">    &lt;el-radio v-model=&quot;radio3&quot; label=&quot;2&quot; size=&quot;small&quot;&gt;备选项2&lt;/el-radio&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-radio v-model=&quot;radio4&quot; label=&quot;1&quot; size=&quot;mini&quot;&gt;备选项1&lt;/el-radio&gt;</span><br><span class="line">    &lt;el-radio v-model=&quot;radio4&quot; label=&quot;2&quot; size=&quot;mini&quot;&gt;备选项2&lt;/el-radio&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        radio1: &#x27;1&#x27;,</span><br><span class="line">        radio2: &#x27;1&#x27;,</span><br><span class="line">        radio3: &#x27;1&#x27;,</span><br><span class="line">        radio4: &#x27;1&#x27;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;!-- 按钮组 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-radio-group v-model=&quot;radio1&quot;&gt;</span><br><span class="line">      &lt;el-radio-button label=&quot;上海&quot;&gt;&lt;/el-radio-button&gt;</span><br><span class="line">      &lt;el-radio-button label=&quot;北京&quot;&gt;&lt;/el-radio-button&gt;</span><br><span class="line">      &lt;el-radio-button label=&quot;广州&quot;&gt;&lt;/el-radio-button&gt;</span><br><span class="line">      &lt;el-radio-button label=&quot;深圳&quot;&gt;&lt;/el-radio-button&gt;</span><br><span class="line">    &lt;/el-radio-group&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div style=&quot;margin-top: 20px&quot;&gt;</span><br><span class="line">    &lt;el-radio-group v-model=&quot;radio2&quot; size=&quot;medium&quot;&gt;</span><br><span class="line">      &lt;el-radio-button label=&quot;上海&quot;&gt;&lt;/el-radio-button&gt;</span><br><span class="line">      &lt;el-radio-button label=&quot;北京&quot;&gt;&lt;/el-radio-button&gt;</span><br><span class="line">      &lt;el-radio-button label=&quot;广州&quot;&gt;&lt;/el-radio-button&gt;</span><br><span class="line">      &lt;el-radio-button label=&quot;深圳&quot;&gt;&lt;/el-radio-button&gt;</span><br><span class="line">    &lt;/el-radio-group&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div style=&quot;margin-top: 20px&quot;&gt;</span><br><span class="line">    &lt;el-radio-group v-model=&quot;radio3&quot; size=&quot;small&quot;&gt;</span><br><span class="line">      &lt;el-radio-button label=&quot;上海&quot;&gt;&lt;/el-radio-button&gt;</span><br><span class="line">      &lt;el-radio-button label=&quot;北京&quot; disabled&gt;&lt;/el-radio-button&gt;</span><br><span class="line">      &lt;el-radio-button label=&quot;广州&quot;&gt;&lt;/el-radio-button&gt;</span><br><span class="line">      &lt;el-radio-button label=&quot;深圳&quot;&gt;&lt;/el-radio-button&gt;</span><br><span class="line">    &lt;/el-radio-group&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div style=&quot;margin-top: 20px&quot;&gt;</span><br><span class="line">    &lt;el-radio-group v-model=&quot;radio4&quot; disabled size=&quot;mini&quot;&gt;</span><br><span class="line">      &lt;el-radio-button label=&quot;上海&quot;&gt;&lt;/el-radio-button&gt;</span><br><span class="line">      &lt;el-radio-button label=&quot;北京&quot;&gt;&lt;/el-radio-button&gt;</span><br><span class="line">      &lt;el-radio-button label=&quot;广州&quot;&gt;&lt;/el-radio-button&gt;</span><br><span class="line">      &lt;el-radio-button label=&quot;深圳&quot;&gt;&lt;/el-radio-button&gt;</span><br><span class="line">    &lt;/el-radio-group&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        radio1: &#x27;上海&#x27;,</span><br><span class="line">        radio2: &#x27;上海&#x27;,</span><br><span class="line">        radio3: &#x27;上海&#x27;,</span><br><span class="line">        radio4: &#x27;上海&#x27;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li>el-radio</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">model-value &#x2F; v-model</td><td align="left">绑定值</td><td align="left">string &#x2F; number &#x2F; boolean</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">label</td><td align="left">Radio 的 value</td><td align="left">string &#x2F; number &#x2F; boolean</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">disabled</td><td align="left">是否禁用</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">border</td><td align="left">是否显示边框</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">size</td><td align="left">Radio 的尺寸</td><td align="left">string</td><td align="left">medium &#x2F; small &#x2F; mini</td><td align="left">—</td></tr><tr><td align="left">name</td><td align="left">原生 name 属性</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr></tbody></table><ul><li>el-radio   事件</li></ul><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">change</td><td align="left">绑定值变化时触发的事件</td><td align="left">选中的 Radio label 值</td></tr></tbody></table><ul><li>el-radio-group</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">model-value &#x2F; v-model</td><td align="left">绑定值</td><td align="left">string &#x2F; number &#x2F; boolean</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">size</td><td align="left">单选框组尺寸</td><td align="left">string</td><td align="left">medium &#x2F; small &#x2F; mini</td><td align="left">—</td></tr><tr><td align="left">disabled</td><td align="left">是否禁用</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">text-color</td><td align="left">按钮形式的 Radio 激活时的文本颜色</td><td align="left">string</td><td align="left">—</td><td align="left">#ffffff</td></tr><tr><td align="left">fill</td><td align="left">按钮形式的 Radio 激活时的填充色和边框色</td><td align="left">string</td><td align="left">—</td><td align="left">#409EFF</td></tr></tbody></table><ul><li>el-radio-button</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">label</td><td align="left">Radio 的 value</td><td align="left">string &#x2F; number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">disabled</td><td align="left">是否禁用</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">name</td><td align="left">原生 name 属性</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr></tbody></table><ul><li>el-radio-group 事件</li></ul><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">change</td><td align="left">绑定值变化时触发的事件</td><td align="left">选中的 Radio label 值</td></tr></tbody></table></li></ul></li><li><p>多选框</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-checkbox v-model=&quot;checked1&quot; label=&quot;备选项1&quot;&gt;&lt;/el-checkbox&gt;</span><br><span class="line">    &lt;el-checkbox v-model=&quot;checked2&quot; label=&quot;备选项2&quot;&gt;&lt;/el-checkbox&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-checkbox v-model=&quot;checked3&quot; label=&quot;备选项1&quot; size=&quot;medium&quot;&gt;&lt;/el-checkbox&gt;</span><br><span class="line">    &lt;el-checkbox v-model=&quot;checked4&quot; label=&quot;备选项2&quot; size=&quot;medium&quot;&gt;&lt;/el-checkbox&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-checkbox v-model=&quot;checked5&quot; label=&quot;备选项1&quot; size=&quot;small&quot;&gt;&lt;/el-checkbox&gt;</span><br><span class="line">    &lt;el-checkbox v-model=&quot;checked6&quot; label=&quot;备选项2&quot; size=&quot;small&quot;&gt;&lt;/el-checkbox&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-checkbox v-model=&quot;checked7&quot; label=&quot;备选项1&quot; size=&quot;mini&quot;&gt;&lt;/el-checkbox&gt;</span><br><span class="line">    &lt;el-checkbox v-model=&quot;checked8&quot; label=&quot;备选项2&quot; size=&quot;mini&quot;&gt;&lt;/el-checkbox&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        checked1: true,</span><br><span class="line">        checked2: false,</span><br><span class="line">        checked3: false,</span><br><span class="line">        checked4: false,</span><br><span class="line">        checked5: false,</span><br><span class="line">        checked6: false,</span><br><span class="line">        checked7: false,</span><br><span class="line">        checked8: false,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 多选框组 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-checkbox-group v-model=&quot;checkList&quot;&gt;</span><br><span class="line">    &lt;el-checkbox label=&quot;复选框 A&quot;&gt;&lt;/el-checkbox&gt;</span><br><span class="line">    &lt;el-checkbox label=&quot;复选框 B&quot;&gt;&lt;/el-checkbox&gt;</span><br><span class="line">    &lt;el-checkbox label=&quot;复选框 C&quot;&gt;&lt;/el-checkbox&gt;</span><br><span class="line">    &lt;el-checkbox label=&quot;禁用&quot; disabled&gt;&lt;/el-checkbox&gt;</span><br><span class="line">    &lt;el-checkbox label=&quot;选中且禁用&quot; disabled&gt;&lt;/el-checkbox&gt;</span><br><span class="line">  &lt;/el-checkbox-group&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        checkList: [&#x27;选中且禁用&#x27;, &#x27;复选框 A&#x27;],</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li>el-checkbox</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">model-value &#x2F; v-model</td><td align="left">绑定值</td><td align="left">string &#x2F; number &#x2F; boolean</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">label</td><td align="left">选中状态的值（只有在<code>checkbox-group</code>或者绑定对象类型为<code>array</code>时有效）</td><td align="left">string &#x2F; number &#x2F; boolean &#x2F; object</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">true-label</td><td align="left">选中时的值</td><td align="left">string &#x2F; number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">false-label</td><td align="left">没有选中时的值</td><td align="left">string &#x2F; number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">disabled</td><td align="left">是否禁用</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">border</td><td align="left">是否显示边框</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">size</td><td align="left">Checkbox 的尺寸</td><td align="left">string</td><td align="left">medium &#x2F; small &#x2F; mini</td><td align="left">—</td></tr><tr><td align="left">name</td><td align="left">原生 name 属性</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">checked</td><td align="left">当前是否勾选</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">indeterminate</td><td align="left">设置 indeterminate 状态，只负责样式控制</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr></tbody></table><ul><li>el-checkbox  事件</li></ul><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">change</td><td align="left">当绑定值变化时触发的事件</td><td align="left">更新后的值</td></tr></tbody></table><ul><li>el-checkbox-group</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">model-value &#x2F; v-model</td><td align="left">绑定值</td><td align="left">array</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">size</td><td align="left">多选框组尺寸</td><td align="left">string</td><td align="left">medium &#x2F; small &#x2F; mini</td><td align="left">—</td></tr><tr><td align="left">disabled</td><td align="left">是否禁用</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">min</td><td align="left">可被勾选的 checkbox 的最小数量</td><td align="left">number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">max</td><td align="left">可被勾选的 checkbox 的最大数量</td><td align="left">number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">text-color</td><td align="left">按钮形式的 Checkbox 激活时的文本颜色</td><td align="left">string</td><td align="left">—</td><td align="left">#ffffff</td></tr><tr><td align="left">fill</td><td align="left">按钮形式的 Checkbox 激活时的填充色和边框色</td><td align="left">string</td><td align="left">—</td><td align="left">#409EFF</td></tr></tbody></table><ul><li>el-checkbox-group  事件</li></ul><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">change</td><td align="left">当绑定值变化时触发的事件</td><td align="left">更新后的值</td></tr></tbody></table><ul><li>el-checkbox-button</li></ul><h3 id="Checkbox-button-Attributes"><a href="#Checkbox-button-Attributes" class="headerlink" title="Checkbox-button Attributes"></a>Checkbox-button Attributes</h3><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">label</td><td align="left">选中状态的值（只有在<code>checkbox-group</code>或者绑定对象类型为<code>array</code>时有效）</td><td align="left">string &#x2F; number &#x2F; boolean &#x2F; object</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">true-label</td><td align="left">选中时的值</td><td align="left">string &#x2F; number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">false-label</td><td align="left">没有选中时的值</td><td align="left">string &#x2F; number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">disabled</td><td align="left">是否禁用</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">name</td><td align="left">原生 name 属性</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">checked</td><td align="left">当前是否勾选</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr></tbody></table></li></ul></li><li><p>输入框</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-input v-model=&quot;input&quot; placeholder=&quot;请输入内容&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123; defineComponent, ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  export default defineComponent(&#123;</span><br><span class="line">    setup() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        input: ref(&#x27;&#x27;),</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- el-autocomplete 是一个可带输入建议的输入框组件--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;el-row class=&quot;demo-autocomplete&quot; &gt;</span><br><span class="line">    &lt;el-col :span=&quot;12&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;sub-title&quot;&gt;激活即列出输入建议&lt;/div&gt;</span><br><span class="line">            &lt;!-- fetch-suggestions 是一个返回输入建议的方法属性，如 querySearch --&gt;</span><br><span class="line">            &lt;el-autocomplete</span><br><span class="line">               class=&quot;inline-input&quot;</span><br><span class="line">               v-model=&quot;state1&quot;</span><br><span class="line">               :fetch-suggestions=&quot;querySearch&quot;</span><br><span class="line">               placeholder=&quot;请输入内容&quot;</span><br><span class="line">               @select=&quot;handleSelect&quot;</span><br><span class="line">               &gt;&lt;/el-autocomplete&gt;</span><br><span class="line">    &lt;/el-col&gt;</span><br><span class="line">    &lt;/el-row&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">const querySearch ...</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li>el-input</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">type</td><td align="left">类型</td><td align="left">string</td><td align="left">text，textarea 和其他 <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form__types">原生 input 的 type 值</a></td><td align="left">text</td></tr><tr><td align="left">model-value &#x2F; v-model</td><td align="left">绑定值</td><td align="left">string &#x2F; number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">maxlength</td><td align="left">最大输入长度</td><td align="left">string &#x2F; number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">minlength</td><td align="left">原生属性，最小输入长度</td><td align="left">number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">show-word-limit</td><td align="left">是否显示输入字数统计，只在 <code>type = &quot;text&quot;</code> 或 <code>type = &quot;textarea&quot;</code> 时有效</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">placeholder</td><td align="left">输入框占位文本</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">clearable</td><td align="left">是否可清空</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">show-password</td><td align="left">是否显示切换密码图标</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">disabled</td><td align="left">禁用</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">size</td><td align="left">输入框尺寸，只在 <code>type!=&quot;textarea&quot;</code> 时有效</td><td align="left">string</td><td align="left">medium &#x2F; small &#x2F; mini</td><td align="left">—</td></tr><tr><td align="left">prefix-icon</td><td align="left">输入框头部图标</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">suffix-icon</td><td align="left">输入框尾部图标</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">rows</td><td align="left">输入框行数，只对 <code>type=&quot;textarea&quot;</code> 有效</td><td align="left">number</td><td align="left">—</td><td align="left">2</td></tr><tr><td align="left">autosize</td><td align="left">自适应内容高度，只对 <code>type=&quot;textarea&quot;</code> 有效，可传入对象，如，{ minRows: 2, maxRows: 6 }</td><td align="left">boolean &#x2F; object</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">autocomplete</td><td align="left">原生属性，自动补全</td><td align="left">string</td><td align="left">—</td><td align="left">off</td></tr><tr><td align="left">name</td><td align="left">原生属性</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">readonly</td><td align="left">原生属性，是否只读</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">max</td><td align="left">原生属性，设置最大值</td><td align="left">—</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">min</td><td align="left">原生属性，设置最小值</td><td align="left">—</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">step</td><td align="left">原生属性，设置输入字段的合法数字间隔</td><td align="left">—</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">resize</td><td align="left">控制是否能被用户缩放</td><td align="left">string</td><td align="left">none, both, horizontal, vertical</td><td align="left">—</td></tr><tr><td align="left">autofocus</td><td align="left">原生属性，自动获取焦点</td><td align="left">boolean</td><td align="left">true, false</td><td align="left">false</td></tr><tr><td align="left">form</td><td align="left">原生属性</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">label</td><td align="left">输入框关联的 label 文字</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">tabindex</td><td align="left">输入框的 tabindex</td><td align="left">string &#x2F; number</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">validate-event</td><td align="left">输入时是否触发表单的校验</td><td align="left">boolean</td><td align="left">-</td><td align="left">true</td></tr><tr><td align="left">input-style</td><td align="left">input 元素或 textarea 元素的 style</td><td align="left">object</td><td align="left">-</td><td align="left">{}</td></tr></tbody></table><ul><li>el-input  插槽</li></ul><table><thead><tr><th align="left">name</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">prefix</td><td align="left">输入框头部内容，只对 <code>type=&quot;text&quot;</code> 有效</td></tr><tr><td align="left">suffix</td><td align="left">输入框尾部内容，只对 <code>type=&quot;text&quot;</code> 有效</td></tr><tr><td align="left">prepend</td><td align="left">输入框前置内容，只对 <code>type=&quot;text&quot;</code> 有效</td></tr><tr><td align="left">append</td><td align="left">输入框后置内容，只对 <code>type=&quot;text&quot;</code> 有效</td></tr></tbody></table><ul><li>el-input 事件</li></ul><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">blur</td><td align="left">在 Input 失去焦点时触发</td><td align="left">(event: Event)</td></tr><tr><td align="left">focus</td><td align="left">在 Input 获得焦点时触发</td><td align="left">(event: Event)</td></tr><tr><td align="left">change</td><td align="left">仅在输入框失去焦点或用户按下回车时触发</td><td align="left">(value: string | number)</td></tr><tr><td align="left">input</td><td align="left">在 Input 值改变时触发</td><td align="left">(value: string | number)</td></tr><tr><td align="left">clear</td><td align="left">在点击由 <code>clearable</code> 属性生成的清空按钮时触发</td><td align="left">—</td></tr></tbody></table><ul><li>el-input 方法</li></ul><table><thead><tr><th align="left">方法名</th><th align="left">说明</th><th align="left">参数</th></tr></thead><tbody><tr><td align="left">focus</td><td align="left">使 input 获取焦点</td><td align="left">—</td></tr><tr><td align="left">blur</td><td align="left">使 input 失去焦点</td><td align="left">—</td></tr><tr><td align="left">select</td><td align="left">选中 input 中的文字</td><td align="left">—</td></tr></tbody></table><ul><li>el-autocomplete</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">placeholder</td><td align="left">输入框占位文本</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">disabled</td><td align="left">禁用</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">value-key</td><td align="left">输入建议对象中用于显示的键名</td><td align="left">string</td><td align="left">—</td><td align="left">value</td></tr><tr><td align="left">model-value &#x2F; v-model</td><td align="left">必填值，输入绑定值</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">debounce</td><td align="left">获取输入建议的去抖延时</td><td align="left">number</td><td align="left">—</td><td align="left">300</td></tr><tr><td align="left">placement</td><td align="left">菜单弹出位置</td><td align="left">string</td><td align="left">top &#x2F; top-start &#x2F; top-end &#x2F; bottom &#x2F; bottom-start &#x2F; bottom-end</td><td align="left">bottom-start</td></tr><tr><td align="left">fetch-suggestions</td><td align="left">返回输入建议的方法，仅当你的输入建议数据 resolve 时，通过调用 callback(data:[]) 来返回它</td><td align="left">Function(queryString, callback)</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">popper-class</td><td align="left">Autocomplete 下拉列表的类名</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">trigger-on-focus</td><td align="left">是否在输入框 focus 时显示建议列表</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">name</td><td align="left">原生属性</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">select-when-unmatched</td><td align="left">在输入没有任何匹配建议的情况下，按下回车是否触发 <code>select</code> 事件</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">label</td><td align="left">输入框关联的 label 文字</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">prefix-icon</td><td align="left">输入框头部图标</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">suffix-icon</td><td align="left">输入框尾部图标</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">hide-loading</td><td align="left">是否隐藏远程加载时的加载图标</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">popper-append-to-body</td><td align="left">是否将下拉列表插入至 body 元素。在下拉列表的定位出现问题时，可将该属性设置为 false</td><td align="left">boolean</td><td align="left">-</td><td align="left">false</td></tr><tr><td align="left">highlight-first-item</td><td align="left">是否默认突出显示远程搜索建议中的第一项</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr></tbody></table><ul><li>el-autocomplete 插槽</li></ul><table><thead><tr><th align="left">name</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">prefix</td><td align="left">输入框头部内容</td></tr><tr><td align="left">suffix</td><td align="left">输入框尾部内容</td></tr><tr><td align="left">prepend</td><td align="left">输入框前置内容</td></tr><tr><td align="left">append</td><td align="left">输入框后置内容</td></tr></tbody></table><ul><li>el-autocomplete 事件</li></ul><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">select</td><td align="left">点击选中建议项时触发</td><td align="left">选中建议项</td></tr><tr><td align="left">change</td><td align="left">在 Input 值改变时触发</td><td align="left">(value: string | number)</td></tr></tbody></table><ul><li>el-autocomplete 方法</li></ul><table><thead><tr><th align="left">方法名</th><th align="left">说明</th><th align="left">参数</th></tr></thead><tbody><tr><td align="left">focus</td><td align="left">使 input 获取焦点</td><td align="left"></td></tr></tbody></table></li></ul></li><li><p>计数器</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-input-number</span><br><span class="line">    v-model=&quot;num&quot;</span><br><span class="line">    @change=&quot;handleChange&quot;</span><br><span class="line">    :min=&quot;1&quot;</span><br><span class="line">    :max=&quot;10&quot;</span><br><span class="line">    label=&quot;描述文字&quot;</span><br><span class="line">  &gt;&lt;/el-input-number&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        num: 1,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      handleChange(value) &#123;</span><br><span class="line">        console.log(value)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li>el-input-number</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">model-value &#x2F; v-model</td><td align="left">绑定值</td><td align="left">number &#x2F; undefined</td><td align="left">—</td><td align="left">0</td></tr><tr><td align="left">min</td><td align="left">设置计数器允许的最小值</td><td align="left">number</td><td align="left">—</td><td align="left">-Infinity</td></tr><tr><td align="left">max</td><td align="left">设置计数器允许的最大值</td><td align="left">number</td><td align="left">—</td><td align="left">Infinity</td></tr><tr><td align="left">step</td><td align="left">计数器步长</td><td align="left">number</td><td align="left">—</td><td align="left">1</td></tr><tr><td align="left">step-strictly</td><td align="left">是否只能输入 step 的倍数</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">precision</td><td align="left">数值精度</td><td align="left">number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">size</td><td align="left">计数器尺寸</td><td align="left">string</td><td align="left">large&#x2F;medium&#x2F;small&#x2F;mini</td><td align="left">large</td></tr><tr><td align="left">disabled</td><td align="left">是否禁用计数器</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">controls</td><td align="left">是否使用控制按钮</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">controls-position</td><td align="left">控制按钮位置</td><td align="left">string</td><td align="left">right</td><td align="left">-</td></tr><tr><td align="left">name</td><td align="left">原生属性</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">label</td><td align="left">输入框关联的 label 文字</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">placeholder</td><td align="left">输入框默认 placeholder</td><td align="left">string</td><td align="left">-</td><td align="left">-</td></tr></tbody></table><ul><li>el-input-number 事件</li></ul><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">change</td><td align="left">绑定值被改变时触发</td><td align="left">currentValue, oldValue</td></tr><tr><td align="left">blur</td><td align="left">在组件 Input 失去焦点时触发</td><td align="left">(event: Event)</td></tr><tr><td align="left">focus</td><td align="left">在组件 Input 获得焦点时触发</td><td align="left">(event: Event)</td></tr></tbody></table><ul><li>el-input-number 方法</li></ul><table><thead><tr><th align="left">方法名</th><th align="left">说明</th><th align="left">参数</th></tr></thead><tbody><tr><td align="left">focus</td><td align="left">使 input 获取焦点</td><td align="left">-</td></tr><tr><td align="left">select</td><td align="left">选中 input 中的文字</td><td align="left">—</td></tr></tbody></table></li></ul></li><li><p>Select 选择器</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-select v-model=&quot;value&quot; placeholder=&quot;请选择&quot;&gt;</span><br><span class="line">    &lt;el-option</span><br><span class="line">      v-for=&quot;item in options&quot;</span><br><span class="line">      :key=&quot;item.value&quot;</span><br><span class="line">      :label=&quot;item.label&quot;</span><br><span class="line">      :value=&quot;item.value&quot;</span><br><span class="line">    &gt;</span><br><span class="line">    &lt;/el-option&gt;</span><br><span class="line">  &lt;/el-select&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        options: [</span><br><span class="line">          &#123;value: &#x27;选项1&#x27;,label: &#x27;黄金糕&#x27;,&#125;,&#123;value: &#x27;选项2&#x27;,label: &#x27;双皮奶&#x27;,&#125;,</span><br><span class="line">          &#123;value: &#x27;选项3&#x27;,label: &#x27;蚵仔煎&#x27;,&#125;,&#123;value: &#x27;选项4&#x27;,label: &#x27;龙须面&#x27;,&#125;,</span><br><span class="line">          &#123;value: &#x27;选项5&#x27;,label: &#x27;北京烤鸭&#x27;,&#125;,],</span><br><span class="line">        value: &#x27;&#x27;,</span><br><span class="line">      &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 分组 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-select v-model=&quot;value&quot; placeholder=&quot;请选择&quot;&gt;</span><br><span class="line">    &lt;el-option-group</span><br><span class="line">      v-for=&quot;group in options&quot;</span><br><span class="line">      :key=&quot;group.label&quot;</span><br><span class="line">      :label=&quot;group.label&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;el-option</span><br><span class="line">        v-for=&quot;item in group.options&quot;</span><br><span class="line">        :key=&quot;item.value&quot;</span><br><span class="line">        :label=&quot;item.label&quot;</span><br><span class="line">        :value=&quot;item.value&quot;</span><br><span class="line">      &gt;</span><br><span class="line">      &lt;/el-option&gt;</span><br><span class="line">    &lt;/el-option-group&gt;</span><br><span class="line">  &lt;/el-select&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        options: [</span><br><span class="line">          &#123;label: &#x27;热门城市&#x27;,options: [</span><br><span class="line">              &#123;value: &#x27;Shanghai&#x27;,label: &#x27;上海&#x27;,&#125;,&#123;value: &#x27;Beijing&#x27;,label: &#x27;北京&#x27;,&#125;,</span><br><span class="line">            ],&#125;,</span><br><span class="line">          &#123;label: &#x27;城市名&#x27;,options: [</span><br><span class="line">              &#123;value: &#x27;Chengdu&#x27;,label: &#x27;成都&#x27;,&#125;,&#123;value: &#x27;Shenzhen&#x27;,label: &#x27;深圳&#x27;,&#125;,</span><br><span class="line">              &#123;value: &#x27;Guangzhou&#x27;,label: &#x27;广州&#x27;,&#125;,&#123;value: &#x27;Dalian&#x27;,label: &#x27;大连&#x27;,&#125;,],&#125;,</span><br><span class="line">        ],</span><br><span class="line">        value: &#x27;&#x27;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li>el-select</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">model-value &#x2F; v-model</td><td align="left">绑定值</td><td align="left">string &#x2F; number &#x2F; boolean &#x2F; object</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">multiple</td><td align="left">是否多选</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">disabled</td><td align="left">是否禁用</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">value-key</td><td align="left">作为 value 唯一标识的键名，绑定值为对象类型时必填</td><td align="left">string</td><td align="left">—</td><td align="left">value</td></tr><tr><td align="left">size</td><td align="left">输入框尺寸</td><td align="left">string</td><td align="left">medium&#x2F;small&#x2F;mini</td><td align="left">—</td></tr><tr><td align="left">clearable</td><td align="left">是否可以清空选项</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">collapse-tags</td><td align="left">多选时是否将选中值按文字的形式展示</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">multiple-limit</td><td align="left">多选时用户最多可以选择的项目数，为 0 则不限制</td><td align="left">number</td><td align="left">—</td><td align="left">0</td></tr><tr><td align="left">name</td><td align="left">select input 的 name 属性</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">autocomplete</td><td align="left">select input 的 autocomplete 属性</td><td align="left">string</td><td align="left">—</td><td align="left">off</td></tr><tr><td align="left">placeholder</td><td align="left">占位符</td><td align="left">string</td><td align="left">—</td><td align="left">请选择</td></tr><tr><td align="left">filterable</td><td align="left">是否可搜索</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">allow-create</td><td align="left">是否允许用户创建新条目，需配合 <code>filterable</code> 使用</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">filter-method</td><td align="left">自定义搜索方法</td><td align="left">function</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">remote</td><td align="left">是否为远程搜索</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">remote-method</td><td align="left">远程搜索方法</td><td align="left">function</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">loading</td><td align="left">是否正在从远程获取数据</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">loading-text</td><td align="left">远程加载时显示的文字</td><td align="left">string</td><td align="left">—</td><td align="left">加载中</td></tr><tr><td align="left">no-match-text</td><td align="left">搜索条件无匹配时显示的文字，也可以使用<code>#empty</code>设置</td><td align="left">string</td><td align="left">—</td><td align="left">无匹配数据</td></tr><tr><td align="left">no-data-text</td><td align="left">选项为空时显示的文字，也可以使用<code>#empty</code>设置</td><td align="left">string</td><td align="left">—</td><td align="left">无数据</td></tr><tr><td align="left">popper-class</td><td align="left">Select 下拉框的类名</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">reserve-keyword</td><td align="left">多选且可搜索时，是否在选中一个选项后保留当前的搜索关键词</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">default-first-option</td><td align="left">在输入框按下回车，选择第一个匹配项。需配合 <code>filterable</code> 或 <code>remote</code> 使用</td><td align="left">boolean</td><td align="left">-</td><td align="left">false</td></tr><tr><td align="left">popper-append-to-body</td><td align="left">是否将弹出框插入至 body 元素。在弹出框的定位出现问题时，可将该属性设置为 false</td><td align="left">boolean</td><td align="left">-</td><td align="left">true</td></tr><tr><td align="left">automatic-dropdown</td><td align="left">对于不可搜索的 Select，是否在输入框获得焦点后自动弹出选项菜单</td><td align="left">boolean</td><td align="left">-</td><td align="left">false</td></tr><tr><td align="left">clear-icon</td><td align="left">自定义清空图标的类名</td><td align="left">string</td><td align="left">—</td><td align="left">el-icon-circle-close</td></tr></tbody></table><ul><li>el-select 事件</li></ul><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">change</td><td align="left">选中值发生变化时触发</td><td align="left">目前的选中值</td></tr><tr><td align="left">visible-change</td><td align="left">下拉框出现&#x2F;隐藏时触发</td><td align="left">出现则为 true，隐藏则为 false</td></tr><tr><td align="left">remove-tag</td><td align="left">多选模式下移除 tag 时触发</td><td align="left">移除的 tag 值</td></tr><tr><td align="left">clear</td><td align="left">可清空的单选模式下用户点击清空按钮时触发</td><td align="left">—</td></tr><tr><td align="left">blur</td><td align="left">当 input 失去焦点时触发</td><td align="left">(event: Event)</td></tr><tr><td align="left">focus</td><td align="left">当 input 获得焦点时触发</td><td align="left">(event: Event)</td></tr></tbody></table><ul><li>el-select   插槽</li></ul><table><thead><tr><th align="left">name</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">—</td><td align="left">Option 组件列表</td></tr><tr><td align="left">prefix</td><td align="left">Select 组件头部内容</td></tr><tr><td align="left">empty</td><td align="left">无选项时的列表</td></tr></tbody></table><ul><li>el-option-group</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">value</td><td align="left">选项的值</td><td align="left">string &#x2F; number &#x2F; boolean &#x2F; object</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">label</td><td align="left">选项的标签，若不设置则默认与 <code>value</code> 相同</td><td align="left">string&#x2F;number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">disabled</td><td align="left">是否禁用该选项</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr></tbody></table><ul><li>el-option-group  方法</li></ul><table><thead><tr><th align="left">方法名</th><th align="left">说明</th><th align="left">参数</th></tr></thead><tbody><tr><td align="left">focus</td><td align="left">使 input 获取焦点</td><td align="left">-</td></tr><tr><td align="left">blur</td><td align="left">使 input 失去焦点，并隐藏下拉框</td><td align="left">-</td></tr></tbody></table></li></ul></li><li><p>级联选择器</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;block&quot;&gt;</span><br><span class="line">  &lt;span class=&quot;demonstration&quot;&gt;默认 click 触发子菜单&lt;/span&gt;</span><br><span class="line">  &lt;el-cascader</span><br><span class="line">    v-model=&quot;value&quot;</span><br><span class="line">    :options=&quot;options&quot;</span><br><span class="line">    @change=&quot;handleChange&quot;</span><br><span class="line">  &gt;&lt;/el-cascader&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;block&quot;&gt;</span><br><span class="line">  &lt;span class=&quot;demonstration&quot;&gt;hover 触发子菜单&lt;/span&gt;</span><br><span class="line">  &lt;el-cascader</span><br><span class="line">    v-model=&quot;value&quot;</span><br><span class="line">    :options=&quot;options&quot;</span><br><span class="line">    :props=&quot;props&quot;</span><br><span class="line">    @change=&quot;handleChange&quot;</span><br><span class="line">  &gt;&lt;/el-cascader&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        value: [],</span><br><span class="line">        props: &#123; expandTrigger: &#x27;hover&#x27; &#125;,</span><br><span class="line">        options: [</span><br><span class="line">          &#123;value: &#x27;zhinan&#x27;,label: &#x27;指南&#x27;,</span><br><span class="line">            children: [</span><br><span class="line">              &#123;value: &#x27;shejiyuanze&#x27;,label: &#x27;设计原则&#x27;,</span><br><span class="line">                children: [</span><br><span class="line">                  &#123;value: &#x27;yizhi&#x27;,label: &#x27;一致&#x27;,&#125;,</span><br><span class="line">                  &#123;value: &#x27;fankui&#x27;,label: &#x27;反馈&#x27;,&#125;,</span><br><span class="line">                  &#123;value: &#x27;xiaolv&#x27;,label: &#x27;效率&#x27;,&#125;,</span><br><span class="line">                  &#123;value: &#x27;kekong&#x27;,label: &#x27;可控&#x27;,&#125;,</span><br><span class="line">                ],</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;value: &#x27;daohang&#x27;,label: &#x27;导航&#x27;,</span><br><span class="line">                children: [</span><br><span class="line">                  &#123;value: &#x27;cexiangdaohang&#x27;,label: &#x27;侧向导航&#x27;,&#125;,</span><br><span class="line">                  &#123;value: &#x27;dingbudaohang&#x27;,label: &#x27;顶部导航&#x27;,&#125;,</span><br><span class="line">                ],</span><br><span class="line">              &#125;,</span><br><span class="line">            ],</span><br><span class="line">          &#125;,</span><br><span class="line">            </span><br><span class="line">          &#123;value: &#x27;zujian&#x27;,label: &#x27;组件&#x27;,</span><br><span class="line">            children: [</span><br><span class="line">              &#123;value: &#x27;basic&#x27;,label: &#x27;Basic&#x27;,</span><br><span class="line">                children: [</span><br><span class="line">                  &#123;value: &#x27;layout&#x27;,label: &#x27;Layout 布局&#x27;,&#125;,</span><br><span class="line">                  &#123;value: &#x27;color&#x27;,label: &#x27;Color 色彩&#x27;,&#125;,</span><br><span class="line">                  &#123;value: &#x27;typography&#x27;,label: &#x27;Typography 字体&#x27;,&#125;,</span><br><span class="line">                  &#123;value: &#x27;icon&#x27;,label: &#x27;Icon 图标&#x27;,&#125;,</span><br><span class="line">                  &#123;value: &#x27;button&#x27;,label: &#x27;Button 按钮&#x27;,&#125;,</span><br><span class="line">                ],</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;value: &#x27;form&#x27;,label: &#x27;Form&#x27;,</span><br><span class="line">                children: [</span><br><span class="line">                  &#123;value: &#x27;radio&#x27;,label: &#x27;Radio 单选框&#x27;,&#125;,</span><br><span class="line">                  &#123;value: &#x27;checkbox&#x27;,label: &#x27;Checkbox 多选框&#x27;,&#125;,</span><br><span class="line">                  &#123;value: &#x27;input&#x27;,label: &#x27;Input 输入框&#x27;,&#125;,</span><br><span class="line">                  &#123;value: &#x27;input-number&#x27;,label: &#x27;InputNumber 计数器&#x27;,&#125;,</span><br><span class="line">                  &#123;value: &#x27;select&#x27;,label: &#x27;Select 选择器&#x27;,&#125;,</span><br><span class="line">                  &#123;value: &#x27;cascader&#x27;,label: &#x27;Cascader 级联选择器&#x27;,&#125;,</span><br><span class="line">                  &#123;value: &#x27;switch&#x27;,label: &#x27;Switch 开关&#x27;,&#125;,</span><br><span class="line">                  &#123;value: &#x27;slider&#x27;,label: &#x27;Slider 滑块&#x27;,&#125;,</span><br><span class="line">                  &#123;value: &#x27;time-picker&#x27;,label: &#x27;TimePicker 时间选择器&#x27;,&#125;,</span><br><span class="line">                  &#123;value: &#x27;date-picker&#x27;,label: &#x27;DatePicker 日期选择器&#x27;,&#125;,</span><br><span class="line">                  &#123;value: &#x27;datetime-picker&#x27;,label: &#x27;DateTimePicker 日期时间选择器&#x27;,&#125;,</span><br><span class="line">                  &#123;value: &#x27;upload&#x27;,label: &#x27;Upload 上传&#x27;，&#125;,</span><br><span class="line">                  &#123;value: &#x27;rate&#x27;,label: &#x27;Rate 评分&#x27;,&#125;,</span><br><span class="line">                  &#123;value: &#x27;form&#x27;,label: &#x27;Form 表单&#x27;,&#125;,</span><br><span class="line">                ],</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;value: &#x27;data&#x27;,label: &#x27;Data&#x27;,</span><br><span class="line">                children: [</span><br><span class="line">                  &#123;value: &#x27;table&#x27;,label: &#x27;Table 表格&#x27;,&#125;,</span><br><span class="line">                  &#123;value: &#x27;tag&#x27;,label: &#x27;Tag 标签&#x27;,&#125;,</span><br><span class="line">                  &#123;value: &#x27;progress&#x27;,label: &#x27;Progress 进度条&#x27;,&#125;,</span><br><span class="line">                  &#123;value: &#x27;tree&#x27;,label: &#x27;Tree 树形控件&#x27;,&#125;,</span><br><span class="line">                  &#123;value: &#x27;pagination&#x27;,label: &#x27;Pagination 分页&#x27;,&#125;,</span><br><span class="line">                  &#123;value: &#x27;badge&#x27;,label: &#x27;Badge 标记&#x27;,&#125;,</span><br><span class="line">                ],</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;value: &#x27;notice&#x27;,label: &#x27;Notice&#x27;,</span><br><span class="line">                children: [</span><br><span class="line">                  &#123;value: &#x27;alert&#x27;,label: &#x27;Alert 警告&#x27;,&#125;,</span><br><span class="line">                  &#123;value: &#x27;loading&#x27;,label: &#x27;Loading 加载&#x27;,&#125;,</span><br><span class="line">                  &#123;value: &#x27;message&#x27;,label: &#x27;Message 消息提示&#x27;,&#125;,</span><br><span class="line">                  &#123;value: &#x27;message-box&#x27;,label: &#x27;MessageBox 弹框&#x27;,&#125;,</span><br><span class="line">                  &#123;value: &#x27;notification&#x27;,label: &#x27;Notification 通知&#x27;,&#125;,</span><br><span class="line">                ],</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;value: &#x27;navigation&#x27;,label: &#x27;Navigation&#x27;,</span><br><span class="line">                children: [</span><br><span class="line">                  &#123;value: &#x27;menu&#x27;,label: &#x27;NavMenu 导航菜单&#x27;,&#125;,</span><br><span class="line">                  &#123;value: &#x27;tabs&#x27;,label: &#x27;Tabs 标签页&#x27;,&#125;,</span><br><span class="line">                  &#123;value: &#x27;breadcrumb&#x27;,label: &#x27;Breadcrumb 面包屑&#x27;,&#125;,</span><br><span class="line">                  &#123;value: &#x27;dropdown&#x27;,label: &#x27;Dropdown 下拉菜单&#x27;,&#125;,</span><br><span class="line">                  &#123;value: &#x27;steps&#x27;,label: &#x27;Steps 步骤条&#x27;,&#125;,</span><br><span class="line">                ],</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;value: &#x27;others&#x27;,label: &#x27;Others&#x27;,</span><br><span class="line">                children: [</span><br><span class="line">                  &#123;value: &#x27;dialog&#x27;,label: &#x27;Dialog 对话框&#x27;,&#125;,</span><br><span class="line">                  &#123;value: &#x27;tooltip&#x27;,label: &#x27;Tooltip 文字提示&#x27;,&#125;,</span><br><span class="line">                  &#123;value: &#x27;popover&#x27;,label: &#x27;Popover 弹出框&#x27;,&#125;,</span><br><span class="line">                  &#123;value: &#x27;card&#x27;,label: &#x27;Card 卡片&#x27;,&#125;,</span><br><span class="line">                  &#123;value: &#x27;carousel&#x27;,label: &#x27;Carousel 走马灯&#x27;,&#125;,</span><br><span class="line">                  &#123;value: &#x27;collapse&#x27;,label: &#x27;Collapse 折叠面板&#x27;,&#125;,</span><br><span class="line">                ],</span><br><span class="line">              &#125;,</span><br><span class="line">            ],</span><br><span class="line">          &#125;,</span><br><span class="line">            </span><br><span class="line">          &#123;value: &#x27;ziyuan&#x27;,label: &#x27;资源&#x27;,</span><br><span class="line">            children: [</span><br><span class="line">              &#123;value: &#x27;axure&#x27;,label: &#x27;Axure Components&#x27;,&#125;,</span><br><span class="line">              &#123;value: &#x27;sketch&#x27;,label: &#x27;Sketch Templates&#x27;,&#125;,</span><br><span class="line">              &#123;value: &#x27;jiaohu&#x27;,label: &#x27;组件交互文档&#x27;,&#125;,</span><br><span class="line">            ],</span><br><span class="line">          &#125;,</span><br><span class="line">            </span><br><span class="line">        ],</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      handleChange(value) &#123;</span><br><span class="line">        console.log(value)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 级联面板 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-cascader-panel :options=&quot;options&quot;&gt;&lt;/el-cascader-panel&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">          // options 与上述一样</span><br><span class="line">        options: [],</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li>el-cascader</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">model-value &#x2F; v-model</td><td align="left">选中项绑定值</td><td align="left">-</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">options</td><td align="left">可选项数据源，键名可通过 <code>Props</code> 属性配置</td><td align="left">array</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">props</td><td align="left">配置选项，具体见下表</td><td align="left">object</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">size</td><td align="left">尺寸</td><td align="left">string</td><td align="left">medium &#x2F; small &#x2F; mini</td><td align="left">—</td></tr><tr><td align="left">placeholder</td><td align="left">输入框占位文本</td><td align="left">string</td><td align="left">—</td><td align="left">请选择</td></tr><tr><td align="left">disabled</td><td align="left">是否禁用</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">clearable</td><td align="left">是否支持清空选项</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">show-all-levels</td><td align="left">输入框中是否显示选中值的完整路径</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">collapse-tags</td><td align="left">多选模式下是否折叠 Tag</td><td align="left">boolean</td><td align="left">-</td><td align="left">false</td></tr><tr><td align="left">separator</td><td align="left">选项分隔符</td><td align="left">string</td><td align="left">—</td><td align="left">斜杠’ &#x2F; ‘</td></tr><tr><td align="left">filterable</td><td align="left">是否可搜索选项</td><td align="left">boolean</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">filter-method</td><td align="left">自定义搜索逻辑，第一个参数是节点<code>node</code>，第二个参数是搜索关键词<code>keyword</code>，通过返回布尔值表示是否命中</td><td align="left">function(node, keyword)</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">debounce</td><td align="left">搜索关键词输入的去抖延迟，毫秒</td><td align="left">number</td><td align="left">—</td><td align="left">300</td></tr><tr><td align="left">before-filter</td><td align="left">筛选之前的钩子，参数为输入的值，若返回 false 或者返回 Promise 且被 reject，则停止筛选</td><td align="left">function(value)</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">popper-class</td><td align="left">自定义浮层类名</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">popper-append-to-body</td><td align="left">是否将弹出框插入至 body 元素。在弹出框的定位出现问题时，可将该属性设置为 false</td><td align="left">boolean</td><td align="left">-</td><td align="left">true</td></tr></tbody></table><ul><li>el-cascader 事件</li></ul><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">change</td><td align="left">当选中节点变化时触发</td><td align="left">选中节点的值</td></tr><tr><td align="left">expand-change</td><td align="left">当展开节点发生变化时触发</td><td align="left">各父级选项值组成的数组</td></tr><tr><td align="left">blur</td><td align="left">当失去焦点时触发</td><td align="left">(event: Event)</td></tr><tr><td align="left">focus</td><td align="left">当获得焦点时触发</td><td align="left">(event: Event)</td></tr><tr><td align="left">visible-change</td><td align="left">下拉框出现&#x2F;隐藏时触发</td><td align="left">出现则为 true，隐藏则为 false</td></tr><tr><td align="left">remove-tag</td><td align="left">在多选模式下，移除 Tag 时触发</td><td align="left">移除的 Tag 对应的节点的值</td></tr></tbody></table><ul><li>el-cascader 方法</li></ul><table><thead><tr><th align="left">方法名</th><th align="left">说明</th><th align="left">参数</th></tr></thead><tbody><tr><td align="left">getCheckedNodes</td><td align="left">获取选中的节点</td><td align="left">(leafOnly) 是否只是叶子节点，默认值为 <code>false</code></td></tr></tbody></table><ul><li>el-cascader 插槽</li></ul><table><thead><tr><th align="left">名称</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-</td><td align="left">自定义备选项的节点内容，参数为 { node, data }，分别为当前节点的 Node 对象和数据</td></tr><tr><td align="left">empty</td><td align="left">无匹配选项时的内容</td></tr></tbody></table><ul><li>el-cascader-panel</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">model-value &#x2F; v-model</td><td align="left">选中项绑定值</td><td align="left">-</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">options</td><td align="left">可选项数据源，键名可通过 <code>Props</code> 属性配置</td><td align="left">array</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">props</td><td align="left">配置选项，具体见下表</td><td align="left">object</td><td align="left">—</td><td align="left">—</td></tr></tbody></table><ul><li>el-cascader-panel  事件</li></ul><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">change</td><td align="left">当选中节点变化时触发</td><td align="left">选中节点的值</td></tr><tr><td align="left">expand-change</td><td align="left">当展开节点发生变化时触发</td><td align="left">各父级选项值组成的数组</td></tr></tbody></table><ul><li>el-cascader-panel 方法</li></ul><table><thead><tr><th align="left">方法名</th><th align="left">说明</th><th align="left">参数</th></tr></thead><tbody><tr><td align="left">getCheckedNodes</td><td align="left">获取选中的节点数组</td><td align="left">(leafOnly) 是否只是叶子节点，默认值为 <code>false</code></td></tr><tr><td align="left">clearCheckedNodes</td><td align="left">清空选中的节点</td><td align="left">-</td></tr></tbody></table><ul><li>el-cascader-panel 插槽</li></ul><table><thead><tr><th align="left">名称</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-</td><td align="left">自定义备选项的节点内容，参数为 { node, data }，分别为当前节点的 Node 对象和数据</td></tr></tbody></table><ul><li>props</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">expandTrigger</td><td align="left">次级菜单的展开方式</td><td align="left">string</td><td align="left">click &#x2F; hover</td><td align="left">‘click’</td></tr><tr><td align="left">multiple</td><td align="left">是否多选</td><td align="left">boolean</td><td align="left">-</td><td align="left">false</td></tr><tr><td align="left">checkStrictly</td><td align="left">是否严格的遵守父子节点不互相关联</td><td align="left">boolean</td><td align="left">-</td><td align="left">false</td></tr><tr><td align="left">emitPath</td><td align="left">在选中节点改变时，是否返回由该节点所在的各级菜单的值所组成的数组，若设置 false，则只返回该节点的值</td><td align="left">boolean</td><td align="left">-</td><td align="left">true</td></tr><tr><td align="left">lazy</td><td align="left">是否动态加载子节点，需与 lazyLoad 方法结合使用</td><td align="left">boolean</td><td align="left">-</td><td align="left">false</td></tr><tr><td align="left">lazyLoad</td><td align="left">加载动态数据的方法，仅在 lazy 为 true 时有效</td><td align="left">function(node, resolve)，<code>node</code>为当前点击的节点，<code>resolve</code>为数据加载完成的回调(必须调用)</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">value</td><td align="left">指定选项的值为选项对象的某个属性值</td><td align="left">string</td><td align="left">—</td><td align="left">‘value’</td></tr><tr><td align="left">label</td><td align="left">指定选项标签为选项对象的某个属性值</td><td align="left">string</td><td align="left">—</td><td align="left">‘label’</td></tr><tr><td align="left">children</td><td align="left">指定选项的子选项为选项对象的某个属性值</td><td align="left">string</td><td align="left">—</td><td align="left">‘children’</td></tr><tr><td align="left">disabled</td><td align="left">指定选项的禁用为选项对象的某个属性值</td><td align="left">string</td><td align="left">—</td><td align="left">‘disabled’</td></tr><tr><td align="left">leaf</td><td align="left">指定选项的叶子节点的标志位为选项对象的某个属性值</td><td align="left">string</td><td align="left">—</td><td align="left">‘leaf’</td></tr></tbody></table></li></ul></li><li><p>开关</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-switch v-model=&quot;value1&quot; active-text=&quot;按月付费&quot; inactive-text=&quot;按年付费&quot;&gt;</span><br><span class="line">&lt;/el-switch&gt;</span><br><span class="line">&lt;el-switch</span><br><span class="line">  style=&quot;display: block&quot;</span><br><span class="line">  v-model=&quot;value2&quot;</span><br><span class="line">  active-color=&quot;#13ce66&quot;</span><br><span class="line">  inactive-color=&quot;#ff4949&quot;</span><br><span class="line">  active-text=&quot;按月付费&quot;</span><br><span class="line">  inactive-text=&quot;按年付费&quot;</span><br><span class="line">&gt;</span><br><span class="line">&lt;/el-switch&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        value1: true,</span><br><span class="line">        value2: true,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li>el-switch</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">model-value &#x2F; v-model</td><td align="left">绑定值，必须等于<code>active-value</code>或<code>inactive-value</code>，默认为<code>Boolean</code>类型</td><td align="left">boolean &#x2F; string &#x2F; number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">disabled</td><td align="left">是否禁用</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">loading</td><td align="left">是否显示加载中</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">width</td><td align="left">switch 的宽度（像素）</td><td align="left">number</td><td align="left">—</td><td align="left">40</td></tr><tr><td align="left">active-icon-class</td><td align="left">switch 打开时所显示图标的类名，设置此项会忽略 <code>active-text</code></td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">inactive-icon-class</td><td align="left">switch 关闭时所显示图标的类名，设置此项会忽略 <code>inactive-text</code></td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">active-text</td><td align="left">switch 打开时的文字描述</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">inactive-text</td><td align="left">switch 关闭时的文字描述</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">active-value</td><td align="left">switch 打开时的值</td><td align="left">boolean &#x2F; string &#x2F; number</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">inactive-value</td><td align="left">switch 关闭时的值</td><td align="left">boolean &#x2F; string &#x2F; number</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">active-color</td><td align="left">switch 打开时的背景色</td><td align="left">string</td><td align="left">—</td><td align="left">#409EFF</td></tr><tr><td align="left">inactive-color</td><td align="left">switch 关闭时的背景色</td><td align="left">string</td><td align="left">—</td><td align="left">#C0CCDA</td></tr><tr><td align="left">border-color</td><td align="left">switch 边框颜色</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">name</td><td align="left">switch 对应的 name 属性</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">validate-event</td><td align="left">改变 switch 状态时是否触发表单的校验</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">before-change</td><td align="left">switch 状态改变前的钩子，返回 false 或者返回 Promise 且被 reject 则停止切换</td><td align="left">function</td><td align="left">—</td><td align="left">—</td></tr></tbody></table><ul><li>事件</li></ul><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">change</td><td align="left">switch 状态发生变化时的回调函数</td><td align="left">新状态的值</td></tr></tbody></table><ul><li>方法</li></ul><table><thead><tr><th align="left">方法名</th><th align="left">说明</th><th align="left">参数</th></tr></thead><tbody><tr><td align="left">focus</td><td align="left">使 Switch 获取焦点</td><td align="left">-</td></tr></tbody></table></li></ul></li><li><p>滑块</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;block&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;demonstration&quot;&gt;默认&lt;/span&gt;</span><br><span class="line">    &lt;el-slider v-model=&quot;value1&quot;&gt;&lt;/el-slider&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        value1: 0,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      formatTooltip(val) &#123;</span><br><span class="line">        return val / 100</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li>el-slider</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">model-value &#x2F; v-model</td><td align="left">绑定值</td><td align="left">number</td><td align="left">—</td><td align="left">0</td></tr><tr><td align="left">min</td><td align="left">最小值</td><td align="left">number</td><td align="left">—</td><td align="left">0</td></tr><tr><td align="left">max</td><td align="left">最大值</td><td align="left">number</td><td align="left">—</td><td align="left">100</td></tr><tr><td align="left">disabled</td><td align="left">是否禁用</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">step</td><td align="left">步长</td><td align="left">number</td><td align="left">—</td><td align="left">1</td></tr><tr><td align="left">show-input</td><td align="left">是否显示输入框，仅在非范围选择时有效</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">show-input-controls</td><td align="left">在显示输入框的情况下，是否显示输入框的控制按钮</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">input-size</td><td align="left">输入框的尺寸</td><td align="left">string</td><td align="left">large &#x2F; medium &#x2F; small &#x2F; mini</td><td align="left">small</td></tr><tr><td align="left">show-stops</td><td align="left">是否显示间断点</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">show-tooltip</td><td align="left">是否显示 tooltip</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">format-tooltip</td><td align="left">格式化 tooltip message</td><td align="left">function(value)</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">range</td><td align="left">是否为范围选择</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">vertical</td><td align="left">是否竖向模式</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">height</td><td align="left">Slider 高度，竖向模式时必填</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">label</td><td align="left">屏幕阅读器标签</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">debounce</td><td align="left">输入时的去抖延迟，毫秒，仅在<code>show-input</code>等于 true 时有效</td><td align="left">number</td><td align="left">—</td><td align="left">300</td></tr><tr><td align="left">tooltip-class</td><td align="left">tooltip 的自定义类名</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">marks</td><td align="left">标记， key 的类型必须为 number 且取值在闭区间 <code>[min, max]</code> 内，每个标记可以单独设置样式</td><td align="left">object</td><td align="left">—</td><td align="left">—</td></tr></tbody></table><ul><li>el-slider  事件</li></ul><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">change</td><td align="left">值改变时触发（使用鼠标拖曳时，只在松开鼠标后触发）</td><td align="left">改变后的值</td></tr><tr><td align="left">input</td><td align="left">数据改变时触发（使用鼠标拖曳时，活动过程实时触发）</td><td align="left">改变后的值</td></tr></tbody></table></li></ul></li><li><p>事件选择器</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-time-picker</span><br><span class="line">    v-model=&quot;value1&quot;</span><br><span class="line">    :disabled-hours=&quot;disabledHours&quot;</span><br><span class="line">    :disabled-minutes=&quot;disabledMinutes&quot;</span><br><span class="line">    :disabled-seconds=&quot;disabledSeconds&quot;</span><br><span class="line">    placeholder=&quot;任意时间点&quot;</span><br><span class="line">  &gt;</span><br><span class="line">  &lt;/el-time-picker&gt;</span><br><span class="line">  &lt;el-time-picker</span><br><span class="line">    arrow-control</span><br><span class="line">    v-model=&quot;value2&quot;</span><br><span class="line">    :disabled-hours=&quot;disabledHours&quot;</span><br><span class="line">    :disabled-minutes=&quot;disabledMinutes&quot;</span><br><span class="line">    :disabled-seconds=&quot;disabledSeconds&quot;</span><br><span class="line">    placeholder=&quot;任意时间点&quot;</span><br><span class="line">  &gt;</span><br><span class="line">  &lt;/el-time-picker&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  const makeRange = (start, end) =&gt; &#123;</span><br><span class="line">    const result = []</span><br><span class="line">    for (let i = start; i &lt;= end; i++) &#123;</span><br><span class="line">      result.push(i)</span><br><span class="line">    &#125;</span><br><span class="line">    return result</span><br><span class="line">  &#125;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        value1: new Date(2016, 9, 10, 18, 40),</span><br><span class="line">        value2: new Date(2016, 9, 10, 18, 40),</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      // 如允许 17:30:00 - 18:30:00</span><br><span class="line">      disabledHours() &#123;</span><br><span class="line">        return makeRange(0, 16).concat(makeRange(19, 23))</span><br><span class="line">      &#125;,</span><br><span class="line">      disabledMinutes(hour) &#123;</span><br><span class="line">        if (hour === 17) &#123;</span><br><span class="line">          return makeRange(0, 29)</span><br><span class="line">        &#125;</span><br><span class="line">        if (hour === 18) &#123;</span><br><span class="line">          return makeRange(31, 59)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      disabledSeconds(hour, minute) &#123;</span><br><span class="line">        if (hour === 18 &amp;&amp; minute === 30) &#123;</span><br><span class="line">          return makeRange(1, 59)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li>el-time-picker</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">model-value &#x2F; v-model</td><td align="left">绑定值</td><td align="left">date</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">readonly</td><td align="left">完全只读</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">disabled</td><td align="left">禁用</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">editable</td><td align="left">文本框可输入</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">clearable</td><td align="left">是否显示清除按钮</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">size</td><td align="left">输入框尺寸</td><td align="left">string</td><td align="left">medium &#x2F; small &#x2F; mini</td><td align="left">—</td></tr><tr><td align="left">placeholder</td><td align="left">非范围选择时的占位内容</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">start-placeholder</td><td align="left">范围选择时开始日期的占位内容</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">end-placeholder</td><td align="left">范围选择时开始日期的占位内容</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">is-range</td><td align="left">是否为时间范围选择</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">arrow-control</td><td align="left">是否使用箭头进行时间选择</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">align</td><td align="left">对齐方式</td><td align="left">string</td><td align="left">left &#x2F; center &#x2F; right</td><td align="left">left</td></tr><tr><td align="left">popper-class</td><td align="left">TimePicker 下拉框的类名</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">range-separator</td><td align="left">选择范围时的分隔符</td><td align="left">string</td><td align="left">—</td><td align="left">‘-‘</td></tr><tr><td align="left">format</td><td align="left">显示在输入框中的格式</td><td align="left">string</td><td align="left">见<a href="https://element-plus.gitee.io/#/zh-CN/component/date-picker#ri-qi-ge-shi">日期格式</a></td><td align="left">HH:mm:ss</td></tr><tr><td align="left">default-value</td><td align="left">可选，选择器打开时默认显示的时间</td><td align="left">Date(TimePicker) &#x2F; string(TimeSelect)</td><td align="left">可被<code>new Date()</code>解析(TimePicker) &#x2F; 可选值(TimeSelect)</td><td align="left">—</td></tr><tr><td align="left">name</td><td align="left">原生属性</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">prefix-icon</td><td align="left">自定义头部图标的类名</td><td align="left">string</td><td align="left">—</td><td align="left">el-icon-time</td></tr><tr><td align="left">clear-icon</td><td align="left">自定义清空图标的类名</td><td align="left">string</td><td align="left">—</td><td align="left">el-icon-circle-close</td></tr><tr><td align="left">disabled-hours</td><td align="left">禁止选择部分小时选项</td><td align="left">function</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">disabled-minutes</td><td align="left">禁止选择部分分钟选项</td><td align="left">function(selectedHour)</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">disabled-seconds</td><td align="left">禁止选择部分秒选项</td><td align="left">function(selectedHour, selectedMinute)</td><td align="left">—</td><td align="left">—</td></tr></tbody></table><ul><li>el-time-picker  事件</li></ul><table><thead><tr><th align="left">事件名</th><th align="left">说明</th><th align="left">参数</th></tr></thead><tbody><tr><td align="left">change</td><td align="left">用户确认选定的值时触发</td><td align="left">组件绑定值</td></tr><tr><td align="left">blur</td><td align="left">当 input 失去焦点时触发</td><td align="left">组件实例</td></tr><tr><td align="left">focus</td><td align="left">当 input 获得焦点时触发</td><td align="left">组件实例</td></tr></tbody></table><ul><li>el-time-picker   方法</li></ul><table><thead><tr><th align="left">方法名</th><th align="left">说明</th><th align="left">参数</th></tr></thead><tbody><tr><td align="left">focus</td><td align="left">使 input 获取焦点</td><td align="left">—</td></tr><tr><td align="left">blur</td><td align="left">使 input 失去焦点</td><td align="left">—</td></tr></tbody></table></li></ul></li><li><p>日期选择器</p><ul><li><p>实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;block&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;demonstration&quot;&gt;默认&lt;/span&gt;</span><br><span class="line">    &lt;el-date-picker v-model=&quot;value1&quot; type=&quot;date&quot; placeholder=&quot;选择日期&quot;&gt;</span><br><span class="line">    &lt;/el-date-picker&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;block&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;demonstration&quot;&gt;带快捷选项&lt;/span&gt;</span><br><span class="line">    &lt;el-date-picker</span><br><span class="line">      v-model=&quot;value2&quot;</span><br><span class="line">      type=&quot;date&quot;</span><br><span class="line">      placeholder=&quot;选择日期&quot;</span><br><span class="line">      :disabled-date=&quot;disabledDate&quot;</span><br><span class="line">      :shortcuts=&quot;shortcuts&quot;</span><br><span class="line">    &gt;</span><br><span class="line">    &lt;/el-date-picker&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        disabledDate(time) &#123;</span><br><span class="line">          return time.getTime() &gt; Date.now()</span><br><span class="line">        &#125;,</span><br><span class="line">        shortcuts: [</span><br><span class="line">          &#123;</span><br><span class="line">            text: &#x27;Today&#x27;,</span><br><span class="line">            value: new Date(),</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            text: &#x27;Yesterday&#x27;,</span><br><span class="line">            value: () =&gt; &#123;</span><br><span class="line">              const date = new Date()</span><br><span class="line">              date.setTime(date.getTime() - 3600 * 1000 * 24)</span><br><span class="line">              return date</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            text: &#x27;A week ago&#x27;,</span><br><span class="line">            value: () =&gt; &#123;</span><br><span class="line">              const date = new Date()</span><br><span class="line">              date.setTime(date.getTime() - 3600 * 1000 * 24 * 7)</span><br><span class="line">              return date</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">        value1: &#x27;&#x27;,</span><br><span class="line">        value2: &#x27;&#x27;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>el-data-picker</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">model-value &#x2F; v-model</td><td align="left">绑定值</td><td align="left">date(DatePicker) &#x2F; array(DateRangePicker)</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">readonly</td><td align="left">完全只读</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">disabled</td><td align="left">禁用</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">editable</td><td align="left">文本框可输入</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">clearable</td><td align="left">是否显示清除按钮</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">size</td><td align="left">输入框尺寸</td><td align="left">string</td><td align="left">large&#x2F;medium&#x2F;small&#x2F;mini</td><td align="left">large</td></tr><tr><td align="left">placeholder</td><td align="left">非范围选择时的占位内容</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">start-placeholder</td><td align="left">范围选择时开始日期的占位内容</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">end-placeholder</td><td align="left">范围选择时结束日期的占位内容</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">type</td><td align="left">显示类型</td><td align="left">string</td><td align="left">year&#x2F;month&#x2F;date&#x2F;dates&#x2F; week&#x2F;datetime&#x2F;datetimerange&#x2F; daterange&#x2F;monthrange</td><td align="left">date</td></tr><tr><td align="left">format</td><td align="left">显示在输入框中的格式</td><td align="left">string</td><td align="left">见<a href="https://element-plus.gitee.io/#/zh-CN/component/date-picker#ri-qi-ge-shi">日期格式</a></td><td align="left">YYYY-MM-DD</td></tr><tr><td align="left">popper-class</td><td align="left">DatePicker 下拉框的类名</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">range-separator</td><td align="left">选择范围时的分隔符</td><td align="left">string</td><td align="left">—</td><td align="left">‘-‘</td></tr><tr><td align="left">default-value</td><td align="left">可选，选择器打开时默认显示的时间</td><td align="left">Date</td><td align="left">可被<code>new Date()</code>解析</td><td align="left">—</td></tr><tr><td align="left">default-time</td><td align="left">范围选择时选中日期所使用的当日内具体时刻</td><td align="left">Date[]</td><td align="left">数组，长度为 2，第一项指定开始日期的时刻，第二项指定结束日期的时刻，不指定会使用时刻 <code>00:00:00</code></td><td align="left">—</td></tr><tr><td align="left">value-format</td><td align="left">可选，绑定值的格式。不指定则绑定值为 Date 对象</td><td align="left">string</td><td align="left">见<a href="https://element-plus.gitee.io/#/zh-CN/component/date-picker#ri-qi-ge-shi">日期格式</a></td><td align="left">—</td></tr><tr><td align="left">name</td><td align="left">原生属性</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">unlink-panels</td><td align="left">在范围选择器里取消两个日期面板之间的联动</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">prefix-icon</td><td align="left">自定义头部图标的类名</td><td align="left">string</td><td align="left">—</td><td align="left">el-icon-date</td></tr><tr><td align="left">clear-icon</td><td align="left">自定义清空图标的类名</td><td align="left">string</td><td align="left">—</td><td align="left">el-icon-circle-close</td></tr><tr><td align="left">validate-event</td><td align="left">输入时是否触发表单的校验</td><td align="left">boolean</td><td align="left">-</td><td align="left">true</td></tr><tr><td align="left">shortcuts</td><td align="left">设置快捷选项，需要传入数组对象</td><td align="left">object[{ text: string, value: date &#x2F; function }]</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">disabledDate</td><td align="left">设置禁用状态，参数为当前日期，要求返回 Boolean</td><td align="left">Function</td><td align="left">—</td><td align="left">—</td></tr></tbody></table><ul><li>el-data-picker  事件</li></ul><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">change</td><td align="left">用户确认选定的值时触发</td><td align="left">组件绑定值</td></tr><tr><td align="left">blur</td><td align="left">当 input 失去焦点时触发</td><td align="left">组件实例</td></tr><tr><td align="left">focus</td><td align="left">当 input 获得焦点时触发</td><td align="left">组件实例</td></tr><tr><td align="left">calendar-change</td><td align="left">选中日历日期后会执行的回调，只有当 <code>daterange</code> 才生效</td><td align="left">[Date, Date]</td></tr></tbody></table><ul><li>el-data-picker   方法</li></ul><table><thead><tr><th align="left">方法名</th><th align="left">说明</th><th align="left">参数</th></tr></thead><tbody><tr><td align="left">focus</td><td align="left">使 input 获取焦点</td><td align="left">—</td></tr></tbody></table></li></ul></li><li><p>上传</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-upload</span><br><span class="line">  class=&quot;upload-demo&quot;</span><br><span class="line">  drag</span><br><span class="line">  action=&quot;https://...&quot;</span><br><span class="line">  multiple</span><br><span class="line">&gt;</span><br><span class="line">  &lt;i class=&quot;el-icon-upload&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;div class=&quot;el-upload__text&quot;&gt;将文件拖到此处，或&lt;em&gt;点击上传&lt;/em&gt;&lt;/div&gt;</span><br><span class="line">  &lt;template #tip&gt;</span><br><span class="line">    &lt;div class=&quot;el-upload__tip&quot;&gt;只能上传 jpg/png 文件，且不超过 500kb&lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/el-upload&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li>el-upload</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">action</td><td align="left">必选参数，上传的地址</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">headers</td><td align="left">设置上传的请求头部</td><td align="left">object</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">multiple</td><td align="left">是否支持多选文件</td><td align="left">boolean</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">data</td><td align="left">上传时附带的额外参数</td><td align="left">object</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">name</td><td align="left">上传的文件字段名</td><td align="left">string</td><td align="left">—</td><td align="left">file</td></tr><tr><td align="left">with-credentials</td><td align="left">支持发送 cookie 凭证信息</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">show-file-list</td><td align="left">是否显示已上传文件列表</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">drag</td><td align="left">是否启用拖拽上传</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">accept</td><td align="left">接受上传的<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-accept">文件类型</a>（thumbnail-mode 模式下此参数无效）</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">on-preview</td><td align="left">点击文件列表中已上传的文件时的钩子</td><td align="left">function(file)</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">on-remove</td><td align="left">文件列表移除文件时的钩子</td><td align="left">function(file, fileList)</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">on-success</td><td align="left">文件上传成功时的钩子</td><td align="left">function(response, file, fileList)</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">on-error</td><td align="left">文件上传失败时的钩子</td><td align="left">function(err, file, fileList)</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">on-progress</td><td align="left">文件上传时的钩子</td><td align="left">function(event, file, fileList)</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">on-change</td><td align="left">文件状态改变时的钩子，添加文件、上传成功和上传失败时都会被调用</td><td align="left">function(file, fileList)</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">before-upload</td><td align="left">上传文件之前的钩子，参数为上传的文件，若返回 false 或者返回 Promise 且被 reject，则停止上传。</td><td align="left">function(file)</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">before-remove</td><td align="left">删除文件之前的钩子，参数为上传的文件和文件列表，若返回 false 或者返回 Promise 且被 reject，则停止删除。</td><td align="left">function(file, fileList)</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">list-type</td><td align="left">文件列表的类型</td><td align="left">string</td><td align="left">text&#x2F;picture&#x2F;picture-card</td><td align="left">text</td></tr><tr><td align="left">auto-upload</td><td align="left">是否在选取文件后立即进行上传</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">file-list</td><td align="left">上传的文件列表, 例如: [{name: ‘food.jpg’, url: ‘<a href="https://xxx.cdn.com/xxx.jpg'%7D]">https://xxx.cdn.com/xxx.jpg&#39;}]</a></td><td align="left">array</td><td align="left">—</td><td align="left">[]</td></tr><tr><td align="left">http-request</td><td align="left">覆盖默认的上传行为，可以自定义上传的实现</td><td align="left">function</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">disabled</td><td align="left">是否禁用</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">limit</td><td align="left">最大允许上传个数</td><td align="left">number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">on-exceed</td><td align="left">文件超出个数限制时的钩子</td><td align="left">function(files, fileList)</td><td align="left">—</td><td align="left">-</td></tr></tbody></table><ul><li>el-upload   插槽</li></ul><table><thead><tr><th align="left">name</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">trigger</td><td align="left">触发文件选择框的内容</td></tr><tr><td align="left">tip</td><td align="left">提示说明文字</td></tr></tbody></table><ul><li>el-upload 方法</li></ul><table><thead><tr><th align="left">方法名</th><th align="left">说明</th><th align="left">参数</th></tr></thead><tbody><tr><td align="left">clearFiles</td><td align="left">清空已上传的文件列表（该方法不支持在 before-upload 中调用）</td><td align="left">—</td></tr><tr><td align="left">abort</td><td align="left">取消上传请求</td><td align="left">（ file: fileList 中的 file 对象 ）</td></tr><tr><td align="left">submit</td><td align="left">手动上传文件列表</td><td align="left">—</td></tr></tbody></table></li></ul></li><li><p>评分</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-rate</span><br><span class="line">  v-model=&quot;value&quot;</span><br><span class="line">  disabled</span><br><span class="line">  show-score</span><br><span class="line">  text-color=&quot;#ff9900&quot;</span><br><span class="line">  score-template=&quot;&#123;value&#125;&quot;</span><br><span class="line">&gt;</span><br><span class="line">&lt;/el-rate&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        value: 3.7,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li>el-rate</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">model-value &#x2F; v-model</td><td align="left">绑定值</td><td align="left">number</td><td align="left">—</td><td align="left">0</td></tr><tr><td align="left">max</td><td align="left">最大分值</td><td align="left">number</td><td align="left">—</td><td align="left">5</td></tr><tr><td align="left">disabled</td><td align="left">是否为只读</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">allow-half</td><td align="left">是否允许半选</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">low-threshold</td><td align="left">低分和中等分数的界限值，值本身被划分在低分中</td><td align="left">number</td><td align="left">—</td><td align="left">2</td></tr><tr><td align="left">high-threshold</td><td align="left">高分和中等分数的界限值，值本身被划分在高分中</td><td align="left">number</td><td align="left">—</td><td align="left">4</td></tr><tr><td align="left">colors</td><td align="left">icon 的颜色。若传入数组，共有 3 个元素，为 3 个分段所对应的颜色；若传入对象，可自定义分段，键名为分段的界限值，键值为对应的颜色</td><td align="left">array&#x2F;object</td><td align="left">—</td><td align="left">[‘#F7BA2A’, ‘#F7BA2A’, ‘#F7BA2A’]</td></tr><tr><td align="left">void-color</td><td align="left">未选中 icon 的颜色</td><td align="left">string</td><td align="left">—</td><td align="left">#C6D1DE</td></tr><tr><td align="left">disabled-void-color</td><td align="left">只读时未选中 icon 的颜色</td><td align="left">string</td><td align="left">—</td><td align="left">#EFF2F7</td></tr><tr><td align="left">icon-classes</td><td align="left">icon 的类名。若传入数组，共有 3 个元素，为 3 个分段所对应的类名；若传入对象，可自定义分段，键名为分段的界限值，键值为对应的类名</td><td align="left">array&#x2F;object</td><td align="left">—</td><td align="left">[‘el-icon-star-on’, ‘el-icon-star-on’,’el-icon-star-on’]</td></tr><tr><td align="left">void-icon-class</td><td align="left">未选中 icon 的类名</td><td align="left">string</td><td align="left">—</td><td align="left">el-icon-star-off</td></tr><tr><td align="left">disabled-void-icon-class</td><td align="left">只读时未选中 icon 的类名</td><td align="left">string</td><td align="left">—</td><td align="left">el-icon-star-on</td></tr><tr><td align="left">show-text</td><td align="left">是否显示辅助文字，若为真，则会从 texts 数组中选取当前分数对应的文字内容</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">show-score</td><td align="left">是否显示当前分数，show-score 和 show-text 不能同时为真</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">text-color</td><td align="left">辅助文字的颜色</td><td align="left">string</td><td align="left">—</td><td align="left">#1F2D3D</td></tr><tr><td align="left">texts</td><td align="left">辅助文字数组</td><td align="left">array</td><td align="left">—</td><td align="left">[‘极差’, ‘失望’, ‘一般’, ‘满意’, ‘惊喜’]</td></tr><tr><td align="left">score-template</td><td align="left">分数显示模板</td><td align="left">string</td><td align="left">—</td><td align="left">{value}</td></tr></tbody></table><ul><li>el-rate 事件</li></ul><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">change</td><td align="left">分值改变时触发</td><td align="left">改变后的分值</td></tr></tbody></table></li></ul></li><li><p>颜色选择器</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;block&quot;&gt;</span><br><span class="line">  &lt;span class=&quot;demonstration&quot;&gt;有默认值&lt;/span&gt;</span><br><span class="line">  &lt;el-color-picker v-model=&quot;color1&quot;&gt;&lt;/el-color-picker&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;block&quot;&gt;</span><br><span class="line">  &lt;span class=&quot;demonstration&quot;&gt;无默认值&lt;/span&gt;</span><br><span class="line">  &lt;el-color-picker v-model=&quot;color2&quot;&gt;&lt;/el-color-picker&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        color1: &#x27;#409EFF&#x27;,</span><br><span class="line">        color2: null,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>el-color-picker</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">model-value &#x2F; v-model</td><td align="left">绑定值</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">disabled</td><td align="left">是否禁用</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">size</td><td align="left">尺寸</td><td align="left">string</td><td align="left">—</td><td align="left">medium &#x2F; small &#x2F; mini</td></tr><tr><td align="left">show-alpha</td><td align="left">是否支持透明度选择</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">color-format</td><td align="left">写入 v-model 的颜色的格式</td><td align="left">string</td><td align="left">hsl &#x2F; hsv &#x2F; hex &#x2F; rgb</td><td align="left">hex（show-alpha 为 false）&#x2F; rgb（show-alpha 为 true）</td></tr><tr><td align="left">popper-class</td><td align="left">ColorPicker 下拉框的类名</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">predefine</td><td align="left">预定义颜色</td><td align="left">array</td><td align="left">—</td><td align="left">—</td></tr></tbody></table><ul><li>el-color-picker 事件</li></ul><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">change</td><td align="left">当绑定值变化时触发</td><td align="left">当前值</td></tr><tr><td align="left">active-change</td><td align="left">面板中当前显示的颜色发生改变时触发</td><td align="left">当前显示的颜色值</td></tr></tbody></table></li><li><p>穿梭框</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-transfer v-model=&quot;value&quot; :data=&quot;data&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">interface Option &#123;</span><br><span class="line">  key: number</span><br><span class="line">  label: string</span><br><span class="line">  disabled: boolean</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const generateData = () =&gt; &#123;</span><br><span class="line">  const data: Option[] = []</span><br><span class="line">  for (let i = 1; i &lt;= 10; i++) &#123;</span><br><span class="line">    data.push(&#123;</span><br><span class="line">      key: i,</span><br><span class="line">      label: `Option $&#123;i&#125;`,</span><br><span class="line">      disabled: i % 4 === 0,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  return data</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const data = ref&lt;Option[]&gt;(generateData())</span><br><span class="line">const value = ref([])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li>el-transfer</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">model-value &#x2F; v-model</td><td align="left">绑定值</td><td align="left">array</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">data</td><td align="left">Transfer 的数据源</td><td align="left">array[{ key, label, disabled }]</td><td align="left">—</td><td align="left">[ ]</td></tr><tr><td align="left">filterable</td><td align="left">是否可搜索</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">filter-placeholder</td><td align="left">搜索框占位符</td><td align="left">string</td><td align="left">—</td><td align="left">请输入搜索内容</td></tr><tr><td align="left">filter-method</td><td align="left">自定义搜索方法</td><td align="left">function</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">target-order</td><td align="left">右侧列表元素的排序策略：若为 <code>original</code>，则保持与数据源相同的顺序；若为 <code>push</code>，则新加入的元素排在最后；若为 <code>unshift</code>，则新加入的元素排在最前</td><td align="left">string</td><td align="left">original &#x2F; push &#x2F; unshift</td><td align="left">original</td></tr><tr><td align="left">titles</td><td align="left">自定义列表标题</td><td align="left">array</td><td align="left">—</td><td align="left">[‘列表 1’, ‘列表 2’]</td></tr><tr><td align="left">button-texts</td><td align="left">自定义按钮文案</td><td align="left">array</td><td align="left">—</td><td align="left">[ ]</td></tr><tr><td align="left">render-content</td><td align="left">自定义数据项渲染函数</td><td align="left">function(h, option)</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">format</td><td align="left">列表顶部勾选状态文案</td><td align="left">object{noChecked, hasChecked}</td><td align="left">—</td><td align="left">{ noChecked: ‘${checked}&#x2F;${total}’, hasChecked: ‘${checked}&#x2F;${total}’ }</td></tr><tr><td align="left">props</td><td align="left">数据源的字段别名</td><td align="left">object{key, label, disabled}</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">left-default-checked</td><td align="left">初始状态下左侧列表的已勾选项的 key 数组</td><td align="left">array</td><td align="left">—</td><td align="left">[ ]</td></tr><tr><td align="left">right-default-checked</td><td align="left">初始状态下右侧列表的已勾选项的 key 数组</td><td align="left">array</td><td align="left">—</td><td align="left">[ ]</td></tr></tbody></table></li><li><p>el-transfer   插槽</p></li></ul><table><thead><tr><th align="left">name</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">left-footer</td><td align="left">左侧列表底部的内容</td></tr><tr><td align="left">right-footer</td><td align="left">右侧列表底部的内容</td></tr></tbody></table><ul><li>el-transfer   作用域插槽</li></ul><table><thead><tr><th align="left">name</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">—</td><td align="left">自定义数据项的内容，参数为 { option }</td></tr></tbody></table><ul><li>el-transfer   方法</li></ul><table><thead><tr><th align="left">方法名</th><th align="left">说明</th><th align="left">参数</th></tr></thead><tbody><tr><td align="left">clearQuery</td><td align="left">清空某个面板的搜索关键词</td><td align="left">‘left’ &#x2F; ‘right’，指定需要清空的面板</td></tr></tbody></table><ul><li>el-transfer   事件</li></ul><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">change</td><td align="left">右侧列表元素变化时触发</td><td align="left">当前值、数据移动的方向（’left’ &#x2F; ‘right’）、发生移动的数据 key 数组</td></tr><tr><td align="left">left-check-change</td><td align="left">左侧列表元素被用户选中 &#x2F; 取消选中时触发</td><td align="left">当前被选中的元素的 key 数组、选中状态发生变化的元素的 key 数组</td></tr><tr><td align="left">right-check-change</td><td align="left">右侧列表元素被用户选中 &#x2F; 取消选中时触发</td><td align="left">当前被选中的元素的 key 数组、选中状态发生变化的元素的 key 数组</td></tr></tbody></table></li><li><p>表单</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-form ref=&quot;form&quot; :model=&quot;form&quot; label-width=&quot;80px&quot;&gt;</span><br><span class="line">  &lt;el-form-item label=&quot;活动名称&quot;&gt;</span><br><span class="line">    &lt;el-input v-model=&quot;form.name&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">  &lt;/el-form-item&gt;</span><br><span class="line">  &lt;el-form-item label=&quot;活动区域&quot;&gt;</span><br><span class="line">    &lt;el-select v-model=&quot;form.region&quot; placeholder=&quot;请选择活动区域&quot;&gt;</span><br><span class="line">      &lt;el-option label=&quot;区域一&quot; value=&quot;shanghai&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">      &lt;el-option label=&quot;区域二&quot; value=&quot;beijing&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">    &lt;/el-select&gt;</span><br><span class="line">  &lt;/el-form-item&gt;</span><br><span class="line">  &lt;el-form-item label=&quot;活动时间&quot;&gt;</span><br><span class="line">    &lt;el-col :span=&quot;11&quot;&gt;</span><br><span class="line">      &lt;el-date-picker</span><br><span class="line">        type=&quot;date&quot;</span><br><span class="line">        placeholder=&quot;选择日期&quot;</span><br><span class="line">        v-model=&quot;form.date1&quot;</span><br><span class="line">        style=&quot;width: 100%;&quot;</span><br><span class="line">      &gt;&lt;/el-date-picker&gt;</span><br><span class="line">    &lt;/el-col&gt;</span><br><span class="line">    &lt;el-col class=&quot;line&quot; :span=&quot;2&quot;&gt;-&lt;/el-col&gt;</span><br><span class="line">    &lt;el-col :span=&quot;11&quot;&gt;</span><br><span class="line">      &lt;el-time-picker</span><br><span class="line">        placeholder=&quot;选择时间&quot;</span><br><span class="line">        v-model=&quot;form.date2&quot;xx`</span><br><span class="line">        style=&quot;width: 100%;&quot;</span><br><span class="line">      &gt;&lt;/el-time-picker&gt;</span><br><span class="line">    &lt;/el-col&gt;</span><br><span class="line">  &lt;/el-form-item&gt;</span><br><span class="line">  &lt;el-form-item label=&quot;即时配送&quot;&gt;</span><br><span class="line">    &lt;el-switch v-model=&quot;form.delivery&quot;&gt;&lt;/el-switch&gt;</span><br><span class="line">  &lt;/el-form-item&gt;</span><br><span class="line">  &lt;el-form-item label=&quot;活动性质&quot;&gt;</span><br><span class="line">    &lt;el-checkbox-group v-model=&quot;form.type&quot;&gt;</span><br><span class="line">      &lt;el-checkbox label=&quot;美食/餐厅线上活动&quot; name=&quot;type&quot;&gt;&lt;/el-checkbox&gt;</span><br><span class="line">      &lt;el-checkbox label=&quot;地推活动&quot; name=&quot;type&quot;&gt;&lt;/el-checkbox&gt;</span><br><span class="line">      &lt;el-checkbox label=&quot;线下主题活动&quot; name=&quot;type&quot;&gt;&lt;/el-checkbox&gt;</span><br><span class="line">      &lt;el-checkbox label=&quot;单纯品牌曝光&quot; name=&quot;type&quot;&gt;&lt;/el-checkbox&gt;</span><br><span class="line">    &lt;/el-checkbox-group&gt;</span><br><span class="line">  &lt;/el-form-item&gt;</span><br><span class="line">  &lt;el-form-item label=&quot;特殊资源&quot;&gt;</span><br><span class="line">    &lt;el-radio-group v-model=&quot;form.resource&quot;&gt;</span><br><span class="line">      &lt;el-radio label=&quot;线上品牌商赞助&quot;&gt;&lt;/el-radio&gt;</span><br><span class="line">      &lt;el-radio label=&quot;线下场地免费&quot;&gt;&lt;/el-radio&gt;</span><br><span class="line">    &lt;/el-radio-group&gt;</span><br><span class="line">  &lt;/el-form-item&gt;</span><br><span class="line">  &lt;el-form-item label=&quot;活动形式&quot;&gt;</span><br><span class="line">    &lt;el-input type=&quot;textarea&quot; v-model=&quot;form.desc&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">  &lt;/el-form-item&gt;</span><br><span class="line">  &lt;el-form-item&gt;</span><br><span class="line">    &lt;el-button type=&quot;primary&quot; @click=&quot;onSubmit&quot;&gt;立即创建&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button&gt;取消&lt;/el-button&gt;</span><br><span class="line">  &lt;/el-form-item&gt;</span><br><span class="line">&lt;/el-form&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        form: &#123;</span><br><span class="line">          name: &#x27;&#x27;,</span><br><span class="line">          region: &#x27;&#x27;,</span><br><span class="line">          date1: &#x27;&#x27;,</span><br><span class="line">          date2: &#x27;&#x27;,</span><br><span class="line">          delivery: false,</span><br><span class="line">          type: [],</span><br><span class="line">          resource: &#x27;&#x27;,</span><br><span class="line">          desc: &#x27;&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      onSubmit() &#123;</span><br><span class="line">        console.log(&#x27;submit!&#x27;)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li>el-from</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">model</td><td align="left">表单数据对象</td><td align="left">object</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">rules</td><td align="left">表单验证规则</td><td align="left">object</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">inline</td><td align="left">行内表单模式</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">label-position</td><td align="left">表单域标签的位置，如果值为 left 或者 right 时，则需要设置 <code>label-width</code></td><td align="left">string</td><td align="left">right &#x2F; left &#x2F; top</td><td align="left">right</td></tr><tr><td align="left">label-width</td><td align="left">表单域标签的宽度，例如 ‘50px’。作为 Form 直接子元素的 form-item 会继承该值。支持 <code>auto</code>。</td><td align="left">string &#x2F; number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">label-suffix</td><td align="left">表单域标签的后缀</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">hide-required-asterisk</td><td align="left">是否显示必填字段的标签旁边的红色星号</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">show-message</td><td align="left">是否显示校验错误信息</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">inline-message</td><td align="left">是否以行内形式展示校验信息</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">status-icon</td><td align="left">是否在输入框中显示校验结果反馈图标</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">validate-on-rule-change</td><td align="left">是否在 <code>rules</code> 属性改变后立即触发一次验证</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">size</td><td align="left">用于控制该表单内组件的尺寸</td><td align="left">string</td><td align="left">medium &#x2F; small &#x2F; mini</td><td align="left">—</td></tr><tr><td align="left">disabled</td><td align="left">是否禁用该表单内的所有组件。若设置为 true，则表单内组件上的 disabled 属性不再生效</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr></tbody></table></li><li><p>el-from 方法</p><table><thead><tr><th align="left">方法名</th><th align="left">说明</th><th align="left">参数</th></tr></thead><tbody><tr><td align="left">validate</td><td align="left">对整个表单进行校验的方法，参数为一个回调函数。该回调函数会在校验结束后被调用，并传入两个参数：是否校验成功和未通过校验的字段。若不传入回调函数，则会返回一个 promise</td><td align="left">Function(callback: Function(boolean, object))</td></tr><tr><td align="left">validateField</td><td align="left">对部分表单字段进行校验的方法</td><td align="left">Function(props: array | string, callback: Function(errorMessage: string))</td></tr><tr><td align="left">resetFields</td><td align="left">对整个表单进行重置，将所有字段值重置为初始值并移除校验结果</td><td align="left">—</td></tr><tr><td align="left">scrollToField</td><td align="left">滚动到指定表单字段</td><td align="left">Function(prop: string)</td></tr><tr><td align="left">clearValidate</td><td align="left">移除表单项的校验结果。传入待移除的表单项的 prop 属性或者 prop 组成的数组，如不传则移除整个表单的校验结果</td><td align="left">Function(props: array | string)</td></tr></tbody></table></li><li><p>el-from 事件</p><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">validate</td><td align="left">任一表单项被校验后触发</td><td align="left">被校验的表单项 prop 值，校验是否通过，错误消息（如果存在）</td></tr></tbody></table></li><li><p>el-from-item</p><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">prop</td><td align="left">表单域 model 字段，在使用 validate、resetFields 方法的情况下，该属性是必填的</td><td align="left">string</td><td align="left">传入 Form 组件的 <code>model</code> 中的字段</td><td align="left">—</td></tr><tr><td align="left">label</td><td align="left">标签文本</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">label-width</td><td align="left">表单域标签的的宽度，例如 ‘50px’。支持 <code>auto</code>。</td><td align="left">string &#x2F; number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">required</td><td align="left">是否必填，如不设置，则会根据校验规则自动生成</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">rules</td><td align="left">表单验证规则, 具体配置见下表, 更多内容参考<a href="https://www.w3cschool.cn/targetlink?url=https://github.com/yiminghe/async-validator">async-validator</a></td><td align="left">object &#x2F; array</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">error</td><td align="left">表单域验证错误信息, 设置该值会使表单验证状态变为<code>error</code>，并显示该错误信息</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">show-message</td><td align="left">是否显示校验错误信息</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">inline-message</td><td align="left">以行内形式展示校验信息</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">size</td><td align="left">用于控制该表单域下组件的尺寸</td><td align="left">string</td><td align="left">medium &#x2F; small &#x2F; mini</td><td align="left">—</td></tr></tbody></table></li><li><p>el-from-item   rules 规则</p><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">trigger</td><td align="left">验证触发方式</td><td align="left">string</td><td align="left">blur &#x2F; change</td><td align="left">—</td></tr></tbody></table></li><li><p>el-from-item 插槽</p><table><thead><tr><th align="left">name</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">—</td><td align="left">Form Item 的内容</td></tr><tr><td align="left">label</td><td align="left">自定义标签，参数为 { label }</td></tr><tr><td align="left">error</td><td align="left">自定义表单校验信息的显示方式，参数为 { error }</td></tr></tbody></table></li><li><p>el-from-item   方法</p><table><thead><tr><th align="left">方法名</th><th align="left">说明</th><th align="left">参数</th></tr></thead><tbody><tr><td align="left">resetField</td><td align="left">对该表单项进行重置，将其值重置为初始值并移除校验结果</td><td align="left">—</td></tr><tr><td align="left">clearValidate</td><td align="left">移除该表单项的校验结果</td><td align="left">—</td></tr></tbody></table></li></ul></li><li><p>表格</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-table :data=&quot;tableData&quot; border style=&quot;width: 100%&quot;&gt;</span><br><span class="line">    &lt;el-table-column fixed prop=&quot;date&quot; label=&quot;日期&quot; width=&quot;150&quot;&gt;</span><br><span class="line">    &lt;/el-table-column&gt;</span><br><span class="line">    &lt;el-table-column prop=&quot;name&quot; label=&quot;姓名&quot; width=&quot;120&quot;&gt; &lt;/el-table-column&gt;</span><br><span class="line">    &lt;el-table-column prop=&quot;province&quot; label=&quot;省份&quot; width=&quot;120&quot;&gt;</span><br><span class="line">    &lt;/el-table-column&gt;</span><br><span class="line">    &lt;el-table-column prop=&quot;city&quot; label=&quot;市区&quot; width=&quot;120&quot;&gt; &lt;/el-table-column&gt;</span><br><span class="line">    &lt;el-table-column prop=&quot;address&quot; label=&quot;地址&quot; width=&quot;600&quot;&gt; &lt;/el-table-column&gt;</span><br><span class="line">    &lt;el-table-column prop=&quot;zip&quot; label=&quot;邮编&quot; width=&quot;120&quot;&gt; &lt;/el-table-column&gt;</span><br><span class="line">    &lt;el-table-column fixed=&quot;right&quot; label=&quot;操作&quot; width=&quot;100&quot;&gt;</span><br><span class="line">      &lt;template #default=&quot;scope&quot;&gt;</span><br><span class="line">        &lt;el-button @click=&quot;handleClick(scope.row)&quot; type=&quot;text&quot; size=&quot;small&quot;</span><br><span class="line">          &gt;查看&lt;/el-button</span><br><span class="line">        &gt;</span><br><span class="line">        &lt;el-button type=&quot;text&quot; size=&quot;small&quot;&gt;编辑&lt;/el-button&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/el-table-column&gt;</span><br><span class="line">  &lt;/el-table&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">      handleClick(row) &#123;</span><br><span class="line">        console.log(row)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        tableData: [</span><br><span class="line">          &#123;date: &#x27;2016-05-02&#x27;,name: &#x27;王小虎&#x27;,province: &#x27;上海&#x27;,city: &#x27;普陀区&#x27;,address: &#x27;上海市普陀区金沙江路 1518 弄&#x27;,zip: 200333,&#125;,</span><br><span class="line">          &#123;date: &#x27;2016-05-04&#x27;,name: &#x27;王小虎&#x27;,province: &#x27;上海&#x27;,city: &#x27;普陀区&#x27;,address: &#x27;上海市普陀区金沙江路 1517 弄&#x27;,zip: 200333,&#125;,</span><br><span class="line">          &#123;date: &#x27;2016-05-01&#x27;,name: &#x27;王小虎&#x27;,province: &#x27;上海&#x27;,city: &#x27;普陀区&#x27;,address: &#x27;上海市普陀区金沙江路 1519 弄&#x27;,zip: 200333,&#125;,</span><br><span class="line">          &#123;date: &#x27;2016-05-03&#x27;,name: &#x27;王小虎&#x27;,province: &#x27;上海&#x27;,city: &#x27;普陀区&#x27;,address: &#x27;上海市普陀区金沙江路 1516 弄&#x27;,zip: 200333,&#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li>el-table</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">data</td><td align="left">显示的数据</td><td align="left">array</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">height</td><td align="left">Table 的高度，默认为自动高度。如果 height 为 number 类型，单位 px；如果 height 为 string 类型，则这个高度会设置为 Table 的 style.height 的值，Table 的高度会受控于外部样式。</td><td align="left">string &#x2F; number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">max-height</td><td align="left">Table 的最大高度。合法的值为数字或者单位为 px 的高度。</td><td align="left">string &#x2F; number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">stripe</td><td align="left">是否为斑马纹 table</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">border</td><td align="left">是否带有纵向边框</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">size</td><td align="left">Table 的尺寸</td><td align="left">string</td><td align="left">medium &#x2F; small &#x2F; mini</td><td align="left">—</td></tr><tr><td align="left">fit</td><td align="left">列的宽度是否自撑开</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">show-header</td><td align="left">是否显示表头</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">highlight-current-row</td><td align="left">是否要高亮当前行</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">current-row-key</td><td align="left">当前行的 key，只写属性</td><td align="left">string &#x2F; number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">row-class-name</td><td align="left">行的 className 的回调方法，也可以使用字符串为所有行设置一个固定的 className。</td><td align="left">function({ row, rowIndex }) &#x2F; string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">row-style</td><td align="left">行的 style 的回调方法，也可以使用一个固定的 Object 为所有行设置一样的 Style。</td><td align="left">function({ row, rowIndex }) &#x2F; object</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">cell-class-name</td><td align="left">单元格的 className 的回调方法，也可以使用字符串为所有单元格设置一个固定的 className。</td><td align="left">function({ row, column, rowIndex, columnIndex }) &#x2F; string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">cell-style</td><td align="left">单元格的 style 的回调方法，也可以使用一个固定的 Object 为所有单元格设置一样的 Style。</td><td align="left">function({ row, column, rowIndex, columnIndex }) &#x2F; object</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">header-row-class-name</td><td align="left">表头行的 className 的回调方法，也可以使用字符串为所有表头行设置一个固定的 className。</td><td align="left">function({ row, rowIndex }) &#x2F; string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">header-row-style</td><td align="left">表头行的 style 的回调方法，也可以使用一个固定的 Object 为所有表头行设置一样的 Style。</td><td align="left">function({ row, rowIndex }) &#x2F; object</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">header-cell-class-name</td><td align="left">表头单元格的 className 的回调方法，也可以使用字符串为所有表头单元格设置一个固定的 className。</td><td align="left">function({ row, column, rowIndex, columnIndex }) &#x2F; string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">header-cell-style</td><td align="left">表头单元格的 style 的回调方法，也可以使用一个固定的 Object 为所有表头单元格设置一样的 Style。</td><td align="left">function({ row, column, rowIndex, columnIndex }) &#x2F; object</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">row-key</td><td align="left">行数据的 Key，用来优化 Table 的渲染；在使用 reserve-selection 功能与显示树形数据时，该属性是必填的。类型为 String 时，支持多层访问：<code>user.info.id</code>，但不支持 <code>user.info[0].id</code>，此种情况请使用 <code>Function</code>。</td><td align="left">function(row) &#x2F; string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">empty-text</td><td align="left">空数据时显示的文本内容，也可以通过 <code>#empty</code> 设置</td><td align="left">string</td><td align="left">—</td><td align="left">暂无数据</td></tr><tr><td align="left">default-expand-all</td><td align="left">是否默认展开所有行，当 Table 包含展开行存在或者为树形表格时有效</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">expand-row-keys</td><td align="left">可以通过该属性设置 Table 目前的展开行，需要设置 row-key 属性才能使用，该属性为展开行的 keys 数组。</td><td align="left">array</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">default-sort</td><td align="left">默认的排序列的 prop 和顺序。它的 <code>prop</code> 属性指定默认的排序的列，<code>order</code> 指定默认排序的顺序</td><td align="left">object</td><td align="left"><code>order</code>: ascending &#x2F; descending</td><td align="left">如果只指定了 <code>prop</code>, 没有指定 <code>order</code>, 则默认顺序是 ascending</td></tr><tr><td align="left">tooltip-effect</td><td align="left">tooltip <code>effect</code> 属性</td><td align="left">string</td><td align="left">dark &#x2F; light</td><td align="left">dark</td></tr><tr><td align="left">show-summary</td><td align="left">是否在表尾显示合计行</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">sum-text</td><td align="left">合计行第一列的文本</td><td align="left">string</td><td align="left">—</td><td align="left">合计</td></tr><tr><td align="left">summary-method</td><td align="left">自定义的合计计算方法</td><td align="left">function({ columns, data })</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">span-method</td><td align="left">合并行或列的计算方法</td><td align="left">function({ row, column, rowIndex, columnIndex })</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">select-on-indeterminate</td><td align="left">在多选表格中，当仅有部分行被选中时，点击表头的多选框时的行为。若为 true，则选中所有行；若为 false，则取消选择所有行</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">indent</td><td align="left">展示树形数据时，树节点的缩进</td><td align="left">number</td><td align="left">—</td><td align="left">16</td></tr><tr><td align="left">lazy</td><td align="left">是否懒加载子节点数据</td><td align="left">boolean</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">load</td><td align="left">加载子节点数据的函数，lazy 为 true 时生效，函数第二个参数包含了节点的层级信息</td><td align="left">function(row, treeNode, resolve)</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">tree-props</td><td align="left">渲染嵌套数据的配置选项</td><td align="left">object</td><td align="left">—</td><td align="left">{ hasChildren: ‘hasChildren’, children: ‘children’ }</td></tr></tbody></table><ul><li>el-table 事件</li></ul><table><thead><tr><th align="left">事件名</th><th align="left">说明</th><th align="left">参数</th></tr></thead><tbody><tr><td align="left">select</td><td align="left">当用户手动勾选数据行的 Checkbox 时触发的事件</td><td align="left">selection, row</td></tr><tr><td align="left">select-all</td><td align="left">当用户手动勾选全选 Checkbox 时触发的事件</td><td align="left">selection</td></tr><tr><td align="left">selection-change</td><td align="left">当选择项发生变化时会触发该事件</td><td align="left">selection</td></tr><tr><td align="left">cell-mouse-enter</td><td align="left">当单元格 hover 进入时会触发该事件</td><td align="left">row, column, cell, event</td></tr><tr><td align="left">cell-mouse-leave</td><td align="left">当单元格 hover 退出时会触发该事件</td><td align="left">row, column, cell, event</td></tr><tr><td align="left">cell-click</td><td align="left">当某个单元格被点击时会触发该事件</td><td align="left">row, column, cell, event</td></tr><tr><td align="left">cell-dblclick</td><td align="left">当某个单元格被双击击时会触发该事件</td><td align="left">row, column, cell, event</td></tr><tr><td align="left">cell-contextmenu</td><td align="left">当某个单元格被鼠标右键点击时会触发该事件</td><td align="left">row, column, cell, event</td></tr><tr><td align="left">row-click</td><td align="left">当某一行被点击时会触发该事件</td><td align="left">row, column, event</td></tr><tr><td align="left">row-contextmenu</td><td align="left">当某一行被鼠标右键点击时会触发该事件</td><td align="left">row, column, event</td></tr><tr><td align="left">row-dblclick</td><td align="left">当某一行被双击时会触发该事件</td><td align="left">row, column, event</td></tr><tr><td align="left">header-click</td><td align="left">当某一列的表头被点击时会触发该事件</td><td align="left">column, event</td></tr><tr><td align="left">header-contextmenu</td><td align="left">当某一列的表头被鼠标右键点击时触发该事件</td><td align="left">column, event</td></tr><tr><td align="left">sort-change</td><td align="left">当表格的排序条件发生变化的时候会触发该事件</td><td align="left">{ column, prop, order }</td></tr><tr><td align="left">filter-change</td><td align="left">当表格的筛选条件发生变化的时候会触发该事件，参数的值是一个对象，对象的 key 是 column 的 columnKey，对应的 value 为用户选择的筛选条件的数组。</td><td align="left">filters</td></tr><tr><td align="left">current-change</td><td align="left">当表格的当前行发生变化的时候会触发该事件，如果要高亮当前行，请打开表格的 highlight-current-row 属性</td><td align="left">currentRow, oldCurrentRow</td></tr><tr><td align="left">header-dragend</td><td align="left">当拖动表头改变了列的宽度的时候会触发该事件</td><td align="left">newWidth, oldWidth, column, event</td></tr><tr><td align="left">expand-change</td><td align="left">当用户对某一行展开或者关闭的时候会触发该事件（展开行时，回调的第二个参数为 expandedRows；树形表格时第二参数为 expanded）</td><td align="left">row, (expandedRows | expanded)</td></tr></tbody></table><ul><li>el-table  方法</li></ul><table><thead><tr><th align="left">方法名</th><th align="left">说明</th><th align="left">参数</th></tr></thead><tbody><tr><td align="left">clearSelection</td><td align="left">用于多选表格，清空用户的选择</td><td align="left">—</td></tr><tr><td align="left">toggleRowSelection</td><td align="left">用于多选表格，切换某一行的选中状态，如果使用了第二个参数，则是设置这一行选中与否（selected 为 true 则选中）</td><td align="left">row, selected</td></tr><tr><td align="left">toggleAllSelection</td><td align="left">用于多选表格，切换全选和全不选</td><td align="left">—</td></tr><tr><td align="left">toggleRowExpansion</td><td align="left">用于可展开表格与树形表格，切换某一行的展开状态，如果使用了第二个参数，则是设置这一行展开与否（expanded 为 true 则展开）</td><td align="left">row, expanded</td></tr><tr><td align="left">setCurrentRow</td><td align="left">用于单选表格，设定某一行为选中行，如果调用时不加参数，则会取消目前高亮行的选中状态。</td><td align="left">row</td></tr><tr><td align="left">clearSort</td><td align="left">用于清空排序条件，数据会恢复成未排序的状态</td><td align="left">—</td></tr><tr><td align="left">clearFilter</td><td align="left">不传入参数时用于清空所有过滤条件，数据会恢复成未过滤的状态，也可传入由 columnKey 组成的数组以清除指定列的过滤条件</td><td align="left">columnKey</td></tr><tr><td align="left">doLayout</td><td align="left">对 Table 进行重新布局。当 Table 或其祖先元素由隐藏切换为显示时，可能需要调用此方法</td><td align="left">—</td></tr><tr><td align="left">sort</td><td align="left">手动对 Table 进行排序。参数 <code>prop</code> 属性指定排序列，<code>order</code> 指定排序顺序。</td><td align="left">prop: string, order: string</td></tr></tbody></table><ul><li>el-table 插槽</li></ul><table><thead><tr><th align="left">name</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">append</td><td align="left">插入至表格最后一行之后的内容，如果需要对表格的内容进行无限滚动操作，可能需要用到这个 slot。若表格有合计行，该 slot 会位于合计行之上。</td></tr></tbody></table><ul><li>el-table-column</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">type</td><td align="left">对应列的类型。如果设置了 <code>selection</code> 则显示多选框；如果设置了 <code>index</code> 则显示该行的索引（从 1 开始计算）；如果设置了 <code>expand</code> 则显示为一个可展开的按钮</td><td align="left">string</td><td align="left">selection &#x2F; index &#x2F; expand</td><td align="left">—</td></tr><tr><td align="left">index</td><td align="left">如果设置了 <code>type=index</code>，可以通过传递 <code>index</code> 属性来自定义索引</td><td align="left">number &#x2F; function(index)</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">column-key</td><td align="left">column 的 key，如果需要使用 filter-change 事件，则需要此属性标识是哪个 column 的筛选条件</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">label</td><td align="left">显示的标题</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">prop</td><td align="left">对应列内容的字段名，也可以使用 property 属性</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">width</td><td align="left">对应列的宽度</td><td align="left">string &#x2F; number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">min-width</td><td align="left">对应列的最小宽度，与 <code>width</code> 的区别是 <code>width</code> 是固定的，<code>min-width</code> 会把剩余宽度按比例分配给设置了 <code>min-width</code> 的列</td><td align="left">string &#x2F; number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">fixed</td><td align="left">列是否固定在左侧或者右侧，true 表示固定在左侧</td><td align="left">string, boolean</td><td align="left">true &#x2F; ‘left’ &#x2F; ‘right’</td><td align="left">—</td></tr><tr><td align="left">render-header</td><td align="left">列标题 Label 区域渲染使用的 Function</td><td align="left">function({ column, $index })</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">sortable</td><td align="left">对应列是否可以排序，如果设置为 ‘custom’，则代表用户希望远程排序，需要监听 Table 的 sort-change 事件</td><td align="left">boolean &#x2F; string</td><td align="left">true &#x2F; false &#x2F; ‘custom’</td><td align="left">false</td></tr><tr><td align="left">sort-method</td><td align="left">对数据进行排序的时候使用的方法，仅当 sortable 设置为 true 的时候有效，需返回一个数字，和 Array.sort 表现一致</td><td align="left">function(a, b)</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">sort-by</td><td align="left">指定数据按照哪个属性进行排序，仅当 sortable 设置为 true 且没有设置 sort-method 的时候有效。如果 sort-by 为数组，则先按照第 1 个属性排序，如果第 1 个相等，再按照第 2 个排序，以此类推</td><td align="left">string &#x2F; array &#x2F; function(row, index)</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">sort-orders</td><td align="left">数据在排序时所使用排序策略的轮转顺序，仅当 sortable 为 true 时有效。需传入一个数组，随着用户点击表头，该列依次按照数组中元素的顺序进行排序</td><td align="left">array</td><td align="left">数组中的元素需为以下三者之一：<code>ascending</code> 表示升序，<code>descending</code> 表示降序，<code>null</code> 表示还原为原始顺序</td><td align="left">[‘ascending’, ‘descending’, null]</td></tr><tr><td align="left">resizable</td><td align="left">对应列是否可以通过拖动改变宽度（需要在 el-table 上设置 border 属性为真）</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">formatter</td><td align="left">用来格式化内容</td><td align="left">function(row, column, cellValue, index)</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">show-overflow-tooltip</td><td align="left">当内容过长被隐藏时显示 tooltip</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">align</td><td align="left">对齐方式</td><td align="left">string</td><td align="left">left &#x2F; center &#x2F; right</td><td align="left">left</td></tr><tr><td align="left">header-align</td><td align="left">表头对齐方式，若不设置该项，则使用表格的对齐方式</td><td align="left">string</td><td align="left">left &#x2F; center &#x2F; right</td><td align="left">—</td></tr><tr><td align="left">class-name</td><td align="left">列的 className</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">label-class-name</td><td align="left">当前列标题的自定义类名</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">selectable</td><td align="left">仅对 type&#x3D;selection 的列有效，类型为 Function，Function 的返回值用来决定这一行的 CheckBox 是否可以勾选</td><td align="left">function(row, index)</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">reserve-selection</td><td align="left">仅对 type&#x3D;selection 的列有效，类型为 Boolean，为 true 则会在数据更新之后保留之前选中的数据（需指定 <code>row-key</code>）</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">filters</td><td align="left">数据过滤的选项，数组格式，数组中的元素需要有 text 和 value 属性。</td><td align="left">array[{ text, value }]</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">filter-placement</td><td align="left">过滤弹出框的定位</td><td align="left">string</td><td align="left">与 Tooltip 的 <code>placement</code> 属性相同</td><td align="left">—</td></tr><tr><td align="left">filter-multiple</td><td align="left">数据过滤的选项是否多选</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">filter-method</td><td align="left">数据过滤使用的方法，如果是多选的筛选项，对每一条数据会执行多次，任意一次返回 true 就会显示。</td><td align="left">function(value, row, column)</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">filtered-value</td><td align="left">选中的数据过滤项，如果需要自定义表头过滤的渲染方式，可能会需要此属性。</td><td align="left">array</td><td align="left">—</td><td align="left">—</td></tr></tbody></table><ul><li>el-table-column 插槽</li></ul><table><thead><tr><th align="left">name</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">—</td><td align="left">自定义列的内容，参数为 { row, column, $index }</td></tr><tr><td align="left">header</td><td align="left">自定义表头的内容. 参数为 { column, $index }</td></tr></tbody></table></li></ul></li><li><p>tag 标签</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-tag&gt;标签一&lt;/el-tag&gt;</span><br><span class="line">  &lt;el-tag type=&quot;success&quot;&gt;标签二&lt;/el-tag&gt;</span><br><span class="line">  &lt;el-tag type=&quot;info&quot;&gt;标签三&lt;/el-tag&gt;</span><br><span class="line">  &lt;el-tag type=&quot;warning&quot;&gt;标签四&lt;/el-tag&gt;</span><br><span class="line">  &lt;el-tag type=&quot;danger&quot;&gt;标签五&lt;/el-tag&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;!-- 复选框标签 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-space&gt;</span><br><span class="line">    &lt;el-check-tag checked&gt;选中&lt;/el-check-tag&gt;</span><br><span class="line">    &lt;el-check-tag @change=&quot;onChange&quot; :checked=&quot;checked&quot;&gt;点我切换&lt;/el-check-tag&gt;</span><br><span class="line">    &lt;el-check-tag v-model:checked=&quot;checked&quot;&gt;通过 v-model&lt;/el-check-tag&gt;</span><br><span class="line">  &lt;/el-space&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        checked: false,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      onChange(checked) &#123;</span><br><span class="line">        this.checked = checked</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li>el-tag</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">type</td><td align="left">类型</td><td align="left">string</td><td align="left">success&#x2F;info&#x2F;warning&#x2F;danger</td><td align="left">—</td></tr><tr><td align="left">closable</td><td align="left">是否可关闭</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">disable-transitions</td><td align="left">是否禁用渐变动画</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">hit</td><td align="left">是否有边框描边</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">color</td><td align="left">背景色</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">size</td><td align="left">尺寸</td><td align="left">string</td><td align="left">medium &#x2F; small &#x2F; mini</td><td align="left">—</td></tr><tr><td align="left">effect</td><td align="left">主题</td><td align="left">string</td><td align="left">dark &#x2F; light &#x2F; plain</td><td align="left">light</td></tr></tbody></table><ul><li>el-tag 事件</li></ul><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">click</td><td align="left">点击 Tag 时触发的事件</td><td align="left">—</td></tr><tr><td align="left">close</td><td align="left">关闭 Tag 时触发的事件</td><td align="left">—</td></tr></tbody></table><ul><li>el-check-tag</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">v-model:checked &#x2F; checked</td><td align="left">是否选中</td><td align="left">boolean</td><td align="left">true&#x2F;false</td><td align="left">—</td></tr></tbody></table><ul><li>el-check-tag  事件</li></ul><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">change</td><td align="left">点击 Check Tag 时触发的事件</td><td align="left">checked</td></tr><tr><td align="left">update:checked</td><td align="left">点击 Check Tag 时触发的事件</td><td align="left">checked</td></tr></tbody></table></li></ul></li><li><p>进度条</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-progress :percentage=&quot;50&quot;&gt;&lt;/el-progress&gt;</span><br><span class="line">  &lt;el-progress :percentage=&quot;100&quot; :format=&quot;format&quot;&gt;&lt;/el-progress&gt;</span><br><span class="line">  &lt;el-progress :percentage=&quot;100&quot; status=&quot;success&quot;&gt;&lt;/el-progress&gt;</span><br><span class="line">  &lt;el-progress :percentage=&quot;100&quot; status=&quot;warning&quot;&gt;&lt;/el-progress&gt;</span><br><span class="line">  &lt;el-progress :percentage=&quot;50&quot; status=&quot;exception&quot;&gt;&lt;/el-progress&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">      format(percentage) &#123;</span><br><span class="line">        return percentage === 100 ? &#x27;满&#x27; : `$&#123;percentage&#125;%`</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li>el-progress</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><strong>percentage</strong></td><td align="left"><strong>百分比（必填）</strong></td><td align="left">number</td><td align="left">0-100</td><td align="left">0</td></tr><tr><td align="left">type</td><td align="left">进度条类型</td><td align="left">string</td><td align="left">line&#x2F;circle&#x2F;dashboard</td><td align="left">line</td></tr><tr><td align="left">stroke-width</td><td align="left">进度条的宽度，单位 px</td><td align="left">number</td><td align="left">—</td><td align="left">6</td></tr><tr><td align="left">text-inside</td><td align="left">进度条显示文字内置在进度条内（只在 type&#x3D;line 时可用）</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">status</td><td align="left">进度条当前状态</td><td align="left">string</td><td align="left">success&#x2F;exception&#x2F;warning</td><td align="left">—</td></tr><tr><td align="left">indeterminate</td><td align="left">是否为动画进度条</td><td align="left">boolean</td><td align="left">-</td><td align="left">false</td></tr><tr><td align="left">duration</td><td align="left">控制动画进度条速度</td><td align="left">number</td><td align="left">-</td><td align="left">3</td></tr><tr><td align="left">color</td><td align="left">进度条背景色（会覆盖 status 状态颜色）</td><td align="left">string&#x2F;function&#x2F;array</td><td align="left">—</td><td align="left">‘’</td></tr><tr><td align="left">width</td><td align="left">环形进度条画布宽度（只在 type 为 circle 或 dashboard 时可用）</td><td align="left">number</td><td align="left"></td><td align="left">126</td></tr><tr><td align="left">show-text</td><td align="left">是否显示进度条文字内容</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">stroke-linecap</td><td align="left">circle&#x2F;dashboard 类型路径两端的形状</td><td align="left">string</td><td align="left">butt&#x2F;round&#x2F;square</td><td align="left">round</td></tr><tr><td align="left">format</td><td align="left">指定进度条文字内容</td><td align="left">function(percentage)</td><td align="left">—</td><td align="left">—</td></tr></tbody></table><ul><li>el-progress  插槽</li></ul><table><thead><tr><th align="left">name</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">default</td><td align="left">自定义内容，参数为 { percentage }</td></tr></tbody></table></li></ul></li><li><p>树形控件</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-tree</span><br><span class="line">  :data=&quot;data&quot;</span><br><span class="line">  show-checkbox</span><br><span class="line">  node-key=&quot;id&quot;</span><br><span class="line">  :default-expanded-keys=&quot;[2, 3]&quot;</span><br><span class="line">  :default-checked-keys=&quot;[5]&quot;</span><br><span class="line">  :props=&quot;defaultProps&quot;</span><br><span class="line">&gt;</span><br><span class="line">&lt;/el-tree&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        data: [</span><br><span class="line">          &#123;id: 1,label: &#x27;一级 1&#x27;,</span><br><span class="line">           children: [</span><br><span class="line">              &#123;id: 4,label: &#x27;二级 1-1&#x27;,</span><br><span class="line">               children: [</span><br><span class="line">                  &#123;id: 9,label: &#x27;三级 1-1-1&#x27;,&#125;,</span><br><span class="line">                  &#123;id: 10,label: &#x27;三级 1-1-2&#x27;,&#125;,</span><br><span class="line">                ],</span><br><span class="line">              &#125;,</span><br><span class="line">            ],</span><br><span class="line">          &#125;,</span><br><span class="line">            </span><br><span class="line">          &#123;id: 2,label: &#x27;一级 2&#x27;,</span><br><span class="line">            children: [</span><br><span class="line">              &#123;id: 5,label: &#x27;二级 2-1&#x27;,&#125;,</span><br><span class="line">              &#123;id: 6,label: &#x27;二级 2-2&#x27;,&#125;,</span><br><span class="line">            ],</span><br><span class="line">          &#125;,</span><br><span class="line">            </span><br><span class="line">          &#123;id: 3,label: &#x27;一级 3&#x27;,</span><br><span class="line">            children: [</span><br><span class="line">              &#123;id: 7, label: &#x27;二级 3-1&#x27;,&#125;,</span><br><span class="line">              &#123;id: 8,label: &#x27;二级 3-2&#x27;,&#125;,</span><br><span class="line">            ],</span><br><span class="line">          &#125;,  </span><br><span class="line">        ],</span><br><span class="line">        defaultProps: &#123;children: &#x27;children&#x27;,label: &#x27;label&#x27;,&#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li>el-tree</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">data</td><td align="left">展示数据</td><td align="left">array</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">empty-text</td><td align="left">内容为空的时候展示的文本</td><td align="left">String</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">node-key</td><td align="left">每个树节点用来作为唯一标识的属性，整棵树应该是唯一的</td><td align="left">String</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">props</td><td align="left">配置选项，具体看下表</td><td align="left">object</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">render-after-expand</td><td align="left">是否在第一次展开某个树节点后才渲染其子节点</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">load</td><td align="left">加载子树数据的方法，仅当 lazy 属性为 true 时生效</td><td align="left">function(node, resolve)</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">render-content</td><td align="left">树节点的内容区的渲染 Function</td><td align="left">Function(h, { node, data, store })</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">highlight-current</td><td align="left">是否高亮当前选中节点，默认值是 false。</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">default-expand-all</td><td align="left">是否默认展开所有节点</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">expand-on-click-node</td><td align="left">是否在点击节点的时候展开或者收缩节点， 默认值为 true，如果为 false，则只有点箭头图标的时候才会展开或者收缩节点。</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">check-on-click-node</td><td align="left">是否在点击节点的时候选中节点，默认值为 false，即只有在点击复选框时才会选中节点。</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">auto-expand-parent</td><td align="left">展开子节点的时候是否自动展开父节点</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">default-expanded-keys</td><td align="left">默认展开的节点的 key 的数组</td><td align="left">array</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">show-checkbox</td><td align="left">节点是否可被选择</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">check-strictly</td><td align="left">在显示复选框的情况下，是否严格的遵循父子不互相关联的做法，默认为 false</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">default-checked-keys</td><td align="left">默认勾选的节点的 key 的数组</td><td align="left">array</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">current-node-key</td><td align="left">当前选中的节点</td><td align="left">string, number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">filter-node-method</td><td align="left">对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏</td><td align="left">Function(value, data, node)</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">accordion</td><td align="left">是否每次只打开一个同级树节点展开</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">indent</td><td align="left">相邻级节点间的水平缩进，单位为像素</td><td align="left">number</td><td align="left">—</td><td align="left">16</td></tr><tr><td align="left">icon-class</td><td align="left">自定义树节点的图标</td><td align="left">string</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">lazy</td><td align="left">是否懒加载子节点，需与 load 方法结合使用</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">draggable</td><td align="left">是否开启拖拽节点功能</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">allow-drag</td><td align="left">判断节点能否被拖拽</td><td align="left">Function(node)</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">allow-drop</td><td align="left">拖拽时判定目标节点能否被放置。<code>type</code> 参数有三种情况：’prev’、’inner’ 和 ‘next’，分别表示放置在目标节点前、插入至目标节点和放置在目标节点后</td><td align="left">Function(draggingNode, dropNode, type)</td><td align="left">—</td><td align="left">—</td></tr></tbody></table><ul><li>el-tree   props 数据</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">label</td><td align="left">指定节点标签为节点对象的某个属性值</td><td align="left">string, function(data, node)</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">children</td><td align="left">指定子树为节点对象的某个属性值</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">disabled</td><td align="left">指定节点选择框是否禁用为节点对象的某个属性值</td><td align="left">boolean, function(data, node)</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">isLeaf</td><td align="left">指定节点是否为叶子节点，仅在指定了 lazy 属性的情况下生效</td><td align="left">boolean, function(data, node)</td><td align="left">—</td><td align="left">—</td></tr></tbody></table><ul><li>el-tree    方法</li></ul><p>Tree 内部使用了 Node 类型的对象来包装用户传入的数据，用来保存目前节点的状态。 Tree 拥有如下方法</p><table><thead><tr><th align="left">方法名</th><th align="left">说明</th><th align="left">参数</th></tr></thead><tbody><tr><td align="left">filter</td><td align="left">对树节点进行筛选操作</td><td align="left">接收一个任意类型的参数，该参数会在 filter-node-method 中作为第一个参数</td></tr><tr><td align="left">updateKeyChildren</td><td align="left">通过 keys 设置节点子元素，使用此方法必须设置 node-key 属性</td><td align="left">(key, data) 接收两个参数，1. 节点 key 2. 节点数据的数组</td></tr><tr><td align="left">getCheckedNodes</td><td align="left">若节点可被选择（即 <code>show-checkbox</code> 为 <code>true</code>），则返回目前被选中的节点所组成的数组</td><td align="left">(leafOnly, includeHalfChecked) 接收两个 boolean 类型的参数，1. 是否只是叶子节点，默认值为 <code>false</code> 2. 是否包含半选节点，默认值为 <code>false</code></td></tr><tr><td align="left">setCheckedNodes</td><td align="left">设置目前勾选的节点，使用此方法必须设置 node-key 属性</td><td align="left">(nodes) 接收勾选节点数据的数组</td></tr><tr><td align="left">getCheckedKeys</td><td align="left">若节点可被选择（即 <code>show-checkbox</code> 为 <code>true</code>），则返回目前被选中的节点的 key 所组成的数组</td><td align="left">(leafOnly) 接收一个 boolean 类型的参数，若为 <code>true</code> 则仅返回被选中的叶子节点的 keys，默认值为 <code>false</code></td></tr><tr><td align="left">setCheckedKeys</td><td align="left">通过 keys 设置目前勾选的节点，使用此方法必须设置 node-key 属性</td><td align="left">(keys, leafOnly) 接收两个参数，1. 勾选节点的 key 的数组 2. boolean 类型的参数，若为 <code>true</code> 则仅设置叶子节点的选中状态，默认值为 <code>false</code></td></tr><tr><td align="left">setChecked</td><td align="left">通过 key &#x2F; data 设置某个节点的勾选状态，使用此方法必须设置 node-key 属性</td><td align="left">(key&#x2F;data, checked, deep) 接收三个参数，1. 勾选节点的 key 或者 data 2. boolean 类型，节点是否选中 3. boolean 类型，是否设置子节点 ，默认为 false</td></tr><tr><td align="left">getHalfCheckedNodes</td><td align="left">若节点可被选择（即 <code>show-checkbox</code> 为 <code>true</code>），则返回目前半选中的节点所组成的数组</td><td align="left">-</td></tr><tr><td align="left">getHalfCheckedKeys</td><td align="left">若节点可被选择（即 <code>show-checkbox</code> 为 <code>true</code>），则返回目前半选中的节点的 key 所组成的数组</td><td align="left">-</td></tr><tr><td align="left">getCurrentKey</td><td align="left">获取当前被选中节点的 key，使用此方法必须设置 node-key 属性，若没有节点被选中则返回 null</td><td align="left">—</td></tr><tr><td align="left">getCurrentNode</td><td align="left">获取当前被选中节点的 data，若没有节点被选中则返回 null</td><td align="left">—</td></tr><tr><td align="left">setCurrentKey</td><td align="left">通过 key 设置某个节点的当前选中状态，使用此方法必须设置 node-key 属性</td><td align="left">(key, shouldAutoExpandParent&#x3D;true) 1. 待被选节点的 key，若为 null 则取消当前高亮的节点 2. 是否扩展父节点</td></tr><tr><td align="left">setCurrentNode</td><td align="left">通过 node 设置某个节点的当前选中状态，使用此方法必须设置 node-key 属性</td><td align="left">(node, shouldAutoExpandParent&#x3D;true) 1. 待被选节点的 node 2. 是否扩展父节点</td></tr><tr><td align="left">getNode</td><td align="left">根据 data 或者 key 拿到 Tree 组件中的 node</td><td align="left">(data) 要获得 node 的 key 或者 data</td></tr><tr><td align="left">remove</td><td align="left">删除 Tree 中的一个节点，使用此方法必须设置 node-key 属性</td><td align="left">(data) 要删除的节点的 data 或者 node</td></tr><tr><td align="left">append</td><td align="left">为 Tree 中的一个节点追加一个子节点</td><td align="left">(data, parentNode) 接收两个参数，1. 要追加的子节点的 data 2. 子节点的 parent 的 data、key 或者 node</td></tr><tr><td align="left">insertBefore</td><td align="left">为 Tree 的一个节点的前面增加一个节点</td><td align="left">(data, refNode) 接收两个参数，1. 要增加的节点的 data 2. 要增加的节点的后一个节点的 data、key 或者 node</td></tr><tr><td align="left">insertAfter</td><td align="left">为 Tree 的一个节点的后面增加一个节点</td><td align="left">(data, refNode) 接收两个参数，1. 要增加的节点的 data 2. 要增加的节点的前一个节点的 data、key 或者 node</td></tr></tbody></table><ul><li>el-tree    事件</li></ul><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">node-click</td><td align="left">节点被点击时的回调</td><td align="left">共三个参数，依次为：传递给 <code>data</code> 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身。</td></tr><tr><td align="left">node-contextmenu</td><td align="left">当某一节点被鼠标右键点击时会触发该事件</td><td align="left">共四个参数，依次为：event、传递给 <code>data</code> 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身。</td></tr><tr><td align="left">check-change</td><td align="left">节点选中状态发生变化时的回调</td><td align="left">共三个参数，依次为：传递给 <code>data</code> 属性的数组中该节点所对应的对象、节点本身是否被选中、节点的子树中是否有被选中的节点</td></tr><tr><td align="left">check</td><td align="left">当复选框被点击的时候触发</td><td align="left">共两个参数，依次为：传递给 <code>data</code> 属性的数组中该节点所对应的对象、树目前的选中状态对象，包含 checkedNodes、checkedKeys、halfCheckedNodes、halfCheckedKeys 四个属性</td></tr><tr><td align="left">current-change</td><td align="left">当前选中节点变化时触发的事件</td><td align="left">共两个参数，依次为：当前节点的数据，当前节点的 Node 对象</td></tr><tr><td align="left">node-expand</td><td align="left">节点被展开时触发的事件</td><td align="left">共三个参数，依次为：传递给 <code>data</code> 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身</td></tr><tr><td align="left">node-collapse</td><td align="left">节点被关闭时触发的事件</td><td align="left">共三个参数，依次为：传递给 <code>data</code> 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身</td></tr><tr><td align="left">node-drag-start</td><td align="left">节点开始拖拽时触发的事件</td><td align="left">共两个参数，依次为：被拖拽节点对应的 Node、event</td></tr><tr><td align="left">node-drag-enter</td><td align="left">拖拽进入其他节点时触发的事件</td><td align="left">共三个参数，依次为：被拖拽节点对应的 Node、所进入节点对应的 Node、event</td></tr><tr><td align="left">node-drag-leave</td><td align="left">拖拽离开某个节点时触发的事件</td><td align="left">共三个参数，依次为：被拖拽节点对应的 Node、所离开节点对应的 Node、event</td></tr><tr><td align="left">node-drag-over</td><td align="left">在拖拽节点时触发的事件（类似浏览器的 mouseover 事件）</td><td align="left">共三个参数，依次为：被拖拽节点对应的 Node、当前进入节点对应的 Node、event</td></tr><tr><td align="left">node-drag-end</td><td align="left">拖拽结束时（可能未成功）触发的事件</td><td align="left">共四个参数，依次为：被拖拽节点对应的 Node、结束拖拽时最后进入的节点（可能为空）、被拖拽节点的放置位置（before、after、inner）、event</td></tr><tr><td align="left">node-drop</td><td align="left">拖拽成功完成时触发的事件</td><td align="left">共四个参数，依次为：被拖拽节点对应的 Node、结束拖拽时最后进入的节点、被拖拽节点的放置位置（before、after、inner）、event</td></tr></tbody></table><ul><li>el-tree  作用域插槽</li></ul><table><thead><tr><th align="left">name</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">—</td><td align="left">自定义树节点的内容，参数为 { node, data }</td></tr></tbody></table></li></ul></li><li><p>分页</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;block&quot;&gt;</span><br><span class="line">        &lt;span class=&quot;demonstration&quot;&gt;大于 7 页时的效果&lt;/span&gt;</span><br><span class="line">        &lt;el-pagination layout=&quot;prev, pager, next&quot; :total=&quot;1000&quot;&gt; &lt;/el-pagination&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li>el-pagination</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">small</td><td align="left">是否使用小型分页样式</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">background</td><td align="left">是否为分页按钮添加背景色</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">page-size</td><td align="left">每页显示条目个数，支持 v-model 双向绑定</td><td align="left">number</td><td align="left">—</td><td align="left">10</td></tr><tr><td align="left">default-page-size</td><td align="left">每页显示条目数的初始值；</td><td align="left">number</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">total</td><td align="left">总条目数</td><td align="left">number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">page-count</td><td align="left">总页数，total 和 page-count 设置任意一个就可以达到显示页码的功能；如果要支持 page-sizes 的更改，则需要使用 total 属性</td><td align="left">Number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">pager-count</td><td align="left">页码按钮的数量，当总页数超过该值时会折叠</td><td align="left">number</td><td align="left">大于等于 5 且小于等于 21 的奇数</td><td align="left">7</td></tr><tr><td align="left">current-page</td><td align="left">当前页数，支持 v-model 双向绑定</td><td align="left">number</td><td align="left">—</td><td align="left">1</td></tr><tr><td align="left">default-current-page</td><td align="left">当前页数的初始值</td><td align="left">number</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">layout</td><td align="left">组件布局，子组件名用逗号分隔</td><td align="left">String</td><td align="left"><code>sizes</code>, <code>prev</code>, <code>pager</code>, <code>next</code>, <code>jumper</code>, <code>-&gt;</code>, <code>total</code>, <code>slot</code></td><td align="left">‘prev, pager, next, jumper, -&gt;, total’</td></tr><tr><td align="left">page-sizes</td><td align="left">每页显示个数选择器的选项设置</td><td align="left">number[]</td><td align="left">—</td><td align="left">[10, 20, 30, 40, 50, 100]</td></tr><tr><td align="left">popper-class</td><td align="left">每页显示个数选择器的下拉框类名</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">prev-text</td><td align="left">替代图标显示的上一页文字</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">next-text</td><td align="left">替代图标显示的下一页文字</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">disabled</td><td align="left">是否禁用</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">hide-on-single-page</td><td align="left">只有一页时是否隐藏</td><td align="left">boolean</td><td align="left">—</td><td align="left">-</td></tr></tbody></table><ul><li><p>total 和 page-count 必须传一个，不然组件无法判断总页数；优先使用 page-count;</p></li><li><p>如果传入了 current-page 必须监听 current-page 变更的事件（onUpdate:currentPage）；否则分页切换不起作用；</p></li><li><p>如果传入了 page-size，且布局包含 page-size 选择器（即 layout 包含 sizes），必须监听 page-size 变更的事件（onUpdate:pageSize），否则 page-size 切换不起作用；</p></li></ul></li><li><p>事件</p><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">size-change</td><td align="left">pageSize 改变时会触发</td><td align="left">每页条数</td></tr><tr><td align="left">current-change</td><td align="left">currentPage 改变时会触发</td><td align="left">当前页</td></tr><tr><td align="left">prev-click</td><td align="left">用户点击上一页按钮改变当前页后触发</td><td align="left">当前页</td></tr><tr><td align="left">next-click</td><td align="left">用户点击下一页按钮改变当前页后触发</td><td align="left">当前页</td></tr></tbody></table><p>以上事件不推荐使用；如果要监听 current-page 和 page-size 的改变，使用 v-model 双向绑定是个更好的选择。</p></li><li><p>插槽</p><table><thead><tr><th align="left">name</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">—</td><td align="left">自定义内容，需要在 <code>layout</code> 中列出 <code>slot</code></td></tr></tbody></table></li></ul></li><li><p>标记</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-badge :value=&quot;200&quot; :max=&quot;99&quot; class=&quot;item&quot;&gt;</span><br><span class="line">    &lt;el-button size=&quot;small&quot;&gt;评论&lt;/el-button&gt;</span><br><span class="line">  &lt;/el-badge&gt;</span><br><span class="line">  &lt;el-badge :value=&quot;100&quot; :max=&quot;10&quot; class=&quot;item&quot;&gt;</span><br><span class="line">    &lt;el-button size=&quot;small&quot;&gt;回复&lt;/el-button&gt;</span><br><span class="line">  &lt;/el-badge&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .item &#123;</span><br><span class="line">    margin-top: 10px;</span><br><span class="line">    margin-right: 40px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li>el-badge</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">value</td><td align="left">显示值</td><td align="left">string, number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">max</td><td align="left">最大值，超过最大值会显示 ‘{max}+’，要求 value 是 Number 类型</td><td align="left">number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">is-dot</td><td align="left">小圆点</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">hidden</td><td align="left">隐藏 badge</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">type</td><td align="left">类型</td><td align="left">string</td><td align="left">primary &#x2F; success &#x2F; warning &#x2F; danger &#x2F; info</td><td align="left">—</td></tr></tbody></table></li></ul></li><li><p>描述列表</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-descriptions title=&quot;用户信息&quot;&gt;</span><br><span class="line">      &lt;el-descriptions-item label=&quot;用户名&quot;&gt;kooriookami&lt;/el-descriptions-item&gt;</span><br><span class="line">      &lt;el-descriptions-item label=&quot;手机号&quot;&gt;18100000000&lt;/el-descriptions-item&gt;</span><br><span class="line">      &lt;el-descriptions-item label=&quot;居住地&quot;&gt;苏州市&lt;/el-descriptions-item&gt;</span><br><span class="line">      &lt;el-descriptions-item label=&quot;备注&quot;&gt;</span><br><span class="line">        &lt;el-tag size=&quot;small&quot;&gt;学校&lt;/el-tag&gt;</span><br><span class="line">      &lt;/el-descriptions-item&gt;</span><br><span class="line">      &lt;el-descriptions-item label=&quot;联系地址&quot;&gt;江苏省苏州市吴中区吴中大道 1188 号&lt;/el-descriptions-item&gt;</span><br><span class="line">    &lt;/el-descriptions&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li>el-descriptions</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">border</td><td align="left">是否带有边框</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">column</td><td align="left">一行 <code>Descriptions Item</code> 的数量</td><td align="left">number</td><td align="left">—</td><td align="left">3</td></tr><tr><td align="left">direction</td><td align="left">排列的方向</td><td align="left">string</td><td align="left">vertical &#x2F; horizontal</td><td align="left">horizontal</td></tr><tr><td align="left">size</td><td align="left">列表的尺寸</td><td align="left">string</td><td align="left">medium &#x2F; small &#x2F; mini</td><td align="left">—</td></tr><tr><td align="left">title</td><td align="left">标题文本，显示在左上方</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">extra</td><td align="left">操作区文本，显示在右上方</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr></tbody></table><ul><li>el-descriptions   插槽</li></ul><table><thead><tr><th align="left">Name</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">title</td><td align="left">自定义标题，显示在左上方</td></tr><tr><td align="left">extra</td><td align="left">自定义操作区，显示在右上方</td></tr></tbody></table><ul><li>el-descruotions-item</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">label</td><td align="left">标签文本</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">span</td><td align="left">列的数量</td><td align="left">number</td><td align="left">—</td><td align="left">1</td></tr><tr><td align="left">width</td><td align="left">列的宽度，不同行相同列的宽度按最大值设定（如无 <code>border</code> ，宽度包含标签与内容）</td><td align="left">string &#x2F; number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">min-width</td><td align="left">列的最小宽度，与 <code>width</code> 的区别是 <code>width</code> 是固定的，<code>min-width</code> 会把剩余宽度按比例分配给设置了 <code>min-width</code> 的列（如无 <code>border</code>，宽度包含标签与内容）</td><td align="left">string &#x2F; number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">align</td><td align="left">列的内容对齐方式（如无 <code>border</code>，对标签和内容均生效）</td><td align="left">string</td><td align="left">left &#x2F; center &#x2F; right</td><td align="left">left</td></tr><tr><td align="left">label-align</td><td align="left">列的标签对齐方式，若不设置该项，则使用内容的对齐方式（如无 <code>border</code>，请使用 <code>align</code> 参数）</td><td align="left">string</td><td align="left">left &#x2F; center &#x2F; right</td><td align="left">—</td></tr><tr><td align="left">class-name</td><td align="left">列的内容自定义类名</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">label-class-name</td><td align="left">列的标签自定义类名</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr></tbody></table><ul><li>el-descruotions-item  插槽</li></ul><table><thead><tr><th align="left">Name</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">label</td><td align="left">自定义标签文本</td></tr></tbody></table></li></ul></li><li><p>结果</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-row&gt;</span><br><span class="line">  &lt;el-col :sm=&quot;12&quot; :lg=&quot;6&quot;&gt;</span><br><span class="line">    &lt;el-result icon=&quot;success&quot; title=&quot;成功提示&quot; subTitle=&quot;请根据提示进行操作&quot;&gt;</span><br><span class="line">      &lt;template #extra&gt;</span><br><span class="line">        &lt;el-button type=&quot;primary&quot; size=&quot;medium&quot;&gt;返回&lt;/el-button&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/el-result&gt;</span><br><span class="line">  &lt;/el-col&gt;</span><br><span class="line">  &lt;el-col :sm=&quot;12&quot; :lg=&quot;6&quot;&gt;</span><br><span class="line">    &lt;el-result icon=&quot;warning&quot; title=&quot;警告提示&quot; subTitle=&quot;请根据提示进行操作&quot;&gt;</span><br><span class="line">      &lt;template #extra&gt;</span><br><span class="line">        &lt;el-button type=&quot;primary&quot; size=&quot;medium&quot;&gt;返回&lt;/el-button&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/el-result&gt;</span><br><span class="line">  &lt;/el-col&gt;</span><br><span class="line">  &lt;el-col :sm=&quot;12&quot; :lg=&quot;6&quot;&gt;</span><br><span class="line">    &lt;el-result icon=&quot;error&quot; title=&quot;错误提示&quot; subTitle=&quot;请根据提示进行操作&quot;&gt;</span><br><span class="line">      &lt;template #extra&gt;</span><br><span class="line">        &lt;el-button type=&quot;primary&quot; size=&quot;medium&quot;&gt;返回&lt;/el-button&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/el-result&gt;</span><br><span class="line">  &lt;/el-col&gt;</span><br><span class="line">  &lt;el-col :sm=&quot;12&quot; :lg=&quot;6&quot;&gt;</span><br><span class="line">    &lt;el-result icon=&quot;info&quot; title=&quot;信息提示&quot; subTitle=&quot;请根据提示进行操作&quot;&gt;</span><br><span class="line">      &lt;template #extra&gt;</span><br><span class="line">        &lt;el-button type=&quot;primary&quot; size=&quot;medium&quot;&gt;返回&lt;/el-button&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/el-result&gt;</span><br><span class="line">  &lt;/el-col&gt;</span><br><span class="line">&lt;/el-row&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li>el-result</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">title</td><td align="left">标题</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">sub-title</td><td align="left">二级标题</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">icon</td><td align="left">图标类型</td><td align="left">string</td><td align="left">success &#x2F; warning &#x2F; info &#x2F; error</td><td align="left">info</td></tr></tbody></table><ul><li>el-result   插槽</li></ul><table><thead><tr><th align="left">Name</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">icon</td><td align="left">自定义图标</td></tr><tr><td align="left">title</td><td align="left">自定义标题</td></tr><tr><td align="left">subTitle</td><td align="left">自定义二级标题</td></tr><tr><td align="left">extra</td><td align="left">自定义底部额外区域</td></tr></tbody></table></li></ul></li><li><p>警告</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-alert title=&quot;成功提示的文案&quot; type=&quot;success&quot;&gt; &lt;/el-alert&gt;</span><br><span class="line">  &lt;el-alert title=&quot;消息提示的文案&quot; type=&quot;info&quot;&gt; &lt;/el-alert&gt;</span><br><span class="line">  &lt;el-alert title=&quot;警告提示的文案&quot; type=&quot;warning&quot;&gt; &lt;/el-alert&gt;</span><br><span class="line">  &lt;el-alert title=&quot;错误提示的文案&quot; type=&quot;error&quot;&gt; &lt;/el-alert&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li>el-alert</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">title</td><td align="left">标题</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">type</td><td align="left">主题</td><td align="left">string</td><td align="left">success&#x2F;warning&#x2F;info&#x2F;error</td><td align="left">info</td></tr><tr><td align="left">description</td><td align="left">辅助性文字。也可通过默认 slot 传入</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">closable</td><td align="left">是否可关闭</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">center</td><td align="left">文字是否居中</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">close-text</td><td align="left">关闭按钮自定义文本</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">show-icon</td><td align="left">是否显示图标</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">effect</td><td align="left">选择提供的主题</td><td align="left">string</td><td align="left">light&#x2F;dark</td><td align="left">light</td></tr></tbody></table><ul><li>el-alert   插槽</li></ul><table><thead><tr><th align="left">Name</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">—</td><td align="left">描述</td></tr><tr><td align="left">title</td><td align="left">标题的内容</td></tr></tbody></table><ul><li>el-alert   事件</li></ul><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">close</td><td align="left">关闭 alert 时触发的事件</td><td align="left">—</td></tr></tbody></table></li></ul></li><li><p>加载   loading</p></li></ol><pre><code>* 实例<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 服务方式 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-button type=&quot;primary&quot; @click=&quot;openFullScreen&quot;&gt; 加载loading &lt;/el-button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; ElLoading &#125; from &#x27;element-plus&#x27;</span><br><span class="line"></span><br><span class="line"> const fullscreenLoading =  false;</span><br><span class="line">    </span><br><span class="line">const openFullScreen = () =&gt; &#123;</span><br><span class="line">  const loading = ElLoading.service(&#123;</span><br><span class="line">    lock: true,</span><br><span class="line">    text: &#x27;Loading&#x27;,</span><br><span class="line">    background: &#x27;rgba(0, 0, 0, 0.7)&#x27;,</span><br><span class="line">  &#125;)</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    loading.close()</span><br><span class="line">  &#125;, 2000)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 指令方式 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-button type=&quot;primary&quot;</span><br><span class="line">    @click=&quot;openFullScreen&quot;</span><br><span class="line">    v-loading.fullscreen.lock=&quot;fullscreenLoading&quot;&gt; 加载loading &lt;/el-button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; ElLoading &#125; from &#x27;element-plus&#x27;</span><br><span class="line"></span><br><span class="line">const fullscreenLoading =  false;</span><br><span class="line">    </span><br><span class="line">openFullScreen1() &#123;</span><br><span class="line">        this.fullscreenLoading = true</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">          this.fullscreenLoading = false</span><br><span class="line">        &#125;, 2000)</span><br><span class="line">      &#125;,</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></code></pre><ol start="35"><li><p>消息提示</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-button :plain=&quot;true&quot; @click=&quot;open&quot;&gt;打开消息提示&lt;/el-button&gt;</span><br><span class="line">  &lt;el-button :plain=&quot;true&quot; @click=&quot;openVn&quot;&gt;VNode&lt;/el-button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123; defineComponent, h &#125; from &#x27;vue&#x27;</span><br><span class="line">  import &#123; ElMessage &#125; from &#x27;element-plus&#x27;</span><br><span class="line">  export default defineComponent(&#123;</span><br><span class="line">    setup() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        open() &#123;</span><br><span class="line">          ElMessage(&#x27;只是一条消息提示&#x27;)</span><br><span class="line">        &#125;,</span><br><span class="line">        openVn() &#123;</span><br><span class="line">          ElMessage(&#123;</span><br><span class="line">            message: h(&#x27;p&#x27;, null, [</span><br><span class="line">              h(&#x27;span&#x27;, null, &#x27;内容可以是 &#x27;),</span><br><span class="line">              h(&#x27;i&#x27;, &#123; style: &#x27;color: teal&#x27; &#125;, &#x27;VNode&#x27;),</span><br><span class="line">            ]),</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li>ElMessage()</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">message</td><td align="left">消息文字</td><td align="left">string &#x2F; VNode</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">type</td><td align="left">主题</td><td align="left">string</td><td align="left">success&#x2F;warning&#x2F;info&#x2F;error</td><td align="left">info</td></tr><tr><td align="left">iconClass</td><td align="left">自定义图标的类名，会覆盖 <code>type</code></td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">dangerouslyUseHTMLString</td><td align="left">是否将 message 属性作为 HTML 片段处理</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">customClass</td><td align="left">自定义类名</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">duration</td><td align="left">显示时间, 毫秒。设为 0 则不会自动关闭</td><td align="left">number</td><td align="left">—</td><td align="left">3000</td></tr><tr><td align="left">showClose</td><td align="left">是否显示关闭按钮</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">center</td><td align="left">文字是否居中</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">onClose</td><td align="left">关闭时的回调函数, 参数为被关闭的 message 实例</td><td align="left">function</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">offset</td><td align="left">Message 距离窗口顶部的偏移量</td><td align="left">number</td><td align="left">—</td><td align="left">20</td></tr></tbody></table><ul><li>方法</li></ul><table><thead><tr><th align="left">方法名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">close</td><td align="left">关闭当前的 Message</td></tr></tbody></table></li></ul></li><li><p>弹窗</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-button type=&quot;text&quot; @click=&quot;open&quot;&gt;点击打开 Message Box&lt;/el-button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">      open() &#123;</span><br><span class="line">        this.$alert(&#x27;这是一段内容&#x27;, &#x27;标题名称&#x27;, &#123;</span><br><span class="line">          confirmButtonText: &#x27;确定&#x27;,</span><br><span class="line">          callback: (action) =&gt; &#123;</span><br><span class="line">            this.$message(&#123;</span><br><span class="line">              type: &#x27;info&#x27;,</span><br><span class="line">              message: `action: $&#123;action&#125;`,</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>参数</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">title</td><td align="left">MessageBox 标题</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">message</td><td align="left">MessageBox 消息正文内容</td><td align="left">string &#x2F; VNode</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">dangerouslyUseHTMLString</td><td align="left">是否将 message 属性作为 HTML 片段处理</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">type</td><td align="left">消息类型，用于显示图标</td><td align="left">string</td><td align="left">success &#x2F; info &#x2F; warning &#x2F; error</td><td align="left">—</td></tr><tr><td align="left">iconClass</td><td align="left">自定义图标的类名，会覆盖 <code>type</code></td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">customClass</td><td align="left">MessageBox 的自定义类名</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">callback</td><td align="left">若不使用 Promise，可以使用此参数指定 MessageBox 关闭后的回调</td><td align="left">function(action, instance)，action 的值为’confirm’, ‘cancel’或’close’, instance 为 MessageBox 实例，可以通过它访问实例上的属性和方法</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">showClose</td><td align="left">MessageBox 是否显示右上角关闭按钮</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">beforeClose</td><td align="left">MessageBox 关闭前的回调，会暂停实例的关闭</td><td align="left">function(action, instance, done)，action 的值为’confirm’, ‘cancel’或’close’；instance 为 MessageBox 实例，可以通过它访问实例上的属性和方法；done 用于关闭 MessageBox 实例</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">distinguishCancelAndClose</td><td align="left">是否将取消（点击取消按钮）与关闭（点击关闭按钮或遮罩层、按下 ESC 键）进行区分</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">lockScroll</td><td align="left">是否在 MessageBox 出现时将 body 滚动锁定</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">showCancelButton</td><td align="left">是否显示取消按钮</td><td align="left">boolean</td><td align="left">—</td><td align="left">false（以 confirm 和 prompt 方式调用时为 true）</td></tr><tr><td align="left">showConfirmButton</td><td align="left">是否显示确定按钮</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">cancelButtonText</td><td align="left">取消按钮的文本内容</td><td align="left">string</td><td align="left">—</td><td align="left">取消</td></tr><tr><td align="left">confirmButtonText</td><td align="left">确定按钮的文本内容</td><td align="left">string</td><td align="left">—</td><td align="left">确定</td></tr><tr><td align="left">cancelButtonClass</td><td align="left">取消按钮的自定义类名</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">confirmButtonClass</td><td align="left">确定按钮的自定义类名</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">closeOnClickModal</td><td align="left">是否可通过点击遮罩关闭 MessageBox</td><td align="left">boolean</td><td align="left">—</td><td align="left">true（以 alert 方式调用时为 false）</td></tr><tr><td align="left">closeOnPressEscape</td><td align="left">是否可通过按下 ESC 键关闭 MessageBox</td><td align="left">boolean</td><td align="left">—</td><td align="left">true（以 alert 方式调用时为 false）</td></tr><tr><td align="left">closeOnHashChange</td><td align="left">是否在 hashchange 时关闭 MessageBox</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">showInput</td><td align="left">是否显示输入框</td><td align="left">boolean</td><td align="left">—</td><td align="left">false（以 prompt 方式调用时为 true）</td></tr><tr><td align="left">inputPlaceholder</td><td align="left">输入框的占位符</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">inputType</td><td align="left">输入框的类型</td><td align="left">string</td><td align="left">—</td><td align="left">text</td></tr><tr><td align="left">inputValue</td><td align="left">输入框的初始文本</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">inputPattern</td><td align="left">输入框的校验表达式</td><td align="left">regexp</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">inputValidator</td><td align="left">输入框的校验函数。可以返回布尔值或字符串，若返回一个字符串, 则返回结果会被赋值给 inputErrorMessage</td><td align="left">function</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">inputErrorMessage</td><td align="left">校验未通过时的提示文本</td><td align="left">string</td><td align="left">—</td><td align="left">输入的数据不合法!</td></tr><tr><td align="left">center</td><td align="left">是否居中布局</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">roundButton</td><td align="left">是否使用圆角按钮</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">buttonSize</td><td align="left">自定义确认按钮及取消按钮的大小</td><td align="left">string</td><td align="left">mini &#x2F; small &#x2F; medium &#x2F; large</td><td align="left">small</td></tr></tbody></table></li><li><p>导航菜单</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-menu</span><br><span class="line">  :default-active=&quot;activeIndex&quot;</span><br><span class="line">  class=&quot;el-menu-demo&quot;</span><br><span class="line">  mode=&quot;horizontal&quot;</span><br><span class="line">  @select=&quot;handleSelect&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;el-menu-item index=&quot;1&quot;&gt;处理中心&lt;/el-menu-item&gt;</span><br><span class="line">  &lt;el-sub-menu index=&quot;2&quot;&gt;</span><br><span class="line">    &lt;template #title&gt;我的工作台&lt;/template&gt;</span><br><span class="line">    &lt;el-menu-item index=&quot;2-1&quot;&gt;选项1&lt;/el-menu-item&gt;</span><br><span class="line">    &lt;el-menu-item index=&quot;2-2&quot;&gt;选项2&lt;/el-menu-item&gt;</span><br><span class="line">    &lt;el-menu-item index=&quot;2-3&quot;&gt;选项3&lt;/el-menu-item&gt;</span><br><span class="line">    &lt;el-sub-menu index=&quot;2-4&quot;&gt;</span><br><span class="line">      &lt;template #title&gt;选项4&lt;/template&gt;</span><br><span class="line">      &lt;el-menu-item index=&quot;2-4-1&quot;&gt;选项1&lt;/el-menu-item&gt;</span><br><span class="line">      &lt;el-menu-item index=&quot;2-4-2&quot;&gt;选项2&lt;/el-menu-item&gt;</span><br><span class="line">      &lt;el-menu-item index=&quot;2-4-3&quot;&gt;选项3&lt;/el-menu-item&gt;</span><br><span class="line">    &lt;/el-sub-menu&gt;</span><br><span class="line">  &lt;/el-sub-menu&gt;</span><br><span class="line">  &lt;el-menu-item index=&quot;3&quot; disabled&gt;消息中心&lt;/el-menu-item&gt;</span><br><span class="line">  &lt;el-menu-item index=&quot;4&quot;&gt;订单管理&lt;/el-menu-item&gt;</span><br><span class="line">&lt;/el-menu&gt;</span><br><span class="line">&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;el-menu</span><br><span class="line">  :default-active=&quot;activeIndex2&quot;</span><br><span class="line">  class=&quot;el-menu-demo&quot;</span><br><span class="line">  mode=&quot;horizontal&quot;</span><br><span class="line">  @select=&quot;handleSelect&quot;</span><br><span class="line">  background-color=&quot;#545c64&quot;</span><br><span class="line">  text-color=&quot;#fff&quot;</span><br><span class="line">  active-text-color=&quot;#ffd04b&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;el-menu-item index=&quot;1&quot;&gt;处理中心&lt;/el-menu-item&gt;</span><br><span class="line">  &lt;el-sub-menu index=&quot;2&quot;&gt;</span><br><span class="line">    &lt;template #title&gt;我的工作台&lt;/template&gt;</span><br><span class="line">    &lt;el-menu-item index=&quot;2-1&quot;&gt;选项1&lt;/el-menu-item&gt;</span><br><span class="line">    &lt;el-menu-item index=&quot;2-2&quot;&gt;选项2&lt;/el-menu-item&gt;</span><br><span class="line">    &lt;el-menu-item index=&quot;2-3&quot;&gt;选项3&lt;/el-menu-item&gt;</span><br><span class="line">    &lt;el-sub-menu index=&quot;2-4&quot;&gt;</span><br><span class="line">      &lt;template #title&gt;选项4&lt;/template&gt;</span><br><span class="line">      &lt;el-menu-item index=&quot;2-4-1&quot;&gt;选项1&lt;/el-menu-item&gt;</span><br><span class="line">      &lt;el-menu-item index=&quot;2-4-2&quot;&gt;选项2&lt;/el-menu-item&gt;</span><br><span class="line">      &lt;el-menu-item index=&quot;2-4-3&quot;&gt;选项3&lt;/el-menu-item&gt;</span><br><span class="line">    &lt;/el-sub-menu&gt;</span><br><span class="line">  &lt;/el-sub-menu&gt;</span><br><span class="line">  &lt;el-menu-item index=&quot;3&quot; disabled&gt;消息中心&lt;/el-menu-item&gt;</span><br><span class="line">  &lt;el-menu-item index=&quot;4&quot;&gt;订单管理&lt;/el-menu-item&gt;</span><br><span class="line">&lt;/el-menu&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        activeIndex: &#x27;1&#x27;,</span><br><span class="line">        activeIndex2: &#x27;1&#x27;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      handleSelect(key, keyPath) &#123;</span><br><span class="line">        console.log(key, keyPath)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li>el-menu</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">mode</td><td align="left">模式</td><td align="left">string</td><td align="left">horizontal &#x2F; vertical</td><td align="left">vertical</td></tr><tr><td align="left">collapse</td><td align="left">是否水平折叠收起菜单（仅在 mode 为 vertical 时可用）</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">background-color</td><td align="left">菜单的背景色（仅支持 hex 格式）</td><td align="left">string</td><td align="left">—</td><td align="left">#ffffff</td></tr><tr><td align="left">text-color</td><td align="left">菜单的文字颜色（仅支持 hex 格式）</td><td align="left">string</td><td align="left">—</td><td align="left">#303133</td></tr><tr><td align="left">active-text-color</td><td align="left">当前激活菜单的文字颜色（仅支持 hex 格式）</td><td align="left">string</td><td align="left">—</td><td align="left">#409EFF</td></tr><tr><td align="left">default-active</td><td align="left">当前激活菜单的 index</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">default-openeds</td><td align="left">当前打开的 sub-menu 的 index 的数组</td><td align="left">Array</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">unique-opened</td><td align="left">是否只保持一个子菜单的展开</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">menu-trigger</td><td align="left">子菜单打开的触发方式(只在 mode 为 horizontal 时有效)</td><td align="left">string</td><td align="left">hover &#x2F; click</td><td align="left">hover</td></tr><tr><td align="left">router</td><td align="left">是否使用 vue-router 的模式，启用该模式会在激活导航时以 index 作为 path 进行路由跳转</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">collapse-transition</td><td align="left">是否开启折叠动画</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr></tbody></table><ul><li>el-menu 方法</li></ul><table><thead><tr><th align="left">方法名称</th><th align="left">说明</th><th align="left">参数</th></tr></thead><tbody><tr><td align="left">open</td><td align="left">展开指定的 sub-menu</td><td align="left">index: 需要打开的 sub-menu 的 index</td></tr><tr><td align="left">close</td><td align="left">收起指定的 sub-menu</td><td align="left">index: 需要收起的 sub-menu 的 index</td></tr></tbody></table><ul><li>el-menu  事件</li></ul><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">select</td><td align="left">菜单激活回调</td><td align="left">index: 选中菜单项的 index, indexPath: 选中菜单项的 index path, item: 选中菜单项, routeResult: vue-router 的返回值（如果 router 为 true）</td></tr><tr><td align="left">open</td><td align="left">sub-menu 展开的回调</td><td align="left">index: 打开的 sub-menu 的 index, indexPath: 打开的 sub-menu 的 index path</td></tr><tr><td align="left">close</td><td align="left">sub-menu 收起的回调</td><td align="left">index: 收起的 sub-menu 的 index, indexPath: 收起的 sub-menu 的 index path</td></tr></tbody></table><ul><li>el-sub-menu</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">index</td><td align="left">唯一标志</td><td align="left">string&#x2F;null</td><td align="left">—</td><td align="left">null</td></tr><tr><td align="left">popper-class</td><td align="left">弹出菜单的自定义类名</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">show-timeout</td><td align="left">展开 sub-menu 的延时</td><td align="left">number</td><td align="left">—</td><td align="left">300</td></tr><tr><td align="left">hide-timeout</td><td align="left">收起 sub-menu 的延时</td><td align="left">number</td><td align="left">—</td><td align="left">300</td></tr><tr><td align="left">disabled</td><td align="left">是否禁用</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">popper-append-to-body</td><td align="left">是否将弹出菜单插入至 body 元素。在菜单的定位出现问题时，可尝试修改该属性</td><td align="left">boolean</td><td align="left">—</td><td align="left">一级子菜单：true &#x2F; 非一级子菜单：false</td></tr></tbody></table><ul><li>el-menu-item</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">index</td><td align="left">唯一标志</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">route</td><td align="left">Vue Router 路径对象</td><td align="left">Object</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">disabled</td><td align="left">是否禁用</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr></tbody></table><ul><li>el-menu-group</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">title</td><td align="left">分组标题</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr></tbody></table></li></ul></li><li><p>选项卡——标签页</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-tabs v-model=&quot;activeName&quot; @tab-click=&quot;handleClick&quot;&gt;</span><br><span class="line">    &lt;el-tab-pane label=&quot;用户管理&quot; name=&quot;first&quot;&gt;用户管理&lt;/el-tab-pane&gt;</span><br><span class="line">    &lt;el-tab-pane label=&quot;配置管理&quot; name=&quot;second&quot;&gt;配置管理&lt;/el-tab-pane&gt;</span><br><span class="line">    &lt;el-tab-pane label=&quot;角色管理&quot; name=&quot;third&quot;&gt;角色管理&lt;/el-tab-pane&gt;</span><br><span class="line">    &lt;el-tab-pane label=&quot;定时任务补偿&quot; name=&quot;fourth&quot;&gt;定时任务补偿&lt;/el-tab-pane&gt;</span><br><span class="line">  &lt;/el-tabs&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        activeName: &#x27;second&#x27;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      handleClick(tab, event) &#123;</span><br><span class="line">        console.log(tab, event)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li>el-tabs</li></ul><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">tab-click</td><td align="left">tab 被选中时触发</td><td align="left">被选中的标签 tab 实例</td></tr><tr><td align="left">tab-remove</td><td align="left">点击 tab 移除按钮后触发</td><td align="left">被删除的标签的 name</td></tr><tr><td align="left">tab-add</td><td align="left">点击 tabs 的新增按钮后触发</td><td align="left">—</td></tr><tr><td align="left">edit</td><td align="left">点击 tabs 的新增按钮或 tab 被关闭后触发</td><td align="left">(targetName, action)</td></tr></tbody></table><ul><li>el-tab-pane</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">label</td><td align="left">选项卡标题</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">disabled</td><td align="left">是否禁用</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">name</td><td align="left">与选项卡绑定值 value 对应的标识符，表示选项卡别名</td><td align="left">string</td><td align="left">—</td><td align="left">该选项卡在选项卡列表中的顺序值，如第一个选项卡则为’1’</td></tr><tr><td align="left">closable</td><td align="left">标签是否可关闭</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">lazy</td><td align="left">标签是否延迟渲染</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr></tbody></table><ul><li>el-tab-pane  插槽</li></ul><table><thead><tr><th align="left">name</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-</td><td align="left">Tab-pane 的内容</td></tr><tr><td align="left">label</td><td align="left">Tab-pane 的标题内容</td></tr></tbody></table></li></ul></li><li><p>面包屑</p></li></ol><pre><code>* 实例<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-breadcrumb separator=&quot;/&quot;&gt;</span><br><span class="line">  &lt;el-breadcrumb-item :to=&quot;&#123; path: &#x27;/&#x27; &#125;&quot;&gt;首页&lt;/el-breadcrumb-item&gt;</span><br><span class="line">  &lt;el-breadcrumb-item&gt;&lt;a href=&quot;/&quot;&gt;活动管理&lt;/a&gt;&lt;/el-breadcrumb-item&gt;</span><br><span class="line">  &lt;el-breadcrumb-item&gt;活动列表&lt;/el-breadcrumb-item&gt;</span><br><span class="line">  &lt;el-breadcrumb-item&gt;活动详情&lt;/el-breadcrumb-item&gt;</span><br><span class="line">&lt;/el-breadcrumb&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>* 参数  * el-breadcrumb  | 参数            | 说明             | 类型   | 可选值 | 默认值  |  | :-------------- | :--------------- | :----- | :----- | :------ |  | separator       | 分隔符           | string | —      | 斜杠&#39;/&#39; |  | separator-class | 图标分隔符 class | string | —      | -       |  * el-breadcrumb-item  | 参数    | 说明                                                         | 类型          | 可选值 | 默认值 |  | :------ | :----------------------------------------------------------- | :------------ | :----- | :----- |  | to      | 路由跳转对象，同 `vue-router` 的 `to`                        | string/object | —      | —      |  | replace | 在使用 to 进行路由跳转时，启用 replace 将不会向 history 添加新记录 | boolean       | —      | false  |</code></pre><ol start="40"><li><p>下拉菜单</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-dropdown&gt;</span><br><span class="line">  &lt;span class=&quot;el-dropdown-link&quot;&gt;</span><br><span class="line">    下拉菜单&lt;i class=&quot;el-icon-arrow-down el-icon--right&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">  &lt;template #dropdown&gt;</span><br><span class="line">    &lt;el-dropdown-menu&gt;</span><br><span class="line">      &lt;el-dropdown-item&gt;黄金糕&lt;/el-dropdown-item&gt;</span><br><span class="line">      &lt;el-dropdown-item&gt;狮子头&lt;/el-dropdown-item&gt;</span><br><span class="line">      &lt;el-dropdown-item&gt;螺蛳粉&lt;/el-dropdown-item&gt;</span><br><span class="line">      &lt;el-dropdown-item disabled&gt;双皮奶&lt;/el-dropdown-item&gt;</span><br><span class="line">      &lt;el-dropdown-item divided&gt;蚵仔煎&lt;/el-dropdown-item&gt;</span><br><span class="line">    &lt;/el-dropdown-menu&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/el-dropdown&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .el-dropdown-link &#123;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    color: #409eff;</span><br><span class="line">  &#125;</span><br><span class="line">  .el-icon-arrow-down &#123;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>el-dropdown</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">type</td><td align="left">菜单按钮类型，同 Button 组件(只在<code>split-button</code>为 true 的情况下有效)</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">size</td><td align="left">菜单尺寸，在<code>split-button</code>为 true 的情况下也对触发按钮生效</td><td align="left">string</td><td align="left">medium &#x2F; small &#x2F; mini</td><td align="left">—</td></tr><tr><td align="left">max-height</td><td align="left">菜单最大高度</td><td align="left">string &#x2F; number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">split-button</td><td align="left">下拉触发元素呈现为按钮组</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">disabled</td><td align="left">是否禁用</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">placement</td><td align="left">菜单弹出位置</td><td align="left">string</td><td align="left">top&#x2F;top-start&#x2F;top-end&#x2F;bottom&#x2F;bottom-start&#x2F;bottom-end</td><td align="left">bottom</td></tr><tr><td align="left">trigger</td><td align="left">触发下拉的行为</td><td align="left">string</td><td align="left">hover, click, contextmenu</td><td align="left">hover</td></tr><tr><td align="left">hide-on-click</td><td align="left">是否在点击菜单项后隐藏菜单</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">show-timeout</td><td align="left">展开下拉菜单的延时（仅在 trigger 为 hover 时有效）</td><td align="left">number</td><td align="left">—</td><td align="left">250</td></tr><tr><td align="left">hide-timeout</td><td align="left">收起下拉菜单的延时（仅在 trigger 为 hover 时有效）</td><td align="left">number</td><td align="left">—</td><td align="left">150</td></tr><tr><td align="left">tabindex</td><td align="left">Dropdown 组件的 <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex">tabindex</a></td><td align="left">number</td><td align="left">—</td><td align="left">0</td></tr></tbody></table><ul><li>el-dropdown   插槽</li></ul><table><thead><tr><th align="left">Name</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">—</td><td align="left">触发下拉列表显示的元素。 注意： 必须是一个元素或者或者组件</td></tr><tr><td align="left">dropdown</td><td align="left">下拉列表，通常是 <code>&lt;el-dropdown-menu&gt;</code> 组件</td></tr></tbody></table><ul><li>el-dropdown   事件</li></ul><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">click</td><td align="left"><code>split-button</code> 为 true 时，点击左侧按钮的回调</td><td align="left">—</td></tr><tr><td align="left">command</td><td align="left">点击菜单项触发的事件回调</td><td align="left">dropdown-item 的指令</td></tr><tr><td align="left">visible-change</td><td align="left">下拉框出现&#x2F;隐藏时触发</td><td align="left">出现则为 true，隐藏则为 false</td></tr></tbody></table><ul><li>el-dropdown-item</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">command</td><td align="left">指令</td><td align="left">string&#x2F;number&#x2F;object</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">disabled</td><td align="left">禁用</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">divided</td><td align="left">显示分割线</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">icon</td><td align="left">图标类名</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr></tbody></table></li><li><p>步骤条</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-steps :active=&quot;active&quot; finish-status=&quot;success&quot;&gt;</span><br><span class="line">  &lt;el-step title=&quot;步骤 1&quot;&gt;&lt;/el-step&gt;</span><br><span class="line">  &lt;el-step title=&quot;步骤 2&quot;&gt;&lt;/el-step&gt;</span><br><span class="line">  &lt;el-step title=&quot;步骤 3&quot;&gt;&lt;/el-step&gt;</span><br><span class="line">&lt;/el-steps&gt;</span><br><span class="line"></span><br><span class="line">&lt;el-button style=&quot;margin-top: 12px;&quot; @click=&quot;next&quot;&gt;下一步&lt;/el-button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        active: 0,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    methods: &#123;</span><br><span class="line">      next() &#123;</span><br><span class="line">        if (this.active++ &gt; 2) this.active = 0</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li>el-steps</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">space</td><td align="left">每个 step 的间距，不填写将自适应间距。支持百分比。</td><td align="left">number &#x2F; string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">direction</td><td align="left">显示方向</td><td align="left">string</td><td align="left">vertical&#x2F;horizontal</td><td align="left">horizontal</td></tr><tr><td align="left">active</td><td align="left">设置当前激活步骤</td><td align="left">number</td><td align="left">—</td><td align="left">0</td></tr><tr><td align="left">process-status</td><td align="left">设置当前步骤的状态</td><td align="left">string</td><td align="left">wait &#x2F; process &#x2F; finish &#x2F; error &#x2F; success</td><td align="left">process</td></tr><tr><td align="left">finish-status</td><td align="left">设置结束步骤的状态</td><td align="left">string</td><td align="left">wait &#x2F; process &#x2F; finish &#x2F; error &#x2F; success</td><td align="left">finish</td></tr><tr><td align="left">align-center</td><td align="left">进行居中对齐</td><td align="left">boolean</td><td align="left">-</td><td align="left">false</td></tr><tr><td align="left">simple</td><td align="left">是否应用简洁风格</td><td align="left">boolean</td><td align="left">-</td><td align="left">false</td></tr></tbody></table><ul><li>el-step</li></ul><table><thead><tr><th align="left"></th><th align="left"></th><th align="left"></th><th align="left"></th><th align="left"></th></tr></thead><tbody><tr><td align="left">参数</td><td align="left">说明</td><td align="left">类型</td><td align="left">可选值</td><td align="left">默认值</td></tr><tr><td align="left">title</td><td align="left">标题</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">description</td><td align="left">描述性文字</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">icon</td><td align="left">图标</td><td align="left">传入 icon 的 class 全名来自定义 icon，也支持 slot 方式写入</td><td align="left">string</td><td align="left">—</td></tr><tr><td align="left">status</td><td align="left">设置当前步骤的状态，不设置则根据 steps 确定状态</td><td align="left">wait &#x2F; process &#x2F; finish &#x2F; error &#x2F; success</td><td align="left">-</td><td align="left"></td></tr></tbody></table><ul><li>el-setp  插槽</li></ul><table><thead><tr><th align="left">name</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">icon</td><td align="left">自定义图标</td></tr><tr><td align="left">title</td><td align="left">自定义标题</td></tr><tr><td align="left">description</td><td align="left">自定义描述性文字</td></tr></tbody></table></li></ul></li><li><p>Dialog 对话框</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-button plain @click=&quot;centerDialogVisible = true&quot;&gt;</span><br><span class="line">    Click to open the Dialog</span><br><span class="line">  &lt;/el-button&gt;</span><br><span class="line"></span><br><span class="line">  &lt;el-dialog v-model=&quot;centerDialogVisible&quot; title=&quot;Warning&quot; width=&quot;500&quot; center&gt;</span><br><span class="line">    &lt;span&gt;</span><br><span class="line">      It should be noted that the content will not be aligned in center by</span><br><span class="line">      default</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;template #footer&gt;</span><br><span class="line">      &lt;div class=&quot;dialog-footer&quot;&gt;</span><br><span class="line">        &lt;el-button @click=&quot;centerDialogVisible = false&quot;&gt;Cancel&lt;/el-button&gt;</span><br><span class="line">        &lt;el-button type=&quot;primary&quot; @click=&quot;centerDialogVisible = false&quot;&gt;</span><br><span class="line">          Confirm</span><br><span class="line">        &lt;/el-button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/el-dialog&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const centerDialogVisible = ref(false)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li>el-dialog</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">model-value &#x2F; v-model</td><td align="left">是否显示 Dialog</td><td align="left">boolean</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">title</td><td align="left">Dialog 的标题，也可通过具名 slot （见下表）传入</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">width</td><td align="left">Dialog 的宽度</td><td align="left">string &#x2F; number</td><td align="left">—</td><td align="left">50%</td></tr><tr><td align="left">fullscreen</td><td align="left">是否为全屏 Dialog</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">top</td><td align="left">Dialog CSS 中的 margin-top 值</td><td align="left">string</td><td align="left">—</td><td align="left">15vh</td></tr><tr><td align="left">modal</td><td align="left">是否需要遮罩层</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">append-to-body</td><td align="left">Dialog 自身是否插入至 body 元素上。嵌套的 Dialog 必须指定该属性并赋值为 true</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">lock-scroll</td><td align="left">是否在 Dialog 出现时将 body 滚动锁定</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">custom-class</td><td align="left">Dialog 的自定义类名</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">open-delay</td><td align="left">Dialog 打开的延时时间，单位毫秒</td><td align="left">number</td><td align="left">—</td><td align="left">0</td></tr><tr><td align="left">close-delay</td><td align="left">Dialog 关闭的延时时间，单位毫秒</td><td align="left">number</td><td align="left">—</td><td align="left">0</td></tr><tr><td align="left">close-on-click-modal</td><td align="left">是否可以通过点击 modal 关闭 Dialog</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">close-on-press-escape</td><td align="left">是否可以通过按下 ESC 关闭 Dialog</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">show-close</td><td align="left">是否显示关闭按钮</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">before-close</td><td align="left">关闭前的回调，会暂停 Dialog 的关闭</td><td align="left">function(done)，done 用于关闭 Dialog</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">center</td><td align="left">是否对头部和底部采用居中布局</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">destroy-on-close</td><td align="left">关闭时销毁 Dialog 中的元素</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr></tbody></table><ul><li>el-dialog  插槽</li></ul><table><thead><tr><th align="left">name</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">—</td><td align="left">Dialog 的内容</td></tr><tr><td align="left">title</td><td align="left">Dialog 标题区的内容</td></tr><tr><td align="left">footer</td><td align="left">Dialog 按钮操作区的内容</td></tr></tbody></table><ul><li>el-dialog  事件</li></ul><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">open</td><td align="left">Dialog 打开的回调</td><td align="left">—</td></tr><tr><td align="left">opened</td><td align="left">Dialog 打开动画结束时的回调</td><td align="left">—</td></tr><tr><td align="left">close</td><td align="left">Dialog 关闭的回调</td><td align="left">—</td></tr><tr><td align="left">closed</td><td align="left">Dialog 关闭动画结束时的回调</td><td align="left">—</td></tr></tbody></table></li></ul></li><li><p>文字提示</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-tooltip content=&quot;I am an el-tooltip&quot;&gt;</span><br><span class="line">    &lt;el-button&gt;trigger me&lt;/el-button&gt;</span><br><span class="line">  &lt;/el-tooltip&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li>el-tooltip</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">append-to-body</td><td align="left">决定 popper 是否传送到 document.body 下</td><td align="left">Boolean</td><td align="left">-</td><td align="left">true</td></tr><tr><td align="left">effect</td><td align="left">默认提供的主题</td><td align="left">String</td><td align="left">dark&#x2F;light</td><td align="left">dark</td></tr><tr><td align="left">content</td><td align="left">显示的内容，也可以通过 <code>slot#content</code> 传入 DOM</td><td align="left">String</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">placement</td><td align="left">Tooltip 的出现位置</td><td align="left">String</td><td align="left">top&#x2F;top-start&#x2F;top-end&#x2F;bottom&#x2F;bottom-start&#x2F;bottom-end&#x2F;left&#x2F;left-start&#x2F;left-end&#x2F;right&#x2F;right-start&#x2F;right-end</td><td align="left">bottom</td></tr><tr><td align="left">model-value &#x2F; v-model</td><td align="left">状态是否可见</td><td align="left">Boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">disabled</td><td align="left">Tooltip 是否可用</td><td align="left">Boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">offset</td><td align="left">出现位置的偏移量</td><td align="left">Number</td><td align="left">—</td><td align="left">0</td></tr><tr><td align="left">transition</td><td align="left">定义渐变动画</td><td align="left">String</td><td align="left">—</td><td align="left">el-fade-in-linear</td></tr><tr><td align="left">visible-arrow</td><td align="left">是否显示 Tooltip 箭头，更多参数可见<a href="https://www.w3cschool.cn/targetlink?url=https://github.com/element-component/vue-popper">Vue-popper</a></td><td align="left">Boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">popper-options</td><td align="left"><a href="https://popper.js.org/documentation.html">popper.js</a> 的参数</td><td align="left">Object</td><td align="left">参考 <a href="https://popper.js.org/documentation.html">popper.js</a> 文档</td><td align="left">{ boundariesElement: ‘body’, gpuAcceleration: false }</td></tr><tr><td align="left">show-after</td><td align="left">延迟出现，单位毫秒</td><td align="left">Number</td><td align="left">—</td><td align="left">0</td></tr><tr><td align="left">hide-after</td><td align="left">延迟关闭，单位毫秒</td><td align="left">Number</td><td align="left">—</td><td align="left">0</td></tr><tr><td align="left">auto-close</td><td align="left">Tooltip 出现后自动隐藏延时，单位毫秒，为 0 则不会自动隐藏</td><td align="left">number</td><td align="left">—</td><td align="left">0</td></tr><tr><td align="left">manual</td><td align="left">手动控制模式，设置为 true 后，mouseenter 和 mouseleave 事件将不会生效</td><td align="left">Boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">popper-class</td><td align="left">为 Tooltip 的 popper 添加类名</td><td align="left">String</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">enterable</td><td align="left">鼠标是否可进入到 tooltip 中</td><td align="left">Boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">tabindex</td><td align="left">Tooltip 组件的 <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex">tabindex</a></td><td align="left">number</td><td align="left">—</td><td align="left">0</td></tr></tbody></table></li></ul></li><li><p>气泡卡片</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-popover :visible=&quot;visible&quot; placement=&quot;top&quot; :width=&quot;160&quot;&gt;</span><br><span class="line">    &lt;p&gt;Are you sure to delete this?&lt;/p&gt;</span><br><span class="line">    &lt;div style=&quot;text-align: right; margin: 0&quot;&gt;</span><br><span class="line">      &lt;el-button size=&quot;small&quot; text @click=&quot;visible = false&quot;&gt;cancel&lt;/el-button&gt;</span><br><span class="line">      &lt;el-button size=&quot;small&quot; type=&quot;primary&quot; @click=&quot;visible = false&quot;&gt;</span><br><span class="line">        confirm</span><br><span class="line">      &lt;/el-button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;template #reference&gt;</span><br><span class="line">      &lt;el-button @click=&quot;visible = true&quot;&gt;Delete&lt;/el-button&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/el-popover&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li>el-popover</li></ul><table><thead><tr><th align="left">属性名</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">trigger</td><td align="left">触发方式</td><td align="left">string</td><td align="left">click&#x2F;focus&#x2F;hover&#x2F;contextmenu</td><td align="left">hover</td></tr><tr><td align="left">title</td><td align="left">标题</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">effect</td><td align="left">Tooltip 主题，Element Plus 内置了 <code>dark</code> &#x2F; <code>light</code> 两种主题</td><td align="left">string</td><td align="left">string</td><td align="left">light</td></tr><tr><td align="left">content</td><td align="left">显示的内容，也可以通过写入默认 <code>slot</code> 修改显示内容</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">width</td><td align="left">宽度</td><td align="left">string &#x2F; number</td><td align="left">—</td><td align="left">最小宽度 150px</td></tr><tr><td align="left">placement</td><td align="left">出现位置</td><td align="left">string</td><td align="left">top&#x2F;top-start&#x2F;top-end&#x2F;bottom&#x2F;bottom-start&#x2F;bottom-end&#x2F;left&#x2F;left-start&#x2F;left-end&#x2F;right&#x2F;right-start&#x2F;right-end</td><td align="left">bottom</td></tr><tr><td align="left">disabled</td><td align="left">Popover 是否可用</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">visible &#x2F; v-model:visible</td><td align="left">Popover 是否显示</td><td align="left">Boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">offset</td><td align="left">浮层偏移量, <code>Popover</code> 是在 <code>Tooltip</code>,基础上开发的， <code>Popover</code>的 offset 是 <code>undefined</code>, 但<code>Tooltip</code> 的 offset 是12</td><td align="left">number</td><td align="left">—</td><td align="left">12</td></tr><tr><td align="left">transition</td><td align="left">定义渐变动画</td><td align="left">string</td><td align="left">—</td><td align="left">el-fade-in-linear</td></tr><tr><td align="left">show-arrow</td><td align="left">是否显示 Tooltip 箭头， 欲了解更多信息，请参考 <a href="https://github.com/element-plus/element-plus/tree/dev/packages/components/popper">ElPopper</a></td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">popper-options</td><td align="left"><a href="https://popper.js.org/docs/v2/">popper.js</a> 的参数</td><td align="left">object</td><td align="left">详情参考 <a href="https://popper.js.org/docs/v2/">popper.js</a></td><td align="left"><code>&#123;modifiers: [&#123;name: &#39;computeStyles&#39;,options: &#123;gpuAcceleration: false&#125;&#125;]&#125;</code></td></tr><tr><td align="left">popper-class</td><td align="left">为 popper 添加类名</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">popper-style</td><td align="left">为 popper 自定义样式</td><td align="left">string &#x2F; object</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">show-after</td><td align="left">在触发后多久显示内容，单位毫秒</td><td align="left">number</td><td align="left">—</td><td align="left">0</td></tr><tr><td align="left">hide-after</td><td align="left">延迟关闭，单位毫秒</td><td align="left">number</td><td align="left">—</td><td align="left">200</td></tr><tr><td align="left">auto-close</td><td align="left">tooltip 出现后自动隐藏延时，单位毫秒</td><td align="left">number</td><td align="left">—</td><td align="left">0</td></tr><tr><td align="left">tabindex</td><td align="left">Popover 组件的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/tabindex">tabindex</a></td><td align="left">number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">teleported</td><td align="left">是否将 popover 的下拉列表插入至 body 元素</td><td align="left">boolean</td><td align="left">true &#x2F; false</td><td align="left">true</td></tr><tr><td align="left">persistent</td><td align="left">当 popover 组件长时间不触发且 <code>persistent</code> 属性设置为 <code>false</code> 时, popover 将会被删除</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr></tbody></table></li><li><p>el-popover  插槽</p></li></ul><table><thead><tr><th align="left">插槽名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">—</td><td align="left">Popover 内嵌 HTML 文本</td></tr><tr><td align="left">reference</td><td align="left">触发 Popover 显示的 HTML 元素</td></tr></tbody></table><ul><li>el-popover  事件</li></ul><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">show</td><td align="left">显示时触发</td><td align="left">—</td></tr><tr><td align="left">after-enter</td><td align="left">显示动画播放完毕后触发</td><td align="left">—</td></tr><tr><td align="left">hide</td><td align="left">隐藏时触发</td><td align="left">—</td></tr><tr><td align="left">after-leave</td><td align="left">隐藏动画播放完毕后触发</td><td align="left">—</td></tr></tbody></table></li><li><p>卡片</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 将信息聚合在卡片容器中展示。 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-card class=&quot;box-card&quot;&gt;</span><br><span class="line">  &lt;div v-for=&quot;o in 4&quot; :key=&quot;o&quot; class=&quot;text item&quot;&gt;&#123;&#123;&#x27;列表内容 &#x27; + o &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/el-card&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .text &#123;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .item &#123;</span><br><span class="line">    padding: 18px 0;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .box-card &#123;</span><br><span class="line">    width: 480px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li>el-card</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">header</td><td align="left">设置 header，也可以通过 <code>slot#header</code> 传入 DOM</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">body-style</td><td align="left">设置 body 的样式</td><td align="left">object</td><td align="left">—</td><td align="left">{ padding: ‘20px’ }</td></tr><tr><td align="left">shadow</td><td align="left">设置阴影显示时机</td><td align="left">string</td><td align="left">always &#x2F; hover &#x2F; never</td><td align="left">always</td></tr></tbody></table></li></ul></li><li><p>走马灯</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-carousel :interval=&quot;4000&quot; type=&quot;card&quot; height=&quot;200px&quot;&gt;</span><br><span class="line">    &lt;el-carousel-item v-for=&quot;item in 6&quot; :key=&quot;item&quot;&gt;</span><br><span class="line">      &lt;h3 class=&quot;medium&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;/el-carousel-item&gt;</span><br><span class="line">  &lt;/el-carousel&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .el-carousel__item h3 &#123;</span><br><span class="line">    color: #475669;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    opacity: 0.75;</span><br><span class="line">    line-height: 200px;</span><br><span class="line">    margin: 0;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .el-carousel__item:nth-child(2n) &#123;</span><br><span class="line">    background-color: #99a9bf;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .el-carousel__item:nth-child(2n + 1) &#123;</span><br><span class="line">    background-color: #d3dce6;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li>el-carousel</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">height</td><td align="left">走马灯的高度</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">initial-index</td><td align="left">初始状态激活的幻灯片的索引，从 0 开始</td><td align="left">number</td><td align="left">—</td><td align="left">0</td></tr><tr><td align="left">trigger</td><td align="left">指示器的触发方式</td><td align="left">string</td><td align="left">click</td><td align="left">—</td></tr><tr><td align="left">autoplay</td><td align="left">是否自动切换</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">interval</td><td align="left">自动切换的时间间隔，单位为毫秒</td><td align="left">number</td><td align="left">—</td><td align="left">3000</td></tr><tr><td align="left">indicator-position</td><td align="left">指示器的位置</td><td align="left">string</td><td align="left">outside&#x2F;none</td><td align="left">—</td></tr><tr><td align="left">arrow</td><td align="left">切换箭头的显示时机</td><td align="left">string</td><td align="left">always&#x2F;hover&#x2F;never</td><td align="left">hover</td></tr><tr><td align="left">type</td><td align="left">走马灯的类型</td><td align="left">string</td><td align="left">card</td><td align="left">—</td></tr><tr><td align="left">loop</td><td align="left">是否循环显示</td><td align="left">boolean</td><td align="left">-</td><td align="left">true</td></tr><tr><td align="left">direction</td><td align="left">走马灯展示的方向</td><td align="left">string</td><td align="left">horizontal&#x2F;vertical</td><td align="left">horizontal</td></tr><tr><td align="left">pause-on-hover</td><td align="left">鼠标悬浮时暂停自动切换</td><td align="left">boolean</td><td align="left">-</td><td align="left">true</td></tr></tbody></table></li></ul></li><li><p>折叠面板 (手风琴效果)</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-collapse v-model=&quot;activeName&quot; accordion&gt;</span><br><span class="line">  &lt;el-collapse-item title=&quot;一致性 Consistency&quot; name=&quot;1&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      与现实生活一致：与现实生活的流程、逻辑保持一致，遵循用户习惯的语言和概念；</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      在界面中一致：所有的元素和结构需保持一致，比如：设计样式、图标和文本、元素的位置等。</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/el-collapse-item&gt;</span><br><span class="line">  &lt;el-collapse-item title=&quot;反馈 Feedback&quot; name=&quot;2&quot;&gt;</span><br><span class="line">    &lt;div&gt;控制反馈：通过界面样式和交互动效让用户可以清晰的感知自己的操作；&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;页面反馈：操作后，通过页面元素的变化清晰地展现当前状态。&lt;/div&gt;</span><br><span class="line">  &lt;/el-collapse-item&gt;</span><br><span class="line">  &lt;el-collapse-item title=&quot;效率 Efficiency&quot; name=&quot;3&quot;&gt;</span><br><span class="line">    &lt;div&gt;简化流程：设计简洁直观的操作流程；&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;清晰明确：语言表达清晰且表意明确，让用户快速理解进而作出决策；&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      帮助用户识别：界面简单直白，让用户快速识别而非回忆，减少用户记忆负担。</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/el-collapse-item&gt;</span><br><span class="line">  &lt;el-collapse-item title=&quot;可控 Controllability&quot; name=&quot;4&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      用户决策：根据场景可给予用户操作建议或安全提示，但不能代替用户进行决策；</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      结果可控：用户可以自由的进行操作，包括撤销、回退和终止当前操作等。</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/el-collapse-item&gt;</span><br><span class="line">&lt;/el-collapse&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        activeName: &#x27;1&#x27;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li>el-collapse</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">model-value &#x2F; v-model</td><td align="left">当前激活的面板(如果是手风琴模式，绑定值类型需要为<code>string</code>，否则为<code>array</code>)</td><td align="left">string &#x2F; array</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">accordion</td><td align="left">是否手风琴模式</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr></tbody></table><ul><li>el-collapse   事件</li></ul><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">change</td><td align="left">当前激活面板改变时触发(如果是手风琴模式，参数 <code>activeNames</code> 类型为<code>string</code>，否则为<code>array</code>)</td><td align="left">(activeNames: array &#x2F; string)</td></tr></tbody></table><ul><li>el-collapse-item</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">name</td><td align="left">唯一标志符</td><td align="left">string&#x2F;number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">title</td><td align="left">面板标题</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">disabled</td><td align="left">是否禁用</td><td align="left">boolean</td><td align="left">—</td><td align="left">—</td></tr></tbody></table><ul><li>el-collapse-item  插槽</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">—</td><td align="left">Collapse Item 的正文内容</td></tr><tr><td align="left">title</td><td align="left">Collapse Item 的标题区内容</td></tr></tbody></table></li></ul></li><li><p>日历</p></li></ol><pre><code>* 实例<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-calendar v-model=&quot;value&quot;&gt; &lt;/el-calendar&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        value: new Date(),</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>* 参数  * el-calendar  | 参数                  | 说明                                                         | 类型        | 可选值 | 默认值 |  | :-------------------- | :----------------------------------------------------------- | :---------- | :----- | :----- |  | model-value / v-model | 绑定值                                                       | Date        | —      | —      |  | range                 | 时间范围，包括开始时间与结束时间。开始时间必须是周起始日，结束时间必须是周结束日，且时间跨度不能超过两个月。 | [Date]Array | —      | —      |  * el-calendar  作用域插槽  | 参数 | 说明                                                         | 类型   | 可选值 | 默认值 |  | :--- | :----------------------------------------------------------- | :----- | :----- | :----- |  | data | &#123; type, isSelected, day, date &#125;，`type` 表示该日期的所属月份，可选值有 prev-month，current-month，next-month；`isSelected` 标明该日期是否被选中；`day` 是格式化的日期，格式为 yyyy-MM-dd；`date` 是单元格的日期 | Object | —      | —      |  * el-calendar  方法  | 方法名     | 说明     | 参数                                                    |  | :--------- | :------- | :------------------------------------------------------ |  | selectDate | 切换日期 | today / prev-month / next-month / prev-year / next-year |</code></pre><ol start="49"><li><p>图片</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 懒加载 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;demo-image__lazy&quot;&gt;</span><br><span class="line">  &lt;el-image v-for=&quot;url in urls&quot; :key=&quot;url&quot; :src=&quot;url&quot; lazy&gt;&lt;/el-image&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        urls: [</span><br><span class="line">          &#x27;https://fuss10.elemecdn.com/a/3f/3302e58f9a181d2509f3dc0fa68b0jpeg.jpeg&#x27;,</span><br><span class="line">          &#x27;https://fuss10.elemecdn.com/1/34/19aa98b1fcb2781c4fba33d850549jpeg.jpeg&#x27;,</span><br><span class="line">          &#x27;https://fuss10.elemecdn.com/0/6f/e35ff375812e6b0020b6b4e8f9583jpeg.jpeg&#x27;,</span><br><span class="line">          &#x27;https://fuss10.elemecdn.com/9/bb/e27858e973f5d7d3904835f46abbdjpeg.jpeg&#x27;,</span><br><span class="line">          &#x27;https://fuss10.elemecdn.com/d/e6/c4d93a3805b3ce3f323f7974e6f78jpeg.jpeg&#x27;,</span><br><span class="line">          &#x27;https://fuss10.elemecdn.com/3/28/bbf893f792f03a54408b3b7a7ebf0jpeg.jpeg&#x27;,</span><br><span class="line">          &#x27;https://fuss10.elemecdn.com/2/11/6535bcfb26e4c79b48ddde44f4b6fjpeg.jpeg&#x27;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li>el-image</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">alt</td><td align="left">原生 alt</td><td align="left">string</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">fit</td><td align="left">确定图片如何适应容器框，同原生 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit">object-fit</a></td><td align="left">string</td><td align="left">fill &#x2F; contain &#x2F; cover &#x2F; none &#x2F; scale-down</td><td align="left">-</td></tr><tr><td align="left">hide-on-click-modal</td><td align="left">当开启 preview 功能时，是否可以通过点击遮罩层关闭 preview</td><td align="left">boolean</td><td align="left">true &#x2F; false</td><td align="left">false</td></tr><tr><td align="left">lazy</td><td align="left">是否开启懒加载</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">preview-src-list</td><td align="left">开启图片预览功能</td><td align="left">Array</td><td align="left">—</td><td align="left">-</td></tr><tr><td align="left">referrer-policy</td><td align="left">原生 referrerPolicy</td><td align="left">string</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">src</td><td align="left">图片源，同原生</td><td align="left">string</td><td align="left">—</td><td align="left">-</td></tr><tr><td align="left">scroll-container</td><td align="left">开启懒加载后，监听 scroll 事件的容器</td><td align="left">string &#x2F; HTMLElement</td><td align="left">—</td><td align="left">最近一个 overflow 值为 auto 或 scroll 的父元素</td></tr><tr><td align="left">z-index</td><td align="left">设置图片预览的 z-index</td><td align="left">Number</td><td align="left">—</td><td align="left">2000</td></tr><tr><td align="left">append-to-body</td><td align="left">image 自身是否插入至 body 元素上。嵌套的父元素设置了 transform 属性必须指定该属性并赋值为 true</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr></tbody></table><ul><li>el-image  事件</li></ul><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">load</td><td align="left">图片加载成功触发</td><td align="left">(e: Event)</td></tr><tr><td align="left">error</td><td align="left">图片加载失败触发</td><td align="left">(e: Error)</td></tr></tbody></table><ul><li>el-image  插槽</li></ul><table><thead><tr><th align="left">名称</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">placeholder</td><td align="left">图片未加载的占位内容</td></tr><tr><td align="left">error</td><td align="left">加载失败的内容</td></tr></tbody></table></li></ul></li><li><p>回到顶部</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  Scroll down to see the bottom-right button.</span><br><span class="line">  &lt;el-backtop target=&quot;.page-component__scroll .el-scrollbar__wrap&quot;&gt;&lt;/el-backtop&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li>el-backtop</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">target</td><td align="left">触发滚动的对象</td><td align="left">string</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">visibility-height</td><td align="left">滚动高度达到此参数值才出现</td><td align="left">number</td><td align="left"></td><td align="left">200</td></tr><tr><td align="left">right</td><td align="left">控制其显示位置, 距离页面右边距</td><td align="left">number</td><td align="left"></td><td align="left">40</td></tr><tr><td align="left">bottom</td><td align="left">控制其显示位置, 距离页面底部距离</td><td align="left">number</td><td align="left"></td><td align="left">40</td></tr></tbody></table><ul><li>el-backtop   事件</li></ul><table><thead><tr><th align="left">事件名</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">click</td><td align="left">点击按钮触发的事件</td><td align="left">点击事件</td></tr></tbody></table></li></ul></li><li><p>无限滚动</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;infinite-list-wrapper&quot; style=&quot;overflow:auto&quot;&gt;</span><br><span class="line">    &lt;ul</span><br><span class="line">      class=&quot;list&quot;</span><br><span class="line">      v-infinite-scroll=&quot;load&quot;</span><br><span class="line">      infinite-scroll-disabled=&quot;disabled&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;li v-for=&quot;i in count&quot; class=&quot;list-item&quot;&gt;&#123;&#123; i &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;p v-if=&quot;loading&quot;&gt;加载中...&lt;/p&gt;</span><br><span class="line">    &lt;p v-if=&quot;noMore&quot;&gt;没有更多了&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        count: 10,</span><br><span class="line">        loading: false,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      noMore() &#123;</span><br><span class="line">        return this.count &gt;= 20</span><br><span class="line">      &#125;,</span><br><span class="line">      disabled() &#123;</span><br><span class="line">        return this.loading || this.noMore</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      load() &#123;</span><br><span class="line">        this.loading = true</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">          this.count += 2</span><br><span class="line">          this.loading = false</span><br><span class="line">        &#125;, 2000)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li>ul  v-infinite-scroll</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">infinite-scroll-disabled</td><td align="left">是否禁用</td><td align="left">boolean</td><td align="left">-</td><td align="left">false</td></tr><tr><td align="left">infinite-scroll-delay</td><td align="left">节流时延，单位为 ms</td><td align="left">number</td><td align="left">-</td><td align="left">200</td></tr><tr><td align="left">infinite-scroll-distance</td><td align="left">触发加载的距离阈值，单位为 px</td><td align="left">number</td><td align="left">-</td><td align="left">0</td></tr><tr><td align="left">infinite-scroll-immediate</td><td align="left">是否立即执行加载方法，以防初始状态下内容无法撑满容器。</td><td align="left">boolean</td><td align="left">-</td><td align="left">true</td></tr></tbody></table></li></ul></li><li><p>抽屉</p><ul><li>实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-radio-group v-model=&quot;direction&quot;&gt;</span><br><span class="line">  &lt;el-radio label=&quot;ltr&quot;&gt;从左往右开&lt;/el-radio&gt;</span><br><span class="line">  &lt;el-radio label=&quot;rtl&quot;&gt;从右往左开&lt;/el-radio&gt;</span><br><span class="line">  &lt;el-radio label=&quot;ttb&quot;&gt;从上往下开&lt;/el-radio&gt;</span><br><span class="line">  &lt;el-radio label=&quot;btt&quot;&gt;从下往上开&lt;/el-radio&gt;</span><br><span class="line">&lt;/el-radio-group&gt;</span><br><span class="line"></span><br><span class="line">&lt;el-button @click=&quot;drawer = true&quot; type=&quot;primary&quot; style=&quot;margin-left: 16px;&quot;&gt;</span><br><span class="line">  点我打开</span><br><span class="line">&lt;/el-button&gt;</span><br><span class="line"></span><br><span class="line">&lt;el-drawer</span><br><span class="line">  title=&quot;我是标题&quot;</span><br><span class="line">  v-model=&quot;drawer&quot;</span><br><span class="line">  :direction=&quot;direction&quot;</span><br><span class="line">  :before-close=&quot;handleClose&quot;</span><br><span class="line">  destroy-on-close</span><br><span class="line">&gt;</span><br><span class="line">  &lt;span&gt;我来啦!&lt;/span&gt;</span><br><span class="line">&lt;/el-drawer&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        drawer: false,</span><br><span class="line">        direction: &#x27;rtl&#x27;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      handleClose(done) &#123;</span><br><span class="line">        this.$confirm(&#x27;确认关闭？&#x27;)</span><br><span class="line">          .then((_) =&gt; &#123;</span><br><span class="line">            done()</span><br><span class="line">          &#125;)</span><br><span class="line">          .catch((_) =&gt; &#123;&#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li>el-drawer</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">model-value &#x2F; v-model</td><td align="left">是否显示 Drawer</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">append-to-body</td><td align="left">Drawer 自身是否插入至 body 元素上。嵌套的 Drawer 必须指定该属性并赋值为 true</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">lock-scroll</td><td align="left">是否在 Drawer 出现时将 body 滚动锁定</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">before-close</td><td align="left">关闭前的回调，会暂停 Drawer 的关闭</td><td align="left">function(done)，done 用于关闭 Drawer</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">close-on-click-modal</td><td align="left">是否可以通过点击 modal 关闭 Drawer</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">close-on-press-escape</td><td align="left">是否可以通过按下 ESC 关闭 Drawer</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">open-delay</td><td align="left">Drawer 打开的延时时间，单位毫秒</td><td align="left">number</td><td align="left">—</td><td align="left">0</td></tr><tr><td align="left">close-delay</td><td align="left">Drawer 关闭的延时时间，单位毫秒</td><td align="left">number</td><td align="left">—</td><td align="left">0</td></tr><tr><td align="left">custom-class</td><td align="left">Drawer 的自定义类名</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">destroy-on-close</td><td align="left">控制是否在关闭 Drawer 之后将子元素全部销毁</td><td align="left">boolean</td><td align="left">-</td><td align="left">false</td></tr><tr><td align="left">modal</td><td align="left">是否需要遮罩层</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">direction</td><td align="left">Drawer 打开的方向</td><td align="left">Direction</td><td align="left">rtl &#x2F; ltr &#x2F; ttb &#x2F; btt</td><td align="left">rtl</td></tr><tr><td align="left">show-close</td><td align="left">是否显示关闭按钮</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">size</td><td align="left">Drawer 窗体的大小, 当使用 <code>number</code> 类型时, 以像素为单位, 当使用 <code>string</code> 类型时, 请传入 ‘x%’, 否则便会以 <code>number</code> 类型解释</td><td align="left">number &#x2F; string</td><td align="left">-</td><td align="left">‘30%’</td></tr><tr><td align="left">title</td><td align="left">Drawer 的标题，也可通过具名 slot （见下表）传入</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">withHeader</td><td align="left">控制是否显示 header 栏, 默认为 true, 当此项为 false 时, title attribute 和 title slot 均不生效</td><td align="left">boolean</td><td align="left">-</td><td align="left">true</td></tr><tr><td align="left">modal-class</td><td align="left">遮罩层的自定义类名</td><td align="left">string</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">z-index</td><td align="left">设置 z-index</td><td align="left">number</td><td align="left">-</td><td align="left">-</td></tr></tbody></table><ul><li>el-drawer  插槽</li></ul><table><thead><tr><th align="left">name</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">—</td><td align="left">Drawer 的内容</td></tr><tr><td align="left">title</td><td align="left">Drawer 标题区的内容</td></tr></tbody></table><ul><li>el-drawer   方法</li></ul><table><thead><tr><th align="left">name</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">handleClose</td><td align="left">用于关闭 Drawer, 该方法会调用传入的 <code>before-close</code> 方法</td></tr></tbody></table><ul><li>el-drawer  事件</li></ul><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">open</td><td align="left">Drawer 打开的回调</td><td align="left">—</td></tr><tr><td align="left">opened</td><td align="left">Drawer 打开动画结束时的回调</td><td align="left">—</td></tr><tr><td align="left">close</td><td align="left">Drawer 关闭的回调</td><td align="left">—</td></tr><tr><td align="left">closed</td><td align="left">Drawer 关闭动画结束时的回调</td><td align="left">—</td></tr></tbody></table></li></ul></li></ol><h3 id="Vant-Vue-移动端组件库"><a href="#Vant-Vue-移动端组件库" class="headerlink" title="Vant ( Vue 移动端组件库)"></a>Vant ( Vue 移动端组件库)</h3><h3 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h3><h4 id="jquery语法"><a href="#jquery语法" class="headerlink" title="jquery语法"></a>jquery语法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//防止文档在完全加载（就绪）之前运行 jQuery 代码，即在 DOM 加载完成后才可以对 DOM 进行操作。</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">   <span class="comment">// 开始写 jQuery 代码...</span></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 简洁写法</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">   <span class="comment">// 开始写 jQuery 代码...</span></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="jquery-选择器"><a href="#jquery-选择器" class="headerlink" title="jquery 选择器"></a>jquery 选择器</h4><ul><li><p>元素选择器</p><p>​获取页面所有</p><p> 元素</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li><p>#id 选择器</p><p>​通过 id 选取元素语法如下</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#test&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li><p>.class 选择器</p><p>​通过指定的 class 查找元素</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;.test&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li><p>nextAll()</p><p>​获取下一个元素的所有同级元素</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#div1&#x27;</span>).<span class="title function_">nextAll</span>(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">css</span>(&#123;<span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure><ul><li><p>prev()</p><p>​获取下一个元素的所有同级元素</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#div1&#x27;</span>).<span class="title function_">prev</span>(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">css</span>(&#123;<span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure><ul><li><p>parent()</p><p>获取父元素</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#span01&#x27;</span>).<span class="title function_">parent</span>().<span class="title function_">css</span>(&#123;<span class="attr">width</span>:<span class="string">&#x27;100px&#x27;</span>,<span class="attr">height</span>:<span class="string">&#x27;100px&#x27;</span>,<span class="attr">background</span>:<span class="string">&#x27;gold&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure><ul><li><p>closest()</p><p>选取最近的元素，可以是父级，可以是子级</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#span02&#x27;</span>).<span class="title function_">closest</span>(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">css</span>(&#123;<span class="attr">width</span>:<span class="string">&#x27;200px&#x27;</span>,<span class="attr">height</span>:<span class="string">&#x27;200px&#x27;</span>,<span class="attr">background</span>:<span class="string">&#x27;pink&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure><ul><li>链式调用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $(&#x27;.list li&#x27;)：不能回到父级</span></span><br><span class="line"><span class="comment">// $(&#x27;.list&#x27;).children()：可以通过end() 回到父级</span></span><br><span class="line">$(<span class="string">&#x27;.list&#x27;</span>).<span class="title function_">children</span>().<span class="title function_">css</span>(&#123;<span class="attr">background</span>:<span class="string">&#x27;gold&#x27;</span>,<span class="attr">height</span>:<span class="string">&#x27;30px&#x27;</span>,<span class="attr">marginBottom</span>:<span class="string">&#x27;10px&#x27;</span>&#125;).<span class="title function_">end</span>().<span class="title function_">css</span>(&#123;<span class="attr">background</span>:<span class="string">&#x27;green&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;.list2 li:eq(2)&#x27;</span>).<span class="title function_">css</span>(&#123;<span class="attr">background</span>:<span class="string">&#x27;gold&#x27;</span>&#125;).<span class="title function_">siblings</span>().<span class="title function_">css</span>(&#123;<span class="attr">background</span>:<span class="string">&#x27;green&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;#div2&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;.link1&#x27;</span>).<span class="title function_">css</span>(&#123;<span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure><ul><li>更多实例</li></ul><table><thead><tr><th align="left">语法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">$(“*”)</td><td align="left">选取所有元素</td></tr><tr><td align="left">$(this)</td><td align="left">选取当前 HTML 元素</td></tr><tr><td align="left">$(“p.intro”)</td><td align="left">选取 class 为 intro 的 <p> 元素</p></td></tr><tr><td align="left">$(“p:first”)</td><td align="left">选取第一个 <p> 元素</p></td></tr><tr><td align="left">$(“ul li:first”)</td><td align="left">选取第一个 <ul> 元素的第一个 <li> 元素</li></ul></td></tr><tr><td align="left">$(“ul li:first-child”)</td><td align="left">选取每个 <ul> 元素的第一个 <li> 元素</li></ul></td></tr><tr><td align="left">$(“[href]”)</td><td align="left">选取带有 href 属性的元素</td></tr><tr><td align="left">$(“a[target&#x3D;’_blank’]”)</td><td align="left">选取所有 target 属性值等于 “_blank” 的 <a> 元素</a></td></tr><tr><td align="left">$(“a[target!&#x3D;’_blank’]”)</td><td align="left">选取所有 target 属性值不等于 “_blank” 的 <a> 元素</a></td></tr><tr><td align="left">$(“:button”)</td><td align="left">选取所有 type&#x3D;”button” 的 <input> 元素 和 <button> 元素</button></td></tr><tr><td align="left">$(“tr:even”)</td><td align="left">选取偶数位置的 </td></tr><tr> 元素</tr><tr><td align="left">$(“tr:odd”)</td><td align="left">选取奇数位置的 </td></tr><tr> 元素</tr></tbody></table><h4 id="jquery事件"><a href="#jquery事件" class="headerlink" title="jquery事件"></a>jquery事件</h4><p>​<strong>鼠标事件</strong></p><ul><li><p>click()   单击事件           $(<em>selector</em>).click()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;段落被点击了。&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>dblclik()  双击事件         $(<em>selector</em>).dblclick()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">dblclick</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;这个段落被双击。&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>mouseenter() 鼠标经过事件          $(<em>selector</em>).mouseenter()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">mouseenter</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;p&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;yellow&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>mouseleave()   鼠标离开事件       $(<em>selector</em>).mouseleave()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当鼠标指针离开 &lt;p&gt; 元素时，设置背景色为灰色</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">mouseleave</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;p&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;gray&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>hover()    鼠标指针悬停事件    $(<em>selector</em>).hover(<em>inFunction,outFunction</em>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">hover</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;p&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;yellow&quot;</span>);</span><br><span class="line">&#125;,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;p&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;pink&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>​<strong>键盘事件</strong></p><ul><li><p>keypress()   监控键盘按下$(<em>selector</em>).keypress()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;input&quot;</span>).<span class="title function_">keypress</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;span&quot;</span>).<span class="title function_">text</span>(i+=<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>keydown()   监控键盘按下过程     $(<em>selector</em>).keydown()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;input&quot;</span>).<span class="title function_">keydown</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;input&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;yellow&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>keyup()    键盘松开       $(<em>selector</em>).keyup()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;input&quot;</span>).<span class="title function_">keyup</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;input&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;pink&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>​<strong>表单事件</strong></p><ul><li><p>sumbit()     提交表单事件    $(<em>selector</em>).submit()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;form&quot;</span>).<span class="title function_">submit</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;提交&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>change()    监听表单修改事件   $(<em>selector</em>).change()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;input&quot;</span>).<span class="title function_">change</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;文本已被修改&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>focus()    表单获取焦点事件   $(<em>selector</em>).focus()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;input&quot;</span>).<span class="title function_">focus</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;span&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;display&quot;</span>,<span class="string">&quot;inline&quot;</span>).<span class="title function_">fadeOut</span>(<span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>blur()      表单失去焦点事件    $(<em>selector</em>).blur()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;input&quot;</span>).<span class="title function_">blur</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;输入框失去了焦点&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>​<strong>文档&#x2F;窗口事件</strong></p><ul><li><p>load()    当元素全部加载完成时触发     $(<em>selector</em>).load()    load() 方法在 jQuery 版本 1.8 中[已废弃]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;img&quot;</span>).<span class="title function_">load</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;图片已载入&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>resize()     当调整浏览器窗口时触发     $(<em>selector</em>).resize()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">window</span>).<span class="title function_">resize</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&#x27;span&#x27;</span>).<span class="title function_">text</span>(x+=<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>scroll()      当用户滚动指定的元素时,会发生 scroll 事件     $(<em>selector</em>).scroll()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">scroll</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;滚动触发&quot;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>unload()     当用户离开页面时，会发生 unload 事件     **unload() 方法在 jQuery 版本 1.8 中[被废弃]，在 3.0 版本被移除 **     $(<em>selector</em>).unload(<em>function</em>)</p></li></ul><h4 id="jquery样式操作"><a href="#jquery样式操作" class="headerlink" title="jquery样式操作"></a>jquery样式操作</h4><ul><li><p>读取样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(  $(<span class="string">&#x27;.div1&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;fontSize&#x27;</span>) );</span><br></pre></td></tr></table></figure></li><li><p>写入样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;.div1&#x27;</span>).<span class="title function_">css</span>(&#123;<span class="attr">background</span>:<span class="string">&#x27;gold&#x27;</span>&#125;);</span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">css</span>(&#123;<span class="string">&quot;background-color&quot;</span>:<span class="string">&quot;yellow&quot;</span>,<span class="string">&quot;font-size&quot;</span>:<span class="string">&quot;200%&quot;</span>&#125;);</span><br></pre></td></tr></table></figure></li><li><p>添加样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;.div1&#x27;</span>).<span class="title function_">addClass</span>(<span class="string">&#x27;big&#x27;</span>);</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;body div:first&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&quot;important blue&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>删除样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;.div1&#x27;</span>).<span class="title function_">removeClass</span>(<span class="string">&#x27;div1&#x27;</span>);</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;h1,h2,p&quot;</span>).<span class="title function_">removeClass</span>(<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>添加&#x2F; 删除操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;h1,h2,p&quot;</span>).<span class="title function_">toggleClass</span>(<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="jquery动画效果"><a href="#jquery动画效果" class="headerlink" title="jquery动画效果"></a>jquery动画效果</h4><ul><li><p>显示&#x2F;隐藏</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个是动画效果时间； 第二个是回调函数</span></span><br><span class="line">$(selector).<span class="title function_">hide</span>(speed,callback);</span><br><span class="line">$(selector).<span class="title function_">show</span>(speed,callback);</span><br><span class="line"><span class="comment">//隐藏</span></span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;p&quot;</span>).<span class="title function_">hide</span>(<span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//显示</span></span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;p&quot;</span>).<span class="title function_">show</span>(<span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>淡入淡出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fadeIn</span>()</span><br><span class="line"><span class="comment">/**  fadeIn() 用于淡入已隐藏的元素</span></span><br><span class="line"><span class="comment">可选的 speed 参数规定效果的时长。它可以取以下值：&quot;slow&quot;、&quot;fast&quot; 或毫秒。.</span></span><br><span class="line"><span class="comment">可选的 callback 参数是 fading 完成后所执行的函数名称。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">fadeIn</span>();</span><br><span class="line">  $(<span class="string">&quot;#div2&quot;</span>).<span class="title function_">fadeIn</span>(<span class="string">&quot;slow&quot;</span>);</span><br><span class="line">  $(<span class="string">&quot;#div3&quot;</span>).<span class="title function_">fadeIn</span>(<span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">fadeOut</span>()</span><br><span class="line"><span class="comment">/**   fadeOut() 方法用于淡出可见元素。</span></span><br><span class="line"><span class="comment">可选的 speed 参数规定效果的时长。它可以取以下值：&quot;slow&quot;、&quot;fast&quot; 或毫秒。</span></span><br><span class="line"><span class="comment">可选的 callback 参数是 fading 完成后所执行的函数名称。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">fadeOut</span>();</span><br><span class="line">  $(<span class="string">&quot;#div2&quot;</span>).<span class="title function_">fadeOut</span>(<span class="string">&quot;slow&quot;</span>);</span><br><span class="line">  $(<span class="string">&quot;#div3&quot;</span>).<span class="title function_">fadeOut</span>(<span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">fadeToggle</span>()</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">fadeToggle() 方法可以在 fadeIn() 与 fadeOut() 方法之间进行切换。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">fadeToggle</span>();</span><br><span class="line">  $(<span class="string">&quot;#div2&quot;</span>).<span class="title function_">fadeToggle</span>(<span class="string">&quot;slow&quot;</span>);</span><br><span class="line">  $(<span class="string">&quot;#div3&quot;</span>).<span class="title function_">fadeToggle</span>(<span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">fadeTo</span>()</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">$(selector).fadeTo(speed,opacity,callback);</span></span><br><span class="line"><span class="comment">fadeTo() 方法允许渐变为给定的不透明度（值介于 0 与 1 之间）</span></span><br><span class="line"><span class="comment">fadeTo() 方法中必需的 opacity 参数将淡入淡出效果设置为给定的不透明度（值介于 0 与 1 之间）。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">fadeTo</span>(<span class="string">&quot;slow&quot;</span>,<span class="number">0.15</span>);</span><br><span class="line">  $(<span class="string">&quot;#div2&quot;</span>).<span class="title function_">fadeTo</span>(<span class="string">&quot;slow&quot;</span>,<span class="number">0.4</span>);</span><br><span class="line">  $(<span class="string">&quot;#div3&quot;</span>).<span class="title function_">fadeTo</span>(<span class="string">&quot;slow&quot;</span>,<span class="number">0.7</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>滑动</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">slideDown</span>()</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">$(selector).slideDown(speed,callback);</span></span><br><span class="line"><span class="comment">可选的 speed 参数规定效果的时长。它可以取以下值：&quot;slow&quot;、&quot;fast&quot; 或毫秒。</span></span><br><span class="line"><span class="comment">可选的 callback 参数是滑动完成后所执行的函数名称。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$(<span class="string">&quot;#flip&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;#panel&quot;</span>).<span class="title function_">slideDown</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">slideUp</span>()</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">$(selector).slideUp(speed,callback);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$(<span class="string">&quot;#flip&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;#panel&quot;</span>).<span class="title function_">slideUp</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">slideToggle</span>()</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">$(selector).slideToggle(speed,callback);</span></span><br><span class="line"><span class="comment"> slideToggle() 方法可以在 slideDown() 与 slideUp() 方法之间进行切换。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$(<span class="string">&quot;#flip&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;#panel&quot;</span>).<span class="title function_">slideToggle</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>动画</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> div=$(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">  div.<span class="title function_">animate</span>(&#123;<span class="attr">height</span>:<span class="string">&#x27;300px&#x27;</span>,<span class="attr">opacity</span>:<span class="string">&#x27;0.4&#x27;</span>&#125;,<span class="string">&quot;slow&quot;</span>);</span><br><span class="line">  div.<span class="title function_">animate</span>(&#123;<span class="attr">width</span>:<span class="string">&#x27;300px&#x27;</span>,<span class="attr">opacity</span>:<span class="string">&#x27;0.8&#x27;</span>&#125;,<span class="string">&quot;slow&quot;</span>);</span><br><span class="line">  div.<span class="title function_">animate</span>(&#123;<span class="attr">height</span>:<span class="string">&#x27;100px&#x27;</span>,<span class="attr">opacity</span>:<span class="string">&#x27;0.4&#x27;</span>&#125;,<span class="string">&quot;slow&quot;</span>);</span><br><span class="line">  div.<span class="title function_">animate</span>(&#123;<span class="attr">width</span>:<span class="string">&#x27;100px&#x27;</span>,<span class="attr">opacity</span>:<span class="string">&#x27;0.8&#x27;</span>&#125;,<span class="string">&quot;slow&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">$(selector).animate(&#123;params&#125;,speed,callback);</span></span><br><span class="line"><span class="comment">必需的 params 参数定义形成动画的 CSS 属性。</span></span><br><span class="line"><span class="comment">可选的 speed 参数规定效果的时长。它可以取以下值：&quot;slow&quot;、&quot;fast&quot; 或毫秒。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>停止动画</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#stop&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;#panel&quot;</span>).<span class="title function_">stop</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="jquery-操作-html-DOM"><a href="#jquery-操作-html-DOM" class="headerlink" title="jquery 操作 html DOM"></a>jquery 操作 html DOM</h4><ul><li><p>捕获</p><ul><li><p>获取内容</p><ul><li><strong>text()</strong> - 设置或返回所选元素的文本内容</li><li><strong>html()</strong> - 设置或返回所选元素的内容（包括 HTML 标签）</li><li><strong>val()</strong> - 设置或返回表单字段的值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#btn1&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;Text: &quot;</span> + $(<span class="string">&quot;#test&quot;</span>).<span class="title function_">text</span>());</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">&quot;#btn2&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;HTML: &quot;</span> + $(<span class="string">&quot;#test&quot;</span>).<span class="title function_">html</span>());</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">&quot;#btn1&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;值为: &quot;</span> + $(<span class="string">&quot;#test&quot;</span>).<span class="title function_">val</span>());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>获取属性 - attr()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">alert</span>($(<span class="string">&quot;#runoob&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;href&quot;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>设置 </p><ul><li><p>设置内容和属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置内容</span></span><br><span class="line">$(<span class="string">&quot;#btn1&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;#test1&quot;</span>).<span class="title function_">text</span>(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">&quot;#btn2&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;#test2&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot;&lt;b&gt;Hello world!&lt;/b&gt;&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">&quot;#btn3&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;#test3&quot;</span>).<span class="title function_">val</span>(<span class="string">&quot;RUNOOB&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 方法二 回调函数</span></span><br><span class="line">$(<span class="string">&quot;#btn1&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;#test1&quot;</span>).<span class="title function_">text</span>(<span class="keyword">function</span>(<span class="params">i,origText</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;旧文本: &quot;</span> + origText + <span class="string">&quot; 新文本: Hello world! (index: &quot;</span> + i + <span class="string">&quot;)&quot;</span>; </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">&quot;#btn2&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;#test2&quot;</span>).<span class="title function_">html</span>(<span class="keyword">function</span>(<span class="params">i,origText</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;旧 html: &quot;</span> + origText + <span class="string">&quot; 新 html: Hello &lt;b&gt;world!&lt;/b&gt; (index: &quot;</span> + i + <span class="string">&quot;)&quot;</span>; </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置属性</span></span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;#runoob&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;href&quot;</span>,<span class="string">&quot;http://www.runoob.com/jquery&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 方法二  回调函数</span></span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;#runoob&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;href&quot;</span>, <span class="keyword">function</span>(<span class="params">i,origValue</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> origValue + <span class="string">&quot;/jquery&quot;</span>; </span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>添加删除元素&#x2F; 获取元素尺寸</p><ul><li><p>添加元素</p><ul><li>append() - 在被选元素的结尾插入内容</li><li>prepend() - 在被选元素的开头插入内容</li><li>after() - 在被选元素之后插入内容</li><li>before() - 在被选元素之前插入内容</li></ul>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;追加文本&quot;</span>);</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">prepend</span>(<span class="string">&quot;在开头追加文本&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">appendText</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> txt1=<span class="string">&quot;&lt;p&gt;文本-1。&lt;/p&gt;&quot;</span>;              <span class="comment">// 使用 HTML 标签创建文本</span></span><br><span class="line">    <span class="keyword">var</span> txt2=$(<span class="string">&quot;&lt;p&gt;&lt;/p&gt;&quot;</span>).<span class="title function_">text</span>(<span class="string">&quot;文本-2。&quot;</span>);  <span class="comment">// 使用 jQuery 创建文本</span></span><br><span class="line">    <span class="keyword">var</span> txt3=<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">    txt3.<span class="property">innerHTML</span>=<span class="string">&quot;文本-3。&quot;</span>;               <span class="comment">// 使用 DOM 创建文本 text with DOM</span></span><br><span class="line">    $(<span class="string">&quot;body&quot;</span>).<span class="title function_">append</span>(txt1,txt2,txt3);        <span class="comment">// 追加新元素</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;img&quot;</span>).<span class="title function_">after</span>(<span class="string">&quot;在后面添加文本&quot;</span>);</span><br><span class="line"> </span><br><span class="line">$(<span class="string">&quot;img&quot;</span>).<span class="title function_">before</span>(<span class="string">&quot;在前面添加文本&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">afterText</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> txt1=<span class="string">&quot;&lt;b&gt;I &lt;/b&gt;&quot;</span>;                    <span class="comment">// 使用 HTML 创建元素</span></span><br><span class="line">    <span class="keyword">var</span> txt2=$(<span class="string">&quot;&lt;i&gt;&lt;/i&gt;&quot;</span>).<span class="title function_">text</span>(<span class="string">&quot;love &quot;</span>);     <span class="comment">// 使用 jQuery 创建元素</span></span><br><span class="line">    <span class="keyword">var</span> txt3=<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;big&quot;</span>);  <span class="comment">// 使用 DOM 创建元素</span></span><br><span class="line">    txt3.<span class="property">innerHTML</span>=<span class="string">&quot;jQuery!&quot;</span>;</span><br><span class="line">    $(<span class="string">&quot;img&quot;</span>).<span class="title function_">after</span>(txt1,txt2,txt3);          <span class="comment">// 在图片后添加文本</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>删除元素</p><ul><li>remove() - 删除被选元素（及其子元素）</li><li>empty() - 从被选元素中删除子元素</li></ul>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">remove</span>();</span><br><span class="line">$(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">empty</span>();</span><br><span class="line"><span class="comment">// 删除 class=&quot;italic&quot; 的所有 &lt;p&gt; 元素：</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">remove</span>(<span class="string">&quot;.italic&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>尺寸</p><ul><li>width()</li><li>height()</li><li>innerWidth()</li><li>innerHeight()</li><li>outerWidth()</li><li>outerHeight()</li></ul>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">width() 方法设置或返回元素的宽度（不包括内边距、边框或外边距）。</span><br><span class="line">height() 方法设置或返回元素的高度（不包括内边距、边框或外边距）</span><br><span class="line">innerWidth() 方法返回元素的宽度（包括内边距）。</span><br><span class="line">innerHeight() 方法返回元素的高度（包括内边距）。</span><br><span class="line">outerWidth() 方法返回元素的宽度（包括内边距和边框）。</span><br><span class="line">outerHeight() 方法返回元素的高度（包括内边距和边框）。</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="jquery-遍历DOM"><a href="#jquery-遍历DOM" class="headerlink" title="jquery 遍历DOM"></a>jquery 遍历DOM</h4><ul><li><p>向上遍历 DOM 树</p><ul><li>parent()</li><li>parents()</li><li>parentsUntil()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">parent() 方法返回被选元素的直接父元素。</span></span><br><span class="line"><span class="comment">该方法只会向上一级对 DOM 树进行遍历。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;span&quot;</span>).<span class="title function_">parent</span>();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">parents() 方法返回被选元素的所有祖先元素，它一路向上直到文档的根元素 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;span&quot;</span>).<span class="title function_">parents</span>();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">parentsUntil() 方法返回介于两个给定元素之间的所有祖先元素。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;span&quot;</span>).<span class="title function_">parentsUntil</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>向下遍历</p><ul><li>children()</li><li>find()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">children() 方法返回被选元素的所有直接子元素。</span></span><br><span class="line"><span class="comment">该方法只会向下一级对 DOM 树进行遍历。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;div&quot;</span>).<span class="title function_">children</span>(<span class="string">&quot;p.1&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">find() 方法返回被选元素的后代元素，一路向下直到最后一个后代。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;div&quot;</span>).<span class="title function_">find</span>(<span class="string">&quot;span&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>同级遍历</p><ul><li><p>siblings()</p><p>siblings() 方法返回被选元素的所有同胞元素。</p></li><li><p>next()</p><p>next() 方法返回被选元素的下一个同胞元素。该方法只返回一个元素。</p></li><li><p>nextAll()</p><p>nextAll() 方法返回被选元素的所有跟随的同胞元素。</p></li><li><p>nextUntil()</p><p>nextUntil() 方法返回介于两个给定参数之间的所有跟随的同胞元素。</p></li><li><p>prev()</p></li><li><p>prevAll()</p></li><li><p>prevUntil()</p><p>prev(), prevAll() 以及 prevUntil() 方法的工作方式与上面的方法类似，只不过方向相反而已：它们返回的是前面的同胞元素</p></li></ul></li><li><p>过滤</p><ul><li>first() 方法返回被选元素的首个元素。</li><li>last() 方法返回被选元素的最后一个元素。</li><li>eq() 方法返回被选元素中带有指定索引号的元素。</li><li>filter() 方法允许您规定一个标准。不匹配这个标准的元素会被从集合中删除，匹配的元素会被返回。</li><li>not() 方法返回不匹配标准的所有元素。not() 方法与 filter() 相反。</li></ul></li></ul><h4 id="ajax异步请求"><a href="#ajax异步请求" class="headerlink" title="ajax异步请求"></a>ajax异步请求</h4><ul><li><p>load() 方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$(selector).<span class="title function_">load</span>(<span class="variable constant_">URL</span>,data,callback);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">必需的 URL 参数规定您希望加载的 URL。</span></span><br><span class="line"><span class="comment">可选的 data 参数规定与请求一同发送的查询字符串键/值对集合。</span></span><br><span class="line"><span class="comment">可选的 callback 参数是 load() 方法完成后所执行的函数名称。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">load</span>(<span class="string">&quot;demo_test.txt&quot;</span>,<span class="keyword">function</span>(<span class="params">responseTxt,statusTxt,xhr</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(statusTxt==<span class="string">&quot;success&quot;</span>)</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&quot;外部内容加载成功!&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(statusTxt==<span class="string">&quot;error&quot;</span>)</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&quot;Error: &quot;</span>+xhr.<span class="property">status</span>+<span class="string">&quot;: &quot;</span>+xhr.<span class="property">statusText</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>get() 和 post()  方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">$.get(URL,callback);</span></span><br><span class="line"><span class="comment">或</span></span><br><span class="line"><span class="comment">$.get( URL [, data ] [, callback ] [, dataType ] )</span></span><br><span class="line"><span class="comment">URL：发送请求的 URL字符串。</span></span><br><span class="line"><span class="comment">data：可选的，发送给服务器的字符串或 key/value 键值对。</span></span><br><span class="line"><span class="comment">callback：可选的，请求成功后执行的回调函数。</span></span><br><span class="line"><span class="comment">dataType：可选的，从服务器返回的数据类型。默认：智能猜测（可以是xml, json, script, 或 html）。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $.<span class="title function_">get</span>(<span class="string">&quot;demo_test.php&quot;</span>,<span class="keyword">function</span>(<span class="params">data,status</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;数据: &quot;</span> + data + <span class="string">&quot;\n状态: &quot;</span> + status);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//post</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">$.post(URL,callback);</span></span><br><span class="line"><span class="comment">或</span></span><br><span class="line"><span class="comment">$.post( URL [, data ] [, callback ] [, dataType ] )</span></span><br><span class="line"><span class="comment">URL：发送请求的 URL字符串。</span></span><br><span class="line"><span class="comment">data：可选的，发送给服务器的字符串或 key/value 键值对。</span></span><br><span class="line"><span class="comment">callback：可选的，请求成功后执行的回调函数。</span></span><br><span class="line"><span class="comment">dataType：可选的，从服务器返回的数据类型。默认：智能猜测（可以是xml, json, script, 或 html）。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $.<span class="title function_">post</span>(<span class="string">&quot;/try/ajax/demo_test_post.php&quot;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;菜鸟教程&quot;</span>,</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&quot;http://www.runoob.com&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">function</span>(<span class="params">data,status</span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;数据: \n&quot;</span> + data + <span class="string">&quot;\n状态: &quot;</span> + status);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="jquery-input-验证"><a href="#jquery-input-验证" class="headerlink" title="jquery input 验证"></a>jquery input 验证</h4><h4 id="jquery-cookie"><a href="#jquery-cookie" class="headerlink" title="jquery cookie"></a>jquery cookie</h4><ul><li><p>创建cookie并设置有效期</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">cookie</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>, &#123; <span class="attr">expires</span>: <span class="number">7</span> &#125;);</span><br></pre></td></tr></table></figure></li><li><p>读取cookie</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">cookie</span>(); <span class="comment">// =&gt; &#123; &quot;name&quot;: &quot;value&quot; &#125;</span></span><br></pre></td></tr></table></figure></li><li><p>写入cookie</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cookie 删除成功返回 true，否则返回 false</span></span><br><span class="line">$.<span class="title function_">removeCookie</span>(<span class="string">&#x27;name&#x27;</span>); <span class="comment">// =&gt; true</span></span><br><span class="line">$.<span class="title function_">removeCookie</span>(<span class="string">&#x27;nothing&#x27;</span>); <span class="comment">// =&gt; false </span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 写入使用了 path时，读取也需要使用相同的属性 (path, domain) </span></span><br><span class="line">$.<span class="title function_">cookie</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>, &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span> &#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 以下代码【删除失败】</span></span><br><span class="line">$.<span class="title function_">removeCookie</span>(<span class="string">&#x27;name&#x27;</span>); <span class="comment">// =&gt; false</span></span><br><span class="line"><span class="comment">// 以下代码【删除成功】</span></span><br><span class="line">$.<span class="title function_">removeCookie</span>(<span class="string">&#x27;name&#x27;</span>, &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span> &#125;); <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure></li></ul><p>jquery 提示框</p><ul><li><p>下载好插件后导入 jQuery 库</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/jquery/2.0.2/jquery.min.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://static.jyshare.com/assets/jquery/jquery.growl/javascripts/jquery.growl.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://static.jyshare.com/assets/jquery/jquery.growl/stylesheets/jquery.growl.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">growl</span>(&#123; <span class="attr">title</span>: <span class="string">&quot;消息标题&quot;</span>, <span class="attr">message</span>: <span class="string">&quot;消息内容!&quot;</span> &#125;);</span><br><span class="line">$.growl.<span class="title function_">error</span>(&#123;    <span class="attr">title</span>: <span class="string">&quot;错误标题&quot;</span>, <span class="attr">message</span>: <span class="string">&quot;错误消息内容!&quot;</span> &#125;);</span><br><span class="line">$.growl.<span class="title function_">notice</span>(&#123;<span class="attr">title</span>: <span class="string">&quot;提醒标题&quot;</span>, <span class="attr">message</span>: <span class="string">&quot;提醒消息内容!&quot;</span> &#125;);</span><br><span class="line">$.growl.<span class="title function_">warning</span>(&#123;<span class="attr">title</span>: <span class="string">&quot;警告标题&quot;</span>, <span class="attr">message</span>: <span class="string">&quot;警告消息内容!&quot;</span> &#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><ul><li><p>基本操作</p><p>git init 创建一个新的本地存储库</p><p>git clone  <git_url>克隆代码</git_url></p><p>git clone <git_url> -b &lt;分支名称&gt; [指定目录]将存储库克隆到指定目录，并指定分支</git_url></p><p>git status查看当前更改状态</p><p>git add提交更改，存储到暂存区</p><p>git reset  取消暂存文件，保留文件更改    [–hard]   将所有内容恢复到最后一次提交</p><p>git checkout .    还原所有修改，不会删除新增的文件</p><p>git clean -xdf    下面命令会删除新增的文件</p><p>git diff     查看已更改但未暂存内容的差异     [–staged]    已 commited 但尚未提交的内容的差异</p><p>git commit -m “add 添加新功能” 提交本地仓库</p><p>git commit –amend -m “new message”    重写最后的提交消息</p><p>git commit –amend –no-edit    修改最新的提交而不更改提交消息</p><p>git log      显示当前活动分支的提交历史</p><p>git log branchB..branchA      显示 branchA分支 上不在 branchB分支 上的提交</p><p>git diff branchB…branchA      显示 branchA分支 中的内容与 branchB分支 中的内容的差异</p><p>git push 提交远程仓库 ( 默认是向远程仓库的master分支push)</p><p>git push origin xxxxxx 提交到远程仓库的xxxxxx分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 功能开发完成后，将提交的本地仓库的xxxxxx分支合并到主分支，再上传到远程仓库</span><br><span class="line"></span><br><span class="line">//首先切换到主分支</span><br><span class="line">git checkout master</span><br><span class="line">//拉取master分支新代码，防止主分支做了更改，合并失败( 此阶段可能会产生冲突)</span><br><span class="line">git pull</span><br><span class="line">//将xxxxxx分支合并到master主分支</span><br><span class="line">git merge xxxxxx</span><br><span class="line">//将最新代码推送到远程仓库</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li><li><p>分支操作</p><p>git branch查看当前分支;列出所有本地分支   [-av]  列出所有分支，本地和远程</p><p>git branch -m <old> <new> #重命名分支</new></old></p><p>git checkout    切换分支   [-b 分支名] 并创建    [-d 分支名] 删除分支</p></li></ul><h4 id="工作中项目git都如何管理，冲突，push不上去如何解决"><a href="#工作中项目git都如何管理，冲突，push不上去如何解决" class="headerlink" title="工作中项目git都如何管理，冲突，push不上去如何解决"></a>工作中项目git都如何管理，冲突，push不上去如何解决</h4><ol><li><p>现在公司中一般的git仓库的管理方式是什么样的</p><ul><li>共用一个仓库，不同开发人员用不同分支，编写完后，再合并到主分支( 中小型公司)</li><li>主仓库不直接开发，成员把仓库fork到自己的账号下，然后开发合并</li></ul></li><li><p>代码为什么会push不上线上仓库</p><ul><li>没有权限 </li><li>本地比线上落后，有人比你先提交了他的功能代码( 重点)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 解决方案</span><br><span class="line">git pull  // 然后在重新提交</span><br><span class="line"></span><br><span class="line">// 如果发生的冲突修改的是跟你是同一个文件的同一区域 git pull 就会产生冲突，需协商手动解决</span><br><span class="line">// 如果有冲突会有 &#x27;&lt;&lt;&lt;&lt;&lt; HEAD&#x27; 和 &#x27;======&#x27; &quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 哈希值&quot;</span><br><span class="line">&#x27;&lt;&lt;&lt;&lt;&lt; HEAD&#x27; 到&#x27;======&#x27; 是你本地的版本代码</span><br><span class="line">&#x27;======&#x27; 到 &quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 哈希值&quot; 是远程仓库版本</span><br><span class="line">// 协商手动解决完后，需重新走一遍提交流程</span><br></pre></td></tr></table></figure></li><li><p>如何解决代码冲突</p></li></ol><h4 id="worktree"><a href="#worktree" class="headerlink" title="worktree"></a>worktree</h4><p>功能：它 允许我们同时在多个分支上工作，并且每个分支都有自己的工作目录</p><p>场景：你正在某个分支中处理一个功能，突然之间需要在主分支（master）中修复一个关键性 bug</p><p>不使用 <code>git worktree</code> ：</p><ol><li>在分支中存储或提交功能的更改</li><li>切换到主分支（master），在主分支中修复错误，提交修复</li><li>切换回功能分支，然后取消存储或检出更改。</li></ol><p>使用 <code>git worktree</code>:</p><ol><li>使用以下命令为主分支创建一个<strong>新的工作树</strong>到新的文件夹下</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git worktree add ../bugfix master</span><br></pre></td></tr></table></figure><ol start="2"><li>并在该目录中签出主分支。现在，你可以转到 bugfix 目录并修复 bug，在这里进行的<strong>任何更改都将在主分支上进行，并不会影响其他分支</strong>。一旦完成了bug修复，则可以直接提交你的更改</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ../bugfix</span><br><span class="line">git commit -am &quot;修复 bug&quot;</span><br></pre></td></tr></table></figure><ol start="3"><li>返回到原工作目录并继续在原分支（feature）上完成之前的工作，在原分支（feature）中的完成过的代码依然存在，并且你不需要进行额外的存储和切换分支的操作</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ../feature</span><br><span class="line">// 分支功能操作</span><br></pre></td></tr></table></figure><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><p>​单例模式定义：保证一个类有仅有一个实例，并提供一个访问它的全局访问点</p><p>例如：线程池、全局缓存、浏览器window对象</p><p>例子：利用闭包变量永久保存，来实现单例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> createLoginLayer = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(div)&#123;</span><br><span class="line">            div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">            div.<span class="property">innerHTML</span> = <span class="string">&#x27;模拟登录弹窗&#x27;</span></span><br><span class="line">            div.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">append</span>(div)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> div</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取DOM节点，触发闭包函数</span></span><br><span class="line">docment.<span class="title function_">getElementById</span>(<span class="string">&#x27;login&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> loginLayer = <span class="title function_">createLoginLayer</span>()</span><br><span class="line">    loginLayer.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进阶：将闭包函数进行模块化，进行单一职责</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 回调函数</span></span><br><span class="line"><span class="keyword">const</span> createLayer = <span class="keyword">function</span> (<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">//这里执行业务逻辑</span></span><br><span class="line">        <span class="keyword">return</span> result || result = <span class="title function_">fn</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> createLoginLayer = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 操作额外封装，这样就可以回调函数，执行多种代码，互不干扰</span></span><br><span class="line">    div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    div.<span class="property">innerHTML</span> = <span class="string">&#x27;模拟登录弹窗&#x27;</span></span><br><span class="line">    div.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">append</span>(div)</span><br><span class="line">    <span class="keyword">return</span> div</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">docment.<span class="title function_">getElementById</span>(<span class="string">&#x27;login&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> loginLayer = <span class="title function_">createLayer</span>(createLoginLayer)</span><br><span class="line">    loginLayer.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Web安全"><a href="#Web安全" class="headerlink" title="Web安全"></a>Web安全</h3><h4 id="XXS-攻击"><a href="#XXS-攻击" class="headerlink" title="XXS 攻击"></a>XXS 攻击</h4><h4 id="crsf-攻击"><a href="#crsf-攻击" class="headerlink" title="crsf 攻击"></a>crsf 攻击</h4><h3 id="前端项目性能优化"><a href="#前端项目性能优化" class="headerlink" title="前端项目性能优化"></a>前端项目性能优化</h3><ul><li><p>首屏加载速度</p><ul><li><p>首屏速度</p><ul><li>白屏时间<ul><li>资源加载时间(占比最大)</li><li>首屏js执行</li></ul></li><li>渲染页面 (SSR 项目发生在服务器端，可以提升页面加载速度和用户体验，同时也有利于SEO)<ul><li>首屏数据请求</li><li>Dom渲染</li></ul></li></ul><p>解决：最大效果就是 减少首屏资源体积(打包工具压缩，异步加载，懒加载) </p><p>打包 工具压缩：tree-shaking，按需引入，按需打包，减少打包体积</p></li></ul></li><li><p>操作速度以及渲染速度</p><p>造成操作卡顿渲染慢 原因：</p><ol><li>一次性操作大量的dom (例如页面操作大量数据表格tr)</li></ol><p>解决：长列表渲染和异步渲染</p><ol start="2"><li><p>进行了复杂度很高的运算 (常见于循环)</p></li><li><p>vue或react项目中，渲染太多不必要的元素</p></li></ol><p>解决：Vue中有依赖手机，配合vue3的静态节点标记，已经基本避免了因为数据改变引起的无意义渲染</p><ul><li>频繁切换使用v-show ,否则使用v-if</li><li>循环，动态切换内容可以加key值</li><li>keep-alive缓存</li><li>区分请求颗粒度，减少请求范围</li></ul><ol start="4"><li>不变数据，定期失效可以缓存在cookies或者localstorage中，比如token，用户名</li><li>可以考虑做一个缓存队列，存于内存中(全局对象，vuex)。这样能保证刷新就更新数据，也能一定程度上缓存数据</li></ol></li></ul><h3 id="面试题-项目亮点案例"><a href="#面试题-项目亮点案例" class="headerlink" title="面试题 &amp; 项目亮点案例"></a>面试题 &amp; 项目亮点案例</h3><h5 id="实现一个方法能够在控制台打印当前事件-时间间隔是一秒-时间格式是YYYY-MM-DD-hh-mm-ss"><a href="#实现一个方法能够在控制台打印当前事件-时间间隔是一秒-时间格式是YYYY-MM-DD-hh-mm-ss" class="headerlink" title="实现一个方法能够在控制台打印当前事件  时间间隔是一秒  时间格式是YYYY-MM-DD hh:mm:ss"></a>实现一个方法能够在控制台打印当前事件  时间间隔是一秒  时间格式是YYYY-MM-DD hh:mm:ss</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前时间是&#x27;</span> + <span class="title function_">timer</span>());</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">timer</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">// 能够在控制台打印当前的时间</span></span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">    <span class="keyword">var</span> year = date.<span class="title function_">getFullYear</span>()</span><br><span class="line">    <span class="keyword">var</span> moth = (date.<span class="title function_">getMonth</span>() + <span class="number">1</span>).<span class="title function_">toString</span>().<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&quot;0&quot;</span>)<span class="comment">// 9 09</span></span><br><span class="line">    <span class="keyword">var</span> day = date.<span class="title function_">getDate</span>().<span class="title function_">toString</span>().<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&quot;0&quot;</span>) <span class="comment">// 14 9 09</span></span><br><span class="line">    <span class="keyword">var</span> hour = date.<span class="title function_">getHours</span>().<span class="title function_">toString</span>().<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> min = date.<span class="title function_">getMinutes</span>().<span class="title function_">toString</span>().<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&quot;O&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> second = date.<span class="title function_">getSeconds</span>().<span class="title function_">toString</span>().<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&quot;O&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;year&#125;</span>-<span class="subst">$&#123;moth&#125;</span>-<span class="subst">$&#123;day&#125;</span> <span class="subst">$&#123;hour&#125;</span>:<span class="subst">$&#123;min&#125;</span>:<span class="subst">$&#123;second&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="找出任html中所有不重复的标签"><a href="#找出任html中所有不重复的标签" class="headerlink" title="找出任html中所有不重复的标签"></a>找出任html中所有不重复的标签</h5><p>document.querySelectorAll(“*”) 获取页面的所有标签，得到伪数组(NodeList) </p><p>你可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from"><code>Array.from()</code></a> 将其转换为数组。</p><p>不过，有些浏览器较为过时，没有实现 <code>NodeList.forEach()</code> 和 <code>Array.from()</code>。你可以用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach"><code>Array.prototype.forEach()</code></a> 来规避这一问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用扩展运算符 将伪数组转成数组</span></span><br><span class="line"><span class="keyword">let</span> array = [...<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;*&quot;</span>) ];</span><br><span class="line"><span class="keyword">let</span> unarray = [...<span class="keyword">new</span> <span class="title class_">Set</span>(attay.<span class="title function_">map</span>(<span class="function"><span class="params">v</span>=&gt;</span>v.<span class="property">tagName</span>))];)</span><br></pre></td></tr></table></figure><h5 id="找出字符串最多的字符-数组方法-reduce"><a href="#找出字符串最多的字符-数组方法-reduce" class="headerlink" title="找出字符串最多的字符 (数组方法 reduce)"></a>找出字符串最多的字符 (数组方法 reduce)</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;aaaaacccccccdddddss&quot;</span></span><br><span class="line"><span class="comment">//数组reduce函数，第一个参数为回调函数,为数组中每个元素执行的函数。其返回值将作为下一次调用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">str</span>)&#123;</span><br><span class="line">    <span class="comment">//将传入的str转成arr</span></span><br><span class="line">    <span class="keyword">const</span> arr = str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="comment">// pre为新数组，cur为当前循环的arr元素</span></span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre,cur</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur <span class="keyword">in</span> pre)&#123;</span><br><span class="line">            pre[cur]++</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            pre[cur] = <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre</span><br><span class="line">    &#125;, &#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h5><ul><li>利用Set()+Array.from()</li><li>利用两层循环+数组的splice方法</li><li>利用数组的indexOf方法</li><li>reduces()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = names.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">pre, cur</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!pre.<span class="title function_">includes</span>(cur))&#123;</span><br><span class="line">        <span class="keyword">return</span> pre.<span class="title function_">concat</span>(cur)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pre</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,[])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure><h5 id="将多维数组转化为一维数组"><a href="#将多维数组转化为一维数组" class="headerlink" title="将多维数组转化为一维数组"></a>将多维数组转化为一维数组</h5><ul><li>普通递归实现</li><li>扩展运算符实现</li><li>split + toString 实现</li><li>正则 + JSON实现</li><li>Array.prototype.flat</li><li>reduces实现</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> = [[<span class="number">0</span>,<span class="number">1</span>], [<span class="number">2</span>,<span class="number">3</span>], [<span class="number">4</span>,<span class="number">5</span>]]</span><br><span class="line"><span class="keyword">let</span> newArr = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre,cur</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pre.<span class="title function_">concat</span>(cut)</span><br><span class="line">&#125;,[])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nerArr);<span class="comment">// [0,1,2,3,4,5]</span></span><br></pre></td></tr></table></figure><h5 id="获取随机数"><a href="#获取随机数" class="headerlink" title="获取随机数"></a>获取随机数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取20-50的随机数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">randomNum</span>(<span class="params">max, min</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> range = max- min;</span><br><span class="line">    <span class="keyword">let</span> rand = <span class="title class_">Match</span>.<span class="title function_">random</span>()</span><br><span class="line">    <span class="keyword">return</span> min + <span class="title class_">Math</span>.<span class="title function_">round</span>(rand * range)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//html</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;ul&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    ul.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        event = event || <span class="variable language_">window</span>.<span class="property">event</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> target = event.<span class="property">target</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(target.<span class="property">nideName</span> === <span class="string">&quot;LI&quot;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(target.<span class="property">innerHTML</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="写一个函数，接受一个形参，返回其数据类型"><a href="#写一个函数，接受一个形参，返回其数据类型" class="headerlink" title="写一个函数，接受一个形参，返回其数据类型"></a>写一个函数，接受一个形参，返回其数据类型</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getType</span>(<span class="params">type</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> ty =<span class="literal">null</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> type === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">//return &#x27;obj&#x27;</span></span><br><span class="line">        <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(type) === <span class="string">&#x27;[object Object]&#x27;</span> &amp;&amp; (ty = <span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">        <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(type) === <span class="string">&#x27;[object Object]&#x27;</span> &amp;&amp; (ty = <span class="string">&#x27;array&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">typeof</span> type ===<span class="string">&#x27;string&#x27;</span> &amp;&amp; (ty = <span class="string">&#x27;string&#x27;</span>)</span><br><span class="line">        <span class="keyword">typeof</span> type ===<span class="string">&#x27;number&#x27;</span> &amp;&amp; (ty = <span class="string">&#x27;number&#x27;</span>)</span><br><span class="line">        <span class="keyword">typeof</span> type ===<span class="string">&#x27;undefined&#x27;</span> &amp;&amp; (ty = <span class="string">&#x27;undefined&#x27;</span>)</span><br><span class="line">        <span class="keyword">typeof</span> type ===<span class="string">&#x27;boolean&#x27;</span> &amp;&amp; (ty = <span class="string">&#x27;boolean&#x27;</span>)</span><br><span class="line">        <span class="keyword">typeof</span> type ===<span class="string">&#x27;function&#x27;</span> &amp;&amp; (ty = <span class="string">&#x27;function&#x27;</span>)</span><br><span class="line">        <span class="keyword">typeof</span> type ===<span class="string">&#x27;null&#x27;</span> &amp;&amp; (ty = <span class="string">&#x27;null&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ty</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="写一个函数，接受一个形参，返回其参数的和"><a href="#写一个函数，接受一个形参，返回其参数的和" class="headerlink" title="写一个函数，接受一个形参，返回其参数的和"></a>写一个函数，接受一个形参，返回其参数的和</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> length = <span class="variable language_">arguments</span>.<span class="property">length</span></span><br><span class="line">    <span class="keyword">let</span> s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">0</span>; i &lt; length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">isNaN</span>(<span class="variable language_">arguments</span>[i]))&#123;</span><br><span class="line">            s += <span class="title class_">Number</span>(<span class="variable language_">arguments</span>[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getSum</span>(<span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="title class_">NaN</span>))</span><br></pre></td></tr></table></figure><h5 id="cookie-sessionStorage-localStorage-区别"><a href="#cookie-sessionStorage-localStorage-区别" class="headerlink" title="cookie, sessionStorage,localStorage 区别"></a>cookie, sessionStorage,localStorage 区别</h5><ol><li><strong>Cookie</strong>：<ul><li>存储大小：每个cookie的大小通常限制在4KB左右，且每个域名下的cookie数量也有限制。</li><li>生命周期：可以设置cookie的过期时间，可以是会话级的（浏览器关闭后失效）或永久的。</li><li>作用域：cookie在同源的所有页面之间共享，包括子域名。</li><li>用途：主要用于在客户端和服务器之间传递信息，如身份验证、跟踪用户会话等。</li></ul></li><li><strong>sessionStorage</strong>：<ul><li>存储大小：通常限制在5MB左右。</li><li>生命周期：数据在当前会话期间有效，即在当前会话窗口或标签页关闭前有效。</li><li>作用域：每个sessionStorage对象都是独立的，不同页面之间无法共享数据。</li><li>用途：适合存储临时数据，如表单数据、临时状态等。</li></ul></li><li><strong>localStorage</strong>：<ul><li>存储大小：通常限制在5MB或更大。</li><li>生命周期：数据永久存储在浏览器中，除非用户清除或网站代码删除。</li><li>作用域：每个localStorage对象都是独立的，不同页面之间无法共享数据。</li><li>用途：适合长期存储的数据，如用户偏好设置、本地缓存等。</li></ul></li></ol><h5 id="div-css-的布局比table布局比有什么优点"><a href="#div-css-的布局比table布局比有什么优点" class="headerlink" title="div+css 的布局比table布局比有什么优点"></a>div+css 的布局比table布局比有什么优点</h5><ul><li><strong>语义化</strong>：div+css 布局更符合 HTML 结构的语义化，使得页面结构更清晰，更易于维护和理解。</li><li><strong>灵活性</strong>：div+css 布局可以更灵活地控制页面元素的样式和布局，实现更多样化的设计效果。</li><li><strong>响应式设计</strong>：使用 div+css 布局可以更容易地实现响应式设计，使页面在不同设备上有更好的显示效果。</li><li><strong>SEO 优化</strong>：div+css 布局更有利于搜索引擎优化，提高网站的搜索排名。</li><li><strong>性能优化</strong>：div+css 布局相对于 table 布局加载速度更快，减少页面加载时间</li></ul><h5 id="MVC-MVVM-SPA-Vue"><a href="#MVC-MVVM-SPA-Vue" class="headerlink" title="MVC &amp; MVVM &amp;SPA (Vue)"></a>MVC &amp; MVVM &amp;SPA (Vue)</h5><ul><li><p>MVC (model view controller)</p><ul><li>M - Model 数据：数据实体,用来保存页面要展示的数据。比如ajax获取的数据。</li><li>V - View 视图，显示数据的页面，一般为html。</li><li>C - Controller 控制器： 控制整个业务逻辑,负责处理数据,比如数据的获取,以及数据的过滤，进而影响数据在视图上的展示</li></ul></li><li><p>MVVM</p><ul><li>M - Model 数据：它是与应用程序的业务逻辑相关的数据的封装载体</li><li>V - View 视图：它专注于界面的显示和渲染</li><li>VM - ViewModel 视图-数据：它是View和Model的粘合体，负责View和Model的交互和协作</li></ul></li><li><p>SPA ( single page application)</p><ul><li>路由对应页面模板</li><li>只有一个index.html</li></ul></li><li><p>区别</p><p>MVC和MVVM最大的区别在于，MVC中的控制器(Controller)和MVVM中的视图模型(ViewModel)。</p><p>在MVC中，控制器负责处理用户的输入并更新模型，而在MVVM中，视图模型通过双向数据绑定与视图进行通信，当模型的数据改变时，视图会自动更新，这样可以减少视图和模型之间的依赖，使得代码更易于维护和扩展。</p><p>SPA优点</p><ul><li>用户体验好，刷新只是切换模板，不会重新加载整个资源，避免等待时间</li><li>对服务器压力小</li><li>前后端分离</li></ul><p>SPA缺点</p><ul><li>首次渲染耗时</li><li>SEO 效果差</li></ul></li></ul><h5 id="小红书-v-for循环，为什么不建议使用index作为key"><a href="#小红书-v-for循环，为什么不建议使用index作为key" class="headerlink" title="小红书: v-for循环，为什么不建议使用index作为key"></a>小红书: v-for循环，为什么不建议使用index作为key</h5><p>key 是用来在虚拟DOM中，去保证当前元素的唯一性</p><p>使用 <code>index</code> 作为 <code>key</code> 可能会导致渲染性能问题，特别是数据源使用了 <code>unshift</code> 将数据添加到头部时，会导致 <code>index</code> 被重新规划，从而导致重新渲染</p><ol><li>v-for 循环的渲染机制</li></ol><p>在Vue渲染中，有两个比较重要的渲染时机：渲染、更新</p><ul><li>渲染: 指Dom首次渲染 (首次渲染性能是固定的)</li><li>更新: 指数据变化后影响到的视图变化(所谓性能问题，主要集中在这里)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;div&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">   &lt;li v-for=&quot;(item, index) in list&quot; :key=&quot;index&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">  &lt;button @click=&quot;change&quot;&gt;change&lt;/button&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const list = ref([1, 2, 3])</span><br><span class="line"></span><br><span class="line">const change = () =&gt; &#123;</span><br><span class="line"> list.value = [3, 2, 1]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>如果我们要把Dom节点数据由[1, 2, 3]变成[3, 2, 1]的过程就是Dom更新</p><ol start="2"><li>key 在渲染中的作用</li></ol><p>v-for的Dom更新，是两组Dom对比发生的变化，Vue源码diff算法中有<code>isSameVNodeType</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isSameVNodeType</span>(<span class="params">n1: VNode, n2: VNode</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(</span><br><span class="line">__DEV__ &amp;&amp;</span><br><span class="line">n2.<span class="property">shaoeFlag</span> &amp; <span class="title class_">ShapeFlags</span>.<span class="property">COMPONENT</span> &amp;&amp;</span><br><span class="line">hmrDirtyComponents.<span class="title function_">has</span>(n2.<span class="property">type</span> <span class="keyword">as</span> <span class="title class_">ConcreteComponent</span>)</span><br><span class="line">)&#123;</span><br><span class="line"><span class="comment">// HMR only: if the component has been hot-updated, force a reload</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n1.<span class="property">type</span> === n2.<span class="property">type</span> &amp;&amp; n1.<span class="property">key</span> === n2.<span class="property">key</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码用来判断两个Dom是否相等</p><ul><li>type：表示当前Dom类型</li><li>key： v-for 循环中绑定的key值</li></ul><p>可以看出vue中是通过type+key两个属性的方式来判断dom是否相等</p><ol start="3"><li>index为什么会影响性能</li></ol><p>根据上述内容，在type不变的前提下，key就决定了Dom是否需要重新渲染的条件</p><p>假如使用index作为key，同时使用unshift方法为数组添加了一个新的元素，那么就会导致所有index都会发生改变，从而<code>isSameVNodeType</code>返回<code>false</code>，即所有Dom需要全部不重新渲染，从而影响性能</p><h5 id="如何让-var-a-b-a-1-b-2-结构赋值成立"><a href="#如何让-var-a-b-a-1-b-2-结构赋值成立" class="headerlink" title="如何让 var [a, b] &#x3D; {a:1, b:2} 结构赋值成立"></a>如何让 var [a, b] &#x3D; {a:1, b:2} 结构赋值成立</h5><p>根本原因：是因为对象 数据结构是不存在迭代器 ( [Symbol.iterator] ),如果要成立，则需要人为在Object 原型上添加迭代器方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 使用 Object.values(this) 方法获取对象的所有值，并返回这些值的迭代器对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">values</span>(<span class="variable language_">this</span>)[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="尺寸单位；为什么不建议px作为尺寸单位？"><a href="#尺寸单位；为什么不建议px作为尺寸单位？" class="headerlink" title="尺寸单位；为什么不建议px作为尺寸单位？"></a>尺寸单位；为什么不建议px作为尺寸单位？</h5><ol><li>为什么不建议使用px</li></ol><p>原因：</p><p>屏幕所有内容都由像素组成，不同显示器屏幕，大小方向缩放比例和像素上都不相同；</p><ol start="2"><li>应该使用是什么</li></ol><p>css还提供了其他尺寸单位来代替px ： rem, em, vh, vw</p><ul><li>rem与em</li></ul><p>em: 相对于父元素的fontsize大小</p><p>rem：<code> root em</code> ，即相对于 html根标签的fontsize大小</p><p>响应式开发中，更加推荐使用rem：</p><p>(1). 相对性: rem单位相对于根元素 <code>html</code>的字体大小 </p><p>(2). 可扩展性: 更改根标签的字体大小可以缩放整个网站中指定的大小rem，从而可以更轻松的调整屏幕尺寸布局，提高访问性</p><p>(3). 默认大小: 默认大小1rem 通常等于16像素，除非根元素的字体大小明确设置为不同的值</p><p>(4). 一致性: 使用rem单位有助于在整个网站上保持一致的大小，避免使用em出现”复合效应”</p><ul><li>视口单位(ViewProt) vw, vh</li></ul><p>视口单位：即用户浏览器窗口大小，</p><p>常用尺寸单位：vw, vh</p><p>​          vw: 表示视口宽度百分比，1vw代表视口宽度的1%</p><p>​          vh: 表示视口高度百分比，1vh代表视口高度的1%</p><p>其他单位：vmin, vmax</p><p>​          vmin: (视口最小值) 表示视口较小尺寸(宽度或高度)的百分比。1vmin等于视口较小尺寸的1%; 例如视口宽度为1000px, 高度为800px, 则1vmin为8px</p><p>​          vmax: (视口最大值)表示视口较小尺寸(宽度或高度)的百分比。1vmin等于视口较小尺寸的1%; 例如视口宽度为1000px, 高度为800px, 则1vmin为10px</p><ul><li>百分比(%)</li></ul><p>百分比永远是相对于父元素的大小</p><ol start="3"><li>总结</li></ol><p>​针对字体大小：尽量使用rem单位，配合动态rem计算进行处理</p><p>​针对宽高：尽量使用vw + vh单位，避免复合效应</p><h5 id="Vue-v-show和v-if-有什么区别，什么时候用v-show-v-if"><a href="#Vue-v-show和v-if-有什么区别，什么时候用v-show-v-if" class="headerlink" title="Vue: v-show和v-if 有什么区别，什么时候用v-show&#x2F;v-if"></a>Vue: v-show和v-if 有什么区别，什么时候用v-show&#x2F;v-if</h5><p>官方解释：“v-if 控制 dom 的渲染，v-show 通过 css 控制 dom 的显示。如果切换频繁，那么就使用 v-show，否则就使用 v-if”</p><p>一个dom是否被频繁调用，是根据使用者来看，每个人的角色不同。使用的dom节点就不同。实际开发中我们是无法判断该dom是否频繁切换</p><ul><li>v-if和v-show的区别：</li></ul><p>核心：v-if会导致dom重新渲染，但v-show不会</p><p>v-show 不会导致组件被销毁和渲染，但是 v-if 会导致组件被销毁和重新渲染。如果当前组件在 created 中存在接口的调用，不销毁组件，重新获取，就会获取到错误的数据</p><p><strong>当组件需要在指定时机创建，在指定时机销毁时，需要使用 v-if。而 当组件仅需要创建一次时，则可以使用 v-show。</strong></p><h5 id="如何将一个图片转成base64-格式"><a href="#如何将一个图片转成base64-格式" class="headerlink" title="如何将一个图片转成base64 格式"></a>如何将一个图片转成base64 格式</h5><p>canvas就可以实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>() <span class="comment">//创建一个新的Image对象</span></span><br><span class="line">img.<span class="property">src</span> = <span class="string">&#x27;image.jpg&#x27;</span> <span class="comment">// 设置图片源</span></span><br><span class="line">img.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//当图片加载完成后执行操作</span></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>) <span class="comment">// 创建一个Canvas元素</span></span><br><span class="line">    <span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置Canvas元素的宽高与图片一致</span></span><br><span class="line">    canvas.<span class="property">width</span> = img.<span class="property">width</span></span><br><span class="line">    canvas.<span class="property">height</span> = img.<span class="property">height</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//在 Canvas上绘制图片</span></span><br><span class="line">    ctx.<span class="title function_">drawImage</span>(img, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将Canvas内容转换为base64格式</span></span><br><span class="line">    <span class="keyword">var</span> base64Data = canvas.<span class="title function_">toDataURL</span>(<span class="string">&#x27;image/jpeg&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//base64Data 就是转换后的base64 格式图片数据</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(base64Data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="平时开发过程中你是如何数组去重的"><a href="#平时开发过程中你是如何数组去重的" class="headerlink" title="平时开发过程中你是如何数组去重的"></a>平时开发过程中你是如何数组去重的</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例题：</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">id</span>: &#123; <span class="attr">n</span>: <span class="number">1</span> &#125;&#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">id</span>: &#123; <span class="attr">n</span>: <span class="number">1</span> &#125;&#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">id</span>: &#123; <span class="attr">n</span>: <span class="number">2</span> &#125;&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>set 仅仅对原始类型进行了去重，其实 set 去重的核心逻辑是通过<code>===</code>来判断的，两个引用类型是否相等，首先就是判断引用地址是否相等</p><p>方法一：将其转换成字符串，也就是 JSON 格式，然后 set 去重，最后转回来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">id</span>: &#123; <span class="attr">n</span>: <span class="number">1</span> &#125;&#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">id</span>: &#123; <span class="attr">n</span>: <span class="number">1</span> &#125;&#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">id</span>: &#123; <span class="attr">n</span>: <span class="number">2</span> &#125;&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = arr.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(item)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newArr = <span class="keyword">new</span> <span class="title class_">Set</span>(arr2)</span><br><span class="line">newArr = <span class="title class_">Array</span>.<span class="title function_">from</span>(newArr).<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(item)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr);</span><br></pre></td></tr></table></figure><p>方法二： 自己写个函数，遍历数组，遍历的过程中维护一个 res 数组，如果 res 数组中不存在当前项，那就 push 进去，若存在则跳过</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">id</span>: &#123; <span class="attr">n</span>: <span class="number">1</span> &#125; &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">id</span>: &#123; <span class="attr">n</span>: <span class="number">1</span> &#125; &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">id</span>: &#123; <span class="attr">n</span>: <span class="number">2</span> &#125; &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">uniqueArr</span> (arr) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">        <span class="keyword">let</span> isFind = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> resItem <span class="keyword">of</span> res) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_">equal</span>(item, resItem)) &#123;</span><br><span class="line">                isFind = <span class="literal">true</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!isFind) res.<span class="title function_">push</span>(item)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">equal</span>(<span class="params">v1, v2</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">typeof</span> v1 === <span class="string">&#x27;object&#x27;</span> &amp;&amp; v1 !== <span class="literal">null</span>) &amp;&amp; (<span class="keyword">typeof</span> v2 === <span class="string">&#x27;object&#x27;</span> &amp;&amp; v2 !== <span class="literal">null</span>)) &#123; <span class="comment">// 都是引用类型</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="title function_">keys</span>(v1).<span class="property">length</span> !== <span class="title class_">Object</span>.<span class="title function_">keys</span>(v2).<span class="property">length</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> v1) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v2.<span class="title function_">hasOwnProperty</span>(key)) &#123; <span class="comment">// 只要v1遍历的东西，V2显示具有就再去看value</span></span><br><span class="line">                <span class="comment">// 有可能value也是引用类型，那就递归下</span></span><br><span class="line">                <span class="keyword">if</span> (!<span class="title function_">equal</span>(v1[key], v2[key])) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span> <span class="comment">// 两个对象长得完全一样</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 都不是引用类型、一方是引用类型 同样这也是递归的出口</span></span><br><span class="line">        <span class="keyword">return</span> v1 === v2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">uniqueArr</span>(arr));</span><br></pre></td></tr></table></figure><h5 id="WebSocket-实现原理"><a href="#WebSocket-实现原理" class="headerlink" title="WebSocket 实现原理"></a>WebSocket 实现原理</h5><p>WebSocket 是一种在单个 TCP 连接上进行全双工通信的协议，它允许服务器和客户端之间进行实时数据传输。WebSocket 利用 HTTP 协议升级机制，在握手阶段从 HTTP 协议切换到 WebSocket 协议</p><ol><li>握手阶段：客户端发起 WebSocket 连接请求，服务器返回 101 状态码表示同意建立 WebSocket 连接。</li><li>建立连接：建立 TCP 连接后，双方可以直接发送数据，而不需要像 HTTP 那样每次请求都要重新建立连接。</li><li>数据传输：通过帧（Frame）的方式进行数据传输，帧包括数据内容、控制信息等。</li><li>心跳检测：保持连接活跃的方式之一是通过定期发送心跳数据帧来检测连接是否仍然有效</li></ol><h5 id="uniapp-预编译指令"><a href="#uniapp-预编译指令" class="headerlink" title="uniapp 预编译指令"></a>uniapp 预编译指令</h5><p>利用注释的方式编写，可以根据不同的环境或条件，在开发阶段和打包阶段对代码进行处理。</p><ol><li>#ifdef 和 #ifndef：这两个指令可以用来判断某个变量是否已经定义。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#ifdef H5  </span><br><span class="line">  // H5 端特定代码  </span><br><span class="line">#endif  </span><br><span class="line"></span><br><span class="line">#ifndef MP-WEIXIN  </span><br><span class="line">  // 非微信小程序端特定代码  </span><br><span class="line">#endif  </span><br></pre></td></tr></table></figure><ol><li>#if、#elif、#else 和 #endif：这些指令可以组合起来实现更复杂的条件判断。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#if PLATFORM == &#x27;ios&#x27;  </span><br><span class="line">  // iOS 端特定代码  </span><br><span class="line">#elif PLATFORM == &#x27;android&#x27;  </span><br><span class="line">  // 安卓端特定代码  </span><br><span class="line">#else   </span><br><span class="line">  // 其他平台特定代码   </span><br><span class="line">#endif   </span><br></pre></td></tr></table></figure><h5 id="vue如何优化seo"><a href="#vue如何优化seo" class="headerlink" title="vue如何优化seo"></a>vue如何优化seo</h5><ol><li>使用服务端渲染（SSR）：Vue 提供了一种服务端渲染的方式，可以在服务端将 Vue 组件渲染成 HTML，然后再将 HTML 发送给浏览器。这样可以让搜索引擎更好地抓取页面内容，提高页面的 SEO 优化效果。</li><li>合理使用 meta 标签：在 Vue 中，可以通过在组件中设置 metaInfo 属性来设置 meta 标签。合理设置 meta 标签可以让搜索引擎更好地理解页面内容，提高页面的 SEO 优化效果。</li><li>使用合理的 URL 结构：URL 结构对于 SEO 优化来说非常重要，应该尽量使用静态 URL，避免使用动态 URL。同时，URL 结构应该清晰明了，能够让搜索引擎和用户更好地理解页面内容。</li><li>提高页面加载速度：页面加载速度对于 SEO 优化来说也非常重要，应该尽量减少页面的加载时间。可以通过使用 CDN、压缩资源文件、使用图片懒加载等方式来提高页面加载速度。</li><li>合理使用标题和内容：页面的标题和内容对于 SEO 优化来说也非常重要，应该合理使用关键词，让搜索引擎更好地理解页面内容。同时，应该避免使用重复的标题和内容，以免被搜索引擎降权。</li></ol><h5 id="promise实现原理"><a href="#promise实现原理" class="headerlink" title="promise实现原理"></a>promise实现原理</h5><p>Promise 的核心是通过状态管理和回调函数的调度来处理异步操作。其实现原理包括状态的管理、回调的注册与执行以及对异常的处理。</p><ol><li><strong>Promise 的状态</strong></li></ol><p>Promise 有三种状态：</p><ul><li><strong>Pending（待定）</strong>：初始状态，表示异步操作尚未完成。</li><li><strong>Fulfilled（已完成）</strong>：表示异步操作成功完成。</li><li><strong>Rejected（已拒绝）</strong>：表示异步操作失败。</li></ul><p>在状态变化的过程中，Promise 只能从 Pending 状态转变为 Fulfilled 或 Rejected 状态，且状态一旦改变，不可再次改变。</p><ol start="2"><li><strong>Promise 构造函数</strong></li></ol><p>Promise 的实现通常包括一个构造函数，接收一个执行器函数（executor），这个执行器函数接受两个参数 <code>resolve</code> 和 <code>reject</code>，用于改变 Promise 的状态。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">class MyPromise &#123;  </span><br><span class="line">  constructor(executor) &#123;  </span><br><span class="line">    this.state = &#x27;pending&#x27;; // 初始状态  </span><br><span class="line">    this.value = undefined; // 存储最终结果  </span><br><span class="line">    this.reason = undefined; // 存储失败原因  </span><br><span class="line">    this.onResolvedCallbacks = []; // 存储成功的回调  </span><br><span class="line">    this.onRejectedCallbacks = []; // 存储失败的回调  </span><br><span class="line"></span><br><span class="line">    const resolve = (value) =&gt; &#123;  </span><br><span class="line">      if (this.state === &#x27;pending&#x27;) &#123;  </span><br><span class="line">        this.state = &#x27;fulfilled&#x27;;  </span><br><span class="line">        this.value = value;  </span><br><span class="line">        this.onResolvedCallbacks.forEach(fn =&gt; fn()); // 执行成功的回调  </span><br><span class="line">      &#125;  </span><br><span class="line">    &#125;;  </span><br><span class="line"></span><br><span class="line">    const reject = (reason) =&gt; &#123;  </span><br><span class="line">      if (this.state === &#x27;pending&#x27;) &#123;  </span><br><span class="line">        this.state = &#x27;rejected&#x27;;  </span><br><span class="line">        this.reason = reason;  </span><br><span class="line">        this.onRejectedCallbacks.forEach(fn =&gt; fn()); // 执行失败的回调  </span><br><span class="line">      &#125;  </span><br><span class="line">    &#125;;  </span><br><span class="line"></span><br><span class="line">    try &#123;  </span><br><span class="line">      executor(resolve, reject); // 执行传入的函数  </span><br><span class="line">    &#125; catch (error) &#123;  </span><br><span class="line">      reject(error); // 捕获错误并调用 reject  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><ol start="3"><li><strong>then 方法</strong></li></ol><p>Promise 的 <code>then</code> 方法用于添加回调函数，在 Promise 状态发生改变时执行对应的回调。<code>then</code> 方法通常返回一个新的 Promise，这使得 Promise 可以链式调用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">then(onFulfilled, onRejected) &#123;  </span><br><span class="line">  return new MyPromise((resolve, reject) =&gt; &#123;  </span><br><span class="line">    const handleResolve = () =&gt; &#123;  </span><br><span class="line">      try &#123;  </span><br><span class="line">        const result = onFulfilled(this.value); // 调用成功的回调  </span><br><span class="line">        resolve(result);  </span><br><span class="line">      &#125; catch (e) &#123;  </span><br><span class="line">        reject(e); // 如果回调抛出异常，则调用 reject  </span><br><span class="line">      &#125;  </span><br><span class="line">    &#125;;  </span><br><span class="line"></span><br><span class="line">    const handleReject = () =&gt; &#123;  </span><br><span class="line">      try &#123;  </span><br><span class="line">        const result = onRejected(this.reason); // 调用失败的回调  </span><br><span class="line">        resolve(result);  </span><br><span class="line">      &#125; catch (e) &#123;  </span><br><span class="line">        reject(e); // 如果回调抛出异常，则调用 reject  </span><br><span class="line">      &#125;  </span><br><span class="line">    &#125;;  </span><br><span class="line"></span><br><span class="line">    if (this.state === &#x27;fulfilled&#x27;) &#123;  </span><br><span class="line">      handleResolve();  </span><br><span class="line">    &#125; else if (this.state === &#x27;rejected&#x27;) &#123;  </span><br><span class="line">      handleReject();  </span><br><span class="line">    &#125; else &#123;  </span><br><span class="line">      // 如果状态是 pending，存储回调函数  </span><br><span class="line">      this.onResolvedCallbacks.push(handleResolve);  </span><br><span class="line">      this.onRejectedCallbacks.push(handleReject);  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;);  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><ol start="4"><li><strong>静态方法</strong></li></ol><p>Promise 还提供了一些静态方法，如 <code>Promise.all</code>、<code>Promise.race</code> 等，这些方法用于处理多个 Promise 的情况。</p><ol start="5"><li><strong>异步操作与微任务</strong></li></ol><p>在执行异步操作时，Promise 通过微任务队列（Microtask Queue）实现异步回调的调度。成功或失败的回调函数会被加入微任务队列，确保在当前执行栈完成后立即执行这些回调。由于这一机制，Promise 在保证异步操作的同时，也维护了事件循环的顺序。</p><h5 id="难点：大规模数据处理：处理大规模数据集可能会成为一个业务难点，特别是在需要进行复杂计算或数据过滤时。解决方案包括使用虚拟滚动、分页加载、数据缓存等技术来提升数据处理性能。"><a href="#难点：大规模数据处理：处理大规模数据集可能会成为一个业务难点，特别是在需要进行复杂计算或数据过滤时。解决方案包括使用虚拟滚动、分页加载、数据缓存等技术来提升数据处理性能。" class="headerlink" title="难点：大规模数据处理：处理大规模数据集可能会成为一个业务难点，特别是在需要进行复杂计算或数据过滤时。解决方案包括使用虚拟滚动、分页加载、数据缓存等技术来提升数据处理性能。"></a>难点：大规模数据处理：处理大规模数据集可能会成为一个业务难点，特别是在需要进行复杂计算或数据过滤时。解决方案包括使用虚拟滚动、分页加载、数据缓存等技术来提升数据处理性能。</h5><ol><li>虚拟滚动：虚拟滚动是一种技术，可以在大规模数据集中只渲染可见区域的数据，而不是渲染整个数据集。这样可以大大减少页面渲染的时间和内存消耗。</li><li>分页加载：将大规模数据集分成多个页面，每次只加载当前页面的数据，而不是一次性加载整个数据集。这样可以降低网络请求的负担和提升页面加载速度。</li><li>数据缓存：对于频繁使用的数据，可以进行缓存处理，减少重复请求和提升数据处理性能。可以使用内存缓存、localStorage、sessionStorage等技术来实现数据缓存。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">// 模拟一个大规模数据集</span><br><span class="line">const largeDataSet = Array.from(&#123; length: 10000 &#125;, (_, index) =&gt; (&#123;</span><br><span class="line">  id: index,</span><br><span class="line">  name: `Item $&#123;index&#125;`</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">// 分页加载函数</span><br><span class="line">function fetchData(page, pageSize) &#123;</span><br><span class="line">  const startIndex = (page - 1) * pageSize;</span><br><span class="line">  const endIndex = startIndex + pageSize;</span><br><span class="line">  return largeDataSet.slice(startIndex, endIndex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 数据缓存</span><br><span class="line">const dataCache = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">// 虚拟滚动组件</span><br><span class="line">Vue.component(&#x27;VirtualList&#x27;, &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    page: Number,</span><br><span class="line">    pageSize: Number</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      items: []</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    page: &#123;</span><br><span class="line">      immediate: true,</span><br><span class="line">      handler(newPage) &#123;</span><br><span class="line">        if (dataCache[newPage]) &#123;</span><br><span class="line">          this.items = dataCache[newPage];</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          this.items = fetchData(newPage, this.pageSize);</span><br><span class="line">          dataCache[newPage] = this.items;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: `</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li v-for=&quot;item in items&quot; :key=&quot;item.id&quot;&gt;&#123;&#123; item.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  `</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#x27;#app&#x27;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    currentPage: 1,</span><br><span class="line">    pageSize: 10</span><br><span class="line">  &#125;,</span><br><span class="line">  template: `</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;VirtualList :page=&quot;currentPage&quot; :pageSize=&quot;pageSize&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  `</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="页面加载反应慢-排查方案"><a href="#页面加载反应慢-排查方案" class="headerlink" title="页面加载反应慢 排查方案"></a>页面加载反应慢 排查方案</h5><p>​页面加载时间构成 (google 浏览器性能分析)</p><ol><li>资源加载( 大头)<ul><li>找到那个文件过大导致</li><li>如果存在一些文件比较大，但又不马上需要的可以异步加载</li><li>利用tree-shaking，尽量使用按需引入</li><li>进行gzip压缩</li><li>利用打包工具对代码进行压缩</li></ul></li><li>代码执行( 有可能会慢)<ul><li>一般的操作很难导致js执行时间过长，通常只有大量的循环会导致</li><li>代码执行时间，计算方式：console.time() console.timeEnd(); performance.now()</li></ul></li><li>页面绘制( 通常很快)<ul><li>window.performance</li></ul></li><li>一些工具<ul><li>可视化测评网站性能——lighthouse</li><li>JS库测量——web-vitals</li></ul></li></ol><h5 id="浏览器渲染机制-场景：SPA单页面应用"><a href="#浏览器渲染机制-场景：SPA单页面应用" class="headerlink" title="浏览器渲染机制 (场景：SPA单页面应用)"></a>浏览器渲染机制 (场景：SPA单页面应用)</h5><ol><li><p>域名解析   ( 协议+域名+路径+端口+检索参数+锚点)</p><p>影响性能点：    将域名解析成IP  、 由近及远查询 、 默认使用缓存</p><p>优化方向：     使用 <code> dns-prefetch</code> (预处理) 、 减少域名数量、   使用第三方知名域名</p></li><li><p>建立连接</p><p>不同网络环境，连接过程不同；  和服务器部署有关系 ；  后端可以使用CDN加速</p></li><li><p>发起请求 (请求方法+请求路径+请求头+请求体)</p><p>优化方向：  减少请求次数( 延迟请求, 利用cookie传递初始化所需数据, 缓存, 雪碧图)</p></li><li><p>下载网页 </p><ul><li>检查响应头，是否使用缓存</li><li>是-&gt; 则启用缓存，进入渲染阶段</li><li>否-&gt; 下载网页</li></ul><p>注意事项： 缓存可能会导致不能及时拿到最新的文件</p></li><li><p>边解析边渲染</p><ul><li>边下载、边解析、边渲染</li><li><code>&lt;link&gt;</code> 不会阻塞渲染</li><li><code>&lt;script&gt;</code> 可能会阻塞渲染</li><li>图片、视频等资源一般不会阻塞渲染</li><li>因为嵌套关系，渲染一般发生在闭合标签时</li><li>加载完成，分别触发 <code>load</code>，<code>DomContentLoaded</code> 事件</li></ul><p><code>&lt;script&gt;</code> 阻塞渲染</p><p>​影响性能因素：</p><ul><li><p><code>&lt;script&gt;</code> 包含影响DOM的方法，所以会阻塞渲染</p></li><li><p><code>&lt;script defer&gt;</code> 不会阻塞渲染，脚本会按顺序执行</p></li><li><p><code>&lt;script async&gt;</code> 不会阻塞渲染，脚本加载完就会执行</p></li><li><p><code>&lt;script type=&quot;module&quot;&gt;</code> 会按需加载， 按需执行</p></li><li><p><code>&lt;script&gt;</code> 会影响到 <code> DOMContentLoaded</code> 事件</p><p>​优化方向：</p></li><li><p>尽量把 <code>&lt;script&gt;</code> 放在 <code>&lt;body&gt;</code> 末尾</p></li><li><p>添加 <code>defer</code> 或 <code>async</code> 属性</p></li><li><p>业务无关的代码 ( 比如统计脚本等)，放在最后手动加载</p></li></ul><p>首屏渲染</p><p>​影响性能因素：</p><ul><li><p>FCP： 第一次渲染的事件点，发生在 <code>&lt;head&gt;</code> 加载完成后</p></li><li><p>FCP 一般不会影响渲染的总时间，但对用户体验帮助巨大</p></li><li><p>通常来说，我们希望 FCP &lt; 1s</p><p>​优化方向：</p></li><li><p>将关键样式放在 <code>&lt;head&gt;</code> 中</p></li><li><p><code>&lt;head&gt;</code> 里不要放会阻塞的脚本</p></li><li><p>首屏HTML要放在一个闭合标签里</p></li><li><p>使用骨架屏，loading 提升用户体验</p></li></ul><p>并行加载</p><p>​影响性能因素：</p><ul><li>http&#x2F;1.1 可以同时从一个域名下载6个资源</li><li>http&#x2F;2 通过复用连接，也可以同时下载更多资源和优先级</li></ul><p>​优化反向：</p><ul><li>服务器使用http&#x2F;2 协议</li><li>如果使用http&#x2F;1.1, 可以使用多个域名</li><li>压缩请求数</li><li>减少首次加载内容，使用lazy-load 加载图片等资源</li><li>非核心内容延迟加载 ( 客服，广告代码，统计代码)</li></ul><p>CLS</p><p>​影响性能因素：</p><ul><li><p>CLS ：页面布局的稳定性</p></li><li><p>如果在渲染过程中，页面出现大量布局变化，会影响用户体验</p><p>优化方向</p></li><li><p>骨架屏</p></li><li><p>减少web fonts</p></li><li><p>给图片添加起始尺寸</p></li><li><p>避免后期加载内容导致页面变化</p></li></ul></li><li><p>加载资源</p><ul><li>减少请求数量</li><li>资源文件压缩</li><li>增加缓存时间</li></ul></li><li><p>执行js (SPA关键步骤)</p><ul><li><p>所有js都要先执行</p></li><li><p>SPA里，js负责渲染页面</p></li><li><p>js的执行时间，直接影响用户体验</p><p>​执行效率的优化方向</p><ul><li>多使用新特性，通过构建工具保证兼容性</li><li>代码分模块，按需加载</li><li>使用tree-shaking</li><li>缓存</li></ul></li></ul></li><li><p>渲染完成</p></li></ol><h5 id="项目优化：通过时间切片优化项目速度"><a href="#项目优化：通过时间切片优化项目速度" class="headerlink" title="项目优化：通过时间切片优化项目速度"></a>项目优化：通过时间切片优化项目速度</h5><p>​背景：如果长时间运行的js操作，可能会阻塞浏览器的渲染，这样我们页面就看不到反应，导致长时间白屏，或者页面不展示任何效果</p><p>​解决方案：我们可以把操作切成一片的，先操作一片，把结果交给页面去渲染，渲染完成后再去操作下一片</p><p><img src="/2024/08/08/js+vue/Users\发发发宝贝\AppData\Roaming\Typora\typora-user-images\image-20240606153428353.png" alt="image-20240606153428353"></p><p>​API ： requestAnimationFrame</p><p>​requestAnimationFrame定义的任务，会在浏览器渲染完成后去执行。所以我们只需要把每个切片放到requestAnimationFrame。他在执行完一个后，会等着浏览器渲染完成后再执行下一个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sliceRender</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">requestAnimationFrame</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span>( ...)&#123;</span><br><span class="line">        <span class="title function_">sliceRender</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="常见面试题：并发多个请求并失败重发，所有请求发送完毕，返回结果"><a href="#常见面试题：并发多个请求并失败重发，所有请求发送完毕，返回结果" class="headerlink" title="常见面试题：并发多个请求并失败重发，所有请求发送完毕，返回结果"></a>常见面试题：并发多个请求并失败重发，所有请求发送完毕，返回结果</h5><p>​需求：</p><ol><li>可以一次发送任意多个请求，如果有失败，则重发失败请求，直到所有的都成功，或超出最大重试范围才返回最终结果</li><li>封装成可复用的并发请求工具</li></ol><p>​思路:</p><p><img src="/2024/08/08/js+vue/Users\发发发宝贝\AppData\Roaming\Typora\typora-user-images\image-20240607191154578.png" alt="image-20240607191154578"></p><h5 id="项目亮点案例：-luckeysheet-nodejs-vue3-开发多人协同的在线表格"><a href="#项目亮点案例：-luckeysheet-nodejs-vue3-开发多人协同的在线表格" class="headerlink" title="项目亮点案例： luckeysheet+nodejs+vue3,开发多人协同的在线表格"></a>项目亮点案例： luckeysheet+nodejs+vue3,开发多人协同的在线表格</h5><p>核心技术点：</p><p>​前端： 用luckysheet做在线编辑表格</p><p>​后端：nodejs编写接口和webscoket服务</p><p>load接口：</p><p><img src="/2024/08/08/js+vue/Users\发发发宝贝\AppData\Roaming\Typora\typora-user-images\image-20240608165828380.png" alt="image-20240608165828380"></p><p>save接口：</p><p><img src="/2024/08/08/js+vue/Users\发发发宝贝\AppData\Roaming\Typora\typora-user-images\image-20240608165857649.png" alt="image-20240608165857649"></p><p>多人协作：</p><p>使用hock ，sheetActivate() 检测当前那张sheet ;  cellUpdate() 给websocket服务发送我们的row、col等数据</p><p>websocket服务：</p><p><img src="/2024/08/08/js+vue/Users\发发发宝贝\AppData\Roaming\Typora\typora-user-images\image-20240608170931067.png" alt="image-20240608170931067"></p><p>通过cellUpdate钩子函数向ws服务发送数据，ws向所有连接池的连接发送更新通知。利用ws.onmessage() 更新某个单元格。</p><h5 id="项目案例亮点：-利用sass加css变量来实现，前端动态换肤"><a href="#项目案例亮点：-利用sass加css变量来实现，前端动态换肤" class="headerlink" title="项目案例亮点： 利用sass加css变量来实现，前端动态换肤"></a>项目案例亮点： 利用sass加css变量来实现，前端动态换肤</h5><p><img src="/2024/08/08/js+vue/Users\发发发宝贝\AppData\Roaming\Typora\typora-user-images\image-20240608172634321.png" alt="image-20240608172634321"></p><p>在一些特定的class样式中使用多个css样式名，将结构跟背景区分开</p><p>！！！ 需要加!default</p><p>scss:</p><ul><li>创建集合</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象</span></span><br><span class="line"><span class="variable">$themes</span>:(</span><br><span class="line">// 只一套主题所有的相关颜色</span><br><span class="line">    default-theme1:(</span><br><span class="line">    theme-color: red,</span><br><span class="line">        button-primary: blue</span><br><span class="line">    )</span><br><span class="line">    default-theme2:(</span><br><span class="line">    theme-color: blue,</span><br><span class="line">        button-primary: red</span><br><span class="line">    )</span><br><span class="line">)!default</span><br></pre></td></tr></table></figure><ul><li>通过方法来生成</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义mixin方法</span></span><br><span class="line"><span class="keyword">@mixin</span> get-backcolor(<span class="variable">$color</span>)&#123;</span><br><span class="line">    <span class="keyword">@each</span> <span class="variable">$themeName</span>, <span class="variable">$theme</span> in <span class="variable">$themes</span>&#123;</span><br><span class="line">        <span class="comment">// 判断 html元素的data-skin属性和$themeName一致则渲染该类css的backgroundColor</span></span><br><span class="line">        <span class="selector-attr">[data-skin=<span class="string">&#x27;#&#123;$themeName&#125;&#x27;</span>]</span> &amp; &#123;</span><br><span class="line">            <span class="comment">// background-color: map-get($theme, &#x27;theme-color1&#x27;)</span></span><br><span class="line">            <span class="attribute">background-color</span>: <span class="built_in">map-get</span>(<span class="variable">$theme</span>, <span class="variable">$color</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@mixin</span> get-fontcolor()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>scss调用</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.background-theme</span>&#123;</span><br><span class="line">    <span class="keyword">@include</span> get-backcolor(<span class="string">&#x27;theme-color&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">.<span class="keyword">@include</span> get-backcolor(<span class="string">&#x27;buttom-primary&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>在js中设置data-skin属性</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">onMounted(()=&gt;&#123;</span><br><span class="line">window.document.documentElement.setAttribute(&#x27;data-skin&#x27;, &#x27;default-theme&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line">function changSkin(name)&#123;</span><br><span class="line">    window.document.documentElement.setAttribute(&#x27;data-skin&#x27;, name)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;button @click=&quot;changeSkin(&#x27;default-theme1&#x27;)&quot;&gt;主题1&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;changeSkin(&#x27;default-theme2&#x27;)&quot;&gt;主题2&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h5 id="项目案例亮点：-实现可动态添加表单"><a href="#项目案例亮点：-实现可动态添加表单" class="headerlink" title="项目案例亮点： 实现可动态添加表单"></a>项目案例亮点： 实现可动态添加表单</h5><ol><li>支持原生，也支持组件库，也支持复杂自定义表单</li><li>可以让组件使用者定义可以添加那些组件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// App.vue 父组件</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import testForm from &quot;.components/testForm.vue&quot;</span><br><span class="line">    import &#123; ElDatePicker, ElInputNumber&#125; from &quot;element-plus&quot;</span><br><span class="line">    let registerCom = [</span><br><span class="line">        &#123;</span><br><span class="line">            com:ElDatePicker,</span><br><span class="line">            name: &quot;时间&quot;,</span><br><span class="line">            props: &#123;</span><br><span class="line">                valueFormat: &quot;YYYY-MM-DD&quot;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123; com: ElInputNumber, name: &quot;数字输入&quot;&#125;</span><br><span class="line">    ]</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;test-form :registerCom=&quot;registerCom&quot;&gt;&lt;/test-form&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">// testForm.vue 子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;form @input=&quot;formInput&quot;&gt;</span><br><span class="line">        &#123;&#123;valueArr&#125;&#125;</span><br><span class="line">        &lt;div v-for=&quot;(item,index) in formArr&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">            &lt;component </span><br><span class="line">              :is=&quot;item.com&quot; </span><br><span class="line">              v-bind=&quot;item.props&quot; </span><br><span class="line">             :sort=&quot;index&quot;</span><br><span class="line">             v-if=&quot;typeof item.com== &#x27;string&#x27;&quot;</span><br><span class="line">            &gt;&lt;/component&gt;</span><br><span class="line">    &lt;component </span><br><span class="line">              :is=&quot;item.com&quot; </span><br><span class="line">              v-bind=&quot;item.props&quot; </span><br><span class="line">              v-model=&quot;valueArr[index]&quot; </span><br><span class="line">             v-else</span><br><span class="line">             &gt;&lt;/component&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;button v-for=&quot;item in buttonArr&quot; :key=&quot;item.name&quot; @click=&quot;addForm(item.com)&quot;&gt;</span><br><span class="line">    &#123;&#123; &quot;添加&quot; + item.name &#125;&#125;</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, reactive, markRaw, shallowRef &#125; from &quot;vue&quot;</span><br><span class="line">    let &#123; registerCom &#125; = defineProps([&quot;registerCom&quot;])</span><br><span class="line">    // 按钮渲染数组</span><br><span class="line">    let buttonArr = shallowRef([&#123;name: &quot;input&quot;, com:&quot;input&quot;&#125;])</span><br><span class="line">    buttonArr.value = buttonArr.value.concat(registerCom || [])</span><br><span class="line">    // 表单渲染数组</span><br><span class="line">    let formArr = reactive([])</span><br><span class="line">   // 添加组件</span><br><span class="line">    function addForm(com, props)&#123;</span><br><span class="line">        formArr.push(&#123;</span><br><span class="line">            com: type com === &quot;string&quot; ? com : markRaw(com),</span><br><span class="line">            props: props || &#123;&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    // 表单内容监听</span><br><span class="line">    let valueArr = reactive([])</span><br><span class="line">   // 原生表单监听</span><br><span class="line">    function formInput(e)&#123;</span><br><span class="line">        let _index = e.target.getAttribute(&quot;sort&quot;)</span><br><span class="line">        if(_index !== undefined)&#123;</span><br><span class="line">            valueArr[_index] = e.target.value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="项目案例亮点：-table数据-页码列表组件封装"><a href="#项目案例亮点：-table数据-页码列表组件封装" class="headerlink" title="项目案例亮点： table数据 + 页码列表组件封装"></a>项目案例亮点： table数据 + 页码列表组件封装</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line">// 组件封装</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;el-table</span><br><span class="line">        ref=&quot;dataTable&quot;</span><br><span class="line">        :data=&quot;dataSource.list || []&quot;</span><br><span class="line">        :height=&quot;tableHeight&quot;</span><br><span class="line">        :stripe=&quot;options.stripe&quot;</span><br><span class="line">        :border=&quot;options.border&quot;</span><br><span class="line">        header-row-class-name=&quot;table-header-row&quot;</span><br><span class="line">        highlight-current-row</span><br><span class="line">        @row-click=&quot;handleRowClick&quot;</span><br><span class="line">        @selection-change=&quot;handleSelectionChange&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;!--selection选择框--&gt;</span><br><span class="line">        &lt;el-table-column</span><br><span class="line">          v-if=&quot;options.selectType &amp;&amp; options.selectType == &#x27;checkbox&#x27;&quot;</span><br><span class="line">          type=&quot;selection&quot;</span><br><span class="line">          :selectable=&quot;selectedHandler&quot;</span><br><span class="line">          width=&quot;50&quot;</span><br><span class="line">          align=&quot;center&quot;</span><br><span class="line">        &gt;&lt;/el-table-column&gt;</span><br><span class="line">        &lt;!--序号--&gt;</span><br><span class="line">        &lt;el-table-column</span><br><span class="line">          v-if=&quot;options.showIndex&quot;</span><br><span class="line">          label=&quot;序号&quot;</span><br><span class="line">          type=&quot;index&quot;</span><br><span class="line">          width=&quot;60&quot;</span><br><span class="line">          align=&quot;center&quot;</span><br><span class="line">        &gt;&lt;/el-table-column&gt;</span><br><span class="line">        &lt;!--数据列--&gt;</span><br><span class="line">        &lt;template v-for=&quot;(column, index) in columns&quot;&gt;</span><br><span class="line">          &lt;template v-if=&quot;column.scopedSlots&quot;&gt;</span><br><span class="line">            &lt;el-table-column</span><br><span class="line">              :key=&quot;index&quot;</span><br><span class="line">              :prop=&quot;column.prop&quot;</span><br><span class="line">              :label=&quot;column.label&quot;</span><br><span class="line">              :align=&quot;column.align || &#x27;left&#x27;&quot;</span><br><span class="line">              :width=&quot;column.width&quot;</span><br><span class="line">            &gt;</span><br><span class="line">              &lt;template #default=&quot;scope&quot;&gt;</span><br><span class="line">                &lt;slot</span><br><span class="line">                  :name=&quot;column.scopedSlots&quot;</span><br><span class="line">                  :index=&quot;scope.$index&quot;</span><br><span class="line">                  :row=&quot;scope.row&quot;</span><br><span class="line">                &gt;</span><br><span class="line">                &lt;/slot&gt;</span><br><span class="line">              &lt;/template&gt;</span><br><span class="line">            &lt;/el-table-column&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">          </span><br><span class="line">          &lt;template v-else&gt;</span><br><span class="line">            &lt;el-table-column</span><br><span class="line">              :key=&quot;index&quot;</span><br><span class="line">              :prop=&quot;column.prop&quot;</span><br><span class="line">              :label=&quot;column.label&quot;</span><br><span class="line">              :align=&quot;column.align || &#x27;left&#x27;&quot;</span><br><span class="line">              :width=&quot;column.width&quot;</span><br><span class="line">              :fixed=&quot;column.fixed&quot;</span><br><span class="line">            &gt;</span><br><span class="line">            &lt;/el-table-column&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table&gt;</span><br><span class="line">      &lt;!-- 分页 --&gt;</span><br><span class="line">      &lt;div class=&quot;pagination&quot; v-if=&quot;showPagination&quot;&gt;</span><br><span class="line">        &lt;el-pagination</span><br><span class="line">          v-if=&quot;dataSource.totalCount&quot;</span><br><span class="line">          background</span><br><span class="line">          :total=&quot;dataSource.totalCount&quot;</span><br><span class="line">          :page-sizes=&quot;[15, 30, 50, 100]&quot;</span><br><span class="line">          :page-size=&quot;dataSource.pageSize&quot;</span><br><span class="line">          :current-page.sync=&quot;dataSource.pageNo&quot;</span><br><span class="line">          layout=&quot;total, sizes, prev, pager, next, jumper&quot;</span><br><span class="line">          @size-change=&quot;handlePageSizeChange&quot;</span><br><span class="line">          @current-change=&quot;handlePageNoChange&quot;</span><br><span class="line">          style=&quot;text-align: right&quot;</span><br><span class="line">        &gt;&lt;/el-pagination&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  &lt;script setup&gt;</span><br><span class="line">  import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">  </span><br><span class="line">  const emit = defineEmits([&quot;rowSelected&quot;, &quot;rowClick&quot;]);</span><br><span class="line">  const props = defineProps(&#123;</span><br><span class="line">    dataSource: Object,</span><br><span class="line">    showPagination: &#123;</span><br><span class="line">      type: Boolean,</span><br><span class="line">      default: true,</span><br><span class="line">    &#125;,</span><br><span class="line">    options: &#123;</span><br><span class="line">      type: Object,</span><br><span class="line">      default: &#123;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    extHeight: &#123;</span><br><span class="line">      default: 70,</span><br><span class="line">    &#125;,</span><br><span class="line">    columns: Array,</span><br><span class="line">    fetch: Function, // 获取数据的函数</span><br><span class="line">    initFetch: &#123;</span><br><span class="line">      type: Boolean,</span><br><span class="line">      default: true,</span><br><span class="line">    &#125;,</span><br><span class="line">    selected: Function,</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  //顶部 60 ,导航tab 39 内容padding 20，内容区域距离顶部 10，分页区域高度 42  内容区域el-card padding 10*2</span><br><span class="line">  const topHeight = 60 + 39 + 20 + 10 + 42 + 20 + 2;</span><br><span class="line">  </span><br><span class="line">  const tableHeight = ref(</span><br><span class="line">    props.options.tableHeight</span><br><span class="line">      ? props.options.tableHeight</span><br><span class="line">      : window.innerHeight - topHeight - props.extHeight</span><br><span class="line">  );</span><br><span class="line">  </span><br><span class="line">  //初始化</span><br><span class="line">  const init = () =&gt; &#123;</span><br><span class="line">    if (props.initFetch &amp;&amp; props.fetch) &#123;</span><br><span class="line">      props.fetch();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  init();</span><br><span class="line">  </span><br><span class="line">  const dataTable = ref();</span><br><span class="line">  //清除选中</span><br><span class="line">  const clearSelection = () =&gt; &#123;</span><br><span class="line">    dataTable.value.clearSelection();</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  //设置行选中</span><br><span class="line">  const setCurrentRow = (rowKey, rowValue) =&gt; &#123;</span><br><span class="line">    let row = props.dataSource.list.find((item) =&gt; &#123;</span><br><span class="line">      return item[rowKey] === rowValue;</span><br><span class="line">    &#125;);</span><br><span class="line">    dataTable.value.setCurrentRow(row);</span><br><span class="line">  &#125;;</span><br><span class="line">  //将子组件暴露出去</span><br><span class="line">  defineExpose(&#123; setCurrentRow, clearSelection &#125;);</span><br><span class="line">  </span><br><span class="line">  //行点击</span><br><span class="line">  const handleRowClick = (row) =&gt; &#123;</span><br><span class="line">    emit(&quot;rowClick&quot;, row);</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  //多选</span><br><span class="line">  const handleSelectionChange = (row) =&gt; &#123;</span><br><span class="line">    emit(&quot;rowSelected&quot;, row);</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  //切换每页大小</span><br><span class="line">  const handlePageSizeChange = (size) =&gt; &#123;</span><br><span class="line">    props.dataSource.pageSize = size;</span><br><span class="line">    props.dataSource.pageNo = 1;</span><br><span class="line">    props.fetch();</span><br><span class="line">  &#125;;</span><br><span class="line">  // 切换页码</span><br><span class="line">  const handlePageNoChange = (pageNo) =&gt; &#123;</span><br><span class="line">    props.dataSource.pageNo = pageNo;</span><br><span class="line">    props.fetch();</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  //复选事件</span><br><span class="line">  const selectedHandler = (row, index) =&gt; &#123;</span><br><span class="line">    if (props.selected) &#123;</span><br><span class="line">      return props.selected(row, index);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  &lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">  .pagination &#123;</span><br><span class="line">    padding-top: 10px;</span><br><span class="line">  &#125;</span><br><span class="line">  .el-pagination &#123;</span><br><span class="line">    justify-content: right;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .el-table__body tr.current-row &gt; td.el-table__cell &#123;</span><br><span class="line">    background-color: #e6f0f9;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .el-table__body tr:hover &gt; td.el-table__cell &#123;</span><br><span class="line">    background-color: #e6f0f9 !important;</span><br><span class="line">  &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">// 调用组件</span><br><span class="line"> &lt;template&gt;</span><br><span class="line">&lt;Table</span><br><span class="line">          ref=&quot;tableInfoRef&quot;</span><br><span class="line">          :columns=&quot;columns&quot;</span><br><span class="line">          :fetch=&quot;loadDataList&quot;</span><br><span class="line">          :dataSource=&quot;tableData&quot;</span><br><span class="line">          :options=&quot;tableOptions&quot;</span><br><span class="line">          :extHeight=&quot;tableOptions.extHeight&quot;</span><br><span class="line">          :showPagination=&quot;false&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;template #slotImgPath=&quot;&#123; index, row &#125;&quot;&gt;</span><br><span class="line">            &lt;Cover :cover=&quot;row.imgPath&quot; :width=&quot;330&quot; :height=&quot;180&quot;&gt;&lt;/Cover&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">          &lt;template #slotObjectType=&quot;&#123; index, row &#125;&quot;&gt;</span><br><span class="line">            &#123;&#123; OBJEC_TYPE_MAP[row.objectType] &#125;&#125;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">          &lt;template #slotObject=&quot;&#123; index, row &#125;&quot;&gt;</span><br><span class="line">            &lt;div v-if=&quot;row.objectType == 3&quot;&gt;&#123;&#123; row.outerLink &#125;&#125;&lt;/div&gt;</span><br><span class="line">            &lt;div v-else&gt;&#123;&#123; row.objectId &#125;&#125;&lt;/div&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">          &lt;template #slotOperation=&quot;&#123; index, row &#125;&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;row-op-panel&quot;&gt;</span><br><span class="line">              &lt;a</span><br><span class="line">                class=&quot;a-link&quot;</span><br><span class="line">                href=&quot;javascript:void(0)&quot;</span><br><span class="line">                @click=&quot;showEdit(row)&quot;</span><br><span class="line">                v-has=&quot;proxy.PermissionCode.app.app_carousel_edit&quot;</span><br><span class="line">                &gt;修改&lt;/a</span><br><span class="line">              &gt;</span><br><span class="line">              &lt;a</span><br><span class="line">                class=&quot;a-link&quot;</span><br><span class="line">                href=&quot;javascript:void(0)&quot;</span><br><span class="line">                v-has=&quot;proxy.PermissionCode.app.app_carousel_edit&quot;</span><br><span class="line">                @click=&quot;delCarousel(row)&quot;</span><br><span class="line">                &gt;删除&lt;/a</span><br><span class="line">              &gt;</span><br><span class="line">              &lt;a</span><br><span class="line">                href=&quot;javascript:void(0)&quot;</span><br><span class="line">                v-has=&quot;proxy.PermissionCode.app.app_carousel_edit&quot;</span><br><span class="line">                @click=&quot;changeSort(index, &#x27;up&#x27;)&quot;</span><br><span class="line">                :class=&quot;[index == 0 ? &#x27;not-allow&#x27; : &#x27;a-link&#x27;]&quot;</span><br><span class="line">                &gt;上移&lt;/a</span><br><span class="line">              &gt;</span><br><span class="line">              &lt;a</span><br><span class="line">                href=&quot;javascript:void(0)&quot;</span><br><span class="line">                v-has=&quot;proxy.PermissionCode.app.app_carousel_edit&quot;</span><br><span class="line">                @click=&quot;changeSort(index, &#x27;down&#x27;)&quot;</span><br><span class="line">                :class=&quot;[</span><br><span class="line">                  index == tableData.list.length - 1 ? &#x27;not-allow&#x27; : &#x27;a-link&#x27;,</span><br><span class="line">                ]&quot;</span><br><span class="line">                &gt;下移&lt;/a</span><br><span class="line">              &gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">        &lt;/Table&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">const columns = [</span><br><span class="line">    &#123;</span><br><span class="line">      label: &quot;轮播图&quot;,</span><br><span class="line">      prop: &quot;imgPath&quot;,</span><br><span class="line">      scopedSlots: &quot;slotImgPath&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      label: &quot;类型&quot;,</span><br><span class="line">      prop: &quot;objectType&quot;,</span><br><span class="line">      scopedSlots: &quot;slotObjectType&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      label: &quot;主体ID/链接&quot;,</span><br><span class="line">      prop: &quot;object&quot;,</span><br><span class="line">      scopedSlots: &quot;slotObject&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      label: &quot;操作&quot;,</span><br><span class="line">      prop: &quot;operation&quot;,</span><br><span class="line">      scopedSlots: &quot;slotOperation&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ];</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="项目案例亮点：-可复用拖拽逻辑"><a href="#项目案例亮点：-可复用拖拽逻辑" class="headerlink" title="项目案例亮点： 可复用拖拽逻辑"></a>项目案例亮点： 可复用拖拽逻辑</h5><ul><li><p>复用逻辑方案</p><ul><li>提取组件或hoc把逻辑封装在一个组件里，留出插槽在使用的时候插入 ( 缺点: 不方便使用) </li><li>mixin混入                把要复用的逻辑设计的数据和方法通过mixin混入到个个组件</li><li>组定义指令             把逻辑卸载自定义指令中</li><li>vue3组合api           配合vue3的组合式api， 把逻辑写为一个方法</li></ul></li><li><p>其他细节</p><ul><li>限制区域选取限制边缘区如何限制</li><li>x, y 坐标设置方案       x和y坐标不能只是单纯的区clientX 和clientY</li><li>输出设计                     输出那些内容，一个好的输出内容可以让扩展性提高</li><li>监听                     监听在哪挂载</li></ul></li></ul><h5 id="组件封装-：-二次封装axios"><a href="#组件封装-：-二次封装axios" class="headerlink" title="组件封装 ：  二次封装axios"></a>组件封装 ：  二次封装axios</h5><ol><li>几乎所有项目统一的axios基本封装方案</li><li>扩展开的一些大厂的特殊操作</li><li>配置中心的理念</li></ol><ul><li>基本封装部分<ul><li>基本全局配置如baseURL， 超时时间等</li><li>token，密钥等      出于权限和安全考虑的密钥设置到请求头</li><li>响应的统一基本处理       主要针对于错误的情况做全局统一处理</li><li>封装请求方法                  把对接口的请求封装为一个方法</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// axios.js</span></span><br><span class="line"><span class="comment">// 配置全局的基础配置</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Message</span> <span class="keyword">from</span> <span class="string">&quot;./Message&quot;</span></span><br><span class="line"><span class="comment">// 将不需要token的请求放到一个模块里</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">WebConfig</span> <span class="keyword">from</span> <span class="string">&quot;./global.config&quot;</span></span><br><span class="line"><span class="comment">// baseURL, timeout, header, responseType, withCredentials</span></span><br><span class="line"><span class="keyword">let</span> request = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="comment">// 基础配置</span></span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&quot;http://localhost:8000/&quot;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">8</span>*<span class="number">1000</span>,</span><br><span class="line">    <span class="attr">responseType</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">    <span class="attr">headers</span>:&#123;</span><br><span class="line">        <span class="string">&quot;a&quot;</span>: <span class="string">&quot;123&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">request.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">config</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 设置token，密钥设置，loading</span></span><br><span class="line">    <span class="comment">//token</span></span><br><span class="line">    <span class="keyword">let</span> whiteList = webConfig.<span class="property">whiteListApi</span></span><br><span class="line">    <span class="keyword">let</span> url = config.<span class="property">url</span></span><br><span class="line">    <span class="keyword">let</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;token&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>(whiteList.<span class="title function_">indexOf</span>(url) === -<span class="number">1</span> &amp;&amp; token)&#123;</span><br><span class="line">        config.<span class="property">headers</span>.<span class="property">token</span> = token</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//密钥处理</span></span><br><span class="line">    <span class="comment">//loading处理</span></span><br><span class="line">&#125;,<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(error))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">request.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>((res )=&#123;</span><br><span class="line">    <span class="comment">// loading 处理</span></span><br><span class="line">    <span class="keyword">const</span> status = res.<span class="property">data</span>.<span class="property">code</span> || <span class="number">200</span>;</span><br><span class="line">    <span class="keyword">const</span> message = res.<span class="property">data</span>.<span class="property">msg</span> || <span class="string">&quot;未知错误&quot;</span></span><br><span class="line">    <span class="keyword">if</span>(status === <span class="number">401</span>)&#123;</span><br><span class="line">    <span class="comment">// 使用elementUI 封装的 Message弹出提示</span></span><br><span class="line">    <span class="title class_">Message</span>(<span class="string">&quot;你还没有登录&quot;</span>)</span><br><span class="line">    router.<span class="title function_">push</span>(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(message))</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Message</span>(message)</span><br><span class="line"><span class="keyword">if</span>(status !== <span class="number">200</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(message))</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;,<span class="function">(<span class="params">error</span>) =&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(error))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> request;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  user.js user api 模块  封装接口请求</span></span><br><span class="line"><span class="keyword">import</span> &#123; request, initRequest &#125; <span class="keyword">from</span> <span class="string">&quot;./request&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getList = (params)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">reqiest</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/getList&quot;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">        <span class="attr">params</span>: &#123;...params&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>我们业务中发现一些请求相关的处理事经常重复进行的，我们可以封装起来，让请求更加简便<ul><li>防止频繁提交( 防止接口重复提交)</li><li>缓存数据</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// request.js   处理axios和封装接口请求的中间文件，统一处理接口请求的扩展或者额外工作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&quot;./axios&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myRequest = (<span class="keyword">function</span>(<span class="params">config</span>)&#123;</span><br><span class="line">    <span class="comment">// 利用闭包缓存，来判断接口是否请求过，来防止重复提交</span></span><br><span class="line">    <span class="keyword">let</span> hasRequest = [];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (hasRequest.<span class="title function_">indexOf</span>(config.<span class="property">url</span>) !== <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(&#123; <span class="attr">mes</span>: <span class="string">&quot;请求已提交&quot;</span> &#125; )</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果没有发过请求</span></span><br><span class="line">        hasRquest.<span class="title function_">push</span>(url);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        请求发送前可以做缓存处理</span></span><br><span class="line"><span class="comment">        ...</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">request</span>(&#123;...config&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">// 请求成功后从hasRquest删除记录</span></span><br><span class="line">            hasRquest = hasRquest.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (item !== config.<span class="property">url</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> item</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">代码优化，方便后续增加功能</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> myRequest = (<span class="keyword">function</span>(<span class="params">config</span>)&#123;</span><br><span class="line">    <span class="comment">// 缓存</span></span><br><span class="line">    <span class="keyword">let</span> mem = &#123;&#125;;</span><br><span class="line">    <span class="keyword">let</span> hasRequest = [];</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">config</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> promise = <span class="title class_">Promise</span>.<span class="title function_">reslove</span>();</span><br><span class="line">        <span class="comment">// 划分为一个一个模块</span></span><br><span class="line">        <span class="comment">/** </span></span><br><span class="line"><span class="comment">        传递参数  :  </span></span><br><span class="line"><span class="comment">        &#123; </span></span><br><span class="line"><span class="comment">        go: true,   // 是否执行下一个模块操作</span></span><br><span class="line"><span class="comment">        type: &quot;then&quot;,</span></span><br><span class="line"><span class="comment">        data? :&quot;&quot;  </span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">// 处理缓存</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">cache</span>(<span class="params"></span>)&#123;</span><br><span class="line">             </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 处理请求未结束，防止继续请求</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">noRepeat</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">        <span class="comment">// 请求模块</span></span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">finalRequest</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">let</span> resData = <span class="keyword">await</span> <span class="title function_">request</span>(&#123;...config&#125;)</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 请求处理模块</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">finalHandle</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">        <span class="comment">// 最后集成到一个队列</span></span><br><span class="line">        <span class="keyword">let</span> _handleArr = [cache, noRepeat, finalRequest, finalHandle]</span><br><span class="line">        <span class="comment">// 循环执行队列中的任务模块</span></span><br><span class="line">        <span class="keyword">while</span>(_handleArr.<span class="property">length</span>&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//将执行过的模块，重新返回给promise,将步骤串联一块，而不是各自分模块</span></span><br><span class="line">            promise = promise.<span class="title function_">then</span>(_handleArr.<span class="title function_">shift</span>())</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> promise</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line"><span class="comment">//需要扩展的使用request</span></span><br><span class="line">myRequest <span class="keyword">as</span> request,</span><br><span class="line">    <span class="comment">// 不需要扩展的使用initRequest</span></span><br><span class="line">    request <span class="keyword">as</span> initRequest,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="组件封装-vue-封装Echarts-组件"><a href="#组件封装-vue-封装Echarts-组件" class="headerlink" title="组件封装: vue 封装Echarts 组件"></a>组件封装: vue 封装Echarts 组件</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// echart代码示例</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">&quot;echarts&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> chartDom = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;main&#x27;</span>)</span><br><span class="line"><span class="comment">// Chart 初始化</span></span><br><span class="line"><span class="keyword">var</span> myChart = echarts.<span class="title function_">init</span>(chartDom)</span><br><span class="line"><span class="keyword">var</span> option = &#123;</span><br><span class="line">    <span class="attr">xAxis</span>: &#123;</span><br><span class="line">        <span class="comment">// 横轴</span></span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: [<span class="string">&#x27;Mon&#x27;</span>, <span class="string">&#x27;Tue&#x27;</span>, <span class="string">&#x27;Wed&#x27;</span>, <span class="string">&#x27;Thu&#x27;</span>, <span class="string">&#x27;Fri&#x27;</span>, <span class="string">&#x27;Sat&#x27;</span>, <span class="string">&#x27;Sun&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">yAxis</span>: &#123;</span><br><span class="line">        <span class="comment">// 纵轴</span></span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">series</span>: [</span><br><span class="line">        <span class="comment">// 真实数据</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">data</span>: [<span class="number">150</span>, <span class="number">230</span>, <span class="number">224</span>, <span class="number">218</span>, <span class="number">135</span>, <span class="number">260</span>],</span><br><span class="line">            <span class="comment">// 图表类型</span></span><br><span class="line">            <span class="attr">type</span>: line</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Chart绘画</span></span><br><span class="line">myChart.<span class="title function_">setOption</span>(option)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// EchartSub.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div ref=&quot;myChartRef&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">// 引入ref , echarts</span><br><span class="line">import &#123;defineComponent, ref, onMounted&#125; from &#x27;vue&#x27;</span><br><span class="line">import * as echarts from &#x27;echarts&#x27;</span><br><span class="line">    </span><br><span class="line">const myChartRef = ref&lt;HTMLElement&gt;()</span><br><span class="line"></span><br><span class="line">onMounted(()=&gt;&#123;</span><br><span class="line">    echarts.init(myChartRef.value!)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="项目案例亮点：-input组件封装"><a href="#项目案例亮点：-input组件封装" class="headerlink" title="项目案例亮点： input组件封装"></a>项目案例亮点： input组件封装</h5><ol><li>如何给自己的组件封装v-model ( v-model 本质)</li><li>感受组件封装的思考</li><li>模糊搜索 ( 防抖和节流的区别)</li><li>验证</li></ol><h5 id="项目案例亮点：-Vue项目权限控制方案"><a href="#项目案例亮点：-Vue项目权限控制方案" class="headerlink" title="项目案例亮点： Vue项目权限控制方案"></a>项目案例亮点： Vue项目权限控制方案</h5><ol><li><p>后端返回用户路由规则</p><ul><li>用户登录通过后端接口返回菜单列表</li><li>前端通过VueRouter addRouter动态添加路由</li></ul></li><li><p>按钮权限</p><ul><li>可以通过自定义指令，控制显示隐藏</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue  main.js</span></span><br><span class="line"><span class="comment">// 自定义指令 判断权限  v-has</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">directive</span>(<span class="string">&#x27;has&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">mounted</span>: <span class="function">(<span class="params">el, binding, vnode</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> userInfo = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;userinfo&quot;</span>))</span><br><span class="line">        <span class="keyword">let</span> permissionCodeList = userInfo.<span class="property">PermissionCodeList</span></span><br><span class="line">        permissionCodeList = permissionCodeList == <span class="literal">undefined</span> ? [] : permissionCodeList;</span><br><span class="line">        <span class="keyword">if</span>(!permissionCodeList.<span class="title function_">includes</span>(binding.<span class="property">value</span>))&#123;</span><br><span class="line">            el.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(el)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>路由权限</p></li></ol><h5 id="项目亮点：-财务报表-流程数据"><a href="#项目亮点：-财务报表-流程数据" class="headerlink" title="项目亮点： 财务报表 ( 流程数据)"></a>项目亮点： 财务报表 ( 流程数据)</h5><h5 id="项目亮点：-大屏可视化"><a href="#项目亮点：-大屏可视化" class="headerlink" title="项目亮点： 大屏可视化"></a>项目亮点： 大屏可视化</h5>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python项目构建工具</title>
      <link href="/2024/08/05/python%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
      <url>/2024/08/05/python%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h3 id="项目构建工具"><a href="#项目构建工具" class="headerlink" title="项目构建工具"></a>项目构建工具</h3><p>Python项目构建工具有很多种，其中一些常用的包括：</p><ol><li><strong>setuptools</strong>：这是一个用于构建、分发和安装Python软件包的工具。它可以帮助你定义项目的结构、依赖关系和安装步骤。</li><li><strong>pipenv</strong>：这是一个结合了pip和虚拟环境管理的工具，可以简化项目依赖管理的过程，同时创建独立的虚拟环境。</li><li><strong>Poetry</strong>：Poetry是一个现代化的Python包管理工具，它提供了依赖管理、打包发布等功能，并且有一个易于使用的配置文件格式。</li><li><strong>tox</strong>：如果你需要在不同的Python版本下运行测试或构建项目，tox是一个很好的选择。它可以帮助你自动化这些任务，确保项目在不同环境下都能正常工作。</li></ol><h3 id="Poetry"><a href="#Poetry" class="headerlink" title="Poetry"></a>Poetry</h3><p>Poetry是一个现代化的Python包管理工具，它提供了依赖管理、打包发布等功能，并且有一个易于使用的配置文件格式。</p><ul><li>虚拟环境管理</li><li>套件相依性管理</li><li>套件的打包与发布</li></ul><h4 id="安装Poetry"><a href="#安装Poetry" class="headerlink" title="安装Poetry"></a>安装Poetry</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ </span><br></pre></td></tr></table></figure><h4 id="创建新项目"><a href="#创建新项目" class="headerlink" title="创建新项目"></a>创建新项目</h4><p>使用以下命令创建一个名字为 my_project 的Poetry新项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ poetry new &lt;my_project&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;my_project&gt;</span><br></pre></td></tr></table></figure><h4 id="配置依赖项"><a href="#配置依赖项" class="headerlink" title="配置依赖项"></a>配置依赖项</h4><p><code>pyproject.toml</code> 文件是用于定义Python项目元数据和构建配置的文件，通常与现代Python构建工具（如Poetry）一起使用。</p><h5 id="tool-poetry-部分"><a href="#tool-poetry-部分" class="headerlink" title="[tool.poetry] 部分"></a>[tool.poetry] 部分</h5><p>这个部分用于指定Poetry项目的元数据，包括项目名称、版本、描述和作者等信息。</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[tool.poetry]</span>  </span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;my_project&quot;</span>  </span><br><span class="line"><span class="attr">version</span> = <span class="string">&quot;0.1.0&quot;</span>  </span><br><span class="line"><span class="attr">description</span> = <span class="string">&quot;My Python project&quot;</span>  </span><br><span class="line"><span class="attr">authors</span> = [<span class="string">&quot;Your Name &lt;you@example.com&gt;&quot;</span>]</span><br></pre></td></tr></table></figure><h5 id="tool-poetry-dependencies-部分"><a href="#tool-poetry-dependencies-部分" class="headerlink" title="[tool.poetry.dependencies] 部分"></a>[tool.poetry.dependencies] 部分</h5><p>这里定义项目的生产依赖项，可以指定Python版本和其他必需的包。</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ^ 符号表示允许安装指定包的兼容版本，但不包括主版本号的更改。</span></span><br><span class="line"><span class="section">[tool.poetry.dependencies]</span>  </span><br><span class="line"><span class="attr">python</span> = <span class="string">&quot;^3.8&quot;</span>  </span><br><span class="line"><span class="attr">requests</span> = <span class="string">&quot;^2.25.1&quot;</span></span><br></pre></td></tr></table></figure><h5 id="tool-poetry-dev-dependencies-部分"><a href="#tool-poetry-dev-dependencies-部分" class="headerlink" title="[tool.poetry.dev-dependencies] 部分"></a>[tool.poetry.dev-dependencies] 部分</h5><p>这里定义项目的开发依赖项，通常用于测试、文档生成等开发过程中需要但不会包含在最终发布中的包。</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[tool.poetry.dev-dependencies]</span>  </span><br><span class="line"><span class="attr">pytest</span> = <span class="string">&quot;^6.2&quot;</span></span><br></pre></td></tr></table></figure><h5 id="tool-poetry-scripts-部分"><a href="#tool-poetry-scripts-部分" class="headerlink" title="[tool.poetry.scripts] 部分"></a>[tool.poetry.scripts] 部分</h5><p>这个部分用于定义项目的命令行脚本。</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[tool.poetry.scripts]</span>  </span><br><span class="line"><span class="attr">my_script</span> = <span class="string">&quot;my_package.my_module:main&quot;</span></span><br><span class="line"><span class="comment"># my_script 是脚本的名称，my_package.my_module:main 是脚本的入口点</span></span><br></pre></td></tr></table></figure><h5 id="tool-poetry-extras-部分"><a href="#tool-poetry-extras-部分" class="headerlink" title="[tool.poetry.extras] 部分"></a>[tool.poetry.extras] 部分</h5><p>这个部分用于定义项目的可选依赖项。</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[tool.poetry.extras]</span>  </span><br><span class="line"><span class="attr">dev</span> = [<span class="string">&quot;pytest&quot;</span>, <span class="string">&quot;flake8&quot;</span>]</span><br><span class="line"><span class="comment"># dev 是可选依赖项的名称，pytest 和 flake8 是依赖项的名称</span></span><br></pre></td></tr></table></figure><h5 id="build-system-部分"><a href="#build-system-部分" class="headerlink" title="[build-system] 部分"></a>[build-system] 部分</h5><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[build-system]</span>  </span><br><span class="line"><span class="attr">requires</span> = [<span class="string">&quot;poetry&gt;=1.0&quot;</span>]  </span><br><span class="line"><span class="attr">build-backend</span> = <span class="string">&quot;poetry.masonry.api&quot;</span></span><br><span class="line"><span class="comment"># requires 指定了构建系统所需的依赖项，build-backend 指定了构建系统的后端。</span></span><br></pre></td></tr></table></figure><h4 id="添加依赖项"><a href="#添加依赖项" class="headerlink" title="添加依赖项"></a>添加依赖项</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ poetry add requests  </span><br></pre></td></tr></table></figure><h4 id="安装依赖项"><a href="#安装依赖项" class="headerlink" title="安装依赖项"></a>安装依赖项</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ poetry install</span><br></pre></td></tr></table></figure><h4 id="移除依赖项"><a href="#移除依赖项" class="headerlink" title="移除依赖项"></a>移除依赖项</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ poetry remove &lt;package-name&gt;</span><br></pre></td></tr></table></figure><h4 id="更新依赖项"><a href="#更新依赖项" class="headerlink" title="更新依赖项"></a>更新依赖项</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ poetry update</span><br></pre></td></tr></table></figure><h4 id="更新锁文件"><a href="#更新锁文件" class="headerlink" title="更新锁文件"></a>更新锁文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ poetry lock</span><br></pre></td></tr></table></figure><h4 id="查询依赖-显示依赖树的功能"><a href="#查询依赖-显示依赖树的功能" class="headerlink" title="查询依赖 - 显示依赖树的功能"></a>查询依赖 - 显示依赖树的功能</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ poetry show -t</span><br><span class="line"><span class="comment"># 查看特定包是由哪个直接依赖项引入的</span></span><br><span class="line">$ poetry show -t &lt;package-name&gt;</span><br></pre></td></tr></table></figure><h4 id="管理虚拟环境"><a href="#管理虚拟环境" class="headerlink" title="管理虚拟环境"></a>管理虚拟环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建虚拟环境  </span></span><br><span class="line">$ poetry <span class="built_in">env</span> use python3.8  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 激活虚拟环境  </span></span><br><span class="line">$ poetry shell  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖项  </span></span><br><span class="line">$ poetry install</span><br></pre></td></tr></table></figure><h4 id="构建和发布"><a href="#构建和发布" class="headerlink" title="构建和发布"></a>构建和发布</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建项目  </span></span><br><span class="line">poetry build  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 发布到PyPI  </span></span><br><span class="line">poetry publish</span><br></pre></td></tr></table></figure><h4 id="与其他工具集成"><a href="#与其他工具集成" class="headerlink" title="与其他工具集成"></a>与其他工具集成</h4><h5 id="Docker-集成"><a href="#Docker-集成" class="headerlink" title="Docker 集成"></a>Docker 集成</h5><ol><li>创建 Dockerfile：在项目根目录下创建一个 Dockerfile，用于构建 Docker 镜像</li></ol><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Dockerfile  </span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.8</span>  </span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> pyproject.toml poetry.lock ./  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install poetry  </span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> poetry install  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;poetry&quot;</span>, <span class="string">&quot;run&quot;</span>, <span class="string">&quot;your_main_script.py&quot;</span>]</span></span><br></pre></td></tr></table></figure><ol start="2"><li>构建 Docker 镜像</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t my_project .</span><br></pre></td></tr></table></figure><ol start="3"><li>运行 Docker 容器</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run my_project</span><br></pre></td></tr></table></figure><h5 id="CI-CD-工具集成（以GitHub-Actions为例）"><a href="#CI-CD-工具集成（以GitHub-Actions为例）" class="headerlink" title="CI&#x2F;CD 工具集成（以GitHub Actions为例）"></a>CI&#x2F;CD 工具集成（以GitHub Actions为例）</h5><ol><li><strong>创建 Workflow 文件</strong>：在项目中的 <code>.github/workflows</code> 目录下创建一个 YAML 文件，例如 <code>ci.yml</code></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .github/workflows/ci.yml  </span></span><br><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">CI</span>  </span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span>  </span><br><span class="line">  <span class="attr">push:</span>  </span><br><span class="line">    <span class="attr">branches:</span>  </span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span>  </span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span>  </span><br><span class="line">  <span class="attr">build:</span>  </span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span>  </span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span>  </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">code</span>  </span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span>  </span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Python</span>  </span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-python@v2</span>  </span><br><span class="line">        <span class="attr">with:</span>  </span><br><span class="line">          <span class="attr">python-version:</span> <span class="number">3.8</span>  </span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span>  </span><br><span class="line">        <span class="attr">run:</span> <span class="string">poetry</span> <span class="string">install</span>  </span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tests</span>  </span><br><span class="line">        <span class="attr">run:</span> <span class="string">poetry</span> <span class="string">run</span> <span class="string">pytest</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>配置依赖项</strong>：在 <code>pyproject.toml</code> 文件中添加 <code>dev-dependencies</code>，以确保在 CI&#x2F;CD 环境中安装所需的依赖项。</li></ol><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pyproject.toml  </span></span><br><span class="line"></span><br><span class="line"><span class="section">[tool.poetry.dev-dependencies]</span>  </span><br><span class="line"><span class="attr">pytest</span> = <span class="string">&quot;^6.2.4&quot;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p><strong>提交代码</strong>：将 Workflow 文件和更新的 <code>pyproject.toml</code> 文件提交到 GitHub 仓库中。</p></li><li><p><strong>启用 GitHub Actions</strong>：在 GitHub 仓库的 Actions 选项卡中启用 Actions。每次推送到 <code>main</code> 分支时，GitHub Actions 将自动运行自动化测试。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js异步处理</title>
      <link href="/2024/08/04/js%E5%BC%82%E6%AD%A5%E5%A4%84%E7%90%86/"/>
      <url>/2024/08/04/js%E5%BC%82%E6%AD%A5%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>回调函数是 早期处理异步操作主要依赖于回调函数。当一个函数需要执行一个耗时的任务或者需要等待某些条件满足后再执行，可以使用回调函数来实现异步处理。</p><h4 id="传统的回调函数"><a href="#传统的回调函数" class="headerlink" title="传统的回调函数"></a>传统的回调函数</h4><p>这是最基础、也是最早期用于处理异步操作的方式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params">callback</span>) &#123;  </span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;  </span><br><span class="line">    <span class="keyword">const</span> data = <span class="string">&#x27;Some data fetched from an asynchronous operation&#x27;</span>;  </span><br><span class="line">    <span class="title function_">callback</span>(data);  </span><br><span class="line">  &#125;, <span class="number">1000</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchData</span>(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Processed data:&#x27;</span>, data);  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这种方式可以处理简单的异步操作，但当有多个异步操作需要处理时，回调函数嵌套会导致回调地狱，使代码难以理解和维护。</p><p><strong>缺点</strong></p><ol><li>回调地狱：当多个异步操作依赖于彼此或者有顺序关系时，在传统的回调函数中容易导致嵌套过深、代码难以理解和维护。</li><li>错误处理不方便：在传统的回调函数中，错误处理通常需要通过额外的参数进行传递，并且容易造成不必要的混乱。</li><li>同时执行多个异步操作后进行统一处理：使用传统方式实现这个功能也比较复杂。</li></ol><blockquote><p>通过 Promise 对象及其相关方法（如 <code>then</code> 和 <code>catch</code>），可以更好地解决上述问题</p></blockquote><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>Promise 是ES6引入的一种用于处理异步操作的对象。它表示一个异步操作的最终完成或失败，并提供了链式调用的方式来处理操作结果。Promise 有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。通过使用 Promise，可以更好地组织和管理异步代码，避免回调地狱的问题。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li><strong>状态：</strong> Promise 有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。初始状态为 pending，可以转变为 fulfilled 或 rejected。</li><li><strong>回调注册：</strong> 可以通过 <code>then</code> 方法注册回调函数来处理异步操作的结果。<code>then</code> 方法接受两个参数，第一个处理成功时的回调函数，第二个处理失败时的回调函数。</li><li><strong>错误处理：</strong> 可以通过 <code>catch</code> 方法捕获异步操作中的错误，并进行相应的处理。</li><li><strong>链式调用：</strong> Promise 的 <code>then</code> 方法返回一个新的 Promise 对象，可以通过链式调用的方式处理多个异步操作，使代码更加清晰和易读。</li><li><strong>并行执行：</strong> 使用 <code>Promise.all</code> 方法可以同时执行多个异步操作，并在所有操作完成后进行统一处理。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;  </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;  </span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;  </span><br><span class="line">      <span class="keyword">const</span> data = <span class="string">&#x27;Some data fetched from an asynchronous operation&#x27;</span>;  </span><br><span class="line">      <span class="title function_">resolve</span>(data);  </span><br><span class="line">    &#125;, <span class="number">1000</span>);  </span><br><span class="line">  &#125;);  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchData</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Processed data:&#x27;</span>, data);  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="其他静态方法"><a href="#其他静态方法" class="headerlink" title="其他静态方法"></a>其他静态方法</h4><ol><li><strong>Promise.resolve(value)：</strong> 返回一个以给定值解析后的 Promise 对象。如果该值是一个 promise，则该 promise 将返回；如果该值是 thenable（即带有 <code>then</code> 方法的对象），返回的 promise 将“跟随”这个 thenable 的对象，采用它的最终状态；否则以该值为成功状态返回一个新的 Promise 对象。</li><li><strong>Promise.reject(reason)：</strong> 返回一个状态为 rejected 的 Promise 对象，并将给定的 reason 作为失败原因。</li><li><strong>Promise.all(iterable)：</strong> 接收一个可迭代对象，比如数组，里面包含一组 Promise 实例。当所有这些实例都产生结果后，将结果按照顺序放入数组中并传递给回调函数。</li><li><strong>Promise.race(iterable)：</strong> 接收一个可迭代对象，比如数组，里面包含一组 Promise 实例。只要其中有任何一个实例率先改变状态（无论是 fulfilled 还是 rejected），race 方法就会响应改变，并且会把第一个改变状态的实例对应的结果传递给 race 返回的那个新实例。</li><li><strong>Promise.allSettled(iterable)：</strong> 在所有指定的 promise 都已经完成或者已经被拒绝后调用指定回调函数。每个promise在返回时都不需要等待别人完成。</li><li><strong>Promise.any(iterable)：</strong> 在 iterable 参数中只要有其中任意个promise（fulfilled 或 rejected） 状态发生变更,就触发其关联处理程序。</li><li><strong>Promise.try(func):</strong> 提供了promise化非标准异步模式懂得错误处理方式</li></ol><h4 id="Promise-的优点："><a href="#Promise-的优点：" class="headerlink" title="Promise 的优点："></a>Promise 的优点：</h4><ol><li>解决了回调地狱问题：Promise 可以通过链式调用的方式，避免了传统回调函数中嵌套过深的问题，使代码更加清晰和易读。</li><li>更好的错误处理：Promise 可以通过 <code>catch</code> 方法捕获和处理异步操作中的错误，使错误处理更加方便和统一。</li><li>支持链式调用：Promise 的 <code>then</code> 方法返回一个新的 Promise 对象，可以通过链式调用的方式处理多个异步操作，使代码更加简洁和易于维护。</li><li>支持并行执行：Promise 提供了 <code>Promise.all</code> 方法，可以同时执行多个异步操作，并在所有操作完成后进行统一处理。</li></ol><h4 id="Promise-的缺点："><a href="#Promise-的缺点：" class="headerlink" title="Promise 的缺点："></a>Promise 的缺点：</h4><ol><li>无法取消 Promise：一旦创建了一个 Promise，就无法取消它，这可能会导致一些资源的浪费。</li><li>无法捕获同步错误：Promise 只能捕获异步操作中的错误，对于同步代码中的错误无法进行捕获和处理。</li><li>链式调用的可读性：虽然链式调用可以使代码更加简洁，但有时可能会降低代码的可读性，特别是当链式调用过长时。</li></ol><blockquote><p>为了进一步解决 Promise 的一些问题而引入async&#x2F;await, 它是一种基于 Promise 的语法糖, 虽然 Promise 可以解决回调地狱和错误处理等问题，但是在某些情况下，Promise 的语法仍然比较冗长，可读性不够强，而且需要手动处理错误。</p></blockquote><h3 id="async-await"><a href="#async-await" class="headerlink" title="async&#x2F;await"></a>async&#x2F;await</h3><p>async&#x2F;await 是 ES8 引入的异步编程模型。它基于 Promise，并提供了一种更简洁、更易读的方式来编写异步代码。<code>async/await</code> 让异步代码看起来更像是同步代码，使得异步操作的处理更加直观和可控。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;  </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/data&#x27;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchData</span>().<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="async-函数"><a href="#async-函数" class="headerlink" title="async 函数"></a><code>async</code> 函数</h4><ul><li>声明一个 <code>async</code> 函数，相当于创建了一个返回 Promise 的函数。</li><li>在 <code>async</code> 函数内部可以使用 <code>await</code> 来等待其他的异步操作完成。</li></ul><p><code>async</code> 关键字用于定义一个异步函数，它可以在函数内部使用 <code>await</code> 关键字来等待一个 Promise 对象的解决（resolve）或拒绝（reject）。异步函数总是返回一个 Promise 对象。</p><h4 id="await-表达式"><a href="#await-表达式" class="headerlink" title="await 表达式"></a><code>await</code> 表达式</h4><ul><li>在 async 函数内部使用 await 可以暂停该 async 函数执行，并等待 promise 解决或拒绝后再继续执行。</li><li>如果被等待的表达式是一个 promise，则会阻塞后面代码直到该 promise 完成。如果不是 promise，则会将其转换为 resolved 的 promise 并返回其值。</li></ul><p><code>await</code> 关键字只能在异步函数内部使用，它可以暂停异步函数的执行，等待一个 Promise 对象的状态变为 resolved，并返回 Promise 的解决值。在等待期间，<code>await</code> 表达式后面的代码会被暂停执行，直到 Promise 对象的状态变为 resolved。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">someAsyncOperation</span>();  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 这行代码会在 someAsyncOperation() 完成后才执行</span></span><br></pre></td></tr></table></figure><h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><p>使用 <code>try/catch</code> 块来捕获异步函数中的错误。如果 <code>await</code> 表达式返回的 Promise 对象被拒绝（rejected），则会抛出一个异常，可以通过 <code>catch</code> 块来捕获并处理这个异常。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;  </span><br><span class="line">  <span class="keyword">try</span> &#123;  </span><br><span class="line">    <span class="keyword">let</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/data&#x27;</span>);  </span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>();  </span><br><span class="line">    <span class="keyword">return</span> data;  </span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;  </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Error fetching data:&quot;</span>, error);  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol><li><strong>代码清晰：</strong> <code>async/await</code> 让异步操作看起来像同步操作一样，使得异步代码更易于理解和编写，避免了回调地狱的问题。</li><li><strong>错误处理：</strong> 使用 <code>try/catch</code> 结构可以方便地捕获和处理异步操作中的错误，使得错误处理更加直观和简单。</li><li><strong>顺序控制：</strong> 可以通过 <code>await</code> 控制异步操作的执行顺序，使得代码逻辑更加清晰，特别适用于需要串行执行多个异步操作的情况。</li><li><strong>结合性能：</strong> <code>async/await</code> 基于 Promise，可以很好地结合 Promise 的性能优势，同时提供更直观的语法。</li></ol><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol><li><strong>仅限异步函数：</strong> <code>async/await</code> 只能在 async 函数中使用，如果需要在顶级作用域或普通函数中使用，就需要额外结合 Promise 使用。</li><li><strong>不支持并行：</strong> <code>await</code> 会阻塞后续代码的执行，因此无法实现多个异步操作的并行执行，可能影响性能。</li><li><strong>隐式转换：</strong> 如果被等待的表达式不</li></ol><h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><p>事件监听器是一种用于处理异步操作的机制，它允许我们在特定事件发生时执行相应的代码。通过注册事件监听器，可以在异步操作完成时执行相应的回调函数。这种方式常用于处理浏览器中的事件，如点击事件、加载事件等。</p><h4 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h4><p>常见的异步操作包括网络请求、文件读写、定时器等。为了处理这些异步操作，我们可以使用事件监听器来注册回调函数，以便在操作完成时执行相应的代码。</p><h4 id="事件监听器"><a href="#事件监听器" class="headerlink" title="事件监听器"></a>事件监听器</h4><p>事件监听器是一种机制，用于在特定事件发生时执行相应的代码。在 JavaScript 中，我们可以使用 <code>addEventListener</code> 方法来注册事件监听器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">addEventListener</span>(event, callback);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">element：要监听事件的元素。</span></span><br><span class="line"><span class="comment">event：要监听的事件类型，如 &quot;click&quot;、&quot;keydown&quot; 等。</span></span><br><span class="line"><span class="comment">callback：事件触发时要执行的回调函数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 案例。以下代码注册了一个点击事件监听器，当按钮被点击时，会执行回调函数 handleClick</span></span><br><span class="line"><span class="comment">//当按钮被点击时，会执行回调函数 handleClick。在 handleClick 函数中，我们使用 setTimeout 函数模拟一个异步操作，延迟 2 秒后输出 &quot;Async operation completed!&quot;。</span></span><br><span class="line"><span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);  </span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Button clicked!&#x27;</span>);  </span><br><span class="line">  </span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;  </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Async operation completed!&#x27;</span>);  </span><br><span class="line">  &#125;, <span class="number">2000</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">button.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, handleClick);</span><br></pre></td></tr></table></figure><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ol><li><strong>非阻塞：</strong> 事件监听器允许异步操作在后台执行，不会阻塞程序的主线程，提高了程序的性能和响应速度。</li><li><strong>模块化：</strong> 使用事件监听器可以将代码按照事件类型和处理逻辑进行模块化，使得代码结构更加清晰。</li><li><strong>松耦合：</strong> 通过事件机制，不同模块之间可以相对独立地进行通信和交互，降低了系统各部分之间的耦合度，提高了可维护性。</li><li><strong>灵活性：</strong> 可以动态地添加或移除事件监听器，从而增强系统的灵活性，并且方便实现插件化、扩展等功能。</li></ol><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ol><li><strong>回调地狱：</strong> 如果多个异步操作有依赖关系，嵌套过多的回调函数可能导致代码难以阅读和维护。这种情况通常被称为“回调地狱”。</li><li><strong>错误处理困难：</strong> 在复杂的异步操作链中，错误处理可能变得复杂。需要额外注意避免错误被忽略或混淆。</li><li><strong>顺序控制困难：</strong> 在一些场景下需要考虑异步操作执行顺序（如串行执行），这可能需要额外考虑控制逻辑。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写Promise</title>
      <link href="/2024/08/04/%E6%89%8B%E5%86%99promise/"/>
      <url>/2024/08/04/%E6%89%8B%E5%86%99promise/</url>
      
        <content type="html"><![CDATA[<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><h3 id="promise-基础语法"><a href="#promise-基础语法" class="headerlink" title="promise 基础语法"></a>promise 基础语法</h3><blockquote><p>Promise 是 JavaScript 中处理异步操作的一种方式。它代表了一个异步操作的最终完成或失败，并且其返回值可用于进一步处理</p></blockquote><ol><li><p>创建一个promise对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 Promise  </span></span><br><span class="line"><span class="keyword">const</span> myPromise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;  </span><br><span class="line">  <span class="comment">// 异步操作，比如一个网络请求  </span></span><br><span class="line">  <span class="keyword">const</span> success = <span class="literal">true</span>;  </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (success) &#123;  </span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;成功！&#x27;</span>); <span class="comment">// 如果操作成功，调用 resolve 并传递结果  </span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;失败！&#x27;</span>); <span class="comment">// 如果操作失败，调用 reject 并传递错误信息  </span></span><br><span class="line">  &#125;  </span><br><span class="line">&#125;); </span><br></pre></td></tr></table></figure></li><li><p>使用一个promise对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 Promise  </span></span><br><span class="line">myPromise.<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 在操作成功时执行  </span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error); <span class="comment">// 在操作失败时执行  </span></span><br><span class="line">&#125;);  </span><br></pre></td></tr></table></figure></li></ol><h3 id="promise三个状态"><a href="#promise三个状态" class="headerlink" title="promise三个状态"></a>promise三个状态</h3><ol><li>Pending（进行中）：初始状态，表示异步操作正在进行中</li><li>Fulfilled（已成功）：调用resolve函数，表示异步操作已经成功完成，并且返回了一个值。将会调用 then() 方法绑定的回调函数来处理结果。</li><li>Rejected（已失败）：调用reject函数，表示异步操作失败了，并返回了一个错误信息。将会调用 catch() 方法绑定的回调函数来处理错误。</li></ol><blockquote><p>当 Promise 的状态从 Pending 转变为 Fulfilled 或 Rejected 时，它就永远不会再改变。这个特性使得我们可以更好地管理和处理异步代码。</p></blockquote><p>在 Promise 对象被创建时，它的初始状态是 pending。随后，通过调用 resolve() 方法可以将其状态转换为 fulfilled，表示异步操作成功完成，并传递一个值作为结果；而调用 reject() 方法则会将其状态转换为 rejected，表示异步操作发生错误或失败，并传递一个原因作为错误信息。</p><p>一旦 Promise 的状态发生变化（从 pending 转变到 fulfilled 或 rejected），则其状态不能再次改变。这是 Promise 的重要特性之一。当 Promise 处于 fulfilled 状态时，它会执行与之关联的 then() 回调函数；当处于 rejected 状态时，则会执行与之关联的 catch() 回调函数。</p><h3 id="Promise-是一个构造函数-类"><a href="#Promise-是一个构造函数-类" class="headerlink" title="Promise 是一个构造函数 (类)"></a>Promise 是一个构造函数 (类)</h3><p>其实现类似于这样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;  </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;  </span><br><span class="line">    <span class="comment">// 内部状态变量  </span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&#x27;pending&#x27;</span>;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = <span class="literal">undefined</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// resolve 和 reject 函数  </span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">resolve</span> = <span class="keyword">function</span>(<span class="params">value</span>) &#123;  </span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;  </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&#x27;fulfilled&#x27;</span>;  </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> = value;  </span><br><span class="line">      &#125;  </span><br><span class="line">    &#125;;  </span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reject</span> = <span class="keyword">function</span>(<span class="params">reason</span>) &#123;  </span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;  </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&#x27;rejected&#x27;</span>;  </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> = reason;  </span><br><span class="line">      &#125;  </span><br><span class="line">    &#125;;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行传入的 executor 函数，并传递 resolve 和 reject 函数作为参数  </span></span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">      <span class="title function_">executor</span>(<span class="variable language_">this</span>.<span class="property">resolve</span>, <span class="variable language_">this</span>.<span class="property">reject</span>);  </span><br><span class="line">    &#125; <span class="keyword">catch</span>(error) &#123;  </span><br><span class="line">       <span class="title function_">reject</span>(error);  </span><br><span class="line">     &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>状态转换</strong></p><p>当执行 <code>resolve</code> 方法时，Promise 的状态会由 <code>pending</code> 转换为 <code>fulfilled</code>，并且将成功的数据存储在 <code>value</code> 属性中。 </p><p>当执行 <code>reject</code> 方法时，Promise 的状态会由 <code>pending</code> 转换为 <code>rejected</code>，并且将错误信息存储在 <code>value</code> 属性中。</p><p><strong>then() 和 catch() 方法</strong></p><p>Promise 实例具有 then() 和 catch() 方法，在异步操作完成后可以通过这些方法注册回调来处理结果或错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;  </span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&quot;done!&quot;</span>), <span class="number">1000</span>);  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(  </span><br><span class="line"> <span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result), <span class="comment">// 输出 &quot;done!&quot;  </span></span><br><span class="line"> <span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error)  </span><br><span class="line">);  </span><br></pre></td></tr></table></figure><p><strong>链式调用</strong></p><p>then() 方法返回一个新的 Promise 对象，因此可以进行链式调用（chaining）来处理多个异步操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="title function_">resolve</span>(<span class="number">1</span>),<span class="number">1000</span>));  </span><br><span class="line"><span class="keyword">let</span> promise2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="title function_">resolve</span>(<span class="number">2</span>),<span class="number">2000</span>));  </span><br><span class="line"></span><br><span class="line">promise1.<span class="title function_">then</span>(<span class="function"><span class="params">result1</span> =&gt;</span> <span class="keyword">return</span> result1 *<span class="number">2</span>).<span class="title function_">then</span>(<span class="function"><span class="params">result2</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result)); <span class="comment">// 输出：2  </span></span><br><span class="line"></span><br><span class="line">promise2.<span class="title function_">then</span>(<span class="function"><span class="params">result1</span>=&gt;</span><span class="keyword">return</span> result *<span class="number">3</span>).<span class="title function_">then</span>(<span class="function"><span class="params">result3</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(result)); <span class="comment">// 输出：6</span></span><br></pre></td></tr></table></figure><p> <strong>异步操作管理</strong></p><p> 异步任务发起后可立即返回一个 pending 状态的 promise 对象，并将 resolve 或者 reject 操作交给内部任务控制。   </p><p>总结来说，Promise 是通过构造函数创建出来的对象，在内部管理着自身状态和值，在外部提供了方法以及接口供用户使用。其设计使得代码更加清晰易读、避免了“回调地狱”，并方便了对异步任务流程控制</p><h3 id="then-处理"><a href="#then-处理" class="headerlink" title="then 处理"></a>then 处理</h3><p>then() 方法用于注册回调函数来处理异步操作的结果或错误。then() 方法接受两个参数：onFulfilled 和 onRejected，分别代表在异步操作成功和失败时要执行的回调函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">promise.<span class="title function_">then</span>(onFulfilled, onRejected)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">其中，onFulfilled 是一个可选参数，表示在 Promise 由 pending 转换为 fulfilled 时要执行的回调函数；而 onRejected 也是一个可选参数，表示在 Promise 由 pending 转换为 rejected 时要执行的回调函数。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>以下是使用 then() 方法处理异步操作结果和错误的示例代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;  </span><br><span class="line"> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&quot;done!&quot;</span>), <span class="number">1000</span>);  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(  </span><br><span class="line"> <span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result), <span class="comment">// 输出 &quot;done!&quot;  </span></span><br><span class="line"> <span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error) <span class="comment">// 不会被执行  </span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="catch-处理"><a href="#catch-处理" class="headerlink" title="catch 处理"></a>catch 处理</h3><p><strong>p.then(inFulFilled, onRejected).then(inFulFilled, onRejected).catch()</strong></p><blockquote><p>catch可以全局捕获，即可以捕获前面所有then() 的错误</p></blockquote><ul><li><p><strong>p.then(onFulfilled, onRejected)</strong></p><ul><li><code>p</code> 是一个 Promise 对象，通过调用 <code>then()</code> 方法来注册在 Promise 完成（fulfilled）或拒绝（rejected）时要执行的回调函数。</li><li><code>onFulfilled</code> 是一个可选参数，表示在 Promise 由 pending 转变为 fulfilled 时要执行的回调函数。</li><li><code>onRejected</code> 也是一个可选参数，表示在 Promise 由 pending 转变为 rejected 时要执行的回调函数。</li><li>当 Promise 状态变为 fulfilled 时，会执行 <code>onFulfilled</code> 回调函数；当状态变为 rejected 时，会执行 <code>onRejected</code> 回调函数。</li></ul></li><li><p><strong>.catch()</strong></p><ul><li><code>catch()</code> 方法是 <code>Promise</code> 原型对象上的方法，用于捕获前面任何一个 Promise 链中产生的错误，即全局捕获</li></ul></li></ul><h3 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h3><p><code>fetchData()</code> 返回一个 Promise，然后通过 <code>.then()</code> 方法链式调用处理数据。每个 <code>.then()</code> 都接收前一个 Promise 返回的结果，并返回一个新的 Promise，从而形成链式调用。如果任何一个 <code>.then()</code> 中出现了错误，可以通过 <code>.catch()</code> 捕获并处理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 假设有一个返回 Promise 的函数 fetchData 和对返回数据进行处理的函数 processData  </span></span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchData</span>()  </span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;  </span><br><span class="line">    <span class="comment">// 对获取的数据进行处理  </span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">processData</span>(data);  </span><br><span class="line">  &#125;)  </span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">processedData</span> =&gt;</span> &#123;  </span><br><span class="line">    <span class="comment">// 处理后的数据继续操作或返回  </span></span><br><span class="line">    <span class="keyword">return</span> processedData;  </span><br><span class="line">  &#125;)  </span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">finalData</span> =&gt;</span> &#123;  </span><br><span class="line">    <span class="comment">// 对最终数据进行其他操作  </span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(finalData);  </span><br><span class="line">  &#125;)  </span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;  </span><br><span class="line">    <span class="comment">// 捕获链中任何地方出现的错误  </span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);  </span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h3><p><code>Promise.resolve()</code> 是一个静态方法，用于返回一个已解决的 Promise 对象。这个方法通常用于将非 Promise 值包装为一个 Promise，或者将一个已经解决的 Promise 再次返回。</p><ul><li><strong>包装非 Promise 值</strong>：如果传入一个普通的值（例如，数字、字符串等），<code>Promise.resolve(value)</code> 会返回一个以该值为结果成功的 Promise。</li><li><strong>返回已解决的 Promise</strong>：如果传入一个已解决的 Promise，它会直接返回这个 Promise，而不进行任何处理。</li><li><strong>即使是 Promise 也会进行处理</strong>：即使传入的值是一个 Promise，该 Promise 的状态与 <code>Promise.resolve</code> 返回的 Promise 的状态是相同的。</li></ul><p><strong>普通用法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">42</span>);  </span><br><span class="line">promise1.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;  </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 输出: 42  </span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>已解决的Promise</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> existingPromise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Already resolved&#x27;</span>);  </span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(existingPromise);  </span><br><span class="line">promise2.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;  </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 输出: Already resolved  </span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>异步操作</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当传入的值是一个 Promise 时，Promise.resolve 不会返回新的 Promise，而是直接返回原 Promise</span></span><br><span class="line"><span class="keyword">const</span> originalPromise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;  </span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;  </span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;I am resolved!&#x27;</span>); <span class="comment">// 经过2秒解决  </span></span><br><span class="line">    &#125;, <span class="number">2000</span>);  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise3 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(originalPromise);  </span><br><span class="line">promise3.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;  </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 输出: I am resolved!  </span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>Promise 链接</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Promise.resolve() 也常用于 Promise 链中，以确保获得一个 Promise</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/data&#x27;</span>))  </span><br><span class="line">        .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>());  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="title function_">getData</span>().<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;  </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="reject"><a href="#reject" class="headerlink" title="reject"></a>reject</h3><p>用于返回一个带有拒绝状态的 Promise 对象。当调用 <code>Promise.reject()</code> 时，返回的 Promise 对象将以指定的原因（reason）被拒绝。</p><ol><li>参数：<code>Promise.reject()</code> 方法接收一个参数作为 Promise 被拒绝的原因（reason）。这个参数可以是任何值，通常是一个 Error 对象或一个字符串，用于描述拒绝的原因。</li><li>返回值：<code>Promise.reject()</code> 返回一个带有拒绝状态的 Promise 对象，该对象的状态为 rejected，并且 rejection 值即为传入的原因参数。</li><li>使用场景：<ul><li>当需要显式地创建一个被拒绝的 Promise 对象时，可以使用 <code>Promise.reject()</code>。</li><li>可以在异步操作中模拟出现错误或异常情况，使得 Promise 进入 rejected 状态。</li><li>通常与 <code>.catch()</code> 或 <code>Promise.catch()</code> 一起使用，用于捕获并处理 Promise 链中的错误。</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设有一个返回 Promise 的函数 fetchData 和对返回数据进行处理的函数 processData  </span></span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchData</span>()  </span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;  </span><br><span class="line">    <span class="comment">// 对获取的数据进行处理  </span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">processData</span>(data);  </span><br><span class="line">  &#125;)  </span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">processedData</span> =&gt;</span> &#123;  </span><br><span class="line">    <span class="comment">// 处理后的数据继续操作或返回  </span></span><br><span class="line">    <span class="keyword">return</span> processedData;  </span><br><span class="line">  &#125;)  </span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">finalData</span> =&gt;</span> &#123;  </span><br><span class="line">    <span class="comment">// 对最终数据进行其他操作  </span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(finalData);  </span><br><span class="line">  &#125;)  </span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;  </span><br><span class="line">    <span class="comment">// 捕获链中任何地方出现的错误  </span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);  </span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="race"><a href="#race" class="headerlink" title="race"></a>race</h3><p>接收一个包含多个 Promise 对象的可迭代对象（比如数组），并返回一个新的 Promise。这个新的 Promise 将在第一个传入的 Promise 对象状态发生改变时，采用第一个发生改变的状态，并以此状态进行后续操作。</p><ol><li>参数：<code>Promise.race()</code> 方法接收一个可迭代对象作为参数，通常是包含多个 Promise 对象的数组。如果传入非可迭代对象，则会导致 TypeError。</li><li>返回值：<code>Promise.race()</code> 返回一个全新的 Promise 实例。当传入的多个 Promises 中有任意一个完成（无论是 resolve 还是 reject），返回的新 Promise 就会采用该完成状态，并且其后续操作也将以此为基础。</li><li>使用场景：<ul><li>在多个异步任务中，只要有其中之一完成就能得到结果时，可以使用 <code>Promise.race()</code>。</li><li>可以设置超时机制，在一定时间内没有得到结果就放弃等待。</li><li>针对某些情况下需要快速响应或者处理优先级问题。</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;  </span><br><span class="line">  <span class="comment">// 创建一个新的 Promise 对象  </span></span><br><span class="line">  <span class="comment">// 这个 Promise 在 100 毫秒后通过 resolve 方法解决，并传递 &#x27;First&#x27; 作为解决值  </span></span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, <span class="number">100</span>, <span class="string">&#x27;First&#x27;</span>);  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;  </span><br><span class="line">  <span class="comment">// 创建另一个新的 Promise 对象  </span></span><br><span class="line">  <span class="comment">// 这个 Promise 在 200 毫秒后通过 resolve 方法解决，并传递 &#x27;Second&#x27; 作为解决值  </span></span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, <span class="number">200</span>, <span class="string">&#x27;Second&#x27;</span>);  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([promise1, promise2])  </span><br><span class="line"> .<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;  </span><br><span class="line">   <span class="comment">// 使用 Promise.race() 处理多个 Promises，获取最早完成的结果  </span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(value);   </span><br><span class="line">   <span class="comment">// 输出 &quot;First&quot; 或 &quot;Second&quot; 中较早完成的值  </span></span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><h3 id="all"><a href="#all" class="headerlink" title="all"></a>all</h3><p>用于将多个 Promise 实例包装成一个新的 Promise 实例。当传入的所有 Promise 都变为 resolved 状态时，<code>Promise.all()</code> 返回的 Promise 才会变为 resolved 状态；如果其中任何一个 Promise 变为 rejected 状态，则整个 <code>Promise.all()</code> 返回的 Promise 也会立即变为 rejected 状态。</p><ol><li>参数：<code>Promise.all()</code> 方法接收一个可迭代对象作为参数，通常是包含多个 Promise 对象的数组。如果传入非可迭代对象，则会导致 TypeError。</li><li>返回值：<code>Promise.all()</code> 返回一个全新的 Promise 实例。当传入的所有 Promises 都成功完成时，返回的新 Promise 将以包含所有结果值的数组进行 resolve；如果任一 Promise 失败，则返回的 Promise 将以失败原因进行 reject。</li><li>使用场景：<ul><li>当需要等待多个异步操作都完成后才执行后续操作时，可以使用 <code>Promise.all()</code>。</li><li>用于并行执行多个异步任务，提高效率。</li><li>可以将多个独立的异步任务组合成一个整体，便于管理和控制。</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;  </span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, <span class="number">100</span>, <span class="string">&#x27;First&#x27;</span>);  </span><br><span class="line">&#125;);  </span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;  </span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, <span class="number">200</span>, <span class="string">&#x27;Second&#x27;</span>);  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([promise1, promise2])  </span><br><span class="line"> .<span class="title function_">then</span>(<span class="function"><span class="params">values</span> =&gt;</span> &#123;  </span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(values); <span class="comment">// 输出包含 &#x27;First&#x27; 和 &#x27;Second&#x27; 的数组  </span></span><br><span class="line"> &#125;);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">promise1 和 promise2 分别在不同延时后 resolve，并通过 Promise.all([promise1, promise2]) 来获取所有 Promise 的结果进行后续处理。由于两个 Promise 都成功完成，返回的新 Promise 将以包含所有结果值的数组进行 resolve，输出 [&#x27;First&#x27;, &#x27;Second&#x27;]。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="手写promise"><a href="#手写promise" class="headerlink" title="手写promise"></a>手写promise</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个名为 MyPromise 的构造函数  </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyPromise</span>(<span class="params">executor</span>) &#123;  </span><br><span class="line">  <span class="comment">// 初始化 Promise 的状态、值和原因  </span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&#x27;pending&#x27;</span>; <span class="comment">// 初始状态为 pending  </span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">value</span> = <span class="literal">undefined</span>; <span class="comment">// 成功时的返回值  </span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">reason</span> = <span class="literal">undefined</span>; <span class="comment">// 失败时的原因  </span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span> = []; <span class="comment">// 存储成功回调的数组  </span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span> = []; <span class="comment">// 存储失败回调的数组  </span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 定义 resolve 函数，用于将 Promise 状态改为 fulfilled  </span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">resolve</span> = value =&gt; &#123;  </span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;  </span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&#x27;fulfilled&#x27;</span>; <span class="comment">// 将状态改为 fulfilled  </span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">value</span> = value; <span class="comment">// 存储成功时的返回值  </span></span><br><span class="line">      <span class="comment">// 触发所有成功回调  </span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">callback</span> =&gt;</span> <span class="title function_">callback</span>(<span class="variable language_">this</span>.<span class="property">value</span>));  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;;  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 定义 reject 函数，用于将 Promise 状态改为 rejected  </span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">reject</span> = reason =&gt; &#123;  </span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;  </span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&#x27;rejected&#x27;</span>; <span class="comment">// 将状态改为 rejected  </span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">reason</span> = reason; <span class="comment">// 存储失败时的原因  </span></span><br><span class="line">      <span class="comment">// 触发所有失败回调  </span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">callback</span> =&gt;</span> <span class="title function_">callback</span>(<span class="variable language_">this</span>.<span class="property">reason</span>));  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;;  </span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;   </span><br><span class="line">    <span class="comment">// 执行传入的执行器函数，捕获可能抛出的异常并将 Promise 状态改为 rejected  </span></span><br><span class="line">    <span class="title function_">executor</span>(resolve, reject);  </span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;  </span><br><span class="line">    <span class="title function_">reject</span>(error); <span class="comment">// 捕获异常并将状态置为 rejected  </span></span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 then 方法，用于注册成功和失败回调，并返回一个新的 Promise 对象  </span></span><br><span class="line"><span class="title class_">MyPromise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span>(<span class="params">onFulfilled, onRejected</span>) &#123;  </span><br><span class="line">  </span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;  </span><br><span class="line">     <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&quot;fulfilled&quot;</span>) &#123;  </span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;  </span><br><span class="line">          <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="keyword">let</span> x = onFulfilled ? <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>) : <span class="variable language_">this</span>.<span class="property">value</span>;  </span><br><span class="line">            <span class="title function_">resolve</span>(x); <span class="comment">// 执行成功回调并将结果传递给下一个 Promise  </span></span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;  </span><br><span class="line">            <span class="title function_">reject</span>(e); <span class="comment">// 捕获异常并将状态置为 rejected  </span></span><br><span class="line">          &#125;  </span><br><span class="line">        &#125;, <span class="number">0</span>);  </span><br><span class="line">     &#125;  </span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&quot;rejected&quot;</span>) &#123;  </span><br><span class="line">       <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;  </span><br><span class="line">         <span class="keyword">try</span> &#123;  </span><br><span class="line">           <span class="keyword">let</span> x = onRejected ? <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>) : <span class="variable language_">this</span>.<span class="property">reason</span>;  </span><br><span class="line">           <span class="title function_">resolve</span>(x); <span class="comment">// 执行失败回调并将结果传递给下一个 Promise  </span></span><br><span class="line">         &#125; <span class="keyword">catch</span> (e) &#123;  </span><br><span class="line">           <span class="title function_">reject</span>(e); <span class="comment">// 捕获异常并将状态置为 rejected  </span></span><br><span class="line">         &#125;  </span><br><span class="line">       &#125;, <span class="number">0</span>);  </span><br><span class="line">     &#125;  </span><br><span class="line">   &#125;);  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 catch 方法，用于捕获可能发生的错误并返回一个新的 Promise 对象  </span></span><br><span class="line"><span class="title class_">MyPromise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">catch</span> = <span class="keyword">function</span>(<span class="params">onRejected</span>) &#123;  </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&quot;rejected&quot;</span>) &#123;  </span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">          <span class="keyword">let</span> x = onRejected ? <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>) : <span class="variable language_">this</span>.<span class="property">reason</span>;  </span><br><span class="line">          <span class="title function_">resolve</span>(x); <span class="comment">// 执行失败回调并将结果传递给下一个 Promise  </span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;  </span><br><span class="line">          <span class="comment">// 错误处理逻辑，可以根据实际需求进行修改  </span></span><br><span class="line">          <span class="title function_">reject</span>(e); <span class="comment">// 捕获异常并将状态置为 rejected  </span></span><br><span class="line">        &#125;  </span><br><span class="line">      &#125;, <span class="number">0</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他处理异步的方法"><a href="#其他处理异步的方法" class="headerlink" title="其他处理异步的方法"></a>其他处理异步的方法</h3><p>处理异步操作是 JavaScript 中常见的任务。有几种方法可以处理异步操作，包括使用回调函数、Promise、async&#x2F;await 和事件监听器等。</p><ol><li><strong>回调函数</strong>：回调函数是一种传递给异步函数的函数，用于在异步操作完成后执行。回调函数通常作为异步函数的最后一个参数传递，并在操作完成时被调用。这种方式可以处理简单的异步操作，但当有多个异步操作需要处理时，回调函数嵌套会导致回调地狱，使代码难以理解和维护。</li><li><strong>Promise</strong>：Promise 是一种用于处理异步操作的对象。它表示一个异步操作的最终完成或失败，并提供了链式调用的方式来处理操作结果。Promise 有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。通过使用 Promise，可以更好地组织和管理异步代码，避免回调地狱的问题。</li><li><strong>async&#x2F;await</strong>：async&#x2F;await 是 ECMAScript 2017 引入的异步编程模型。它基于 Promise，并提供了一种更简洁的语法来处理异步操作。通过在函数前面添加 async 关键字，可以将函数声明为异步函数。在异步函数内部，可以使用 await 关键字来等待一个 Promise 对象的解决，并以同步的方式获取操作结果。这种方式使得异步代码看起来更像是同步代码，更易于理解和编写。</li><li><strong>事件监听器</strong>：某些异步操作可能会触发事件，可以使用事件监听器来处理这些事件。通过注册事件监听器，可以在异步操作完成时执行相应的回调函数。这种方式常用于处理浏览器中的事件，如点击事件、加载事件等。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> javascript </category>
          
          <category> 异步处理 </category>
          
          <category> promise </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> javascript </tag>
            
            <tag> promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python海象运算符</title>
      <link href="/2024/06/28/python%E6%B5%B7%E8%B1%A1%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2024/06/28/python%E6%B5%B7%E8%B1%A1%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在Python 3.8版本中，新的运算符——海象运算符 :&#x3D;。这个运算符因形似海象的嘴巴和胡须而得名，它能让你在表达式中进行赋值，使代码变得更优雅、更简洁。</p><p>在Python中，:&#x3D; 被称为赋值表达式，它允许你在表达式的任何位置进行赋值操作，而不必单独写一个赋值语句。这在循环、条件判断、函数调用中尤其有用，可以减少代码行数并提高可读性。</p></blockquote><p><strong>示例代码</strong></p><p># 示例1：在while循环中使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lines = [<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span>, <span class="string">&quot;Python&quot;</span>]<span class="keyword">while</span> (line := lines.pop()) != <span class="string">&quot;Python&quot;</span>:    <span class="built_in">print</span>(line)<span class="built_in">print</span>(<span class="string">&quot;Found Python!&quot;</span>)</span><br></pre></td></tr></table></figure><p># 示例2：在for循环中初始化计数器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i := <span class="number">0</span>) <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p># 示例3：列表推导式中使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]squares = [(n := n**<span class="number">2</span>) <span class="keyword">for</span> n <span class="keyword">in</span> numbers]<span class="built_in">print</span>(squares)</span><br></pre></td></tr></table></figure><p># 示例4：在if条件中使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (value := <span class="number">42</span>) &gt; <span class="number">10</span>:    <span class="built_in">print</span>(<span class="string">f&quot;Value is greater than 10: <span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p># 示例5：函数调用前的检查</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">process_data</span>(<span class="params">data</span>):    <span class="built_in">print</span>(<span class="string">f&quot;Processing data: <span class="subst">&#123;data&#125;</span>&quot;</span>)data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]<span class="keyword">if</span> (d := <span class="built_in">len</span>(data)) &gt; <span class="number">0</span>:    process_data(d)</span><br></pre></td></tr></table></figure><p># 示例6：与逻辑运算符结合使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (file := <span class="built_in">open</span>(<span class="string">&#x27;example.txt&#x27;</span>)) <span class="keyword">and</span> (content := file.read()):    <span class="built_in">print</span>(content)<span class="keyword">finally</span>:    file.close()</span><br></pre></td></tr></table></figure><p># 示例7：字典推导式中使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125;keys = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]mapped_data = &#123;k: data[k] if (k := k) in data else None for k in keys&#125;print(mapped_data)</span><br></pre></td></tr></table></figure><p># 示例8：列表过滤</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">words = [<span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;awesome&#x27;</span>]long_words = [word <span class="keyword">for</span> word <span class="keyword">in</span> words <span class="keyword">if</span> (<span class="built_in">len</span>(word) := <span class="built_in">len</span>(word)) &gt; <span class="number">5</span>]<span class="built_in">print</span>(long_words)</span><br></pre></td></tr></table></figure><p># 示例9：生成器表达式中使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gen = ((i := i+<span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>))<span class="keyword">for</span> num <span class="keyword">in</span> gen:    <span class="built_in">print</span>(num)</span><br></pre></td></tr></table></figure><p># 示例10：在元组解包中使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)(a := t[<span class="number">0</span>], b := t[<span class="number">1</span>], c := t[<span class="number">2</span>])<span class="built_in">print</span>(<span class="string">f&quot;a=<span class="subst">&#123;a&#125;</span>, b=<span class="subst">&#123;b&#125;</span>, c=<span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker容器</title>
      <link href="/2024/06/17/Docker%E5%AE%B9%E5%99%A8/"/>
      <url>/2024/06/17/Docker%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Docker 是一种用于开发、交付和运行应用程序的开放平台。它允许您在容器中打包应用程序及其依赖关系，并提供了一种轻量级、可移植和自包含的环境。以下是 Docker 的一些核心概念和特点：</p><ol><li>容器化：Docker 利用 Linux 容器技术，将应用程序及其所有依赖项打包到一个容器中，这使得应用程序可以在任何环境中以相同的方式运行。</li><li>轻量级：与传统虚拟机相比，Docker 容器更加轻量级，在性能和资源消耗上都有优势。</li><li>可移植性：由于 Docker 容器封装了应用程序及其依赖项，因此可以轻松地在不同的主机上进行部署和运行。</li><li>自动化：Docker 提供了丰富而强大的 API 和工具集，帮助用户自动化构建、部署和扩展应用服务。</li><li>镜像与容器：Docker 使用镜像来打包应用程序及其环境，并使用容器来实际运行这些镜像。</li></ol><p>Docker 通过提供一种简单且易于管理的方式来进行软件交付与部署，使得开发人员、系统管理员以及整个组织可以更高效地构建、交付和管理应用。</p><blockquote><p> <strong>Docker</strong> 包括三个基本概念</p><ul><li><strong>镜像</strong>（<code>Image</code>）</li><li><strong>容器</strong>（<code>Container</code>）</li><li><strong>仓库</strong>（<code>Repository</code>）</li></ul></blockquote><h4 id="分层存储"><a href="#分层存储" class="headerlink" title="分层存储"></a>分层存储</h4><p>Docker 镜像采用分层存储机制，在构建过程中每一步操作都会在当前基础上创建新一层，并将其中间结果保存为新层。这种分层存储机制使得 Docker 镜像具备了以下特点：</p><ul><li>重用性：多个不同的容器可以共享相同底层图层（Layer），减少磁盘空间占用。</li><li>可复制性：如果需要修改某个图层，则只需修改对应图层数字即可，而无需重新复制整个文件系统。</li><li>分发性：由于每个图层都可以单独存在并被推送到注册表中，因此也更易于分发和分享。</li></ul><h4 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h4><p>镜像是 Docker 中的核心概念，它是用于打包应用程序及其依赖项的轻量级、可移植的部署单元。镜像实际上是一个只读的模板，它包含了运行应用程序所需的所有文件系统内容、运行时配置和环境变量。</p><p>使用方法：</p><ol><li>拉取镜像：要使用某个镜像，首先需要从 Docker Hub 或其他注册表中拉取该镜像。可以使用 <code>docker pull</code> 命令来拉取指定版本或标签的镜像。</li><li>运行容器：一旦有了所需的镜像，可以使用 <code>docker run</code> 命令基于该镜像创建并运行一个容器实例。</li><li>定制与构建：如果现有的公共镜像不满足需求，可以通过编写 Dockerfile 来定义自己的定制化镜像，并通过 <code>docker build</code> 命令来构建这个新版本的自定义镜像。</li></ol><p>- </p><h4 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h4><p>镜像（<code>Image</code>）和容器（<code>Container</code>）的关系，就像是面向对象程序设计中的 <code>类</code> 和 <code>实例</code> 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p><p>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 <a href="https://en.wikipedia.org/wiki/Linux_namespaces">命名空间</a>。</p><h4 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h4><p>镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，<a href="https://docker-practice.github.io/zh-cn/repository/registry.html">Docker Registry</a> 就是这样的服务。</p><p>一个 <strong>Docker Registry</strong> 中可以包含多个 <strong>仓库</strong>（<code>Repository</code>）；每个仓库可以包含多个 <strong>标签</strong>（<code>Tag</code>）；每个标签对应一个镜像</p><p>通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 <code>&lt;仓库名&gt;:&lt;标签&gt;</code> 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 <code>latest</code> 作为默认标签。</p><p><strong>Docker Registry 公开服务</strong></p><p>Docker Registry 公开服务是开放给用户使用、允许用户管理镜像的 Registry 服务。</p><p><strong>私有 Docker Registry</strong></p><p>除了使用公开服务外，用户还可以在本地搭建私有 Docker Registry。Docker 官方提供了 <a href="https://hub.docker.com/_/registry/">Docker Registry</a> 镜像，可以直接使用做为私有 Registry 服务。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Docker确实分为三个更新频道：stable、test和nightly。以下是这三个更新频道的详细说明：</p><ol><li><strong>Stable（稳定版）</strong>：<ul><li>这是Docker的正式发布版本，经过充分测试，适合生产环境使用。</li><li>用户可以依赖于此版本的稳定性和安全性，通常包含经过验证的功能和修复。</li></ul></li><li><strong>Test（测试版）</strong>：<ul><li>这个频道包含最新的功能和修复，但尚未经过全面的生产环境测试。</li><li>适合开发者和测试人员使用，以便在新功能正式发布之前进行试用和反馈。</li></ul></li><li><strong>Nightly（夜间版）</strong>：<ul><li>这是每日构建的版本，包含最新的代码更改和功能。</li><li>由于是最新构建，可能会包含未经过测试的功能，因此不建议在生产环境中使用。</li><li>适合开发者希望测试最新功能或参与Docker开发的用户。</li></ul></li></ol><h4 id="Ubuntu-安装-Docker"><a href="#Ubuntu-安装-Docker" class="headerlink" title="Ubuntu 安装 Docker"></a>Ubuntu 安装 Docker</h4><ol><li>更新现有的包索引</li></ol><p>首先，打开终端并更新现有的包索引：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure><ol start="2"><li>使用 APT 安装</li></ol><p>由于 <code>apt</code> 源使用 HTTPS 以确保软件下载过程中不被篡改。因此，我们首先需要添加使用 HTTPS 传输的软件包以及 CA 证书。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg \</span><br><span class="line">    lsb-release</span><br></pre></td></tr></table></figure><ol start="3"><li>添加Docker的官方GPG密钥</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span><br></pre></td></tr></table></figure><ol start="4"><li>添加Docker的稳定版仓库</li></ol><p>向 <code>sources.list</code> 中添加 Docker 软件源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> \</span><br><span class="line">  <span class="string">&quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://mirrors.aliyun.com/docker-ce/linux/ubuntu \</span></span><br><span class="line"><span class="string">  <span class="subst">$(lsb_release -cs)</span> stable&quot;</span> | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以上命令会添加稳定版本的 Docker APT 镜像源，如果需要测试版本的 Docker 请将 stable 改为 test</span></span><br></pre></td></tr></table></figure><ol start="5"><li>安装 Docker</li></ol><p>更新 apt 软件包缓存，并安装 <code>docker-ce</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line"></span><br><span class="line">$ sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure><ol start="6"><li>启动Docker并设置为开机自启</li></ol><p>安装完成后，启动Docker服务并设置为开机自启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start docker  </span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> docker  </span><br></pre></td></tr></table></figure><ol start="7"><li>验证Docker安装</li></ol><p>可以通过运行以下命令来验证Docker是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker --version  </span><br></pre></td></tr></table></figure><ol start="8"><li>可选）将当前用户添加到Docker组</li></ol><p>默认情况下，<code>docker</code> 命令会使用 <a href="https://en.wikipedia.org/wiki/Unix_domain_socket">Unix socket</a> 与 Docker 引擎通讯。而只有 <code>root</code> 用户和 <code>docker</code> 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 <code>root</code> 用户。因此，更好地做法是将需要使用 <code>docker</code> 的用户加入 <code>docker</code> 用户组。</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo groupadd docker</span><br><span class="line">$ sudo usermod -aG docker <span class="variable">$USER</span>  </span><br></pre></td></tr></table></figure><ol start="9"><li>测试 Docker 是否安装正确</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --<span class="built_in">rm</span> hello-world</span><br><span class="line"></span><br><span class="line">Unable to find image <span class="string">&#x27;hello-world:latest&#x27;</span> locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">b8dfde127a29: Pull complete</span><br><span class="line">Digest: sha256:308866a43596e83578c7dfa15e27a73011bdd402185a84c5cd7f32a88b501a24</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the <span class="string">&quot;hello-world&quot;</span> image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image <span class="built_in">which</span> runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, <span class="built_in">which</span> sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br></pre></td></tr></table></figure><blockquote><p>如果在使用过程中发现拉取 Docker 镜像十分缓慢，可以配置 Docker 国内镜像加速</p><p>国内从 Docker Hub 拉取镜像有时会遇到困难，此时可以配置镜像加速器。国内很多云服务商都提供了国内加速器服务，例如：</p><ul><li><a href="https://www.aliyun.com/product/acr?source=5176.11533457&userCode=8lx5zmtu">阿里云加速器(点击管理控制台 -&gt; 登录账号(淘宝账号) -&gt; 右侧镜像工具 -&gt; 镜像加速器 -&gt; 复制加速器地址)</a></li><li><a href="https://www.163yun.com/help/documents/56918246390157312">网易云加速器 <code>https://hub-mirror.c.163.com</code></a></li><li><a href="https://cloud.baidu.com/doc/CCE/s/Yjxppt74z#%E4%BD%BF%E7%94%A8dockerhub%E5%8A%A0%E9%80%9F%E5%99%A8">百度云加速器 <code>https://mirror.baidubce.com</code></a></li></ul><p><strong>由于镜像服务可能出现宕机，建议同时配置多个镜像。</strong></p></blockquote><h4 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h4><blockquote><p><a href="https://docs.docker.com/docker-for-mac/">Docker Desktop for Mac</a> 要求系统最低为 macOS Mojave 10.14。</p></blockquote><ol><li><p>安装</p><ul><li>使用 Homebrew 安装</li></ul><p><a href="https://brew.sh/">Homebrew</a> 的 <a href="https://github.com/Homebrew/homebrew-cask">Cask</a> 已经支持 Docker Desktop for Mac，因此可以很方便的使用 Homebrew Cask 来进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install --cask docker</span><br></pre></td></tr></table></figure><ul><li>手动下载安装</li></ul><p>如果需要手动下载，请点击以下 <a href="https://desktop.docker.com/mac/main/amd64/Docker.dmg">链接</a> 下载 Docker Desktop for Mac。</p><blockquote><p>你可以在 <a href="https://docs.docker.com/docker-for-mac/apple-silicon/">官方文档</a> 查阅已知的问题。</p></blockquote><p>双击下载的 <code>.dmg</code> 文件，然后将那只叫 <a href="https://www.docker.com/blog/call-me-moby-dock/">Moby</a> 的鲸鱼图标拖拽到 <code>Application</code> 文件夹即可（其间需要输入用户密码）。</p></li><li><p>运行</p><p>从应用中找到 Docker 图标并点击运行</p><p>你可以在终端通过命令检查安装后的 Docker 版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker --version</span><br><span class="line">Docker version 20.10.0, build 7287ab3</span><br></pre></td></tr></table></figure><p>如果 <code>docker version</code>、<code>docker info</code> 都正常的话，可以尝试运行一个 <a href="https://hub.docker.com/_/nginx/">Nginx 服务器</a>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 80:80 --name webserver nginx</span><br></pre></td></tr></table></figure><p>要停止 Nginx 服务器并删除执行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker stop webserver</span><br><span class="line">$ docker <span class="built_in">rm</span> webserver</span><br></pre></td></tr></table></figure></li></ol><h4 id="Windows-10-11"><a href="#Windows-10-11" class="headerlink" title="Windows 10&#x2F;11"></a>Windows 10&#x2F;11</h4><blockquote><ul><li><strong>Windows 10 64-bit</strong>：需要使用Windows 10 Professional、Enterprise或Education版本。</li><li><strong>Windows 10 Home</strong>：从Docker Desktop 2.3.0.2版本开始，Docker Desktop也支持Windows 10 Home，但需要启用WSL 2（Windows Subsystem for Linux 2）。</li></ul></blockquote><ol><li><p>安装</p><ul><li><p><strong>手动下载安装</strong></p><p>点击以下 [链接](<a href="https://desktop.docker.com/win/main/amd64/Docker">https://desktop.docker.com/win/main/amd64/Docker</a> Desktop Installer.exe) 下载 Docker Desktop for Windows。</p><p>下载好之后双击 <code>Docker Desktop Installer.exe</code> 开始安装。</p></li><li><p><strong>使用 <a href="https://docs.microsoft.com/zh-cn/windows/package-manager/">winget</a> 安装</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> winget install Docker.DockerDesktop</span><br></pre></td></tr></table></figure></li></ul></li><li><p>运行</p><p>在 Windows 搜索栏输入 <strong>Docker</strong> 点击 <strong>Docker Desktop</strong> 开始运行</p></li></ol><h3 id="镜像使用"><a href="#镜像使用" class="headerlink" title="镜像使用"></a>镜像使用</h3><h4 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h4><p>从 Docker 镜像仓库获取镜像的命令是 <code>docker pull</code>。其命令格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]</span><br></pre></td></tr></table></figure><ul><li>Docker 镜像仓库地址：地址的格式一般是 <code>&lt;域名/IP&gt;[:端口号]</code>。默认地址是 Docker Hub(<code>docker.io</code>)。</li><li>仓库名：如之前所说，这里的仓库名是两段式名称，即 <code>&lt;用户名&gt;/&lt;软件名&gt;</code>。对于 Docker Hub，如果不给出用户名，则默认为 <code>library</code>，也就是官方镜像。</li></ul><p>比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull ubuntu:18.04</span><br><span class="line">18.04: Pulling from library/ubuntu</span><br><span class="line">92dc2a97ff99: Pull complete</span><br><span class="line">be13a9d27eb8: Pull complete</span><br><span class="line">c8299583700a: Pull complete</span><br><span class="line">Digest: sha256:4bc3ae6596938cb0d9e5ac51a1152ec9dcac2a1c50829c74abd9c4361e321b26</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> ubuntu:18.04</span><br><span class="line">docker.io/library/ubuntu:18.04</span><br></pre></td></tr></table></figure><p>上面的命令中没有给出 Docker 镜像仓库地址，因此将会从 Docker Hub （<code>docker.io</code>）获取镜像。而镜像名称是 <code>ubuntu:18.04</code>，因此将会获取官方镜像 <code>library/ubuntu</code> 仓库中标签为 <code>18.04</code> 的镜像。<code>docker pull</code> 命令的输出结果最后一行给出了镜像的完整名称，即： <code>docker.io/library/ubuntu:18.04</code>。</p><h4 id="使用镜像"><a href="#使用镜像" class="headerlink" title="使用镜像"></a>使用镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it --<span class="built_in">rm</span> ubuntu:18.04 bash</span><br></pre></td></tr></table></figure><ul><li><code>-it</code>：这是两个参数，一个是 <code>-i</code>：交互式操作，一个是 <code>-t</code> 终端。我们这里打算进入 <code>bash</code> 执行一些命令并查看返回结果，因此我们需要交互式终端。</li><li><code>--rm</code>：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 <code>docker rm</code>。我们这里只是随便执行个命令，看看结果，不需要排障和保留结果，因此使用 <code>--rm</code> 可以避免浪费空间。</li><li><code>ubuntu:18.04</code>：这是指用 <code>ubuntu:18.04</code> 镜像为基础来启动容器。</li><li><code>bash</code>：放在镜像名后的是 <strong>命令</strong>，这里我们希望有个交互式 Shell，因此用的是 <code>bash</code>。</li></ul><p>进入容器后，我们可以在 Shell 下操作，执行任何所需的命令。这里，我们执行了 <code>cat /etc/os-release</code>，这是 Linux 常用的查看当前系统版本的命令</p><h4 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h4><p>要想列出已经下载下来的镜像，可以使用 <code>docker image ls</code> 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ docker image <span class="built_in">ls</span></span><br><span class="line">REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">redis                latest              5f515359c7f8        5 days ago          183 MB</span><br><span class="line">nginx                latest              05a60462f8ba        5 days ago          181 MB</span><br><span class="line">mongo                3.2                 fe9198c04d62        5 days ago          342 MB</span><br><span class="line">ubuntu               18.04               329ed837d508        3 days ago          63.3MB</span><br><span class="line">ubuntu               bionic              329ed837d508        3 days ago          63.3MB</span><br><span class="line"><span class="comment"># 列表包含了 仓库名、标签、镜像 ID、创建时间 以及 所占用的空间。</span></span><br></pre></td></tr></table></figure><p>如果希望显示包括中间层镜像在内的所有镜像的话，需要加 <code>-a</code> 参数。<br>把所有的虚悬镜像的 ID 列出来,<code>-q</code> 参数。</p><p><strong>自定义输出格式</strong></p><p>使用 <code>--format</code> 选项可以根据需要输出特定的字段。例如，下面的命令只会显示容器的ID和名称：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps --format <span class="string">&quot;&#123;&#123;.ID&#125;&#125;: &#123;&#123;.Names&#125;&#125;&quot;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出正在运行的容器ID和状态：</span></span><br><span class="line">$ docker ps --format <span class="string">&quot;&#123;&#123;.ID&#125;&#125;: &#123;&#123;.Status&#125;&#125;&quot;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有镜像的名称和大小：</span></span><br><span class="line">$ docker image <span class="built_in">ls</span> --format <span class="string">&quot;&#123;&#123;.Repository&#125;&#125;:&#123;&#123;.Tag&#125;&#125; - &#123;&#123;.Size&#125;&#125;&quot;</span>  </span><br></pre></td></tr></table></figure><p>在 <code>docker ps</code> 的 <code>--format</code> 选项中，可以使用以下字段：</p><ul><li><code>ID</code>：容器ID</li><li><code>Image</code>：使用的镜像</li><li><code>Command</code>：运行的命令</li><li><code>Created</code>：创建日期</li><li><code>RunningFor</code>：运行时间</li><li><code>Ports</code>：端口映射</li><li><code>Status</code>：容器状态</li><li><code>Size</code>：容器大小</li><li><code>Names</code>：容器名称</li><li><code>Labels</code>：容器标签</li><li><code>Mounts</code>：挂载的卷</li></ul><p>在 <code>docker image ls</code> 的 <code>--format</code> 选项中，可以使用以下字段：</p><ul><li><code>ID</code>：镜像ID</li><li><code>Repository</code>：镜像仓库名称</li><li><code>Tag</code>：镜像标签</li><li><code>Created</code>：创建日期</li><li><code>Size</code>：镜像大小</li></ul><h3 id="Docker容器操作"><a href="#Docker容器操作" class="headerlink" title="Docker容器操作"></a>Docker容器操作</h3><h3 id="Docker-命令"><a href="#Docker-命令" class="headerlink" title="Docker 命令"></a>Docker 命令</h3><h3 id="访问仓库"><a href="#访问仓库" class="headerlink" title="访问仓库"></a>访问仓库</h3><h3 id="数据管理"><a href="#数据管理" class="headerlink" title="数据管理"></a>数据管理</h3><h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><h3 id="核心技术-构建镜像-DockerFile"><a href="#核心技术-构建镜像-DockerFile" class="headerlink" title="核心技术 - 构建镜像 (DockerFile)"></a>核心技术 - 构建镜像 (DockerFile)</h3><h3 id="Docker-Buildx"><a href="#Docker-Buildx" class="headerlink" title="Docker Buildx"></a>Docker Buildx</h3><h3 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker  Compose"></a>Docker  Compose</h3><h3 id="Docker-Swarm-mode"><a href="#Docker-Swarm-mode" class="headerlink" title="Docker Swarm mode"></a>Docker Swarm mode</h3><h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><h4 id="底层实现"><a href="#底层实现" class="headerlink" title="底层实现"></a>底层实现</h4><h3 id="CI-CD"><a href="#CI-CD" class="headerlink" title="CI\CD"></a>CI\CD</h3><h4 id="IDE使用Docker"><a href="#IDE使用Docker" class="headerlink" title="IDE使用Docker"></a>IDE使用Docker</h4>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-列表推导、字典推导与集合推导</title>
      <link href="/2024/04/28/python-%E5%88%97%E8%A1%A8%E6%8E%A8%E5%AF%BC%E3%80%81%E5%AD%97%E5%85%B8%E6%8E%A8%E5%AF%BC%E4%B8%8E%E9%9B%86%E5%90%88%E6%8E%A8%E5%AF%BC/"/>
      <url>/2024/04/28/python-%E5%88%97%E8%A1%A8%E6%8E%A8%E5%AF%BC%E3%80%81%E5%AD%97%E5%85%B8%E6%8E%A8%E5%AF%BC%E4%B8%8E%E9%9B%86%E5%90%88%E6%8E%A8%E5%AF%BC/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在Python编程的世界里，推导式（Comprehensions）以其简洁、高效的特性，成为编写优雅代码的不二法门。<strong>列表推导（List Comprehensions）、字典推导（Dictionary Comprehensions）和集合推导（Set Comprehensions）</strong>不仅能够显著提升代码的可读性，还能在处理数据时大大增强性能。</p></blockquote><h3 id="列表推导"><a href="#列表推导" class="headerlink" title="列表推导"></a>列表推导</h3><blockquote><p>列表推导式是Python中构造列表最直观且高效的方式。它允许你在一行代码中完成循环、条件判断以及新元素的生成。</p></blockquote><h4 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 平方数</span></span><br><span class="line">squares = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>)]<span class="built_in">print</span>(squares)  <span class="comment"># 输出：[1, 4, 9, 16, 25]</span></span><br></pre></td></tr></table></figure><h4 id="条件过滤"><a href="#条件过滤" class="headerlink" title="条件过滤"></a>条件过滤</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 筛选偶数</span></span><br><span class="line">even_numbers = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]<span class="built_in">print</span>(even_numbers)  <span class="comment"># 输出：[0, 2, 4, 6, 8]</span></span><br></pre></td></tr></table></figure><h4 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">matrix = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]transposed = [[row[i] <span class="keyword">for</span> row <span class="keyword">in</span> matrix] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(matrix[<span class="number">0</span>]))]<span class="built_in">print</span>(transposed)  <span class="comment"># 输出：[[1, 4, 7], [2, 5, 8], [3, 6, 9]]</span></span><br></pre></td></tr></table></figure><h3 id="字典推导"><a href="#字典推导" class="headerlink" title="字典推导"></a>字典推导</h3><blockquote><p>字典推导允许你快速创建字典，其中每个键值对都是根据表达式计算得出的</p></blockquote><h4 id="基本示例-1"><a href="#基本示例-1" class="headerlink" title="基本示例"></a>基本示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字母计数</span></span><br><span class="line">word = <span class="string">&quot;comprehension&quot;</span>char_count = &#123;char: word.count(char) <span class="keyword">for</span> char <span class="keyword">in</span> <span class="built_in">set</span>(word)&#125;<span class="built_in">print</span>(char_count)  <span class="comment"># 输出：&#123;&#x27;c&#x27;: 1, &#x27;o&#x27;: 2, &#x27;m&#x27;: 1, &#x27;p&#x27;: 1, &#x27;r&#x27;: 2, &#x27;e&#x27;: 2, &#x27;h&#x27;: 1, &#x27;n&#x27;: 1, &#x27;s&#x27;: 1, &#x27;i&#x27;: 1, &#x27;t&#x27;: 1&#125;</span></span><br></pre></td></tr></table></figure><h4 id="条件过滤-1"><a href="#条件过滤-1" class="headerlink" title="条件过滤"></a>条件过滤</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 年龄分类</span></span><br><span class="line">people = [&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">30</span>&#125;, &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">25</span>&#125;, &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Charlie&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">35</span>&#125;]age_groups = &#123;person[<span class="string">&quot;name&quot;</span>]: <span class="string">&quot;adult&quot;</span> <span class="keyword">if</span> person[<span class="string">&quot;age&quot;</span>] &gt;= <span class="number">18</span> <span class="keyword">else</span> <span class="string">&quot;minor&quot;</span> <span class="keyword">for</span> person <span class="keyword">in</span> people&#125;<span class="built_in">print</span>(age_groups)  <span class="comment"># 输出：&#123;&#x27;Alice&#x27;: &#x27;adult&#x27;, &#x27;Bob&#x27;: &#x27;adult&#x27;, &#x27;Charlie&#x27;: &#x27;adult&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="集合推导"><a href="#集合推导" class="headerlink" title="集合推导"></a>集合推导</h3><blockquote><p>集合推导提供了创建集合的便捷方式，尤其擅长于去重和执行集合间的操作。</p></blockquote><h4 id="去重平方"><a href="#去重平方" class="headerlink" title="去重平方"></a>去重平方</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>]unique_squares = &#123;x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> numbers&#125;<span class="built_in">print</span>(unique_squares)  <span class="comment"># 输出：&#123;1, 4, 9, 16, 25&#125;</span></span><br></pre></td></tr></table></figure><h4 id="交集平方"><a href="#交集平方" class="headerlink" title="交集平方"></a>交集平方</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;set2 = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;common_squares = &#123;x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> set1 &amp; set2&#125;<span class="built_in">print</span>(common_squares)  <span class="comment"># 输出：&#123;9, 16&#125;</span></span><br></pre></td></tr></table></figure><h3 id="高级技巧：嵌套与链式推导"><a href="#高级技巧：嵌套与链式推导" class="headerlink" title="高级技巧：嵌套与链式推导"></a><strong>高级技巧：嵌套与链式推导</strong></h3><blockquote><p>推导式可以相互嵌套，甚至与条件表达式相结合，实现复杂的逻辑。</p></blockquote><h4 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">matrix_a = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]]matrix_b = [[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>]]result = [[<span class="built_in">sum</span>(a*b <span class="keyword">for</span> a, b <span class="keyword">in</span> <span class="built_in">zip</span>(row_a, col_b)) <span class="keyword">for</span> col_b <span class="keyword">in</span> <span class="built_in">zip</span>(*matrix_b)] <span class="keyword">for</span> row_a <span class="keyword">in</span> matrix_a]<span class="built_in">print</span>(result)  <span class="comment"># 输出：[[19, 22], [43, 50]]</span></span><br></pre></td></tr></table></figure><h3 id="链式推导"><a href="#链式推导" class="headerlink" title="链式推导"></a>链式推导</h3><h4 id="复杂转换"><a href="#复杂转换" class="headerlink" title="复杂转换"></a><strong>复杂转换</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = [(<span class="string">&quot;apple&quot;</span>, <span class="number">2</span>), (<span class="string">&quot;banana&quot;</span>, <span class="number">4</span>), (<span class="string">&quot;cherry&quot;</span>, <span class="number">1</span>)]fruits_sorted_by_count = <span class="built_in">sorted</span>(    (fruit <span class="keyword">for</span> fruit, count <span class="keyword">in</span> data),    key=<span class="keyword">lambda</span> pair: pair[<span class="number">1</span>],    reverse=<span class="literal">True</span>)<span class="built_in">print</span>(fruits_sorted_by_count)  <span class="comment"># 输出：[&#x27;banana&#x27;, &#x27;apple&#x27;, &#x27;cherry&#x27;]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>持续集成和自动化部署</title>
      <link href="/2024/04/26/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%92%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
      <url>/2024/04/26/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%92%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="Jenkins自动化部署实现原理"><a href="#Jenkins自动化部署实现原理" class="headerlink" title="Jenkins自动化部署实现原理"></a>Jenkins自动化部署实现原理</h2><p><img src="/2024/04/26/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%92%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E5%8E%9F%E7%90%86.png"></p><h2 id="Jenkins部署环境"><a href="#Jenkins部署环境" class="headerlink" title="Jenkins部署环境"></a>Jenkins部署环境</h2><p>基本环境：</p><p>　　1.jdk环境，Jenkins是java语言开发的，因需要jdk环境。(必须)</p><p>　　2.git&#x2F;svn客户端，因一般代码是放在git&#x2F;svn服务器上的，我们需要拉取代码。</p><p>　　3.* maven客户端，因一般java程序是由maven工程，需要maven打包，当然也有其他打包方式，如：gradle</p><p>　　以上是自动化部署java程序jenkins需要的基本环境，请自己提前安装好</p><h3 id="java-jdk环境安装"><a href="#java-jdk环境安装" class="headerlink" title="java-jdk环境安装"></a>java-jdk环境安装</h3><p>pass</p><h3 id="Jenkins安装"><a href="#Jenkins安装" class="headerlink" title="Jenkins安装"></a>Jenkins安装</h3><p>pass</p><h2 id="jinkens基本操作"><a href="#jinkens基本操作" class="headerlink" title="jinkens基本操作"></a>jinkens基本操作</h2><h4 id="系统初始化配置"><a href="#系统初始化配置" class="headerlink" title="系统初始化配置"></a>系统初始化配置</h4><p><img src="/2024/04/26/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%92%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/%E7%B3%BB%E7%BB%9F%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE.png"></p><ol><li>Configure System (系统设置)</li></ol><p><img src="/2024/04/26/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%92%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE.png"></p><ol start="2"><li><p>Configure Global Security (全局安全配置)</p></li><li><p>Global Tool Configuration (全局工具配置 )</p></li></ol><p>配置maven，jdk，git 环境地址</p><ol start="4"><li>配置插件<ul><li>插件1：Publish over SSH</li><li>插件2：Deploy to container Plugin</li></ul></li></ol><p><img src="/2024/04/26/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%92%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/%E6%8F%92%E4%BB%B6%E4%B8%8B%E8%BD%BD.png"></p><h2 id="jenkins接口测试项目配置"><a href="#jenkins接口测试项目配置" class="headerlink" title="jenkins接口测试项目配置"></a>jenkins接口测试项目配置</h2><p>工作流： 从Github拉取最新代码 -&gt; 构建（运行测试）-&gt; 发布报告 -&gt; 发送邮件通知</p><h3 id="新建一个自由风格的项目"><a href="#新建一个自由风格的项目" class="headerlink" title="新建一个自由风格的项目"></a>新建一个自由风格的项目</h3><p><img src="/2024/04/26/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%92%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/%E5%88%9B%E5%BB%BA%E4%BB%BB%E5%8A%A1.png"></p><p><img src="/2024/04/26/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%92%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/%E8%87%AA%E5%8A%A8%E6%8B%89%E5%8F%96%E4%BB%A3%E7%A0%81.png" alt="image-20240715134543182"></p><h3 id="源码管理"><a href="#源码管理" class="headerlink" title="源码管理"></a>源码管理</h3><p><img src="/2024/04/26/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%92%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/git%E4%BB%93%E5%BA%93%E7%AE%A1%E7%90%86.png"></p><h3 id="信息身份认证，填入github用户名和密码保存"><a href="#信息身份认证，填入github用户名和密码保存" class="headerlink" title="信息身份认证，填入github用户名和密码保存"></a>信息身份认证，填入github用户名和密码保存</h3><p><img src="/2024/04/26/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%92%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/git%E4%BB%93%E5%BA%93%E7%AE%A1%E7%90%862.png"></p><h3 id="选择刚建立的身份认证"><a href="#选择刚建立的身份认证" class="headerlink" title="选择刚建立的身份认证"></a>选择刚建立的身份认证</h3><p><img src="/2024/04/26/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%92%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/git%E4%BB%93%E5%BA%93%E7%AE%A1%E7%90%863.png"></p><h3 id="构建（执行测试）"><a href="#构建（执行测试）" class="headerlink" title="构建（执行测试）"></a>构建（执行测试）</h3><p>增加构建步骤-选择执行Windows批处理命令</p><p><img src="/2024/04/26/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%92%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/%E6%9E%84%E5%BB%BA.png"></p><p><img src="/2024/04/26/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%92%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/%E6%9E%84%E5%BB%BA2.png"></p><h3 id="构建后操作（补充）"><a href="#构建后操作（补充）" class="headerlink" title="构建后操作（补充）"></a>构建后操作（补充）</h3><h3 id="执行测试"><a href="#执行测试" class="headerlink" title="执行测试"></a>执行测试</h3><p>点击立即构建-执行测试，可以在下边看到执行状态，红球为失败，蓝球为成功</p><p><img src="/2024/04/26/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%92%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/%E6%89%A7%E8%A1%8C%E7%8A%B6%E6%80%81.png"></p><p>点击执行记录的圆球可以查看执行log</p><p><img src="/2024/04/26/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%92%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA.png"></p>]]></content>
      
      
      <categories>
          
          <category> 持续集成 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 持续集成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Selenium-Web自动化测试工具</title>
      <link href="/2024/04/23/Selenium-Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
      <url>/2024/04/23/Selenium-Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="UI自动化测试工具-Selenium"><a href="#UI自动化测试工具-Selenium" class="headerlink" title="UI自动化测试工具 - Selenium"></a>UI自动化测试工具 - Selenium</h2><h3 id="Selenium的安装"><a href="#Selenium的安装" class="headerlink" title="Selenium的安装"></a>Selenium的安装</h3><ul><li><p>安装Python3（默认安装pip并添加环境变量）</p></li><li><p>pip install selenium</p></li><li><p>安装最新版本的Chrome</p></li><li><p>下载对应chrome浏览器的驱动chromedriver.exe，放到Python安装目录的Scripts文件夹下，或者其他有环境变量的地方</p></li><li><p>脚本测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="comment"># 初始化浏览器操作</span></span><br><span class="line">dr = webdriver.Chrome()</span><br><span class="line"><span class="comment"># 打开网页</span></span><br><span class="line">dr.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="Webdriver的工作原理"><a href="#Webdriver的工作原理" class="headerlink" title="Webdriver的工作原理"></a>Webdriver的工作原理</h3><p>Webdriver会在本地启动一套WebService服务并绑定一个动态端口，脚本运行时通过selenium将请求发送到Webdriver服务端，然后经过不同的浏览器驱动，转换为浏览器指令。</p><h3 id="浏览器基本操作"><a href="#浏览器基本操作" class="headerlink" title="浏览器基本操作"></a>浏览器基本操作</h3><ul><li>方法<ul><li>get()：打开网页</li><li>forward()：前进</li><li>back()： 后退</li><li>refresh()： 刷新页面</li><li>maximize_window()：最大化窗口</li><li>set_window_size()：设置窗口大小</li><li>close()： 关闭当前页面</li><li>quit(): 退出浏览器</li></ul></li><li>属性<ul><li>title：标题</li><li>current_url：当前网址</li><li>page_source：网页源代码</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()  <span class="comment"># 打开Chrome</span></span><br><span class="line"><span class="comment"># browser = webdriver.Firefox()  # 打开Firefox</span></span><br><span class="line"><span class="comment"># browser = webdriver.Edge()  # 打开Edge</span></span><br><span class="line"><span class="comment"># browser = webdriver.Ie()  # 打开Ie</span></span><br><span class="line"></span><br><span class="line">browser.get(<span class="string">&quot;http://www.baidu.com&quot;</span>) <span class="comment"># 打开网页</span></span><br><span class="line">browser.maximize_window()  <span class="comment"># 窗口最大化</span></span><br><span class="line"><span class="built_in">print</span>(browser.title)  <span class="comment"># 当前页面的标题</span></span><br><span class="line"><span class="built_in">print</span>(browser.current_url)  <span class="comment"># 当前url</span></span><br><span class="line"><span class="built_in">print</span>(browser.page_source)  <span class="comment"># 网页源代码</span></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">browser.get(<span class="string">&quot;http://115.28.108.130/control.html&quot;</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">browser.back()  <span class="comment"># 后退</span></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">browser.forward()  <span class="comment"># 前进</span></span><br><span class="line">browser.refresh()  <span class="comment"># 刷新</span></span><br><span class="line"></span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line">browser.quit()  <span class="comment"># 退出</span></span><br></pre></td></tr></table></figure><h3 id="页面元素定位-操作"><a href="#页面元素定位-操作" class="headerlink" title="页面元素定位&#x2F; 操作"></a>页面元素定位&#x2F; 操作</h3><h4 id="8种基本定位方式"><a href="#8种基本定位方式" class="headerlink" title="8种基本定位方式"></a>8种基本定位方式</h4><ul><li>通过id定位: find_element_by_id()</li><li>通过name定位: find_element_by_name()</li><li>通过class定位: find_element_by_class_name()</li><li>通过tag定位: find_element_by_tag_name()</li><li>通过link定位: find_element_by_link_text()</li><li>通过partial link定位: find_element_by_partial_link_text()</li><li>通过xpath定位: find_element_by_xpath()</li><li>通过css定位: find_element_by_css_selector()</li></ul><p>find_element_by_*()方法的使用上。这个方法已经被弃用，建议使用find_element()或find_elements()方法替代。</p><p>!!! 需要额外导入  from selenium.webdriver.common.by import By</p><ul><li>通过id定位: element &#x3D; driver.find_element(By.ID, ‘element_id’)</li><li>通过name定位: element &#x3D; driver.find_element(By.NAME, ‘element_name’)</li><li>通过class定位: element &#x3D; driver.find_element(By.CLASS_NAME, ‘element_class’)</li><li>通过tag定位: element &#x3D; driver.find_element(By.TAG_NAME, ‘element_tag’)</li><li>通过link定位: element &#x3D; driver.find_element(By.LINK_TEXT, ‘link_text’)</li><li>通过partial link定位: element &#x3D; driver.find_element(By.PARTIAL_LINK_TEXT, ‘partial_link_text’)</li><li>通过xpath定位: element &#x3D; driver.find_element(By.XPATH, ‘xpath_expression’)</li><li>通过css定位: element &#x3D; driver.find_element(By.CSS_SELECTOR, ‘css_selector’)</li></ul><h4 id="定位一组元素"><a href="#定位一组元素" class="headerlink" title="定位一组元素"></a>定位一组元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.maximize_window()</span><br><span class="line">browser.get(<span class="string">&quot;http://115.28.108.130/control.html&quot;</span>)</span><br><span class="line"></span><br><span class="line">l = browser.find_element(By.ID, <span class="string">&quot;u&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">    i.click()</span><br><span class="line">l[<span class="number">2</span>].click()</span><br><span class="line"></span><br><span class="line">lables = browser.find_element(By.TAG_NAME, <span class="string">&quot;label&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(lables[<span class="number">2</span>].text)</span><br></pre></td></tr></table></figure><h4 id="分层定位"><a href="#分层定位" class="headerlink" title="分层定位"></a>分层定位</h4><p>当一个元素不好定位时，可以先定位到容易定位的父级&#x2F;祖先级元素，然后使用父级&#x2F;祖先级元素继续定位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.maximize_window()</span><br><span class="line">browser.get(<span class="string">&quot;http://115.28.108.130/control.html&quot;</span>)</span><br><span class="line">fardiv = browser.find_element(By.CLASS_NAME, <span class="string">&quot;fathdiv&quot;</span>)  <span class="comment"># 先定位到父级元素</span></span><br><span class="line">labels = fardiv.find_element(By.TAG_NAME,<span class="string">&quot;label&quot;</span>)  <span class="comment"># 使用父级元素向下定位</span></span><br><span class="line"><span class="built_in">print</span>(labels[<span class="number">2</span>].text)</span><br></pre></td></tr></table></figure><h4 id="页面元素操作"><a href="#页面元素操作" class="headerlink" title="页面元素操作"></a>页面元素操作</h4><ul><li>link 链接<ul><li>click()</li></ul></li><li>input 输入框<ul><li>send_keys()： 输入</li><li>clear()： 清空输入框</li><li>get_attribute(“value”): 获取输入框的值</li></ul></li><li>button 按钮<ul><li>click()：</li><li>isEnabled(): 是否可用</li><li>submit()：type&#x3D;submit的按钮可以使用submit()同click()用于提交表单</li></ul></li><li>radio&#x2F;checkbox 单选&#x2F;复选框<ul><li>click(): 定位到选框可直接点击</li><li>is_displayed(): 是否展示</li><li>is_selected(): 是否选中状态</li></ul></li><li>select 下拉框(需要用Select)<ul><li>select_by_index(): 按索引选择选项</li><li>select_by_value(): 按value值选择选项</li><li>select_by_visiable_text(): 按选项名选择选项</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.maximize_window()</span><br><span class="line">browser.get(<span class="string">&quot;http://115.28.108.130/control.html&quot;</span>)</span><br><span class="line">area = Select(browser.find_element(By.ID, <span class="string">&quot;areaID&quot;</span>))</span><br><span class="line">area.select_by_visible_text(<span class="string">&quot;上海&quot;</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">area.select_by_index(<span class="number">1</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">area.select_by_value(<span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="万能的XPath"><a href="#万能的XPath" class="headerlink" title="万能的XPath"></a>万能的XPath</h4><p>XPath即XML路径语言，支持从xml或html中查找元素节点，使用XPath完全可以替代其他定位放式</p><ul><li><code>driver.find_element(By.XPATH，&#39;//*[@id=&quot;&quot;]&#39;)</code>等同于<code>find_element_by_id(&quot;&quot;)</code></li><li><code>driver.find_element(By.XPATH, &#39;//*[@name=&quot;&quot;]&#39;)</code>等同于<code>find_element_by_name(&quot;&quot;)</code></li><li><code>driver.find_element(By.XPATH, &#39;//*[@class=&quot;&quot;]&#39;)</code>等同于<code>find_element_by_class_name(&quot;&quot;)</code></li><li><code>driver.find_element(By.XPATH, &#39;//标签名&#39;)</code>等同于<code>find_element_by_tag_name(&quot;标签名&quot;)</code></li><li>&#96;&#96;driver.find_element(By.XPATH, ‘&#x2F;&#x2F;a[contains(text(),””)]’)<code>等同于</code>find_element_by_link_text(“”)&#96;</li><li><code>driver.find_element(By.XPATH, &#39;//*[@id=&quot;&quot;]&#39;)</code>等同于<code>find_element_by_partial_link_text(&quot;&quot;)</code></li></ul><p>定位标签</p><ol><li>绝对路径+索引 &#x2F;html&#x2F;body&#x2F;div&#x2F;form&#x2F;div[3] 逐层写 结合index index从1开始</li><li>相对路径+属性(推荐) &#x2F;&#x2F;div[@id&#x3D;”firstdiv”] 支持多属性结合定位</li><li>通过子标签 &#x2F;&#x2F;div[a] 包含链接的div</li><li>通过文本定位 &#x2F;&#x2F;<em>[text()&#x3D;”第二个div”] 包含 &#x2F;&#x2F;</em>[contains(text(), “username”)]</li><li>通过相对位置 &#x2F;&#x2F;*[text()&#x3D;”第二个div”]&#x2F;..&#x2F;table</li><li>轴 &#x2F;&#x2F;<em>[text()&#x3D;”王五”]&#x2F;following::a following后面的<br>&#x2F;&#x2F;</em>[text()&#x3D;”用户名”]&#x2F;following::input 用户名后的第一个输入框</li></ol><h4 id="XPath-语法"><a href="#XPath-语法" class="headerlink" title="XPath 语法"></a>XPath 语法</h4><h5 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h5><ul><li>绝对路径： &#x2F;html&#x2F;body&#x2F;div</li><li>&#x2F;&#x2F;相对路径： &#x2F;&#x2F;div&#x2F;form &#x2F;&#x2F;*&#x2F;form 路径中可以使用 *代表任意标签</li><li>.当前路径： &#x2F;&#x2F;div&#x2F;form&#x2F;. 等同于&#x2F;&#x2F;div&#x2F;form</li><li>..上级路径: &#x2F;&#x2F;div&#x2F;form&#x2F;.. 等同于&#x2F;&#x2F;div</li></ul><h5 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h5><ul><li>从1开始： &#x2F;html&#x2F;body&#x2F;div[2] &#x2F;&#x2F;div[1]&#x2F;form</li></ul><h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5><ul><li>@属性名：定位包含特定属性名的标签, 如<code>//input[@class]</code></li><li>@属性名&#x3D;”属性值”：定位特定属性名&#x3D;属性值的标签，如<code>//input[@id=&quot;kw&quot;]</code></li><li>@*&#x3D;”属性值”：定位任意属性名&#x3D;属性值的标签, 如 <code>//input[@*=&#39;kw&#39;]</code></li><li>多属性结合定位：<code>//input[@id=&quot;kw&quot; and @class=&#39;kw-class&#39;]</code>或<code>//input[@id=&quot;kw&quot;][@class=&quot;kw-class&quot;]</code> (and处也支持使用or，表示或)</li></ul><h5 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h5><ul><li>text()：标签中的文本值，如<code>//a[text()=&quot;百度首页走起~&quot;]</code></li><li>contains(): 包含，如<code>//a[contains(text(), &quot;百度首页&quot;)]</code></li><li>starts-with(): 以**开头，如<code>//a[starts-with(text(), &quot;百度&quot;]</code></li><li>last(): 最后一个， 如<code>//div[last()]</code></li></ul><h5 id="轴"><a href="#轴" class="headerlink" title="轴"></a>轴</h5><ul><li>parent: 父标签</li><li>child：子标签</li><li>following: 后面的，如：<code>//*[text()=&quot;用户名&quot;]/following::input[1] # 紧邻文本为用户名的输入框</code></li><li>preceding：前面的</li></ul><h4 id="CSS-selector"><a href="#CSS-selector" class="headerlink" title="CSS selector"></a>CSS selector</h4><p>css选择器, 比xpath快<br>find_element(By.CSS_SELECTOR, “#firstdiv”)</p><h5 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h5><ol><li>id #firstdiv</li><li>class .stuname</li><li>标签名 div <code>*</code>可以标识任意标签</li></ol><h5 id="位置-不支持向上"><a href="#位置-不支持向上" class="headerlink" title="位置 不支持向上"></a>位置 不支持向上</h5><ol><li>下级 #firstdiv&gt;form&gt;div &gt;或空格</li><li><ul><li>同级元素</li></ul></li><li>索引: :first-child() :nth-child(n) #firstdiv&gt;form&gt;div:nth-child(3)</li></ol><h5 id="属性-不支持判断文本"><a href="#属性-不支持判断文本" class="headerlink" title="属性 不支持判断文本"></a>属性 不支持判断文本</h5><ol><li>属性 [type&#x3D;”password”] [name&#x3D;””]</li><li>属性 ^&#x3D; 以 开头 $&#x3D; 以 结尾 *&#x3D; 包含</li><li>input 常见属性: checked enabled</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.maximize_window()</span><br><span class="line">driver.get(<span class="string">&quot;http://115.28.108.130/control.html&quot;</span>)</span><br><span class="line"></span><br><span class="line">div = driver.find_element(By.CSS_SELECTOR, <span class="string">&quot;#firstdiv&gt;form&gt;div:nth-child(2)&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(div.text)</span><br><span class="line">table = driver.find_element(By.CSS_SELECTOR, <span class="string">&quot;#firstdiv&gt;form&gt;div+table&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(table.tag_name)</span><br></pre></td></tr></table></figure><h4 id="切换窗口"><a href="#切换窗口" class="headerlink" title="切换窗口"></a>切换窗口</h4><ol><li>switch_to.alert(): 切到弹出框</li><li>switch_to.frame(): 切入框架</li><li>switch_to.window(): 切换窗口<ul><li>window_handles: 所有窗口句柄 列表</li><li>current_window_handle: 当前窗口句柄</li></ul></li></ol><h5 id="只有两个窗口"><a href="#只有两个窗口" class="headerlink" title="只有两个窗口"></a>只有两个窗口</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">all</span> = driver.window_handles  <span class="comment"># 所有窗口句柄</span></span><br><span class="line">old = driver.current_window_handle  <span class="comment"># 当前窗口出版</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">all</span>:  <span class="comment"># h 是当前从all中取出来的句柄</span></span><br><span class="line">    <span class="keyword">if</span> h != old:  <span class="comment"># 如果取出来的不等于老窗口</span></span><br><span class="line">        driver.switch_to.window(h)   <span class="comment"># 切换到新窗口</span></span><br></pre></td></tr></table></figure><h5 id="多个窗口"><a href="#多个窗口" class="headerlink" title="多个窗口"></a>多个窗口</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">all</span> = driver.window_handles</span><br><span class="line"><span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">all</span>:</span><br><span class="line">    driver.switch_to.window(h)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;腾讯课堂&quot;</span> <span class="keyword">in</span> driver.title:</span><br><span class="line">        <span class="keyword">break</span>  <span class="comment"># 跳出循环</span></span><br></pre></td></tr></table></figure><h4 id="动作链-模拟鼠标操作"><a href="#动作链-模拟鼠标操作" class="headerlink" title="动作链 模拟鼠标操作"></a>动作链 模拟鼠标操作</h4><ul><li>click(): 单击</li><li>double_click(): 双击</li><li>context_click(): 右击</li><li>move_to_element(a): 移动到元素a</li><li>drag_and_drop(a,b): 拖放,将a拖动到b元素位置</li><li>click_and_hold(): 单击并按住鼠标左键 release(): 松开鼠标</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line">...</span><br><span class="line">menu = driver.find_element(By,XPATH, <span class="string">&quot;//input[@value=&#x27;下拉菜单&#x27;]&quot;</span>)</span><br><span class="line">ActionChains(driver).move_to_element(menu).perform()</span><br><span class="line">driver.find_element(By.LINK_TEST, <span class="string">&quot;submit&quot;</span>).click()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">ActionChains(driver): 创建一个 ActionChains 对象，该对象用于执行各种鼠标和键盘操作。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">.move_to_element(menu): 使用 move_to_element 方法将鼠标移动到指定的元素上，其中 menu 是要移动到的目标元素。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">.perform(): 执行该操作。在这里表示实际触发鼠标移动事件，使得浏览器中的光标移动到指定元素上。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="Keys模拟键盘"><a href="#Keys模拟键盘" class="headerlink" title="Keys模拟键盘"></a>Keys模拟键盘</h4><p>​!!! 键盘模拟需要额外导入库 from selenium.webdriver.common.keys import Keys</p><ul><li><p>Keys模拟键盘</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在输入框中输入文本，并按下回车 , 输入问本是可选参数</span></span><br><span class="line">element.send_keys(<span class="string">&quot;Hello&quot;</span>, Keys.ENTER)</span><br></pre></td></tr></table></figure></li><li><p><code>Keys.TAB</code>: 模拟 Tab 键</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 向输入框中追加文本并按下 Tab 键，输入问本是可选参数</span></span><br><span class="line">element.send_keys(<span class="string">&quot;World&quot;</span>, Keys.TAB)</span><br></pre></td></tr></table></figure></li><li><p><code>Keys.SPACE</code>: 模拟空格键，常用于触发按钮点击或选择复选框等操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模拟 Ctrl+A （全选）</span></span><br><span class="line">element.send_keys(Keys.CONTROL, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment"># 模拟 Ctrl+C （复制）</span></span><br><span class="line">element.send_keys(Keys.CONTROL, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="comment"># 模拟 Ctrl+V （粘贴）</span></span><br><span class="line">element.send_keys(Keys.CONTROL, <span class="string">&#x27;v&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>Keys.BACK_SPACE</code>: 删除一个字符（退格键）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除输入框中的最后一个字符（相当于按一次退格键）</span></span><br><span class="line">element.send_keys(Keys.BACK_SPACE)</span><br></pre></td></tr></table></figure></li><li><p><code>Keys.DELETE</code>: 删除一个字符（删除键）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除输入框中的第一个字符（相当于按一次删除键）</span></span><br><span class="line">element.send_keys(Keys.DELETE)</span><br></pre></td></tr></table></figure></li><li><p><code>Keys.ARROW_DOWN</code>, <code>Keys.ARROW_UP</code>, <code>keys.ARROW_LEFT</code>, <code>keys.ARROW_RIGHT</code>: 分别模拟向下、向上、向左、向右箭头方向键</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在下拉列表中选择第一项，使用箭头向下定位到目标选项然后再按 Enter 键确认选择。</span></span><br><span class="line">input_element = driver.find_element(By.ID,<span class="string">&#x27;dropdown&#x27;</span>)</span><br><span class="line">input_element.click()</span><br><span class="line">input_element.send_keys(Keys.ENTER)</span><br></pre></td></tr></table></figure></li></ul><h4 id="下拉框定位选择"><a href="#下拉框定位选择" class="headerlink" title="下拉框定位选择"></a>下拉框定位选择</h4><p><strong>使用Select 方法</strong></p><ol><li>定位到下拉列表的元素。</li><li>使用 <code>Select</code> 类来操作下拉列表。</li><li>使用 <code>select_by_*</code> 方法选择相应的选项。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> Select</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 WebDriver 对象</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开网页</span></span><br><span class="line">driver.get(<span class="string">&quot;http://example.com&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定位下拉列表元素</span></span><br><span class="line">select_element = driver.find_element_by_id(<span class="string">&quot;dropdown&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 Select 对象</span></span><br><span class="line">select = Select(select_element)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过索引选择选项（索引从 0 开始）</span></span><br><span class="line">select.select_by_index(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过可见文本选择选项</span></span><br><span class="line">select.select_by_visible_text(<span class="string">&quot;Option 2&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过值选择选项</span></span><br><span class="line">select.select_by_value(<span class="string">&quot;option2&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭浏览器</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h4 id="执行-JavaScript代码"><a href="#执行-JavaScript代码" class="headerlink" title="执行 JavaScript代码"></a>执行 JavaScript代码</h4><p>在某些情况下，可能需要执行页面上的 JavaScript 来获取信息或修改页面状态</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.execute_script(<span class="string">&quot;window.scrollTo(0, document.body.scrollHeight);&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="弹出框处理"><a href="#弹出框处理" class="headerlink" title="弹出框处理"></a>弹出框处理</h4><h5 id="allert警告框"><a href="#allert警告框" class="headerlink" title="allert警告框"></a>allert警告框</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert = driver.switch_to.alert()</span><br><span class="line">alert.accept()  <span class="comment"># 确认 或alert.dismiss() 关闭</span></span><br></pre></td></tr></table></figure><h5 id="confirm确认框"><a href="#confirm确认框" class="headerlink" title="confirm确认框"></a>confirm确认框</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">confirm = driver.switch_to.alert()</span><br><span class="line">confirm.accept()  <span class="comment"># 确认 或alert.dismiss() 取消</span></span><br></pre></td></tr></table></figure><h5 id="propmt提示框"><a href="#propmt提示框" class="headerlink" title="propmt提示框"></a>propmt提示框</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">propmt = driver.switch_to.alert()</span><br><span class="line">propmt.send_keys() 输入</span><br><span class="line">propmt.accept()  <span class="comment"># 确认 或alert.dismiss() 关闭</span></span><br></pre></td></tr></table></figure><h4 id="框架页面处理-iframe"><a href="#框架页面处理-iframe" class="headerlink" title="框架页面处理 - iframe"></a>框架页面处理 - iframe</h4><ul><li>iframe: 嵌入在网页body中的单独框架（框架拥有一套独立的html代码）</li><li>frameset: 框架组，包含多个frame</li><li>frame：每个frame引用一个独立的网页</li></ul><p>因为frame&#x2F;iframe框架是一套独立的网页，因此frame&#x2F;iframe中的元素不能直接定位到</p><ul><li>driver.switch_to.frame(name&#x2F;id&#x2F;index&#x2F;Element)<ul><li>name: frame&#x2F;iframe的name属性</li><li>id: frame&#x2F;iframe的id属性</li><li>index: 如：0，第一个frame</li><li>Element: 定位到的frame&#x2F;iframe，再切换到指定frame</li></ul></li><li>driver.switch_to.parent_frame(): 切换到父级frame, 子frame之间不能相互切换</li><li>driver.switch_to.default_content(): 跳出所有frame</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.maximize_window()</span><br><span class="line">browser.get(<span class="string">&quot;http://www.w3school.com.cn/tiy/t.asp?f=html_frame_mix&quot;</span>)</span><br><span class="line"></span><br><span class="line">browser.switch_to.frame(<span class="string">&quot;i&quot;</span>)  <span class="comment">#总的frame</span></span><br><span class="line">browser.switch_to.frame(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(browser.find_element(By.TAG_NAME, <span class="string">&quot;h3&quot;</span>).text)</span><br><span class="line">browser.switch_to.parent_frame()</span><br><span class="line">browser.switch_to.frame(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(browser.find_element(By.TAG_NAME, <span class="string">&quot;h3&quot;</span>).text)</span><br><span class="line">browser.switch_to.parent_frame()</span><br><span class="line">browser.switch_to.frame(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(browser.find_element(By.TAG_NAME, <span class="string">&quot;h3&quot;</span>).text)</span><br><span class="line">browser.switch_to.default_content()</span><br></pre></td></tr></table></figure><h4 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h4><p>可以用来记录、验证页面内容、布局或状态。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 截取整个页面的截图  </span></span><br><span class="line">driver.save_screenshot(<span class="string">&#x27;screenshot.png&#x27;</span>)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 截取特定元素的截图  </span></span><br><span class="line">element = driver.find_element_by_css_selector(<span class="string">&#x27;.example-element&#x27;</span>)  </span><br><span class="line">element.screenshot(<span class="string">&#x27;element_screenshot.png&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="使用期望条件-except-conditions"><a href="#使用期望条件-except-conditions" class="headerlink" title="使用期望条件(except_conditions)"></a>使用期望条件(except_conditions)</h4><ul><li>presence_of_element_located((By.XPATH,””)): 直到元素出现并能定位到</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">view = wait.until(EC.presence_of_element_located((By.XPATH,<span class="string">&#x27;//td[text()=&quot;王五&quot;]/../td[4]/a&#x27;</span>)))</span><br><span class="line">view.click()</span><br></pre></td></tr></table></figure><h4 id="修改js，修改网页"><a href="#修改js，修改网页" class="headerlink" title="修改js，修改网页"></a>修改js，修改网页</h4><ol><li><p>隐藏元素<br>selenium默认定位不到隐藏元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 移除相应属性</span></span><br><span class="line">driver.execute_script(</span><br><span class="line">    document.querySelector(<span class="string">&quot;#hd1&quot;</span>).removeAttribute(<span class="string">&quot;hidden&quot;</span>);</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>不可输入&#x2F;点击(移除readonly&#x2F;disable属性)</p></li><li><p>拖动滚动条(流加载页面) document.documentElement.scrollTop&#x3D;10000;</p></li><li><p>富文本框</p></li><li><p>更改元素样式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过js修改</span></span><br><span class="line">js2 = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">var q = document.getElementById(&quot;buttonID&quot;);</span></span><br><span class="line"><span class="string">q.value=&quot;hello&quot;;</span></span><br><span class="line"><span class="string">q.style.backgroundColor=&quot;red&quot;;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">driver.execute_script(js2)</span><br></pre></td></tr></table></figure></li><li><p>为一些不好定位的元素添加id</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">q = document.querySelector(<span class="string">&quot;#firstdiv&gt;form&gt;table&quot;</span>);</span><br><span class="line">q.<span class="built_in">id</span> = <span class="string">&quot;table1&quot;</span>;</span><br></pre></td></tr></table></figure></li></ol><h4 id="日期控件"><a href="#日期控件" class="headerlink" title="日期控件"></a>日期控件</h4><ol><li>逐个点击</li><li>用js修改为可输入,输入时间</li></ol><h4 id="上传下载"><a href="#上传下载" class="headerlink" title="上传下载"></a>上传下载</h4><ol><li>上传直接输入(不能输入用js修改), 下载直接点击</li><li>借助其他工具</li></ol><h4 id="等待"><a href="#等待" class="headerlink" title="等待"></a>等待</h4><h5 id="强制等待"><a href="#强制等待" class="headerlink" title="强制等待"></a>强制等待</h5><p>强制等待（Hard Wait）是一种简单粗暴的等待方式，它指定了一个固定的时间来暂停程序的执行，而不管等待的条件是否满足。在 Selenium 中，虽然它不推荐使用，但有时仍然可以根据特定需求使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time  </span><br><span class="line">time.sleep(<span class="number">5</span>)  <span class="comment"># 强制等待 5 秒</span></span><br></pre></td></tr></table></figure><ul><li><p>使用场景</p><p>强制等待通常在以下情况下使用：</p><ol><li><strong>调试和测试</strong>：用于调试时暂停执行，观察页面或程序的状态。</li><li><strong>非常规等待需求</strong>：某些特定的场景下，可能需要等待一个固定时间，例如等待页面完全加载或执行 JavaScript 后。</li></ol></li><li><p>注意事项</p><ul><li><strong>不推荐使用</strong>：Selenium 提供了更智能和灵活的等待机制（显式等待和隐式等待），因此强制等待并不被推荐，特别是在自动化测试中。</li><li><strong>不灵活</strong>：强制等待是固定时间，无法根据实际页面加载速度或条件变化来自动调整等待时间。</li><li><strong>性能影响</strong>：长时间的强制等待可能会增加测试执行的总体时间，并且可能导致测试执行不稳定。</li></ul></li></ul><h5 id="显示等待"><a href="#显示等待" class="headerlink" title="显示等待"></a>显示等待</h5><p>显式等待是针对某个特定的条件等待，例如元素的可见性、可点击、出现等。</p><ul><li><strong>实现方式</strong>：通过 <code>WebDriverWait</code> 类结合 <code>expected_conditions</code> 模块中的条件来实现。常见的条件有 <code>presence_of_element_located</code>（元素出现）、<code>element_to_be_clickable</code>（元素可点击）等。</li><li><strong>使用场景</strong>：适合用于等待特定元素加载完成、页面状态变化等情况。通常在需要等待的具体操作之前使用。</li><li><strong>等待时间</strong>：需要显式指定等待的最长时间（如例子中的 10 秒），超过这个时间仍未满足条件则抛出 <code>TimeoutException</code> 异常。</li><li><strong>灵活性</strong>：因为可以精确地控制等待条件和时间，因此更为灵活，能够精确地应对不同的等待情况。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By  </span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait  </span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC  </span><br><span class="line"></span><br><span class="line">element = WebDriverWait(driver, <span class="number">10</span>).until(  </span><br><span class="line">    EC.presence_of_element_located((By.ID, <span class="string">&quot;element_id&quot;</span>))  </span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="隐式等待"><a href="#隐式等待" class="headerlink" title="隐式等待"></a>隐式等待</h5><p>隐式等待是设置一个<strong>全局等待时间</strong>，在查找元素时，如果 Selenium 没有立即找到元素，则会在指定的等待时间内轮询查找元素，直到找到为止或超时。</p><ul><li><strong>实现方式</strong>：通过 <code>implicitly_wait</code> 方法设置全局等待时间。一旦设置，对后续的所有 <code>find_element</code> 或 <code>find_elements</code> 方法都生效，直到 WebDriver 被关闭。</li><li><strong>使用场景</strong>：适合应对整个页面加载时间不确定的情况，可以减少代码中显式等待的重复使用。</li><li><strong>等待时间</strong>：设置的时间是最长等待时间，如果在这个时间内找到了元素，则会立即执行后续操作，否则抛出 <code>NoSuchElementException</code> 异常。</li><li><strong>全局设置</strong>：一旦设置，对所有后续的查找元素操作都生效，因此适合用于整个测试过程中一致的等待需求。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.implicitly_wait(<span class="number">10</span>)  <span class="comment"># 设置隐式等待时间为 10 秒</span></span><br></pre></td></tr></table></figure><h5 id="条件等待"><a href="#条件等待" class="headerlink" title="条件等待"></a>条件等待</h5><p>条件等待（Conditional Wait）是 Selenium 中一种高级的等待方式，它允许测试脚本根据特定的条件等待页面元素状态的变化或某些预期的结果。与显式等待和隐式等待不同，条件等待提供了更灵活和精确的控制，适用于一些复杂的场景。</p><ul><li><p>实现方式</p><p>条件等待依赖于 Selenium 提供的 <code>WebDriverWait</code> 类和 <code>expected_conditions</code> 模块，它允许测试脚本根据特定的条件来等待，例如元素的可见性、元素的文本内容变化、元素的点击状态等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By  </span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait  </span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">使用 WebDriverWait 类来设置等待的最长时间，并指定等待的条件（例如 visibility_of_element_located、text_to_be_present_in_element 等）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">element = WebDriverWait(driver, <span class="number">10</span>).until(  </span><br><span class="line">    EC.visibility_of_element_located((By.ID, <span class="string">&quot;element_id&quot;</span>))  </span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>常用的等待条件</p><ul><li><code>presence_of_element_located(locator)</code>：等待页面中至少一个元素出现。</li><li><code>visibility_of_element_located(locator)</code>：等待元素在页面中可见。</li><li><code>element_to_be_clickable(locator)</code>：等待元素可点击。</li><li><code>text_to_be_present_in_element(locator, text)</code>：等待特定元素中出现特定的文本。</li><li><code>title_contains(title)</code>：等待页面标题包含特定文本。</li></ul></li><li><p>使用场景</p><ul><li><strong>复杂的用户交互流程</strong>：等待某个按钮变为可点击状态，然后执行点击操作。</li><li><strong>动态加载的内容</strong>：等待某个异步加载的区块出现，然后验证其内容。</li><li><strong>表单提交和响应</strong>：等待页面提交后的特定结果或反馈信息。</li></ul></li></ul><h5 id="使用-JavaScript-等待页面状态"><a href="#使用-JavaScript-等待页面状态" class="headerlink" title="使用 JavaScript 等待页面状态"></a>使用 JavaScript 等待页面状态</h5><p>JavaScript 的异步请求或更新页面的状态。可以通过执行 JavaScript 来判断页面是否完成了特定的异步操作，从而等待页面状态的变化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By  </span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait  </span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待页面加载完成  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wait_for_page_load</span>(<span class="params">driver</span>):  </span><br><span class="line">    timeout = <span class="number">10</span>  </span><br><span class="line">    driver.execute_script(<span class="string">&quot;return document.readyState&quot;</span>)  <span class="comment"># 检查页面状态  </span></span><br><span class="line">    WebDriverWait(driver, timeout).until(<span class="keyword">lambda</span> s: s.execute_script(<span class="string">&quot;return document.readyState&quot;</span>) == <span class="string">&quot;complete&quot;</span>)  </span><br><span class="line"></span><br><span class="line">wait_for_page_load(driver)</span><br></pre></td></tr></table></figure><h5 id="区别总结"><a href="#区别总结" class="headerlink" title="区别总结"></a>区别总结</h5><p><strong>1. 精确度比较：</strong></p><ul><li>强制等待<ul><li><strong>精确度</strong>：最低。因为强制等待是固定时间内暂停程序执行，不考虑页面元素状态或条件是否已满足。</li></ul></li><li>显示等待<ul><li><strong>精确度</strong>：高。显示等待允许程序等待直到特定条件成立，例如元素可见、文本出现等，因此能够精确控制等待的时间点。</li></ul></li><li>隐式等待<ul><li><strong>精确度</strong>：较低。隐式等待是��局性设置，无法针对特定的元素或操作设定不同的等待时间，只能等待页面加载完成的最长时间。</li></ul></li><li>条件等待<ul><li><strong>精确度</strong>：非常高。条件等待允许根据具体的页面状态或预期结果等待，可以精确等待某个特定的条件或操作的完成。</li></ul></li></ul><p><strong>2. 使用场景比较：</strong></p><ul><li>强制等待<ul><li><strong>适用场景</strong>：调试时、简单脚本中可能会用到，不建议在自动化测试中大量使用，因为它会导致测试脚本的执行速度变慢。</li></ul></li><li>显示等待<ul><li><strong>适用场景</strong>：复杂的页面交互、动态内容加载、需要精确等待某个特定条件的场景下使用，如等待元素可见、文本出现等。</li></ul></li><li>隐式等待<ul><li><strong>适用场景</strong>：简单的页面加载等待，适合整体页面加载较为稳定且操作不需要太多精确等待的情况。</li></ul></li><li>条件等待<ul><li><strong>适用场景</strong>：需要根据页面实际状态或特定操作的完成来决定下一步操作的复杂场景，例如等待元素状态变化、异步操作完成等。</li></ul></li></ul><p><strong>3. 异常处理比较：</strong></p><ul><li>强制等待<ul><li><strong>异常处理</strong>：不适用异常处理，因为它是通过固定时间暂停程序执行，不会抛出异常。</li></ul></li><li>显示等待<ul><li><strong>异常处理</strong>：适用 <code>TimeoutException</code> 异常处理，当等待超时时会抛出该异常，可以在异常处理中进行重试或其他操作。</li></ul></li><li>隐式等待<ul><li><strong>异常处理</strong>：不直接抛出等待超时的异常，但操作超过设置的等待时间后可能会导致元素定位失败或其他异常，需要进行适当的错误处理。</li></ul></li><li>条件等待<ul><li><strong>异常处理</strong>：与显示等待类似，适用 <code>TimeoutException</code> 异常处理，当等待条件不满足时会抛出异常，可以通过异常处理来捕获并处理。</li></ul></li></ul><h3 id="常见错误怎么处理"><a href="#常见错误怎么处理" class="headerlink" title="常见错误怎么处理"></a>常见错误怎么处理</h3><ol><li>看报什么错 1. 元素定位不到 2. 元素不可见</li><li>看有没有frame&#x2F;iframe</li><li>操作前 sleep()</li><li>看看元素或者上级&#x2F;上上级元素是否不可及</li></ol><h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><p>rameset: 框架组,用来布局框架<br>frame: 具体的一个框架,一般放在frameset中<br>iframe: 内联框架, 可以嵌入到其他网页的body中</p><h4 id="切入-层层切入"><a href="#切入-层层切入" class="headerlink" title="切入 层层切入"></a>切入 层层切入</h4><p>switch_to.frame() # 只用切 iframe&#x2F;frame 不用切frameset</p><ol><li>id</li><li>name</li><li>index</li><li>定位到的frame元素 find_element_by_id(“parent”)</li></ol><h5 id="切出"><a href="#切出" class="headerlink" title="切出"></a>切出</h5><ul><li>switch_to.parent_frame() # 跳到上级 多层框架推荐使用</li><li>switch_to.defaut_content() # 跳出所有 一层框架推荐使用 </li><li>也可以用switch_to.parent_frame()跳出框架</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.maximize_window()</span><br><span class="line">driver.get(<span class="string">&quot;http://115.28.108.130/control.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># iframe: 内联框架, 可以嵌入到其他网页的正文中,</span></span><br><span class="line"><span class="comment"># frameset: 框架组,用来布局,可以嵌套,不能嵌入到body中,</span></span><br><span class="line"><span class="comment"># frame,框架,需要放到frameset中</span></span><br><span class="line"><span class="comment"># 只用切iframe及frame, frameset是用来布局的,不用切</span></span><br><span class="line">driver.switch_to.frame(<span class="string">&quot;parent_frame&quot;</span>)</span><br><span class="line">driver.switch_to.frame(<span class="string">&quot;left&quot;</span>)</span><br><span class="line">driver.find_element(By.LINK_TEST, <span class="string">&quot;链接1&quot;</span>).click()</span><br><span class="line"></span><br><span class="line">driver.switch_to.parent_frame()  <span class="comment"># 这里不用swith_to.default_content(),不然还要再切到parent_frame</span></span><br><span class="line">driver.switch_to.frame(<span class="string">&quot;main&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(driver.find_element(By.TAG_NAME, <span class="string">&quot;h2&quot;</span>).text)</span><br><span class="line"><span class="comment"># print(driver.find_element(By.XPATH, &quot;/html/body/h2&quot;).text)</span></span><br><span class="line"></span><br><span class="line">sleep(<span class="number">5</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h3 id="结合浏览器插件使用"><a href="#结合浏览器插件使用" class="headerlink" title="结合浏览器插件使用"></a>结合浏览器插件使用</h3><blockquote><p>使用浏览器插件可以极大地增强 Selenium 自动化测试的功能和灵活性。</p></blockquote><h4 id="Chrome-插件"><a href="#Chrome-插件" class="headerlink" title="Chrome 插件"></a>Chrome 插件</h4><ol><li><p>Chrome DevTools Protocol (CDP)</p><p>Chrome DevTools Protocol 允许开发者与 Chrome 浏览器进行通信和交互，通过 CDP 可以实现诸如网络监控、性能分析、页面审查等高级功能。在 Selenium 中，可以通过 PyChromeDevTools 或 <code>selenium-requests</code> 等库结合 CDP 来实现更复杂的操作。</p><p>案例：使用 PyChromeDevTools 来启用网络截获和模拟网络条件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pychromedevtools <span class="keyword">import</span> Chrome  </span><br><span class="line"></span><br><span class="line">chrome = Chrome()  </span><br><span class="line">chrome.Network.enable()  </span><br><span class="line">chrome.Network.emulateNetworkConditions(  </span><br><span class="line">    offline=<span class="literal">False</span>,  </span><br><span class="line">    latency=<span class="number">200</span>,  </span><br><span class="line">    downloadThroughput=<span class="number">1024</span> * <span class="number">1024</span>,  </span><br><span class="line">    uploadThroughput=<span class="number">512</span> * <span class="number">1024</span>  </span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>Chrome 浏览器扩展</p><p>可以通过安装 Chrome 浏览器扩展来模拟用户行为或改变页面内容，例如广告拦截、自动填充表单等。这些扩展可以通过 Selenium 控制浏览器来加载和使用。</p><p>案例：使用 Chrome 浏览器扩展可以拦截广告或修改页面内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver  </span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.service <span class="keyword">import</span> Service  </span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options  </span><br><span class="line"></span><br><span class="line">chrome_options = Options()  </span><br><span class="line">chrome_options.add_extension(<span class="string">&#x27;/path/to/extension.crx&#x27;</span>)  <span class="comment"># 添加扩展的路径  </span></span><br><span class="line"></span><br><span class="line">driver_path = <span class="string">&#x27;/path/to/chromedriver&#x27;</span>  </span><br><span class="line">service = Service(driver_path)  </span><br><span class="line">driver = webdriver.Chrome(service=service, options=chrome_options)  </span><br><span class="line">driver.get(<span class="string">&#x27;https://example.com&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol><h4 id="Firefox-插件"><a href="#Firefox-插件" class="headerlink" title="Firefox 插件"></a>Firefox 插件</h4><ol><li><p>使用 Firefox 扩展</p><p>Firefox 扩展可以通过 <code>moz:firefoxOptions</code> 配置项来添加到 FirefoxProfile 中，然后传递给 Selenium WebDriver。</p><p>案例：使用 Firefox 扩展来模拟用户操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver  </span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.firefox.service <span class="keyword">import</span> Service  </span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.firefox.options <span class="keyword">import</span> Options  </span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.firefox.firefox_profile <span class="keyword">import</span> FirefoxProfile  </span><br><span class="line"></span><br><span class="line">firefox_profile = FirefoxProfile()  </span><br><span class="line">firefox_profile.add_extension(<span class="string">&#x27;/path/to/extension.xpi&#x27;</span>)  <span class="comment"># 添加扩展的路径  </span></span><br><span class="line"></span><br><span class="line">firefox_options = Options()  </span><br><span class="line">firefox_options.profile = firefox_profile  </span><br><span class="line"></span><br><span class="line">driver_path = <span class="string">&#x27;/path/to/geckodriver&#x27;</span>  </span><br><span class="line">service = Service(driver_path)  </span><br><span class="line">driver = webdriver.Firefox(service=service, options=firefox_options)  </span><br><span class="line">driver.get(<span class="string">&#x27;https://example.com&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol><h3 id="自动浏览器驱动下载-webdriver-manager"><a href="#自动浏览器驱动下载-webdriver-manager" class="headerlink" title="自动浏览器驱动下载 - (webdriver-manager)"></a>自动浏览器驱动下载 - (webdriver-manager)</h3><p><code>webdriver-manager</code> 是一个方便用于自动下载和管理浏览器驱动程序，例如 ChromeDriver、GeckoDriver 等，这些驱动程序用于 Selenium WebDriver 控制相应的浏览器。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install webdriver_manager</span><br></pre></td></tr></table></figure><h4 id="使用-webdriver-manager-ChromeDriver-Chrome"><a href="#使用-webdriver-manager-ChromeDriver-Chrome" class="headerlink" title="使用 webdriver-manager - ChromeDriver (Chrome)"></a>使用 webdriver-manager - ChromeDriver (Chrome)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver  </span><br><span class="line"><span class="keyword">from</span> webdriver_manager.chrome <span class="keyword">import</span> ChromeDriverManager  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 ChromeDriverManager 自动下载和配置 ChromeDriver  </span></span><br><span class="line">driver = webdriver.Chrome(ChromeDriverManager().install())  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问网页示例  </span></span><br><span class="line">driver.get(<span class="string">&quot;https://www.example.com&quot;</span>)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行更多的测试操作...  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭浏览器  </span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h4 id="其他浏览器使用"><a href="#其他浏览器使用" class="headerlink" title="其他浏览器使用"></a>其他浏览器使用</h4><ol><li>GeckoDriver（Firefox）</li></ol>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver  </span><br><span class="line"><span class="keyword">from</span> webdriver_manager.firefox <span class="keyword">import</span> GeckoDriverManager  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 GeckoDriverManager 自动下载和配置 GeckoDriver  </span></span><br><span class="line">driver = webdriver.Firefox(executable_path=GeckoDriverManager().install())  </span><br></pre></td></tr></table></figure><ol start="2"><li><p>EdgeDriver(Microsoft Edge)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver  </span><br><span class="line"><span class="keyword">from</span> webdriver_manager.microsoft <span class="keyword">import</span> EdgeChromiumDriverManager  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 EdgeChromiumDriverManager 自动下载和配置 EdgeDriver  </span></span><br><span class="line">driver = webdriver.Edge(EdgeChromiumDriverManager().install())  </span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> Selenium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Request使用+接口自动化</title>
      <link href="/2024/04/16/request%E4%BD%BF%E7%94%A8-%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
      <url>/2024/04/16/request%E4%BD%BF%E7%94%A8-%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="接口测试基础知识"><a href="#接口测试基础知识" class="headerlink" title="接口测试基础知识"></a>接口测试基础知识</h2><h4 id="接口测试概念"><a href="#接口测试概念" class="headerlink" title="接口测试概念"></a>接口测试概念</h4><p>接口测试是测试系统组件间接口的一种测试。<br>接口测试主要用于检测外部系统与系统之 间以及内部各个子系统之间的交互点。测试的重点是要检查数据的交换，传递和控制管理过 程，以及系统间的相互逻辑依赖关系等。</p><h4 id="接口测试目的"><a href="#接口测试目的" class="headerlink" title="接口测试目的"></a>接口测试目的</h4><ul><li>核心：保证系统的稳定</li><li>手段：持续集成</li><li>目的：提高测试效率，提升用户体验，降低产品研发成本</li></ul><h4 id="接口测试一般流程"><a href="#接口测试一般流程" class="headerlink" title="接口测试一般流程"></a>接口测试一般流程</h4><ul><li>列出需求</li><li>安排资源，编写接口用例 -&gt; 用例评审</li><li>编写接口测试代码 -&gt; 代码评审codeReview</li><li>执行接口测试</li></ul><h4 id="接口测试关注点"><a href="#接口测试关注点" class="headerlink" title="接口测试关注点"></a>接口测试关注点</h4><ul><li>功能:功能实现,实现与设计一致, 接口通过性测试</li><li>健壮性: 边界值,容错性</li><li>性能: 并发及压测</li><li>稳定性: 长期运行的稳定性</li><li>安全性: SQL注入, session依赖, 数字签名, http接口的安全性</li></ul><h4 id="常见接口种类"><a href="#常见接口种类" class="headerlink" title="常见接口种类"></a>常见接口种类</h4><ul><li>Http&#x2F;Https接口: 通过http&#x2F;https协议传送接口数据(通常按字符串&#x2F;二进制传输), 如常见的网页表单, https安全性更好</li><li>RESTful Api: REST表述性状态传递. 一种设计风格,基于http&#x2F;https协议, 把一切接口视为资源, 接口要分版本,在统一的域名下管理, 不同的方法(get&#x2F;post..)做不同的事,通常请求及响应使用json格式</li><li>Web Service: SOAP简单面向对象协议, 基于http实现的一种RPC方案.接口返回一些对象,可以直接通过操作对象,实现我们需要的业务处理.使用xml格式传输数据</li><li>RPC接口: RPC为远程方法调用, 有不同的实现方案,基于TCP&#x2F;Http协议的都有. RPC可以想我们本地导入和调用对象一样使用. Dubbo接口也是一种RPC接口.</li></ul><h4 id="常见接口数据类型"><a href="#常见接口数据类型" class="headerlink" title="常见接口数据类型"></a>常见接口数据类型</h4><ul><li>请求数据类型(Content-Type):<ul><li>application&#x2F;x-www-form-urlencoded: 常规只有文本的网页表单</li><li>application&#x2F;json: RESTful Api常用格式, 结构清晰, 含有多层嵌套</li><li>multipart&#x2F;form-data: 既有文本,又有上传文件或富文本框的混合数据表单</li><li>text&#x2F;xml: xml格式, RPC接口常用格式</li></ul></li><li>响应数据类型<ul><li>string&#x2F;html: 返回字符串或网页源码</li><li>json: RESTful Api常用响应格式, 结构清晰</li><li>xml: RPC接口常用格式</li></ul></li></ul><h4 id="常见接口安全验证方式"><a href="#常见接口安全验证方式" class="headerlink" title="常见接口安全验证方式"></a>常见接口安全验证方式</h4><ul><li>Auth_1.0&#x2F;Auth_2.0: 通用接口授权方式</li><li>Session依赖: 需要登录之后才能进行接口操作</li><li>Token验证: 先要使用自己的appid&#x2F;appsecret通过获取token接口验证身份获取一个token(令牌,有一定有效期), 然后带着token访问接口</li><li>数字签名: 将原本的参数按一定规则进行组合,配合时间戳或appsecret, 通过加密算法生成一个签名sign, 携带签名进行接口请求</li></ul><h4 id="常见接口请求方法-RESTful规范"><a href="#常见接口请求方法-RESTful规范" class="headerlink" title="常见接口请求方法(RESTful规范)"></a>常见接口请求方法(RESTful规范)</h4><ul><li>GET: 获取资源</li><li>POST: 修改资源</li><li>PUT: 上传资源</li><li>DELETE: 删除资源</li><li>HEAD: 只请求页面首部</li><li>PATCH: 补丁</li><li>OPTIONS: 运行客户端查看服务器性能<br>……</li></ul><h4 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h4><ul><li>200系: 成功<ul><li>200 OK - [GET]：获取资源成功</li><li>201 CREATED - [POST&#x2F;PUT&#x2F;PATCH]：创建&#x2F;修改成功</li><li>202 Accepted - [*]：任务接受</li><li>204 NO CONTENT - [DELETE]：删除成功</li></ul></li><li>300系: 重定向<ul><li>301 Moved Permanently: 永久重定向</li><li>302 Found: 临时重定向</li></ul></li><li>400: 资源错误<ul><li>400 INVALID REQUEST - [POST&#x2F;PUT&#x2F;PATCH]：用户请求错误</li><li>401 Unauthorized - [*]：没有权限(鉴权失败, 接口层)</li><li>403 Forbidden - [*] 资源禁止访问(服务器层,没有访问权限)</li><li>404 NOT FOUND - [*]：资源不存在</li><li>405 Method Not Allowd: 访问的方法不允许, 如用POST访问只支持GET请求的接口</li><li>406 Not Acceptable - [GET]：用户请求的格式不可得(比如用户请求JSON格式，但是只有XML格式)</li><li>410 Gone -[GET]：资源被永久删除</li><li>422 Unprocesable entity - [POST&#x2F;PUT&#x2F;PATCH] 当创建对象时，发生验证错误</li></ul></li><li>500系: 服务器内部错误(接口崩溃或有Bug)<ul><li>500 INTERNAL SERVER ERROR - [*]：服务器发生错误</li></ul></li></ul><h4 id="接口业务类型"><a href="#接口业务类型" class="headerlink" title="接口业务类型"></a>接口业务类型</h4><ul><li>返回数据型接口: 只从数据库读取数据</li><li>业务操作型接口: 需要写数据库(接口测试需要要涉及参数化或环境清理)</li></ul><h2 id="接口概念"><a href="#接口概念" class="headerlink" title="接口概念"></a>接口概念</h2><p>接口又称API（Application Programming Interface,应用程序编程接口），是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力</p><p><strong>简单概括为以下3点：</strong></p><ul><li>程序代码（函数方法）</li><li>屏蔽实现细节</li><li>可以被访问&#x2F;调用来获取信息或实现某些功能（提供访问地址，定义了访问规则）</li></ul><p><strong>接口自述（通俗的来说）：</strong></p><ul><li>首先我有一些功能（功能函数）</li><li>你不用关心我怎么实现的（屏蔽细节）</li><li>我会给你一个我的地址（接口地址）</li><li>你按照地址找到我，按照我规定的格式（请求类型）告诉我所需要的信息（参数）就行</li><li>我会给你个反馈（响应信息）</li></ul><h3 id="常见接口类型"><a href="#常见接口类型" class="headerlink" title="常见接口类型"></a>常见接口类型</h3><p>HTTP接口：通过HTTP协议传输的接口，可以传输文本表单数据，也可以传输Json类型的对象数据或xml类型的数据</p><p>RPC: 远程方法调用，随着分布式系统的出现，当你需要调用部署到其他服务器上的方法时，需要用到RPC。RPC只是提出了这样一个问题，有很多种解决方案，比如WebService(基于SOAP协议)， REST(基于HTTP协议）。</p><p>SOAP: 简单面向对象协议，基于HTTP，使用xml作为默认传输格式</p><p>Web Service: 基于SOAP协议的一种RPC实现方案。相比传统的HTTP接口只传输文本请求和文本相应，通过Web Service可以直接拿到远程的一个对象，并能够直接调用该对象的属性和方法，比HTTP更高级。</p><p>REST&#x2F;RESTful API: REST，表述性状态转移。一种HTTP接口的设计风格，将一切接口视为资源，要求接口路径同意管理，分版本管理，规定了GET&#x2F;POST等请求以及HTTP状态码的使用规范，默认使用JSON格式传输。RESTful API即满足REST风格即设计规范的API接口</p><h3 id="什么是接口测试？"><a href="#什么是接口测试？" class="headerlink" title="什么是接口测试？"></a>什么是接口测试？</h3><p>接口测试是测试系统组件间接口的一种测试。接口测试主要用于检测外部系统与系统之间以及内部各个<br>子系统之间的交互点。测试的重点是要检查数据的交换、传递和控制管理过程，以及系统间的相互逻辑依赖关系等。</p><h4 id="为什么要做接口测试？"><a href="#为什么要做接口测试？" class="headerlink" title="为什么要做接口测试？"></a><strong>为什么要做接口测试？</strong></h4><ul><li>接口测试介于单元测试与系统测试之间，单元测试一般由开发完成（不要相信开发）</li><li>接口是各种系统功能的基础，一旦接口出现问题可能会引起许多系统功能的问题并且不容易定位</li><li>开展接口测试可以及早发现问题，有效降低测试成本</li><li>接口一般较UI相对稳定，利于进行自动化和持续集成</li></ul><h4 id="接口测试都测什么？"><a href="#接口测试都测什么？" class="headerlink" title="接口测试都测什么？"></a><strong>接口测试都测什么？</strong></h4><p>接口测试一般有以下岗位实施：</p><ul><li>手工测试岗：先提测接口再提出功能，兼做接口自动化</li><li>服务端测试岗：梳理代码，审核接口实现逻辑是否与业务设计一致，技术实现逻辑的合理性，异常流测试，接口压测及安全性测试</li><li>测试开发岗：专职做接口（或UI）的自动化用例开发，测试工具开发</li></ul><p><img src="/2024/04/16/request%E4%BD%BF%E7%94%A8-%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%86%85%E5%AE%B9.png" alt="image-20240714230830936"></p><h4 id="怎样掌握接口测试？"><a href="#怎样掌握接口测试？" class="headerlink" title="怎样掌握接口测试？"></a><strong>怎样掌握接口测试？</strong></h4><ol><li>了解OSI网络模型，TCP&#x2F;UDP协议，掌握HTTP&#x2F;HTTPS协议，了解RPC, Web Service及REST，理解Session和Cookie</li><li>掌握常用的接口测试工具如curl命令,Postman,Jmeter,LR,SoupUI,AB等</li><li>掌握基本的抓包工具如Chrome开发者工具,Fiddler,Charles,Wireshark,tcpdumps等</li><li>掌握一门编程语言Python或Java</li><li>了解Nginx, Apache, Tomcat等服务器中间件</li><li>掌握数据库基本查询命令，及一些NoSQL(如Redis)操作，用于检查响应结果</li><li>掌握基本的Linux日子查询和筛选命令</li></ol><h4 id="接口测试重难点"><a href="#接口测试重难点" class="headerlink" title="接口测试重难点"></a><strong>接口测试重难点</strong></h4><ol><li>动态变量参数化</li><li>接口依赖及中间变量问题</li><li>异步接口结果验证问题</li><li>相应参数及嵌套很多的验证问题</li><li>接口测试框架的稳定性问题</li><li>资源清理问题</li><li>多接口场景测试</li></ol><h2 id="网络基础知识：IP-域名-DNS及端口"><a href="#网络基础知识：IP-域名-DNS及端口" class="headerlink" title="网络基础知识：IP,域名, DNS及端口"></a>网络基础知识：IP,域名, DNS及端口</h2><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><p>​IP地址是IP协议提供的一种统一的地址格式，它为互联网上的每一个网络和每一台主机分配一个逻辑地址</p><h4 id="查看IP命令"><a href="#查看IP命令" class="headerlink" title="查看IP命令"></a>查看IP命令</h4><ul><li>Windows: ipconfig</li><li>Linux: ifconfig</li></ul><h4 id="Python练习：检查字符串是否ip"><a href="#Python练习：检查字符串是否ip" class="headerlink" title="Python练习：检查字符串是否ip"></a>Python练习：检查字符串是否ip</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># windoows</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_ip</span>(<span class="params">ip</span>):</span><br><span class="line">    num_list = ip.split(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> num_list:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> num.isdigit() <span class="keyword">or</span> <span class="keyword">not</span> <span class="number">0</span> &lt;= <span class="built_in">int</span>(num) &lt;=<span class="number">255</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(is_ip(<span class="string">&quot;101.1.0.201&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span>  <span class="title function_">check_ipv4</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    ip = <span class="built_in">str</span>.strip().split(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span> <span class="keyword">if</span> <span class="built_in">len</span>(ip) != <span class="number">4</span> <span class="keyword">or</span> <span class="literal">False</span> <span class="keyword">in</span> <span class="built_in">map</span>(<span class="keyword">lambda</span> x:<span class="literal">True</span> <span class="keyword">if</span> x.isdigit() <span class="keyword">and</span> <span class="number">0</span>&lt;= <span class="built_in">int</span>(x) &lt;= <span class="number">255</span> <span class="keyword">else</span> <span class="literal">False</span>, ip) <span class="keyword">else</span> <span class="literal">True</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><p>“端口”是英文port的意译，可以认为是设备与外界通讯交流的出口。<br>如果把IP地址比作一间房子，端口就是出入这间房子的门。一个IP地址的端口可以有65536（即：2^16）个</p><h4 id="端口类型"><a href="#端口类型" class="headerlink" title="端口类型"></a><strong>端口类型</strong></h4><ul><li>公认端口：从0到1023，紧密绑定于一些服务</li><li>注册端口：人1024到49151，许多服务绑定这些端口，这些端口同样用于许多其它目的。</li><li>动态或私有端口：从49152到65535。理论上，不应为服务分配这此端口。实际上，机器通常从1024起分配动态端口。</li></ul><h4 id="常见软件默认端口"><a href="#常见软件默认端口" class="headerlink" title="常见软件默认端口"></a><strong>常见软件默认端口</strong></h4><ul><li>Apache&#x2F;Nginx(HTTP服务): 80</li><li>Tomcat: 8080</li><li>Oracle: 1521</li><li>MySQL: 3306</li><li>SQL Server: 1433</li><li>PostgreSQL: 5432</li><li>MongoDB: 27017</li><li>Redis: 6379</li><li>Memcached: 11211</li></ul><h4 id="查看端口命令"><a href="#查看端口命令" class="headerlink" title="查看端口命令"></a><strong>查看端口命令</strong></h4><ul><li>Windows: netstat -ano</li><li>Linux: netstat -ntlp</li></ul><h4 id="解决端口占用问题"><a href="#解决端口占用问题" class="headerlink" title="解决端口占用问题"></a>解决端口占用问题</h4><ul><li>Windows: netstat -ano | findstr “8080”,找到占用端口的程序的PID -&gt; 打开任务管理器 -&gt; 设置显示PID -&gt; 找到并结束对于程序</li><li>Linux: netstat -ntlp | grep “8080”, 找到对应的程序 -&gt; ps -ef | grep “程序名” 找到对于的pid -&gt; kill 相应的id</li></ul><h3 id="域名及DNS"><a href="#域名及DNS" class="headerlink" title="域名及DNS"></a>域名及DNS</h3><p>由于IP地址不容易记忆，为IP地址赋予了一个利于记忆的别名，称为域名</p><h5 id="如何查看域名所对于的ip？"><a href="#如何查看域名所对于的ip？" class="headerlink" title="如何查看域名所对于的ip？"></a><strong>如何查看域名所对于的ip？</strong></h5><ul><li>Windows&#x2F;Linux: ping <a href="http://www.baidu.com/">www.baidu.com</a></li></ul><h5 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a><strong>DNS</strong></h5><p>DNS即域名解析系统，域名和IP地址相互映射的一个分布式数据库，提供域名转到对应ip的服务</p><h2 id="网络基础知识：OSI七层模型及TCP协议"><a href="#网络基础知识：OSI七层模型及TCP协议" class="headerlink" title="网络基础知识：OSI七层模型及TCP协议"></a>网络基础知识：OSI七层模型及TCP协议</h2><h3 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型"></a>OSI七层模型</h3><p>OSI即开放系统互连参考模型，一种网络架构，分为7层</p><p><img src="/2024/04/16/request%E4%BD%BF%E7%94%A8-%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96/OSI-%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B.png" alt="image-20240714231254726"></p><ul><li>上三层—应用层，控制软件方面<ul><li>应用层：文件传输，电子邮件，文件服务，虚拟终端 TFTP，HTTP，SNMP，FTP，SMTP，DNS，Telnet</li><li>表示层：数据格式化，代码转换，数据加密</li><li>会话层：解除或建立与别的接点的联系(会话)</li></ul></li><li>下四层—数据流层，用来管理硬件<ul><li>传输层：提供端对端的接口 TCP，UDP</li><li>网络层：为数据包选择路由 IP，ICMP，RIP，OSPF，BGP，IGMP</li><li>数据链路层 传输有地址的帧以及错误检测功能 SLIP，CSLIP，PPP，ARP，RARP，MTU</li><li>物理层 以二进制数据形式在物理媒体上传输数据 ISO2110，IEEE802，IEEE802.2</li></ul></li></ul><h3 id="OSI七层模型及各层协议"><a href="#OSI七层模型及各层协议" class="headerlink" title="OSI七层模型及各层协议"></a><strong>OSI七层模型及各层协议</strong></h3><h4 id="TCP及UDP协议"><a href="#TCP及UDP协议" class="headerlink" title="TCP及UDP协议"></a>TCP及UDP协议</h4><p>TCP和UDP都是传输层的协议</p><ul><li>TCP：传输控制协议</li><li>UDP: 数据报文协议</li></ul><p><strong>TCP和UDP的区别</strong></p><ul><li>UDP的特点如下：</li></ul><ol><li>无链接</li><li>UDP使用尽最大努力交付，不保证可靠性</li><li>UDP是面向报文的，UDP对应用层交付下来的报文，既不合并，也不拆分，而是保留这些报文的边界。应用层交给UDP多长的报文，UDP就照样发送，即一次发送一个报文</li><li>UDP没有拥塞控制</li><li>UDP支持一对一、一对多、多对一和多对多的交互通信</li><li>UDP的首部开销小，只有8字节</li></ol><ul><li>TCP的特点：</li></ul><ol><li>TCP是面向连接的</li><li>每条TCP连接只能用于两个断点，一对一</li><li>TCP提供可靠交付的服务：连接传输数据、无差错、不丢失、不重复、并且按序到达</li><li>TCP提供全双工通信</li><li>面向字节流。TCP根据对方给出的窗口和当前网络拥塞的程度来决定一个报文应该包含多少个字节</li></ol><h4 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h4><p>HTTP：超文本传输协议，是用于从WWW服务器传输超文本到本地浏览器的传输协议。<br>HTTP协议是一种无状态协议，主要包含请求和相应两大部分：</p><h5 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h5><p>请求是我们发送给接口的数据对象，包含接口地址（URL），请求方法，参数，请求头（Headers), Cookies, 数据等</p><p><strong>GET请求</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET https://www.sojson.com/<span class="built_in">open</span>/api/weather/json.shtml?city=%E5%8C%<span class="number">97</span>%E4%BA%AC HTTP/<span class="number">1.1</span></span><br><span class="line">Host: www.sojson.com</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Upgrade-Insecure-Requests: <span class="number">1</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">68.0</span><span class="number">.3440</span><span class="number">.106</span> Safari/<span class="number">537.36</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/webp,image/apng,*/*;q=<span class="number">0.8</span></span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=<span class="number">0.9</span>,en-US;q=<span class="number">0.8</span>,en;q=<span class="number">0.7</span></span><br><span class="line">Cookie: __cfduid=dccd65c484a7657b468327b66023fefc41534934250; yjs_id=59d1c42afa817b578b4b562d1f72651f; ctrl_time=<span class="number">1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">第1行： 请求方法 接口地址 HTTP协议版本</span></span><br><span class="line"><span class="string">第2-N行：请求headers(如果有Cookie，最后一行为Cookie)</span></span><br><span class="line"><span class="string">空一行</span></span><br><span class="line"><span class="string">请求数据（POST等方法使用，此处为空）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>POST请求</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">POST http://openapi.tuling123.com/openapi/api/v2 HTTP/<span class="number">1.1</span></span><br><span class="line">Content-<span class="type">Type</span>: application/json</span><br><span class="line">cache-control: no-cache</span><br><span class="line">Postman-Token: 1a39439e-61c8-<span class="number">4e59</span>-82a1-736a362c5962</span><br><span class="line">User-Agent: PostmanRuntime/<span class="number">7.2</span><span class="number">.0</span></span><br><span class="line">Accept: */*</span><br><span class="line">Host: openapi.tuling123.com</span><br><span class="line">accept-encoding: gzip, deflate</span><br><span class="line">content-length: <span class="number">468</span></span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;reqType&quot;</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;perception&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;inputText&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;text&quot;</span>: <span class="string">&quot;附近的酒店&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;inputImage&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;url&quot;</span>: <span class="string">&quot;imageUrl&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;selfInfo&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;location&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;city&quot;</span>: <span class="string">&quot;北京&quot;</span>,</span><br><span class="line">                <span class="string">&quot;province&quot;</span>: <span class="string">&quot;北京&quot;</span>,</span><br><span class="line">                <span class="string">&quot;street&quot;</span>: <span class="string">&quot;信息路&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;userInfo&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;apiKey&quot;</span>: <span class="string">&quot;ec961279f453459b9248f0aeb6600bbe&quot;</span>,</span><br><span class="line">        <span class="string">&quot;userId&quot;</span>: <span class="string">&quot;206379&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h5><p>URL：统一资源定位符，接口的访问地址（包含服务器地址+接口地址）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># url组成格式</span></span><br><span class="line"><span class="comment"># 协议\\: 服务器地址:端口号\资源路径?参数1=值1&amp;参数2=值2</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># URL编码</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">URL编码是一种浏览器用来打包请求参数及表单参数的格式, 参数和参数之间使用&amp;分割，非ASCII码使用%加16进制编码替换</span></span><br><span class="line"><span class="string">如：https://www.sojson.com/open/api/weather/json.shtml?city=北京</span></span><br><span class="line"><span class="string">编码后为：https://www.sojson.com/open/api/weather/json.shtml?city=%E5%8C%97%E4%BA%AC</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h5><table><thead><tr><th>序号</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>GET</td><td>请求指定的页面信息，并返回实体主体</td></tr><tr><td>2</td><td>POST</td><td>向指定资源提交数据进行处理请求（例如提交表单或者上传文件）数据被包含在请求体中</td></tr><tr><td>3</td><td>HEAD</td><td>类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头</td></tr><tr><td>4</td><td>PUT</td><td>从客户端向服务器传送的数据取代指定的文档的内容</td></tr><tr><td>5</td><td>DELETE</td><td>请求服务器删除指定的页面</td></tr><tr><td>6</td><td>CONNECT</td><td>预留给能够将连接改为管道方式的代理服务器</td></tr><tr><td>7</td><td>OPTIONS</td><td>允许客户端查看服务器的性能</td></tr><tr><td>8</td><td>TRACE</td><td>回显服务器收到的请求，主要用于测试或诊断</td></tr></tbody></table><h5 id="GET请求和POST请求的区别"><a href="#GET请求和POST请求的区别" class="headerlink" title="GET请求和POST请求的区别"></a><strong>GET请求和POST请求的区别</strong></h5><ul><li>GET请求：<ul><li>GET请求可被缓存</li><li>GET请求保留在浏览器历史记录中</li><li>GET请求可被收藏为书签</li><li>GET请求不应在处理敏感数据时使用</li><li>GET请求有长度限制</li><li>GET请求只应当用于取回数据</li></ul></li><li>POST请求：<ul><li>POST请求不会被缓存</li><li>POST请求不会保留在浏览器历史记录中</li><li>POST不能被收藏为书签</li><li>POST请求对数据长度没有要求</li></ul></li></ul><h5 id="请求参数（URL参数）"><a href="#请求参数（URL参数）" class="headerlink" title="请求参数（URL参数）"></a>请求参数（URL参数）</h5><p>如：<code>https://www.sojson.com/open/api/weather/json.shtml?city=北京</code></p><ul><li>中的<code>city=北京</code>,向接口传递一个参数“city”,参数值为“北京”</li><li>不同的参数之间用&amp;隔开，非ASCII码参数会自动url encode</li></ul><h5 id="请求Headers（请求头）"><a href="#请求Headers（请求头）" class="headerlink" title="请求Headers（请求头）"></a>请求Headers（请求头）</h5><p><img src="/2024/04/16/request%E4%BD%BF%E7%94%A8-%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96/%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%AD%97%E6%AE%B5.png" alt="image-20240714231741474"></p><h5 id="请求数据-又称为Request-Body-或-Data"><a href="#请求数据-又称为Request-Body-或-Data" class="headerlink" title="请求数据(又称为Request Body 或 Data)"></a>请求数据(又称为Request Body 或 Data)</h5><p>请求数据类型（Content-Type）（重点）</p><ul><li>application&#x2F;x-www-form-urlencoded： 网页表单格式（默认）</li><li>application&#x2F;json：REST接口常用格式</li><li>text&#x2F;xml：xml格式，RPC接口，Dubbo接口常用格式</li><li>test&#x2F;html： html格式</li><li>multipart&#x2F;form-data: 混合表单，支持上传图片</li></ul><p><strong>数据编码</strong></p><ul><li>ASCII码: 单字节，美国信息交换标准码, 包含数字，字母，英文标点及一些控制字符</li><li>ISO-8859-1：又称Latin1，单字节，向下兼容ASCII，用于支持部分于欧洲使用的语言</li><li>ANSI编码：单字节表示英文，双字节表示汉字，对ASCII的扩展，不同的国家和地区制定了不同的标准，中文中的GBK,GB2312属于ANSI编码</li><li>Unicode编码: 采用二个字节编码（英文和中文的字符都以双字节存放），与ANSI码不兼容</li><li>UTF-8：是目前互联网上使用最广泛的一种Unicode 编码方式，又称万国码</li><li>Base64: 一种用64个字符来表示任意二进制数据的方法。<ul><li>Base64编码的作用：由于某些系统中只能使用ASCII字符。Base64就是用来将非ASCII字符的数据转换成ASCII字符的一种方法。</li><li>而且base64特别适合在http，mime协议下快速传输数据。</li></ul></li></ul><p><strong>指定请求数据编码（解决中文乱码）：</strong><br>请求Headers设置Content-Type: application&#x2F;json; charset&#x3D;utf-8</p><h4 id="响应（Response"><a href="#响应（Response" class="headerlink" title="响应（Response)"></a>响应（Response)</h4><p>接口返回的信息，包含HTTP状态码，响应头和相应信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Date: Thu, <span class="number">23</span> Aug <span class="number">2018</span> 06:<span class="number">32</span>:<span class="number">26</span> GMT</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&quot;intent&quot;</span>:&#123;<span class="string">&quot;actionName&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;code&quot;</span>:<span class="number">10005</span>,<span class="string">&quot;intentName&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;parameters&quot;</span>:&#123;<span class="string">&quot;lon&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;checkout_date&quot;</span>:<span class="string">&quot;2018-08-25&quot;</span>,<span class="string">&quot;star&quot;</span>:<span class="string">&quot;0&quot;</span>,<span class="string">&quot;city&quot;</span>:<span class="string">&quot;北京&quot;</span>,<span class="string">&quot;days&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;order&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;price_range&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;nearby_place&quot;</span>:<span class="string">&quot;酒店&quot;</span>,<span class="string">&quot;brand&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;checkin_date&quot;</span>:<span class="string">&quot;2018-08-24&quot;</span>,<span class="string">&quot;place&quot;</span>:<span class="string">&quot;信息路&quot;</span>,<span class="string">&quot;lat&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;needgeo&quot;</span>:<span class="string">&quot;0&quot;</span>&#125;&#125;,<span class="string">&quot;results&quot;</span>:[&#123;<span class="string">&quot;groupType&quot;</span>:<span class="number">1</span>,<span class="string">&quot;resultType&quot;</span>:<span class="string">&quot;url&quot;</span>,<span class="string">&quot;values&quot;</span>:&#123;<span class="string">&quot;url&quot;</span>:<span class="string">&quot;http://m.elong.com/hotel/0101/nlist/#indate=2018-08-24&amp;outdate=2018-08-25&amp;keywords=%E4%BF%A1%E6%81%AF%E8%B7%AF&quot;</span>&#125;&#125;,&#123;<span class="string">&quot;groupType&quot;</span>:<span class="number">1</span>,<span class="string">&quot;resultType&quot;</span>:<span class="string">&quot;text&quot;</span>,<span class="string">&quot;values&quot;</span>:&#123;<span class="string">&quot;text&quot;</span>:<span class="string">&quot;亲，已帮你找到相关酒店信息&quot;</span>&#125;&#125;]&#125;</span><br></pre></td></tr></table></figure><p><strong>常见的响应格式</strong></p><ul><li>html</li><li>json</li><li>xml</li></ul><h4 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h4><ul><li>1** 信息，服务器收到请求，需要请求者继续执行操作</li><li>2** 成功，操作被成功接收并处理</li><li>3** 重定向，需要进一步的操作以完成请求</li><li>4** 客户端错误，请求包含语法错误或无法完成请求</li><li>5** 服务器错误，服务器在处理请求的过程中发生了错误</li></ul><h4 id="HTTP响应码"><a href="#HTTP响应码" class="headerlink" title="HTTP响应码"></a><strong>HTTP响应码</strong></h4><ul><li>200： 成功</li><li>301&#x2F;302： 请求重定向到另外一个接口</li><li>400: 请求语法错误</li><li>403：资源没有访问权限</li><li>404：资源不存在（有可能是请求url错误或参数不正确）</li><li>405：请求方法不被允许（比如接口只允许Post,使用Get请求接口）</li><li>500：服务器内部错误（通常是服务器挂了或接口Bug)</li><li>502: 网关失效</li><li>504: 网关请求超时</li></ul><h4 id="HTTP与HTTPS"><a href="#HTTP与HTTPS" class="headerlink" title="HTTP与HTTPS"></a>HTTP与HTTPS</h4><p>HTTP协议传输的数据都是未加密的，HTTPS协议是由HTTP+SSL协议构建的可进行加密传输、身份认证的网络协议，要比HTTP协议安全。</p><p><strong>HTTPS和HTTP的区别</strong></p><ul><li>HTTPS协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。</li><li>HTTP是超文本传输协议，信息是明文传输，HTTPS则是具有安全性的SSL加密传输协议。</li><li>HTTP和HTTPS使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</li><li>HTTP的连接很简单，是无状态的；HTTPS协议是由HTTP+SSL协议构建的可进行加密传输、身份认证的网络协议，比HTTP协议安全。</li></ul><h4 id="Cookie和Session"><a href="#Cookie和Session" class="headerlink" title="Cookie和Session"></a>Cookie和Session</h4><ul><li>*<em>Cookie&#x2F;Cookies: *<em>是指某些网站为了</em>辨别用户身份*、</em>进行session跟踪<em>而</em>储存在用户本地*终端上的数据（通常经过加密）。</li><li><strong>Session：</strong>服务端为客户端访问所建立和维持的会话，通常会生成一个唯一的id，会话有一定的有效期。<br>由于HTTP是无状态的，即服务器不知道用户上一次做了什么，默认也无法识别用户身份。<br>比较流行的做法是：</li><li>用户访问时服务端建立会话（Session）</li><li>将会话id（Session ID）随响应返回，并保存在客户端的Cookies里</li><li>后续的访问中，服务器通过辨识，客户端请求时携带的Cookies内容来识别用户</li></ul><p><strong>Cookie和Session的区别</strong></p><ul><li>cookie是存在客户端（浏览器）的进程内存中和客户端所在的机器硬盘上</li><li>cookie只能能够存储少量文本，大概4K大小</li><li>cookie是不能在不同浏览器之间共享</li><li>Session存在服务器端，存在网站进程的内存中</li><li>Session在初次设置session的时候，会在session池中实例化一个session对象，以sessionid 的值作为key，同时会将key以cookie的形式保存到客户端的内存中</li><li>Session的作用域只存在当前浏览器的会话中，当浏览器关闭以后就会将sessionid丢失，但是服务器的Session对象要20分钟以后才会回收</li></ul><h3 id="授权与加密"><a href="#授权与加密" class="headerlink" title="授权与加密"></a>授权与加密</h3><p>常见的接口安全策略：</p><ol><li>Session&#x2F;Cookie机制： 即需要登录，登录后可访问各个接口，最常用的一种策略，适用于内部接口。</li><li>固定appid模式： 用户注册时会生成一个唯一的appid，用户调用接口时需要携带appid，适用于公开接口，安全性较差。</li><li>动态token模式： token即身份令牌，用户访问接口需要使用个人appid临时申请一个token，token有一定有效期，适用于公开接口，安全性较appid模式好。</li><li>开放协议： Basic Auth&#x2F; Oauth1.0 &#x2F; Oauth2.0: 适用于开放接口。</li><li>数字签名： 将所有请求参数及参数值进行排列拼接，加上用户私钥，再进行Md5或其他加密生成一个请求的签名（sign）,请求是需要携带签名，服务器收到请求后，会对请求重新计算签名并核实与请求所携带签名是否一致。安全性较高，可以有效防止请求被篡改。适用于内部接口及微服务接口。</li></ol><p><strong>常见的加密算法</strong><br>在接口数据传输过程中常对一些敏感数据（如密码）进行Base64编码或MD5加密，以增加安全性。<br>加密算法分为对称式加密算法和非对称式加密算法，对称式加解密使用同一个秘钥，非对称式使用不同的秘钥。</p><ul><li>对称式加密<ul><li>DES: 数据加密标准，速度较快，适用于加密大量数据的场合</li><li>AES: 高级加密标准，速度快，安全级别高</li></ul></li><li>非对称式加密<ul><li>RSA: 是一个支持变长密钥的公共密钥算法， 分公钥和私钥，SSH协议使用该算法</li><li>MD5: 最常用的一种加密方法，是一种摘要算法。</li></ul></li></ul><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>HTTP 缓存机制作是 web 性能优化的重要手段，当用户第一次请求服务器资源时，服务器将资源缓存到客户端本地，在一定时间内（缓存有效期内）当用户再次向服务器请求同样的资源时，可以直接从缓存中读取，而不用从服务器下载。</p><p><strong>接口测试中缓存相关注意点</strong></p><ul><li>在更新或调试接口是，注意是否需要清理缓存（或临时禁用缓存）</li><li>缓存有一定的有效期</li><li>接口性能测试中会关注缓存的命中率</li></ul><h2 id="接口自动化前置基础"><a href="#接口自动化前置基础" class="headerlink" title="接口自动化前置基础"></a>接口自动化前置基础</h2><h3 id="requests安装"><a href="#requests安装" class="headerlink" title="requests安装"></a>requests安装</h3><ul><li>Windows: 打开cmd命令行，输入<code>pip install requests</code>，等待安装完成即可</li><li>Linux: (建议使用Python3)，终端中输入<code>pip3 install requests</code>，等待安装完成即可</li><li>Mac: (建议使用Python3), <code>sudo python3 -m pip install requests</code>，等待安装完成即可</li></ul><h3 id="requests的使用"><a href="#requests的使用" class="headerlink" title="requests的使用"></a>requests的使用</h3><h4 id="发送GET请求"><a href="#发送GET请求" class="headerlink" title="发送GET请求"></a>发送GET请求</h4><ol><li>组装请求： 请求可能包含url，params(url参数)，data(请求数据)，headers(请求头)，cookies等，最少必须有url</li><li>发送请求，获取响应：支持get，post等各种方法发送，返回的是一个响应对象</li><li>解析响应: 输出响应文本</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入requests包</span></span><br><span class="line"><span class="keyword">import</span> requests </span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 组装请求</span></span><br><span class="line">url = <span class="string">&quot;http://httpbin.org/get&quot;</span>  <span class="comment"># 这里只有url，字符串格式</span></span><br><span class="line"><span class="comment"># 2. 发送请求，获取响应</span></span><br><span class="line">res = requests.get(url) <span class="comment"># res即返回的响应对象</span></span><br><span class="line"><span class="comment"># 3. 解析响应</span></span><br><span class="line"><span class="built_in">print</span>(res.text)  <span class="comment"># 输出响应的文本</span></span><br></pre></td></tr></table></figure><h4 id="带参数的GET请求"><a href="#带参数的GET请求" class="headerlink" title="带参数的GET请求"></a>带参数的GET请求</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests </span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://www.tuling123.com/openapi/api?key=ec961279f453459b9248f0aeb6600bbe&amp;info=你好&quot;</span>  <span class="comment"># 参数可以写到url里</span></span><br><span class="line">res = requests.get(url=url) <span class="comment"># 第一个url指get方法的参数，第二个url指上一行我们定义的接口地址</span></span><br><span class="line"><span class="built_in">print</span>(res.text)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"><span class="keyword">import</span> requests </span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://www.tuling123.com/openapi/api&quot;</span></span><br><span class="line">params = &#123;<span class="string">&quot;key&quot;</span>:<span class="string">&quot;ec961279f453459b9248f0aeb6600bbe&quot;</span>,<span class="string">&quot;info&quot;</span>:<span class="string">&quot;你好&quot;</span>&#125; <span class="comment"># 字典格式，单独提出来，方便参数的添加修改等操作</span></span><br><span class="line">res = requests.get(url=url, params=params) </span><br><span class="line"><span class="built_in">print</span>(res.text)  </span><br></pre></td></tr></table></figure><h4 id="传统表单类POST请求（x-www-form-urlencoded）"><a href="#传统表单类POST请求（x-www-form-urlencoded）" class="headerlink" title="传统表单类POST请求（x-www-form-urlencoded）"></a>传统表单类POST请求（x-www-form-urlencoded）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests </span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://httpbin.org/post&quot;</span></span><br><span class="line">data = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;hanzhichao&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125; <span class="comment"># Post请求发送的数据，字典格式</span></span><br><span class="line">res = requests.post(url=url, data=data) <span class="comment"># 这里使用post方法，参数和get方法一样</span></span><br><span class="line"><span class="built_in">print</span>(res.text)  </span><br></pre></td></tr></table></figure><h4 id="JSON类型的POST请求（application-json）"><a href="#JSON类型的POST请求（application-json）" class="headerlink" title="JSON类型的POST请求（application&#x2F;json）"></a>JSON类型的POST请求（application&#x2F;json）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests </span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://httpbin.org/post&quot;</span></span><br><span class="line">data = <span class="string">&#x27;&#x27;&#x27;&#123;</span></span><br><span class="line"><span class="string">        &quot;name&quot;: &quot;hanzhichao&quot;,</span></span><br><span class="line"><span class="string">        &quot;age&quot;: 18</span></span><br><span class="line"><span class="string">        &#125;&#x27;&#x27;&#x27;</span> <span class="comment"># 多行文本, 字符串格式，也可以单行（注意外层有引号，为字符串） data = &#x27;&#123;&quot;name&quot;: &quot;hanzhichao&quot;, &quot;age&quot;: 18&#125;&#x27;</span></span><br><span class="line">res = requests.post(url=url, data=data) <span class="comment">#  data支持字典或字符串</span></span><br><span class="line"><span class="built_in">print</span>(res.text)  </span><br></pre></td></tr></table></figure><p>data参数支持字典格式也支持字符串格式，如果是字典格式，requests方法会将其按照默认表单urlencoded格式转换为字符串，如果是字符串则不转化<br>如果data以字符串格式传输需要遵循以下几点：</p><ul><li>必须是严格的JSON格式字符串，里面必须用双引号，k-v之间必须有逗号，布尔值必须是小写的true&#x2F;false等等</li><li>不能有中文，直接传字符串不会自动编码</li></ul><p>一般来说，建议将data声明为字典格式（方便数据添加修改），然后再用json.dumps()方法把data转换为合法的JSON字符串格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests </span><br><span class="line"><span class="keyword">import</span> json <span class="comment"># 使用到JSON中的方法，需要提前导入</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://httpbin.org/post&quot;</span></span><br><span class="line">data = &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;hanzhichao&quot;</span>,</span><br><span class="line">        <span class="string">&quot;age&quot;</span>: <span class="number">18</span></span><br><span class="line">        &#125;  <span class="comment"># 字典格式，方便添加</span></span><br><span class="line">headers = &#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;application/json&quot;</span>&#125; <span class="comment"># 严格来说，我们需要在请求头里声明我们发送的格式</span></span><br><span class="line">res = requests.post(url=url, data=json.dumps(data), headers=headers) <span class="comment">#  将字典格式的data变量转换为合法的JSON字符串传给post的data参数</span></span><br><span class="line"><span class="built_in">print</span>(res.text)  </span><br></pre></td></tr></table></figure><p>或直接将字典格式的data数据赋给post方法的JSON参数（会自动将字典格式转为合法的JSON文本并添加headers）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests </span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://openapi.tuling123.com/openapi/api/v2&quot;</span></span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">&quot;reqType&quot;</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;perception&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;inputText&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;text&quot;</span>: <span class="string">&quot;附近的酒店&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;inputImage&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;url&quot;</span>: <span class="string">&quot;imageUrl&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;selfInfo&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;location&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;city&quot;</span>: <span class="string">&quot;北京&quot;</span>,</span><br><span class="line">                <span class="string">&quot;province&quot;</span>: <span class="string">&quot;北京&quot;</span>,</span><br><span class="line">                <span class="string">&quot;street&quot;</span>: <span class="string">&quot;信息路&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;userInfo&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;apiKey&quot;</span>: <span class="string">&quot;ec961279f453459b9248f0aeb6600bbe&quot;</span>,</span><br><span class="line">        <span class="string">&quot;userId&quot;</span>: <span class="string">&quot;206379&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">res = requests.post(url=url, json=data) <span class="comment"># JSON格式的请求，将数据赋给json参数</span></span><br><span class="line"><span class="built_in">print</span>(res.text)  </span><br></pre></td></tr></table></figure><h3 id="JSON类型解析"><a href="#JSON类型解析" class="headerlink" title="JSON类型解析"></a>JSON类型解析</h3><h4 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h4><p>程序中的对象，如Python中的字典、列表、函数、类等，都是存在内存中的，一旦断电就会消失，不方便传递或存储，所以我们需要将内存中的对象转化为文本或者文件格式，来满足传输和持久化（存储）需求</p><ul><li>序列化： 内存对象 -&gt; 文本&#x2F;文件</li><li>反序列化： 文本 -&gt; 内存对象</li></ul><p><strong>对象在HTTP中的传输过程</strong></p><p>HTTP协议是超文本传输协议，是通过文本或二进制进行传输的，所以我们发送的请求要转化成文本进行传输，收到的响应也是文本格式，如果是JSON，一般还需要将文本格式重新转化为对象</p><p>JSON对象（Python字典） -&gt; 转为文本请求 -&gt; 发送请求-&gt; 服务器收到文本请求 -&gt; 将文本请求转化为对象，获取其中的参数，处理业务-&gt; 返回文本格式的响应 -&gt; 客户端转为对象格式来从响应中取值</p><h4 id="JSON对象与Python字典的区别"><a href="#JSON对象与Python字典的区别" class="headerlink" title="JSON对象与Python字典的区别"></a>JSON对象与Python字典的区别</h4><p>JSON对象是javascript object即javascript中的对象，是一种通用的格式，格式严格，不支持备注。</p><p><strong>JSON文本和JSON对象的区别：</strong></p><ul><li>JSON文本是符合JSON格式的文本，实际上是一个字符串</li><li>JSON对象是内存中一个对象，拥有属性和方法，可以通过对象获取其中的参数信息</li></ul><p><strong>Python的字典的格式和JSON格式，稍有不同：</strong></p><ul><li>字典中的引号支持单引号和双引号，JSON格式只支持双引号</li><li>字典中的True&#x2F;False首字母大写，JSON格式为true&#x2F;false</li><li>字典中的空值为None, JSON格式为null</li></ul><h4 id="JSON格式操作方法"><a href="#JSON格式操作方法" class="headerlink" title="JSON格式操作方法"></a>JSON格式操作方法</h4><ul><li>序列化（字典 -&gt; 文本&#x2F;文件句柄）： json.dumps()&#x2F;json.dump()</li><li>反序列化（文本&#x2F;文件句柄 -&gt; 字典) : json.loads()&#x2F;json.load()</li></ul><p><strong>序列化</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json <span class="comment"># 需要导入JSON包</span></span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>, <span class="string">&quot;male&quot;</span>: <span class="literal">True</span>, <span class="string">&quot;money&quot;</span>: <span class="literal">None</span>&#125; <span class="comment"># 字典格式</span></span><br><span class="line">str_data = json.dumps(data) <span class="comment"># 序列化，转化为合法的JSON文本（方便HTTP传输）</span></span><br><span class="line"><span class="built_in">print</span>(str_data)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests </span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">res = requests.post(<span class="string">&quot;http://www.tuling123.com/openapi/api?key=ec961279f453459b9248f0aeb6600bbe&amp;info=怎么又是你&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(res.text) <span class="comment"># 输出为一行文本</span></span><br><span class="line"></span><br><span class="line">res_dict = res.json() <span class="comment"># 将响应转为json对象（字典）等同于`json.loads(res.text)`</span></span><br><span class="line"><span class="built_in">print</span>(json.dumps(res_dict, indent=<span class="number">2</span>, sort_keys=<span class="literal">True</span>, ensure_ascii=<span class="literal">False</span>)) <span class="comment"># 重新转为文本</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">json.dumps() 参数</span></span><br><span class="line"><span class="string">indent: 缩进空格数，indent=0输出为一行</span></span><br><span class="line"><span class="string">sork_keys=True: 将json结果的key按ascii码排序</span></span><br><span class="line"><span class="string">ensure_ascii=Fasle: 不确保ascii码，如果返回格式为utf-8包含中文，不转化为\u...</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>反序列化</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">res_text = <span class="string">&#x27;&#123;&quot;name&quot;: &quot;\u5f20\u4e09&quot;, &quot;password&quot;: &quot;123456&quot;, &quot;male&quot;: true, &quot;money&quot;: null&#125;&#x27;</span>  <span class="comment"># JSON文本格式的响应信息</span></span><br><span class="line">res_dict = json.loads(res_text) <span class="comment"># 转化为字典 </span></span><br><span class="line"><span class="built_in">print</span>(res_dict[<span class="string">&#x27;name&#x27;</span>])  <span class="comment"># 方便获取其中的参数值</span></span><br></pre></td></tr></table></figure><p><strong>文件的序列化与反序列化</strong></p><ol><li>序列化：字典 -&gt; 文件句柄</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">res_dict = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>, <span class="string">&quot;male&quot;</span>: <span class="literal">True</span>, <span class="string">&quot;money&quot;</span>: <span class="literal">None</span>&#125; <span class="comment"># 字典格式</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;demo1.json&quot;</span>,<span class="string">&quot;w&quot;</span>)</span><br><span class="line">json.dump(res_dict, f)</span><br></pre></td></tr></table></figure><ol start="2"><li>序列化： 文件句柄 -&gt; 字典</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// json 数据</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;张三&quot;,</span><br><span class="line">  &quot;password&quot;: &quot;123456&quot;,</span><br><span class="line">  &quot;male&quot;: true,</span><br><span class="line">  &quot;money&quot;: null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;demo.JSON&quot;</span>,<span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)  <span class="comment"># 文件中有中文需要指定编码</span></span><br><span class="line">f_dict = json.load(f) <span class="comment"># 反序列化将文件句柄转化为字典</span></span><br><span class="line"><span class="built_in">print</span>(f[<span class="string">&#x27;name&#x27;</span>]) <span class="comment"># 读取其中参数</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p><strong>什么时候使用JSON对象（字典）什么时候使用JSON文本？</strong><br>一般在组装data参数时，建议使用字典格式，发送请求时用<code>json.dumps(data)</code>转化为文本发送，收到请求后使用<code>json.loads(res.text)</code>转化为字典，方便我们获取其中的参数信息</p><h3 id="requests库详解"><a href="#requests库详解" class="headerlink" title="requests库详解"></a>requests库详解</h3><h4 id="请求方法-1"><a href="#请求方法-1" class="headerlink" title="请求方法"></a>请求方法</h4><ul><li>equests.get()</li><li>requests.post()</li><li>requests.put()<br>…</li><li>requests.session(): 用于保持会话（session）<br>除了requests.session()外，其他请求方法的参数都差不多，都包含url，params, data, headers, cookies, files, auth, timeout等等</li></ul><h4 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h4><ul><li>url: 字符串格式，参数也可以直接写到url中</li><li>params：url参数，字典格式</li><li>data: 请求数据，字典或字符串格式</li><li>headers: 请求头，字典格式</li><li>cookies: 字典格式，可以通过携带cookies绕过登录</li><li>files: 字典格式，用于混合表单（form-data）中上传文件</li><li>auth: Basic Auth授权，数组格式 <code>auth=(user,password)</code></li><li>timeout: 超时时间（防止请求一直没有响应，最长等待时间），数字格式，单位为秒</li></ul><h4 id="响应解析"><a href="#响应解析" class="headerlink" title="响应解析"></a>响应解析</h4><ul><li>res.status_code: 响应的HTTP状态码</li><li>res.reason: 响应的状态码含义</li><li>req.text：响应的文本格式，按req.encoding解码</li><li>req.content: 响应的二进制格式</li><li>req.encoding: 解码格式，可以通过修改<code>req.encoding=&#39;utf-8&#39;</code>来解决一部分中文乱码问题</li><li>req.apparent_encoding：真实编码，由chardet库提供的明显编码</li><li>req.json(): （注意，有括号），响应的json对象（字典）格式，慎用！如果响应文本不是合法的json文本，或报错</li><li>req.headers: 响应头</li><li>req.cookies: 响应的cookieJar对象，可以通过<code>req.cookies.get(key)</code>来获取响应cookies中某个key对应的值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests </span><br><span class="line"></span><br><span class="line">res = requests.get(<span class="string">&quot;https://www.baidu.com&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(res.status_code, res.reason) <span class="comment"># 200 OK</span></span><br><span class="line"><span class="built_in">print</span>(res.text) <span class="comment"># 文本格式，有乱码</span></span><br><span class="line"><span class="built_in">print</span>(res.content) <span class="comment"># 二进制格式</span></span><br><span class="line"><span class="built_in">print</span>(res.encoding) <span class="comment"># 查看解码格式 ISO-8859-1</span></span><br><span class="line"><span class="built_in">print</span>(res.apparent_encoding) <span class="comment"># utf-8</span></span><br><span class="line">res.encoding=<span class="string">&#x27;utf-8&#x27;</span> <span class="comment"># 手动设置解码格式为utf-8</span></span><br><span class="line"><span class="built_in">print</span>(res.text) <span class="comment"># 乱码问题被解决</span></span><br><span class="line"><span class="built_in">print</span>(res.cookies.items()) <span class="comment"># cookies中的所有的项 [(&#x27;BDORZ&#x27;, &#x27;27315&#x27;)]</span></span><br><span class="line"><span class="built_in">print</span>(res.cookies.get(<span class="string">&quot;BDORZ&quot;</span>)) <span class="comment"># 获取cookies中BDORZ所对应的值 27315</span></span><br></pre></td></tr></table></figure><h3 id="带安全认证的请求"><a href="#带安全认证的请求" class="headerlink" title="带安全认证的请求"></a>带安全认证的请求</h3><h4 id="需要登录的请求（Cookie-Session认证）"><a href="#需要登录的请求（Cookie-Session认证）" class="headerlink" title="需要登录的请求（Cookie&#x2F;Session认证）"></a>需要登录的请求（Cookie&#x2F;Session认证）</h4><ol><li>使用会话保持</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">s = requests.session() <span class="comment"># 新建一个会话</span></span><br><span class="line">s.post(url=<span class="string">&quot;https://demo.fastadmin.net/admin/index/login.html&quot;</span>,data=&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;password&quot;</span>:<span class="string">&quot;123456&quot;</span>&#125;) <span class="comment"># 发送登录请求</span></span><br><span class="line">res = s.get(<span class="string">&quot;https://demo.fastadmin.net/admin/dashboard?ref=addtabs&quot;</span>) <span class="comment"># 使用同一个会话发送get请求，可以保持登录状态</span></span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure><ol start="2"><li><p>抓取cookies</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://demo.fastadmin.net/admin/dashboard?ref=addtabs&quot;</span></span><br><span class="line"><span class="comment"># 抓取cookie</span></span><br><span class="line">cookies = &#123;<span class="string">&quot;PHPSESSID&quot;</span>:<span class="string">&quot;9bf6b19ddb09938cf73d55a094b36726&quot;</span>&#125;</span><br><span class="line">res = requests.get(url=url, cookies=cookies) <span class="comment"># 携带cookies发送请求</span></span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure></li></ol><p><strong>两种方式的对比</strong></p><ul><li>使用session方式：每次都要发送两次请求，效率较低</li><li>使用携带cookies方式：需要获取cookie，提取组装，cookies中是session有一定有效期，过期之后要重新抓取和更换cookies</li><li>如果很多或所有请求都需要登录，可以发一次请求，保持该session为全局变量，其他接口都使用该session发送请求（同样要注意登录过期时间）</li></ul><h3 id="appid或token方式"><a href="#appid或token方式" class="headerlink" title="appid或token方式"></a>appid或token方式</h3><ul><li>appid: 系统为合法用户赋予的访问id，固定的字符串，一般经过加密以确保HTTP传输中的安全</li><li>token: 即令牌，固定或需要动态申请（有一定有效期），一般由用户信息及申请时间计算加密而成，用于验证接口访问的权限</li></ul><p><strong>token与session的区别</strong></p><ul><li>session是存在服务器的，服务端通过验证客户端的请求所携带的session值在服务会话中是否存在，来验证用户是否合法</li><li>token: 是按一定算法加密计算出来的，服务端通过解密客户端所携带的token值来验证用户是否合法<br>**示例： **</li><li>访问百度AI开发者平台：<a href="http://ai.baidu.com/%EF%BC%8C%E6%B3%A8%E5%86%8C%E5%B9%B6%E7%99%BB%E5%BD%95%EF%BC%8C%E6%88%90%E4%B8%BA%E5%BC%80%E5%8F%91%E8%80%85%EF%BC%8C%E9%80%89%E6%8B%A9%E6%96%87%E5%AD%97%E8%AF%86%E5%88%AB">http://ai.baidu.com/，注册并登录，成为开发者，选择文字识别</a></li><li>文字识别开发者文档：<a href="http://ai.baidu.com/docs#/OCR-API/top">http://ai.baidu.com/docs#/OCR-API/top</a></li><li>根据文档新建应用，查看自己的App Key和Secret Key</li></ul><h2 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h2><p>​在功能、接口测试中常常需要通过数据库的操作，来准备数据、检测环境及核对功能、接口的数据库操作是否正确<br>​在自动化测试中，就需要我们用代码连接数据库自动完成数据准备、环境检查及数据库断言的功能。<br>​使用Python操作MySQL数据库这里我们需要用到三方库<code>PyMySQl</code></p><h3 id="安装pymysql"><a href="#安装pymysql" class="headerlink" title="安装pymysql"></a>安装pymysql</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><ol><li>建立数据库连接 <code>conn = pymysql.connect()</code></li><li>从连接建立操作游标 <code>cur = conn.cursor()</code></li><li>使用游标执行sql（读&#x2F;写） <code>cur.execute(sql)</code></li><li>获取结果（读）&#x2F; 提交更改（写） <code>cur.fetchall()</code> &#x2F; <code>conn.commit()</code></li><li>关闭游标及连接 <code>cur.close();conn.close()</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 建立连接</span></span><br><span class="line">conn = pymysql.connect(host=<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">                    port=<span class="number">3306</span>,</span><br><span class="line">                    user=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">                    passwd=<span class="string">&#x27;123456&#x27;</span>,   <span class="comment"># password也可以</span></span><br><span class="line">                    db=<span class="string">&#x27;api_test&#x27;</span>,</span><br><span class="line">                    charset=<span class="string">&#x27;utf8&#x27;</span>)   <span class="comment"># 如果查询有中文需要指定数据库编码</span></span><br><span class="line">                    </span><br><span class="line"><span class="comment"># 2. 从连接建立游标（有了游标才能操作数据库）</span></span><br><span class="line">cur = conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 查询数据库（读）</span></span><br><span class="line">cur.execute(<span class="string">&quot;select * from user where name=&#x27;张三&#x27;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 获取查询结果</span></span><br><span class="line">result = cur.fetchall()</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 更改数据库（写）</span></span><br><span class="line">cur.execute(<span class="string">&quot;delete from user where name=&#x27;李四&#x27;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 提交更改</span></span><br><span class="line">conn.commit()  <span class="comment"># 注意是用的conn不是cur</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 关闭游标及连接</span></span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h4 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a><strong>查询操作</strong></h4><p>使用cur.execute(), 执行数据库查询后无返回的是影响的行数，而非查询结果。我们要使用<code>cur.fetchone()/cur.fetchmany()/cur.fetchall()</code>来获取查询结果</p><ul><li>cur.fetchone(): 获取一条数据（同时获取的数据会从结果集删除），返回元祖<code>(&#39;张三&#39;,&#39;123456&#39;)</code></li><li>cur.fetchmany(3): 获取多条数据，返回嵌套元祖<code>((&#39;张三&#39;,&#39;123456&#39;),(&#39;李四&#39;,&#39;123456&#39;),(&quot;王五&quot;,&quot;123456&quot;))</code></li><li>cur.fetchall(): 获取所有数据，返回嵌套元祖，<code>((&#39;张三&#39;,&#39;123456&#39;),)</code>（只有一条数据时）</li></ul><p><strong>注意：</strong> 获取完数据后，数据会从数据集中删除，再次获取获取不到，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cur.execute(select * <span class="keyword">from</span> user where name=<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(cur.fetchone()) <span class="comment"># 结果： (&#x27;张三&#x27;,&#x27;123456&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(cur.fetchone()) <span class="comment"># 结果：None</span></span><br><span class="line"><span class="built_in">print</span>(cur.fetchall()) <span class="comment"># 结果：()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 所以我们需要重复使用查询结果时，需要将查询结果赋给某个变量</span></span><br><span class="line">cur.execute(select * <span class="keyword">from</span> user where name=<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line">result = cur.fetchall()</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 结果： (&#x27;张三&#x27;,&#x27;123456&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 结果： (&#x27;张三&#x27;,&#x27;123456&#x27;)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="修改操作"><a href="#修改操作" class="headerlink" title="修改操作"></a><strong>修改操作</strong></h4><p>执行修改数据库的操作后不立即生效，使用连接<code>conn.commit()</code>提交后才生效，支持事物及回滚</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cur.execute(<span class="string">&quot;insert into user (name,password) values (&#x27;张三&#x27;, &#x27;123456&#x27;)&quot;</span>)</span><br><span class="line">    cur.execute(<span class="string">&quot;insert into user (name, passwd) values (&#x27;李四&#x27;), &#x27;123456&#x27;&quot;</span>) <span class="comment"># 此处sql出错</span></span><br><span class="line">    conn.commit()  <span class="comment"># 使用连接提交所有更改</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    conn.rollback()  <span class="comment"># 回滚所有更改（注意用的是conn)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(e))</span><br></pre></td></tr></table></figure><h3 id="封装数据库操作"><a href="#封装数据库操作" class="headerlink" title="封装数据库操作"></a>封装数据库操作</h3><p>由于经常要使用到数据库操作，建议将所有数据库操作封装成公用的数据库模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># db.py</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DB</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    数据库连接信息建议写到配置文件中，从配置文件中读取</span></span><br><span class="line"><span class="string">    sql语句建议先在手工测试一下没有语法问题再进行封装</span></span><br><span class="line"><span class="string">    通过封装各种sql可以完成各种业务操作</span></span><br><span class="line"><span class="string">    更改数据库有风险，操作需谨慎！！！</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.conn = pymysql.connect(host=<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">                    port=<span class="number">3306</span>,</span><br><span class="line">                    user=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">                    passwd=<span class="string">&#x27;123456&#x27;</span>,   <span class="comment"># passwd 不是 password</span></span><br><span class="line">                    db=<span class="string">&#x27;api_test&#x27;</span>)</span><br><span class="line">        self.cur = self.conn.cursor()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>): <span class="comment"># 析构函数，实例删除时触发</span></span><br><span class="line">        self.cur.close()</span><br><span class="line">        self.conn.close()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">query</span>(<span class="params">self, sql</span>):</span><br><span class="line">        self.cur.execute(sql)</span><br><span class="line">        <span class="keyword">return</span> self.cur.fetchall()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exec</span>(<span class="params">self, sql</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.cur.execute(sql)</span><br><span class="line">            self.conn.commit()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            self.conn.rollback()</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">str</span>(e))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check_user</span>(<span class="params">self,name</span>):</span><br><span class="line">        result = self.query(<span class="string">&quot;select * from user where name=&#x27;&#123;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(name))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> result <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_user</span>(<span class="params">name, password</span>):</span><br><span class="line">    sql = <span class="string">&quot;insert into user (name, passwd) values (&#x27;&#123;&#125;&#x27;,&#x27;&#123;&#125;&#x27;)&quot;</span>.<span class="built_in">format</span>(name, password)</span><br><span class="line">    change_db(sql)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">del_user</span>(<span class="params">self, name</span>)</span><br><span class="line">        self.<span class="built_in">exec</span>(<span class="string">&quot;delete from user where name=&#x27;&#123;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(name))</span><br><span class="line">        </span><br></pre></td></tr></table></figure><h2 id="使用unittest测试框架"><a href="#使用unittest测试框架" class="headerlink" title="使用unittest测试框架"></a>使用unittest测试框架</h2><h3 id="用例编写"><a href="#用例编写" class="headerlink" title="用例编写"></a>用例编写</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest  <span class="comment"># 导入unittest</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestUserLogin</span>(unittest.TestCase):  <span class="comment"># 类必须Test开头，继承TestCase才能识别为用例类</span></span><br><span class="line">    url = <span class="string">&#x27;http://115.28.108.130:5000/api/user/login/&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_user_login_normal</span>(<span class="params">self</span>):   <span class="comment"># 一条测试用例，必须test_开头</span></span><br><span class="line">        data = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;123456&quot;</span>&#125;</span><br><span class="line">        res = requests.post(url=self.url, data=data)</span><br><span class="line">        self.assertIn(<span class="string">&#x27;登录成功&#x27;</span>, res.text)  <span class="comment"># 断言</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_user_login_password_wrong</span>(<span class="params">self</span>):</span><br><span class="line">        data = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1234567&quot;</span>&#125;</span><br><span class="line">        res = requests.post(url=self.url, data=data)</span><br><span class="line">        self.assertIn(<span class="string">&#x27;登录失败&#x27;</span>, res.text)  <span class="comment"># 断言</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  <span class="comment"># 如果是直接从当前模块执行（非别的模块调用本模块）</span></span><br><span class="line">unittest.main(verbosity=<span class="number">2</span>)    <span class="comment"># 运行本测试类所有用例,verbosity为结果显示级别</span></span><br></pre></td></tr></table></figure><h3 id="完整的接口测试用例"><a href="#完整的接口测试用例" class="headerlink" title="完整的接口测试用例"></a>完整的接口测试用例</h3><p>一条完整的测试接口用例需要包含：</p><ol><li>数据准备：准备测试数据，可手工准备，也可使用代码准备（通常涉及数据库操作）</li><li>环境检查：如果手工准备的数据，连接数据库进行环境检查会使用例更健壮</li><li>发送请求：发送接口请求</li><li>响应断言&#x2F;数据库断言：响应断言后，还需要进行数据库断言，以确保接口数据库操作的正确性</li><li>数据清理：如果接口有更数据库操作，断言结束后需要还原更改</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># test_user_reg.py</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> db <span class="keyword">import</span> *   <span class="comment"># 导入db.py文件，见封装数据库篇</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据准备</span></span><br><span class="line">NOT_EXIST_USER = <span class="string">&#x27;范冰冰&#x27;</span></span><br><span class="line">EXIST_USER = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestUserReg</span>(unittest.TestCase):</span><br><span class="line">    url = <span class="string">&#x27;http://127.0.0.1:5000/api/user/reg/&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_user_reg_normal</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 环境检查</span></span><br><span class="line">        <span class="keyword">if</span> check_user(NOT_EXIST_USER):</span><br><span class="line">            del_user(NOT_EXIST_USER)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 发送请求</span></span><br><span class="line">        data = &#123;<span class="string">&#x27;name&#x27;</span>: NOT_EXIST_USER, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>&#125;</span><br><span class="line">        res = requests.post(url=self.url, json=data)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 期望响应结果，注意字典格式和json格式的区别（如果有true/false/null要转化为字典格式）</span></span><br><span class="line">        except_res = &#123;</span><br><span class="line">                        <span class="string">&quot;code&quot;</span>: <span class="string">&quot;100000&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;成功&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">                                    <span class="string">&quot;name&quot;</span>: NOT_EXIST_USER,</span><br><span class="line">                                    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;e10adc3949ba59abbe56e057f20f883e&quot;</span></span><br><span class="line">                                &#125;</span><br><span class="line">                      &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 响应断言（整体断言）</span></span><br><span class="line">        self.assertDictEqual(res.json(), except_res)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 数据库断言</span></span><br><span class="line">        self.assertTrue(check_user(NOT_EXIST_USER))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 环境清理（由于注册接口向数据库写入了用户信息）</span></span><br><span class="line">        del_user(NOT_EXIST_USER)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_user_reg_exist</span>(<span class="params">self</span>):</span><br><span class="line">         <span class="comment"># 环境检查</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> check_user(EXIST_USER):</span><br><span class="line">            add_user(EXIST_USER)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 发送请求</span></span><br><span class="line">        data = &#123;<span class="string">&#x27;name&#x27;</span>: EXIST_USER, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>&#125;</span><br><span class="line">        res = requests.post(url=self.url, json=data)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 期望响应结果，注意字典格式和json格式的区别（如果有true/false/null要转化为字典格式）</span></span><br><span class="line">        except_res = &#123;</span><br><span class="line">                        <span class="string">&quot;code&quot;</span>: <span class="string">&quot;100001&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;失败，用户已存在&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">                                    <span class="string">&quot;name&quot;</span>: EXIST_USER,</span><br><span class="line">                                    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;e10adc3949ba59abbe56e057f20f883e&quot;</span></span><br><span class="line">                                &#125;</span><br><span class="line">                      &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 响应断言（整体断言）</span></span><br><span class="line">        self.assertDictEqual(res.json(), except_res)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 数据库断言(没有注册成功，数据库没有添加新用户)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 环境清理（无需清理）</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main(verbosity=<span class="number">2</span>)   <span class="comment"># 运行所有用例</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数据分离-从Excel中读取数据"><a href="#数据分离-从Excel中读取数据" class="headerlink" title="数据分离 - 从Excel中读取数据"></a>数据分离 - 从Excel中读取数据</h2><p>之前的用例中，测试数据直接写在代码文件里，不利于修改和构造数据<br>这里我们使用Excel保存测试数据，实现代码和数据的分离</p><p><strong>excel格式为</strong></p><p><img src="/2024/04/16/request%E4%BD%BF%E7%94%A8-%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96/excel%E6%A0%BC%E5%BC%8F%E6%95%B0%E6%8D%AE.png" alt="image-20240715012538450"></p><p><strong>Excel读取方法：</strong><br>Python我们使用三方库xlrd来读取Excel</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"></span><br><span class="line">wb = xlrd.open_workbook(<span class="string">&quot;test_user_data.xlsx&quot;</span>)  <span class="comment"># 打开excel</span></span><br><span class="line">sh = wb.sheet_by_name(<span class="string">&quot;TestUserLogin&quot;</span>)  <span class="comment"># 按工作簿名定位工作表</span></span><br><span class="line"><span class="built_in">print</span>(sh.nrows)  <span class="comment"># 有效数据行数</span></span><br><span class="line"><span class="built_in">print</span>(sh.ncols)  <span class="comment"># 有效数据列数</span></span><br><span class="line"><span class="built_in">print</span>(sh.cell(<span class="number">0</span>, <span class="number">0</span>).value)  <span class="comment"># 输出第一行第一列的值`case_name`</span></span><br><span class="line"><span class="built_in">print</span>(sh.row_values(<span class="number">0</span>))  <span class="comment"># 输出第1行的所有值（列表格式）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数据和标题组装成字典，使数据更清晰</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dict</span>(<span class="built_in">zip</span>(sh.row_values(<span class="number">0</span>), sh.row_values(<span class="number">1</span>))))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历excel,打印所有的数据</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(sh.nrows):</span><br><span class="line">    <span class="built_in">print</span>(sh.row_values(i))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">5</span></span><br><span class="line"><span class="string">case_name</span></span><br><span class="line"><span class="string">[&#x27;case_name&#x27;, &#x27;url&#x27;, &#x27;method&#x27;, &#x27;data&#x27;, &#x27;expect_res&#x27;]</span></span><br><span class="line"><span class="string">&#123;&#x27;case_name&#x27;: &#x27;test_user_login_normal&#x27;, &#x27;url&#x27;: &#x27;http://115.28.108.130:5000/api/user/login/&#x27;, &#x27;method&#x27;: &#x27;POST&#x27;, &#x27;data&#x27;: &#x27;&#123;&quot;name&quot;: &quot;张三&quot;,&quot;password&quot;:&quot;123456&quot;&#125;&#x27;, &#x27;expect_res&#x27;: &#x27;&lt;h1&gt;登录成功&lt;/h1&gt;&#x27;&#125;</span></span><br><span class="line"><span class="string">[&#x27;case_name&#x27;, &#x27;url&#x27;, &#x27;method&#x27;, &#x27;data&#x27;, &#x27;expect_res&#x27;]</span></span><br><span class="line"><span class="string">[&#x27;test_user_login_normal&#x27;, &#x27;http://115.28.108.130:5000/api/user/login/&#x27;, &#x27;POST&#x27;, &#x27;&#123;&quot;name&quot;: &quot;张三&quot;,&quot;password&quot;:&quot;123456&quot;&#125;&#x27;, &#x27;&lt;h1&gt;登录成功&lt;/h1&gt;&#x27;]</span></span><br><span class="line"><span class="string">[&#x27;test_user_login_password_wrong&#x27;, &#x27;http://115.28.108.130:5000/api/user/login/&#x27;, &#x27;POST&#x27;, &#x27;&#123;&quot;name&quot;: &quot;张三&quot;,&quot;password&quot;:&quot;1234567&quot;&#125;&#x27;, &#x27;&lt;h1&gt;失败，用户不存在&lt;/h1&gt;&#x27;]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>封装读取excel操作：</strong></p><p>我们的目的是获取某条用例的数据，需要3个参数，excel数据文件名（data_file），工作簿名（sheet），用例名（case_name）<br>如果我们只封装一个函数，每次调用（每条用例）都要打开一次excel并遍历一次，这样效率比较低。<br>我们可以拆分成两个函数，一个函数<code>excel_to_list(data_file, sheet)</code>，一次获取一个工作表的所有数据，另一个函数<code>get_test_data(data_list, case_name)</code>从所有数据中去查找到该条用例的数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># read_excel.py</span></span><br><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">excel_to_list</span>(<span class="params">data_file, sheet</span>):</span><br><span class="line">    data_list = []  <span class="comment"># 新建个空列表，来乘装所有的数据</span></span><br><span class="line">    wb = xlrd.open_workbook(data_file)  <span class="comment"># 打开excel</span></span><br><span class="line">    sh = wb.sheet_by_name(sheet)  <span class="comment"># 获取工作簿</span></span><br><span class="line">    header = sh.row_values(<span class="number">0</span>)  <span class="comment"># 获取标题行数据</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, sh.nrows):  <span class="comment"># 跳过标题行，从第二行开始取数据</span></span><br><span class="line">        d = <span class="built_in">dict</span>(<span class="built_in">zip</span>(header, sh.row_values(i)))  <span class="comment"># 将标题和每行数据组装成字典</span></span><br><span class="line">        data_list.append(d)</span><br><span class="line">    <span class="keyword">return</span> data_list  <span class="comment"># 列表嵌套字典格式，每个元素是一个字典</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_test_data</span>(<span class="params">data_list, case_name</span>):</span><br><span class="line">    <span class="keyword">for</span> case_data <span class="keyword">in</span> data_list:</span><br><span class="line">        <span class="keyword">if</span> case_name == case_data[<span class="string">&#x27;case_name&#x27;</span>]:  <span class="comment"># 如果字典数据中case_name与参数一致</span></span><br><span class="line">            <span class="keyword">return</span> case_data</span><br><span class="line">            <span class="comment"># 如果查询不到会返回None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:   <span class="comment"># 测试一下自己的代码</span></span><br><span class="line">    data_list = excel_to_list(<span class="string">&quot;test_user_data.xlsx&quot;</span>, <span class="string">&quot;TestUserLogin&quot;</span>)  <span class="comment"># 读取excel，TestUserLogin工作簿的所有数据</span></span><br><span class="line">    case_data = get_test_data(data_list, <span class="string">&#x27;test_user_login_normal&#x27;</span>)  <span class="comment"># 查找用例&#x27;test_user_login_normal&#x27;的数据</span></span><br><span class="line">    <span class="built_in">print</span>(case_data)</span><br></pre></td></tr></table></figure><p>测试用例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># test_user_login.py</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> read_excel <span class="keyword">import</span> *  <span class="comment"># 导入read_excel中的方法</span></span><br><span class="line"><span class="keyword">import</span> json  <span class="comment"># 用来转化excel中的json字符串为字典</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestUserLogin</span>(unittest.TestCase):</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUpClass</span>(<span class="params">cls</span>):   <span class="comment"># 整个测试类只执行一次</span></span><br><span class="line">        cls.data_list = excel_to_list(<span class="string">&quot;test_user_data.xlsx&quot;</span>, <span class="string">&quot;TestUserLogin&quot;</span>)  <span class="comment"># 读取该测试类所有用例数据</span></span><br><span class="line">        <span class="comment"># cls.data_list 同 self.data_list 都是该类的公共属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_user_login_normal</span>(<span class="params">self</span>):</span><br><span class="line">        case_data = get_test_data(self.data_list, <span class="string">&#x27;test_user_login_normal&#x27;</span>)   <span class="comment"># 从数据列表中查找到该用例数据</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> case_data:   <span class="comment"># 有可能为None</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;用例数据不存在&quot;</span>)</span><br><span class="line">        url = case_data.get(<span class="string">&#x27;url&#x27;</span>)   <span class="comment"># 从字典中取数据，excel中的标题也必须是小写url</span></span><br><span class="line">        data = case_data.get(<span class="string">&#x27;data&#x27;</span>)  <span class="comment"># 注意字符串格式，需要用json.loads()转化为字典格式</span></span><br><span class="line">        expect_res = case_data.get(<span class="string">&#x27;expect_res&#x27;</span>)  <span class="comment"># 期望数据</span></span><br><span class="line"></span><br><span class="line">        res = requests.post(url=url, data=json.loads(data))  <span class="comment"># 表单请求，数据转为字典格式</span></span><br><span class="line">        self.assertEqual(res.text, expect_res)  <span class="comment"># 改为assertEqual断言</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:   <span class="comment"># 非必要，用于测试我们的代码</span></span><br><span class="line">    unittest.main(verbosity=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><strong>增加log功能</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.DEBUG,  <span class="comment"># log level</span></span><br><span class="line">                    <span class="built_in">format</span>=<span class="string">&#x27;[%(asctime)s] %(levelname)s [%(funcName)s: %(filename)s, %(lineno)d] %(message)s&#x27;</span>,  <span class="comment"># log格式</span></span><br><span class="line">                    datefmt=<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>,  <span class="comment"># 日期格式</span></span><br><span class="line">                    filename=<span class="string">&#x27;log.txt&#x27;</span>,  <span class="comment"># 日志输出文件</span></span><br><span class="line">                    filemode=<span class="string">&#x27;a&#x27;</span>)  <span class="comment"># 追加模式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    logging.info(<span class="string">&quot;hello&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>Log Level:</strong></p><ul><li>CRITICAL: 用于输出严重错误信息</li><li>ERROR: 用于输出错误信息</li><li>WARNING: 用于输出警示信息</li><li>INFO: 用于输出一些提升信息</li><li>DEBUG: 用于输出一些调试信息</li></ul><p><strong>日志格式:</strong></p><ul><li>%(levelno)s: 打印日志级别的数值</li><li>%(levelname)s: 打印日志级别名称</li><li>%(pathname)s: 打印当前执行程序的路径，其实就是sys.argv[0]</li><li>%(filename)s: 打印当前执行程序名</li><li>%(funcName)s: 打印日志的当前函数</li><li>%(lineno)d: 打印日志的当前行号</li><li>%(asctime)s: 打印日志的时间</li><li>%(thread)d: 打印线程ID</li><li>%(threadName)s: 打印线程名称</li><li>%(process)d: 打印进程ID</li><li>%(message)s: 打印日志信息</li></ul><p><strong>项目使用log</strong><br>将所有print改为log，如<code>db.py</code> 部分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># db.py</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 封装数据库查询操作</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_db</span>(<span class="params">sql</span>):</span><br><span class="line">    conn = get_db_conn()</span><br><span class="line">    cur = conn.cursor()  </span><br><span class="line">    logging.debug(sql)    <span class="comment"># 输出执行的sql</span></span><br><span class="line">    cur.execute(sql)</span><br><span class="line">    conn.commit()</span><br><span class="line">    result = cur.fetchall() </span><br><span class="line">    logging.debug(result)  <span class="comment"># 输出查询结果</span></span><br><span class="line">    cur.close() </span><br><span class="line">    conn.close() </span><br><span class="line">    <span class="keyword">return</span> result </span><br><span class="line"></span><br><span class="line"><span class="comment"># 封装更改数据库操作</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_db</span>(<span class="params">sql</span>):</span><br><span class="line">    conn = get_db_conn() </span><br><span class="line">    cur = conn.cursor()</span><br><span class="line">    logging.debug(sql)  <span class="comment"># 输出执行的sql</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cur.execute(sql) </span><br><span class="line">        conn.commit() </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        conn.rollback() </span><br><span class="line">        logging.error(<span class="built_in">str</span>(e))  <span class="comment"># 输出错误信息</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        cur.close() </span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># test_user_login.py</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> read_excel <span class="keyword">import</span> *  <span class="comment"># 导入read_excel中的方法</span></span><br><span class="line"><span class="keyword">import</span> json  <span class="comment"># 用来转化excel中的json字符串为字典</span></span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestUserLogin</span>(unittest.TestCase):</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUpClass</span>(<span class="params">cls</span>):   <span class="comment"># 整个测试类只执行一次</span></span><br><span class="line">        cls.data_list = excel_to_list(<span class="string">&quot;test_user_data.xlsx&quot;</span>, <span class="string">&quot;TestUserLogin&quot;</span>)  <span class="comment"># 读取该测试类所有用例数据</span></span><br><span class="line">        <span class="comment"># cls.data_list 同 self.data_list 都是该类的公共属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_user_login_normal</span>(<span class="params">self</span>):</span><br><span class="line">        case_data = get_test_data(self.data_list, <span class="string">&#x27;test_user_login_normal&#x27;</span>)   <span class="comment"># 从数据列表中查找到该用例数据</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> case_data:   <span class="comment"># 有可能为None</span></span><br><span class="line">            logging.error(<span class="string">&quot;用例数据不存在&quot;</span>)</span><br><span class="line">        url = case_data.get(<span class="string">&#x27;url&#x27;</span>)   <span class="comment"># excel中的标题也必须是小写url</span></span><br><span class="line">        data = case_data.get(<span class="string">&#x27;data&#x27;</span>)  <span class="comment"># 注意字符串格式，需要用json.loads()转化为字典格式</span></span><br><span class="line">        expect_res = case_data.get(<span class="string">&#x27;expect_res&#x27;</span>)  <span class="comment"># 期望数据</span></span><br><span class="line"></span><br><span class="line">        res = requests.post(url=url, data=json.loads(data))  <span class="comment"># 表单请求，数据转为字典格式</span></span><br><span class="line">        <span class="comment"># 这段logger打印可以单独封装出去，后期可以其他case调用</span></span><br><span class="line">        logging.info(<span class="string">&quot;测试用例：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&#x27;test_user_login_normal&#x27;</span>))</span><br><span class="line">        logging.info(<span class="string">&quot;url：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(url))</span><br><span class="line">        logging.info(<span class="string">&quot;请求参数：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(data))</span><br><span class="line">        logging.info(<span class="string">&quot;期望结果：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(expect_res))</span><br><span class="line">        logging.info(<span class="string">&quot;实际结果：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(res.text)</span><br><span class="line">        self.assertEqual(res.text, expect_res)  <span class="comment"># 断言</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main(verbosity=<span class="number">2</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="更简单的用例编写"><a href="#更简单的用例编写" class="headerlink" title="更简单的用例编写"></a>更简单的用例编写</h2><h3 id="使用用例基类"><a href="#使用用例基类" class="headerlink" title="使用用例基类"></a>使用用例基类</h3><p>因为每条用例都需要从excel中读取数据，解析数据，发送请求，断言响应结果，我们可以封装一个<code>BaseCase</code>的用例基础类，对一些方法进行封装，来简化用例编写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># baseCase.py</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">&quot;../..&quot;</span>)   <span class="comment"># 统一将包的搜索路径提升到项目根目录下</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lib.read_excel <span class="keyword">import</span> *  </span><br><span class="line"><span class="keyword">from</span> lib.case_log <span class="keyword">import</span> log_case_info </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaseCase</span>(unittest.TestCase):   <span class="comment"># 继承unittest.TestCase</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUpClass</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">if</span> cls.__name__ != <span class="string">&#x27;BaseCase&#x27;</span>:</span><br><span class="line">            cls.data_list = excel_to_list(data_file, cls.__name__)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_case_data</span>(<span class="params">self, case_name</span>):</span><br><span class="line">        <span class="keyword">return</span> get_test_data(self.data_list, case_name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_request</span>(<span class="params">self, case_data</span>):</span><br><span class="line">        case_name = case_data.get(<span class="string">&#x27;case_name&#x27;</span>)</span><br><span class="line">        url = case_data.get(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">        args = case_data.get(<span class="string">&#x27;args&#x27;</span>)</span><br><span class="line">        headers = case_data.get(<span class="string">&#x27;headers&#x27;</span>)</span><br><span class="line">        expect_res = case_data.get(<span class="string">&#x27;expect_res&#x27;</span>)</span><br><span class="line">        method = case_data.get(<span class="string">&#x27;method&#x27;</span>)</span><br><span class="line">        data_type = case_data.get(<span class="string">&#x27;data_type&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> method.upper() == <span class="string">&#x27;GET&#x27;</span>:   <span class="comment"># GET类型请求</span></span><br><span class="line">            res = requests.get(url=url, params=json.loads(args))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> data_type.upper() == <span class="string">&#x27;FORM&#x27;</span>:   <span class="comment"># 表单格式请求</span></span><br><span class="line">            res = requests.post(url=url, data=json.loads(args), headers=json.loads(headers))</span><br><span class="line">            log_case_info(case_name, url, args, expect_res, res.text)</span><br><span class="line">            self.assertEqual(res.text, expect_res)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res = requests.post(url=url, json=json.loads(args), headers=json.loads(headers))   <span class="comment"># JSON格式请求</span></span><br><span class="line">            log_case_info(case_name, url, args, json.dumps(json.loads(expect_res), sort_keys=<span class="literal">True</span>),</span><br><span class="line">                          json.dumps(res.json(), ensure_ascii=<span class="literal">False</span>, sort_keys=<span class="literal">True</span>))</span><br><span class="line">            self.assertDictEqual(res.json(), json.loads(expect_res))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># test_user_login.py</span></span><br><span class="line"><span class="keyword">from</span> test.<span class="keyword">case</span>.basecase <span class="keyword">import</span> BaseCase</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestUserLogin</span>(<span class="title class_ inherited__">BaseCase</span>):   <span class="comment"># 这里直接继承BaseCase</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_user_login_normal</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;level1:正常登录&quot;&quot;&quot;</span></span><br><span class="line">        case_data = self.get_case_data(<span class="string">&quot;test_user_login_normal&quot;</span>)</span><br><span class="line">        self.send_request(case_data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_user_login_password_wrong</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;密码错误登录&quot;&quot;&quot;</span></span><br><span class="line">        case_data = self.get_case_data(<span class="string">&quot;test_user_login_password_wrong&quot;</span>)</span><br><span class="line">        self.send_request(case_data)</span><br></pre></td></tr></table></figure><h3 id="按用例标签运行"><a href="#按用例标签运行" class="headerlink" title="按用例标签运行"></a>按用例标签运行</h3><p>unittest并没有tag相关功能，一种实现方案是添加自定义装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">tag</span>(<span class="params">tag</span>):</span><br><span class="line">    <span class="keyword">if</span> tag==OptionParser.options.tag:   <span class="comment"># 运行的命令行参数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">lambda</span> func: func    <span class="comment"># 如果用例的tag==命令行指定的tag参数，返回用例本身</span></span><br><span class="line">    <span class="keyword">return</span> unittest.skip(<span class="string">&quot;跳过不包含该tag的用例&quot;</span>)    <span class="comment">#  否则跳过用例</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用装饰器进行标记</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">这种方法在最后的报告中会出现很多skipped的用例，可能会干扰到因其他（如环境）原因需要跳过的用例</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="meta">@tag(<span class="params"><span class="string">&quot;level1&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_a</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>用例标记方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestUserLogin</span>(<span class="title class_ inherited__">BaseCase</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_user_login_normal</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;level1:正常登录&quot;&quot;&quot;</span>    <span class="comment"># level1及是一个标签，放到docstring哪里都可以</span></span><br><span class="line">        case_data = self.get_case_data(<span class="string">&quot;test_user_login_normal&quot;</span>)</span><br><span class="line">        self.send_request(case_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过获取docstring方式</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">makesuite_by_tag</span>(<span class="params">tag</span>):</span><br><span class="line">    suite = unittest.TestSuite()</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">case</span> <span class="keyword">in</span> collect():</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">case</span>._testMethodDoc <span class="keyword">and</span> tag <span class="keyword">in</span> <span class="keyword">case</span>._testMethodDoc:  <span class="comment"># 如果用例方法存在docstring,并且docstring中包含本标签</span></span><br><span class="line">            suite.addTest(<span class="keyword">case</span>)</span><br><span class="line">    <span class="keyword">return</span> suite    </span><br></pre></td></tr></table></figure><h3 id="重新运行上次失败用例"><a href="#重新运行上次失败用例" class="headerlink" title="重新运行上次失败用例"></a>重新运行上次失败用例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_failures</span>(<span class="params">result, file</span>):   <span class="comment"># file为序列化保存的文件名，配置在config/config.py中</span></span><br><span class="line">    suite = unittest.TestSuite()</span><br><span class="line">    <span class="keyword">for</span> case_result <span class="keyword">in</span> result.failures:   <span class="comment"># 组装TestSuite</span></span><br><span class="line">        suite.addTest(case_result[<span class="number">0</span>])   <span class="comment"># case_result是个元祖，第一个元素是用例对象，后面是失败原因等等</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        pickle.dump(suite, f)    <span class="comment"># 序列化到指定文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rerun_fails</span>():  <span class="comment"># 失败用例重跑方法</span></span><br><span class="line">    sys.path.append(test_case_path)   <span class="comment"># 需要将用例路径添加到包搜索路径中，不然反序列化TestSuite会找不到用例</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(last_fails_file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        suite = pickle.load(f)    <span class="comment"># 反序列化得到TestSuite</span></span><br><span class="line">    run(suite)</span><br></pre></td></tr></table></figure><h3 id="使用命令行参数"><a href="#使用命令行参数" class="headerlink" title="使用命令行参数"></a>使用命令行参数</h3><p>​为测试执行添加其他自定义命令行参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令行选项</span></span><br><span class="line">parser = OptionParser()</span><br><span class="line"></span><br><span class="line">parser.add_option(<span class="string">&#x27;--collect-only&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, dest=<span class="string">&#x27;collect_only&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;仅列出所有用例&#x27;</span>)</span><br><span class="line">parser.add_option(<span class="string">&#x27;--rerun-fails&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, dest=<span class="string">&#x27;rerun_fails&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;运行上次失败的用例&#x27;</span>)</span><br><span class="line">parser.add_option(<span class="string">&#x27;--testlist&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, dest=<span class="string">&#x27;testlist&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;运行test/testlist.txt列表指定用例&#x27;</span>)</span><br><span class="line"></span><br><span class="line">parser.add_option(<span class="string">&#x27;--testsuite&#x27;</span>, action=<span class="string">&#x27;store&#x27;</span>, dest=<span class="string">&#x27;testsuite&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;运行指定的TestSuite&#x27;</span>)</span><br><span class="line">parser.add_option(<span class="string">&#x27;--tag&#x27;</span>, action=<span class="string">&#x27;store&#x27;</span>, dest=<span class="string">&#x27;tag&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;运行指定tag的用例&#x27;</span>)</span><br><span class="line"></span><br><span class="line">(options, args) = parser.parse_args()  <span class="comment"># 应用选项（使生效）</span></span><br></pre></td></tr></table></figure><h2 id="Mock-Server"><a href="#Mock-Server" class="headerlink" title="Mock Server"></a>Mock Server</h2><p><strong>Mock</strong> 即模拟，就是在测试过程中，对于某些不容易构造或者不容易获取的对象，用一个虚拟的对象来创建以便测试的测试方法，其最大的优势就是降级前后端耦合度，使前端工程师可以不依赖后端返回数据，先开发前端样式以及逻辑处理</p><p><strong>Mock Server</strong> 即Mock接口服务器，可以通过配置快速Mock出新的接口</p><p><strong>Mock Server的使用范围</strong></p><ul><li>前后端分离项目</li><li>所测接口依赖第三方系统（还未具备）</li><li>所测接口依赖复杂或依赖的接口不稳定，并不作为主要验证对象</li></ul><h3 id="Postman还可以基于Collection建立Mock-Server，这里不再详述"><a href="#Postman还可以基于Collection建立Mock-Server，这里不再详述" class="headerlink" title="Postman还可以基于Collection建立Mock Server，这里不再详述"></a>Postman还可以基于Collection建立Mock Server，这里不再详述</h3><h3 id="Python-Flask自己搭建Mock接口"><a href="#Python-Flask自己搭建Mock接口" class="headerlink" title="Python+Flask自己搭建Mock接口"></a><strong>Python+Flask自己搭建Mock接口</strong></h3><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask</span><br></pre></td></tr></table></figure><h4 id="生成mock接口数据"><a href="#生成mock接口数据" class="headerlink" title="生成mock接口数据"></a>生成mock接口数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify, abort</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">app = Flask(__name__) <span class="comment"># 实例化一个Flask对象</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/api/user/reg/&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reg</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> request.json <span class="keyword">or</span> <span class="keyword">not</span> <span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> request.json <span class="keyword">or</span> <span class="keyword">not</span> <span class="string">&#x27;password&#x27;</span> <span class="keyword">in</span> request.json:</span><br><span class="line">        abort(<span class="number">404</span>) </span><br><span class="line">    res = [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="string">&quot;code&quot;</span>: <span class="string">&quot;100000&quot;</span>,</span><br><span class="line">                <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;成功&quot;</span>,</span><br><span class="line">                <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">                  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;李六&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;password&quot;</span>: <span class="string">&quot;e10adc3949ba59abbe56e057f20f883e&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="string">&quot;code&quot;</span>: <span class="string">&quot;100001&quot;</span>,</span><br><span class="line">                <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;失败，用户已存在&quot;</span>,</span><br><span class="line">                <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">                  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;李六&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;password&quot;</span>: <span class="string">&quot;e10adc3949ba59abbe56e057f20f883e&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="string">&quot;code&quot;</span>: <span class="string">&quot;100002&quot;</span>,</span><br><span class="line">                <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;失败，添加用户失败&quot;</span>,</span><br><span class="line">                <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">                  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;李六&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;password&quot;</span>: <span class="string">&quot;e10adc3949ba59abbe56e057f20f883e&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> jsonify(random.choice(res))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> 接口自动化 </category>
          
          <category> request </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 接口自动化 </tag>
            
            <tag> request </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unittest-单元测试框架</title>
      <link href="/2024/04/08/unittest-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
      <url>/2024/04/08/unittest-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="unittest—-单元测试框架"><a href="#unittest—-单元测试框架" class="headerlink" title="unittest— 单元测试框架"></a><code>unittest</code>— 单元测试框架</h2><p>​Unittest测试框架的的原理是将继承unittest.TestCase的测试类中，所有的test开头的测试函数，生成该测试类的一个对象，然后组装成测试套件，使用测试运行器(TestRunner)运行并使用测试结果(TestResult)对象纪录每个用例的运行状态。</p><h3 id="基本架构"><a href="#基本架构" class="headerlink" title="基本架构"></a>基本架构</h3><ul><li>TestCase ：测试用例</li><li>TestSuite：测试套件</li><li>TestLoader：测试用例加载器</li><li>TestResult：测试结果记录器</li><li>TestRunner：测试运行器</li></ul><h3 id="测试用例-TestCase"><a href="#测试用例-TestCase" class="headerlink" title="测试用例 (TestCase)"></a>测试用例 (TestCase)</h3><h4 id="用例文件创建"><a href="#用例文件创建" class="headerlink" title="用例文件创建"></a>用例文件创建</h4><p>用例执行顺序：并非按书写顺序执行，而是按用例名ascii码先后顺序执行</p><ol><li>新建一个test_开头（必须）的.py文件，如<code>test_user_login.py</code></li><li>导入unittest</li><li>编写一个Test开头（必须）的类，并继承unittest.TestCase，做为测试类</li><li>在类中编写一个test_开头（必须）的方法，作为用例</li></ol><h4 id="用例类定义"><a href="#用例类定义" class="headerlink" title="用例类定义"></a>用例类定义</h4><ul><li><p>创建的类必须继承 unitest.TestCase</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDemo</span>(unittest.TestCase)</span><br></pre></td></tr></table></figure></li></ul><h4 id="用例方法定义"><a href="#用例方法定义" class="headerlink" title="用例方法定义"></a>用例方法定义</h4><ul><li><p>每一个测试用例都是一个方法, 以 test_ 开头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDemo</span>(unittest.TestCase):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_01_login</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;login case&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_02_logout</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;logout case&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure></li></ul><h4 id="命令行界面执行当前测试类的用例"><a href="#命令行界面执行当前测试类的用例" class="headerlink" title="命令行界面执行当前测试类的用例"></a>命令行界面执行当前测试类的用例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以文件执行</span></span><br><span class="line">python -m unittest test_module1 test_module2</span><br><span class="line"><span class="comment"># 以类为单位执行</span></span><br><span class="line">python -m unittest test_module.TestClass</span><br><span class="line"><span class="comment"># 以方法为单位执行</span></span><br><span class="line">python -m unittest test_module.TestClass.test_method</span><br><span class="line"><span class="comment"># 可以通过传入 -v 标志来运行更详细（更详细）的测试：</span></span><br><span class="line">python -m unittest -v test_module</span><br></pre></td></tr></table></figure><h3 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h3><table><thead><tr><th align="left">方法</th><th align="left">检查</th><th align="left">新品</th></tr></thead><tbody><tr><td align="left"><a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertEqual"><code>assertEqual(a, b)</code></a></td><td align="left"><code>a == b</code></td><td align="left"></td></tr><tr><td align="left"><a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNotEqual"><code>assertNotEqual(a, b)</code></a></td><td align="left"><code>a != b</code></td><td align="left"></td></tr><tr><td align="left"><a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertTrue"><code>assertTrue（x）</code></a></td><td align="left"><code>bool(x) is True</code></td><td align="left"></td></tr><tr><td align="left"><a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertFalse"><code>assertFalse（x）</code></a></td><td align="left"><code>bool(x) is False</code></td><td align="left"></td></tr><tr><td align="left"><a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIs"><code>assertIs(a, b)</code></a></td><td align="left"><code>a is b</code></td><td align="left">3.1</td></tr><tr><td align="left"><a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIsNot"><code>assertIsNot(a, b)</code></a></td><td align="left"><code>a is not b</code></td><td align="left">3.1</td></tr><tr><td align="left"><a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIsNone"><code>assertIsNone（x）</code></a></td><td align="left"><code>x is None</code></td><td align="left">3.1</td></tr><tr><td align="left"><a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIsNotNone"><code>assertIsNotNone（x）</code></a></td><td align="left"><code>x is not None</code></td><td align="left">3.1</td></tr><tr><td align="left"><a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIn"><code>assertIn(a, b)</code></a></td><td align="left"><code>a in b</code></td><td align="left">3.1</td></tr><tr><td align="left"><a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNotIn"><code>assertNotIn(a, b)</code></a></td><td align="left"><code>a not in b</code></td><td align="left">3.1</td></tr><tr><td align="left"><a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIsInstance"><code>assertIsInstance(a, b)</code></a></td><td align="left"><code>isinstance(a, b)</code></td><td align="left">3.2</td></tr><tr><td align="left"><a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNotIsInstance"><code>assertNotIsInstance(a, b)</code></a></td><td align="left"><code>not isinstance(a, b)</code></td><td align="left">3.2</td></tr><tr><td align="left"><a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertGreater"><code>assertGreater(a, b)</code></a></td><td align="left"><code>a &gt; b</code></td><td align="left">3.1</td></tr><tr><td align="left"><a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertGreaterEqual"><code>assertGreaterEqual(a, b)</code></a></td><td align="left"><code>a &gt;= b</code></td><td align="left">3.1</td></tr><tr><td align="left"><a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertLess"><code>assertLess(a, b)</code></a></td><td align="left"><code>a &lt; b</code></td><td align="left">3.1</td></tr><tr><td align="left"><a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertLessEqual"><code>assertLessEqual(a, b)</code></a></td><td align="left"><code>a &lt;= b</code></td><td align="left">3.1</td></tr></tbody></table><h3 id="测试夹具-FixTure"><a href="#测试夹具-FixTure" class="headerlink" title="测试夹具 (FixTure)"></a>测试夹具 (FixTure)</h3><p>测试夹具表示执行一项或多项<em>测试夹具</em>所需的准备工作 测试，以及任何关联的清理操作。例如，这可能涉及 创建临时或代理数据库、目录或启动服务器 过程。</p><h4 id="setup"><a href="#setup" class="headerlink" title="setup()"></a>setup()</h4><p>​用例前置方法，每执行一个测试用例 (def) 之前都会调用一次</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDemo</span>(unittest.TestCase):</span><br><span class="line">    <span class="comment"># 每执行完一个def 测试用例之前就会执行一次setUp()</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUp</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;def init&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_01_login</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;login case&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_02_logout</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;logout case&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h4 id="TearDown"><a href="#TearDown" class="headerlink" title="TearDown()"></a>TearDown()</h4><p>​用例后置方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDemo</span>(unittest.TestCase):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUp</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;def setup&quot;</span>)</span><br><span class="line">    <span class="comment"># 每执行完一个def 测试用例之后就会执行一次tearDown()</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tearDown</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;def tearDown&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_01_login</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;login case&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_02_logout</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;logout case&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h4 id="setUpClass"><a href="#setUpClass" class="headerlink" title="setUpClass()"></a>setUpClass()</h4><p>​类前置方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDemo</span>(unittest.TestCase):</span><br><span class="line">    <span class="comment"># 每执行类之前就会执行一次setUpClass()</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUpClass</span>(<span class="params">cls</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;class setUp&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUp</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;def setup&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tearDown</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;def tearDown&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_01_login</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;login case&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_02_logout</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;logout case&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h4 id="TearDownClass"><a href="#TearDownClass" class="headerlink" title="TearDownClass()"></a>TearDownClass()</h4><p>​类后置方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDemo</span>(unittest.TestCase):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setUpClass</span>(<span class="params">cls</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;class setUp&quot;</span>)</span><br><span class="line">   <span class="comment"># 每执行类之后就会执行一次tearDownClass()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tearDownClass</span>(<span class="params">cls</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;class tearDown&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setUp</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;def setup&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tearDown</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;def tearDown&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_01_login</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;login case&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_02_logout</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;logout case&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h3 id="测试套件-TestSuite"><a href="#测试套件-TestSuite" class="headerlink" title="测试套件  (TestSuite)"></a>测试套件  (TestSuite)</h3><p><em>测试套件</em>是测试用例和&#x2F;或测试套件的集合。收集测试用例</p><p>​在正常的命令执行时，一次只能运行一个文件或一个测试用例；使用测试套件就可以将一些python文件放在一起执行</p><h4 id="创建测试套件"><a href="#创建测试套件" class="headerlink" title="创建测试套件"></a>创建测试套件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建测试套件</span></span><br><span class="line">suite = unittest.TestSuite()</span><br></pre></td></tr></table></figure><h4 id="创建用例加载器-装载器"><a href="#创建用例加载器-装载器" class="headerlink" title="创建用例加载器 - 装载器"></a>创建用例加载器 - 装载器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建测试套件</span></span><br><span class="line">suite = unittest.TestSuite()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用例加载器 - 往测试套件添加测试用例用的</span></span><br><span class="line">loader = unittest.TestLoader()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="添加用例"><a href="#添加用例" class="headerlink" title="添加用例"></a>添加用例</h4><ul><li><p>loadTestsFromTestCase(‘测试用例的类名’) - 通过测试类对象加载其中的所有测试函数，生成测试套件</p></li><li><p>loadTestsFromModule(‘测试用例文件名&#x2F;模块名’, , pattern&#x3D;’test_*.py’) - 通过测试模块加载其中的所有测试用例，生成测试套件</p></li><li><p>loadTestsFromName(‘测试用例文件名&#x2F;测试用例类名通用’) - 通过字符串格式的测试函数导入路径名</p></li><li><p>loadTestsFromNames(names, module&#x3D;None)：通过测试函数导入路径名，批量加载测试用例</p></li><li><p>getTestCaseNames(testCaseClass)：通过测试类获取其中所有测试函数的测试函数导入路径名</p></li><li><p>discover(start_dir&#x3D;’.&#x2F;‘, pattern&#x3D;’test_*.py’)  <strong>模块过滤</strong>装载器</p><p>​start_dir筛选路径, pattern筛选文件名</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建测试套件</span></span><br><span class="line">suite = unittest.TestSuite()</span><br><span class="line"><span class="comment"># 创建用例加载器 - 往测试套件添加测试用例用的</span></span><br><span class="line">loader = unittest.TestLoader()</span><br><span class="line"><span class="comment"># 加载用例</span></span><br><span class="line"><span class="comment"># 通过测试类加载整个类的用例 (以test_开头的方法)</span></span><br><span class="line"><span class="keyword">from</span> demo1.test01Demo <span class="keyword">import</span> TestDemo</span><br><span class="line">testClass01 = loader.loadTestsFromTestCase(TestDemo)</span><br><span class="line"><span class="comment"># 通过模块的方式加载测试用例， 模块就是一个py文件</span></span><br><span class="line"><span class="keyword">from</span> demo1 <span class="keyword">import</span> test01Demo</span><br><span class="line">testClass02 = loader.loadTestsFromModule(TestDemo)</span><br><span class="line"><span class="comment"># 通过文件夹路径，添加整个文件夹下的py模块 (pattern匹配规则以test开头的文件)</span></span><br><span class="line">testClass03 = loader.discover(<span class="string">r&quot;C:\test\testCase\&quot;, pattern=&quot;</span>test*.py<span class="string">&quot;)</span></span><br><span class="line"><span class="string">                              </span></span><br><span class="line"><span class="string">suite.addTest(TestClass01())</span></span><br><span class="line"><span class="string">suite.addTest(TestClass02())</span></span><br><span class="line"><span class="string">suite.addTest(TestClass03())</span></span><br><span class="line"><span class="string"># or</span></span><br><span class="line"><span class="string">suite.addTests([</span></span><br><span class="line"><span class="string">    TestClass01(), </span></span><br><span class="line"><span class="string">    TestClass02(), </span></span><br><span class="line"><span class="string">    TestClass03()</span></span><br><span class="line"><span class="string">])</span></span><br></pre></td></tr></table></figure><h4 id="获取套件中的用例数量"><a href="#获取套件中的用例数量" class="headerlink" title="获取套件中的用例数量"></a>获取套件中的用例数量</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建测试套件</span></span><br><span class="line">suite = unittest.TestSuite()</span><br><span class="line"><span class="comment"># 创建用例加载器 - 往测试套件添加测试用例用的</span></span><br><span class="line">loader = unittest.TestLoader()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">其他： suite 属性</span></span><br><span class="line"><span class="string">_testMethodName：字符串类型，测试方法(函数)名</span></span><br><span class="line"><span class="string">_testMethodDoc：字符串类型，测试方法(函数)docstring注释</span></span><br><span class="line"><span class="string">_outcome: 用例结果，unittest._Outcome对象，包含测试结果result(TestResult对象)及用例过执行异常errors等</span></span><br><span class="line"><span class="string">id()：用例标识，为用例的导入路径，例如test_demo.TestDemo.test_a</span></span><br><span class="line"><span class="string">shortDescription()：用例描述，_testMethodDoc的第一行内容</span></span><br><span class="line"><span class="string">defaultTestResult()：默认使用的测试结果result对象(新建一个TestResult对象)</span></span><br><span class="line"><span class="string">countTestCases()：用例数量，固定为1</span></span><br><span class="line"><span class="string">run(result=None)：用例运行方法</span></span><br><span class="line"><span class="string">debug()：用例调试方法，不纪录测试结果</span></span><br><span class="line"><span class="string">fail(msg=None)：使用例失败</span></span><br><span class="line"><span class="string">skipTest(reason)：使用例跳过(抛出SkipTest异常)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">for test in suite:</span></span><br><span class="line"><span class="string">    print(&#x27;用例id:&#x27;, test.id())</span></span><br><span class="line"><span class="string">    print(&#x27;用例描述:&#x27;, test.shortDescription())</span></span><br><span class="line"><span class="string">    print(&#x27;测试方法(函数)名：&#x27;, test._testMethodName)</span></span><br><span class="line"><span class="string">    print(&#x27;测试方法(函数)完整docstring:&#x27;, test._testMethodDoc)</span></span><br><span class="line"><span class="string">    print(&#x27;所属测试类(名称):&#x27;, test.__class__.__name__)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 可以通过 用例 测试类对象 + 对应的测试方法名 获取测试方法对象</span></span><br><span class="line"><span class="string">    testMethod = getattr(test.__class__, test._testMethodName)</span></span><br><span class="line"><span class="string">    print(&#x27;测试方法(函数)对象:&#x27;, testMethod)</span></span><br><span class="line"><span class="string">    # 通过测试方法对象可以拿到很多相关信息</span></span><br><span class="line"><span class="string">    print(&#x27;测试方法(函数)名:&#x27;, testMethod.__name__)  # 同test._testMethodName</span></span><br><span class="line"><span class="string">    print(&#x27;测试方法(函数)完整docstring:&#x27;, testMethod.__doc__)  # 同test._testMethodDoc</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用例数</span></span><br><span class="line">caseNumber = suite.countTestCases()</span><br><span class="line"><span class="built_in">print</span>(caseNumber)</span><br></pre></td></tr></table></figure><h3 id="执行测试套件"><a href="#执行测试套件" class="headerlink" title="执行测试套件"></a>执行测试套件</h3><h4 id="unittest的TestResult-类方法"><a href="#unittest的TestResult-类方法" class="headerlink" title="unittest的TestResult 类方法"></a>unittest的TestResult 类方法</h4><p><strong>常用方法</strong></p><ul><li>wasSuccessful()：是否全部成功</li><li>stop()：停止当前测试运行</li><li>startTest(test)：开始(纪录)测试某用例</li><li>stopTest(test)：停止(纪录)测试某用例</li><li>startTestRun()：开始(纪录)整体的测试运行</li><li>stopTestRun()：停止(纪录)整体的测试运行</li><li>addError(test, err)：纪录异常用例</li><li>addFailure(test, err)：纪录失败的用例</li><li>addSuccess(test)：纪录成功的用例(默认什么都不做)</li><li>addSkip(test, reason)：纪录跳过的测试用例</li><li>addExpectedFailure(test, err)：纪录期望失败的测试用例</li><li>addUnexpectedSuccess(test)：纪录非预期成功的测试用例</li><li>addSubTest(test, subtest, outcome)：纪录子测试</li></ul><h4 id="执行测试套件-1"><a href="#执行测试套件-1" class="headerlink" title="执行测试套件"></a>执行测试套件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建测试套件</span></span><br><span class="line">suite = unittest.TestSuite()</span><br><span class="line"><span class="comment"># 创建用例加载器 - 往测试套件添加测试用例用的</span></span><br><span class="line">loader = unittest.TestLoader()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"> ... 添加用例逻辑</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 运行测试套件所有的用例</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">TextTestRunner() __init__ 方法参数：</span></span><br><span class="line"><span class="string">stream = f f为文件流，测试结果将会写入到该文件流中</span></span><br><span class="line"><span class="string">verbosity = 0 默认值为0，默认输出； 2 详细输出(测试类，测试用例，测试结果)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">runner = unittest.TextTestRunner()</span><br><span class="line">runner.run(suite)</span><br></pre></td></tr></table></figure><h4 id="直接传入路径加载放入到测试套件中"><a href="#直接传入路径加载放入到测试套件中" class="headerlink" title="直接传入路径加载放入到测试套件中"></a>直接传入路径加载放入到测试套件中</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建测试套件</span></span><br><span class="line">suite = unittest.TestSuite()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过路径，自动发现测试用例</span></span><br><span class="line">suite = unittest.defaultTestLoader.discover(<span class="string">r&#x27;C:\test\testCase\&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">runner = unittest.TextTestRunner()</span></span><br><span class="line"><span class="string">runner.run(suite)</span></span><br></pre></td></tr></table></figure><h4 id="使用第三方库-BeautfulReport、HtmlTestRunner-生成html报告"><a href="#使用第三方库-BeautfulReport、HtmlTestRunner-生成html报告" class="headerlink" title="使用第三方库 BeautfulReport、HtmlTestRunner 生成html报告"></a>使用第三方库 BeautfulReport、HtmlTestRunner 生成html报告</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> BeautfulReport <span class="keyword">as</span> HtmlReport</span><br><span class="line"><span class="comment"># 创建测试套件</span></span><br><span class="line">suite = unittest.TestSuite()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过路径直接加载全部用例</span></span><br><span class="line">suite = unittest.defaultTestLoader.discover(<span class="string">r&#x27;C:\test\testCase\&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">runner = HtmlReport(suites=suite)</span></span><br><span class="line"><span class="string">runner.report(description=&quot;测试报告描述&quot;)</span></span><br></pre></td></tr></table></figure><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><ul><li><p>@unittest.expectedFailure</p><p>​测试用例结果为失败时，则pass</p></li><li><p>@unittest.skip(‘跳过的原因’)</p><p>​无条件跳过装饰测试。</p></li><li><p>@unittest.skipIf(‘跳过条件’, ‘跳过的原因’)</p><p>​如果<em>条件</em>为 true，则跳过修饰测试</p></li><li><p>@unittest.skipUnless(‘不跳过的条件’, ‘不跳过的原因’)</p><p>​条件为 false，则跳过修饰测试</p></li></ul><h3 id="测试覆盖率"><a href="#测试覆盖率" class="headerlink" title="测试覆盖率"></a>测试覆盖率</h3><p>​<code>coverage.py</code>是一个用于评估Python代码测试覆盖率的工具。它可以帮助你确定你的测试用例是否足够全面地覆盖了代码，并且可以生成报告来帮助你识别哪些代码没有被测试到。</p><p>使用<code>coverage.py</code>很简单，只需要在运行测试之前安装它，然后在测试运行时使用<code>coverage run</code>命令来运行测试。</p><ul><li><p>安装coverage </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install coverage</span><br></pre></td></tr></table></figure></li><li><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">coverage run test_divi.py</span><br></pre></td></tr></table></figure></li><li><p>生成文件</p><p><img src="/2024/04/08/unittest-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/htmlreport.png"></p></li><li><p>htmlcov 数据生成html</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">coverage html</span><br></pre></td></tr></table></figure></li></ul><h3 id="数据驱动测试DDT"><a href="#数据驱动测试DDT" class="headerlink" title="数据驱动测试DDT"></a>数据驱动测试DDT</h3><h4 id="数据驱动测试的基本概念、引读"><a href="#数据驱动测试的基本概念、引读" class="headerlink" title="数据驱动测试的基本概念、引读"></a>数据驱动测试的基本概念、引读</h4><ul><li>当我们进行测试时遇到执行步骤相同，只需要改变入口参数的测试时，使用DDT可以简化代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：</span></span><br><span class="line"><span class="comment"># 首先，我们观察这三个测试用例，我们会发现，三个测试用例除了入口参数需要变化，</span></span><br><span class="line"><span class="comment"># 其测试执行语句都是相同的，因此，为了简化测试代码，我们可以使用数据驱动测试的理论将三个方法写作一个方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 未使用数据驱动测试的代码：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasicTestCase</span>(unittest.TestCase):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test1</span>(<span class="params">self, num1</span>):</span><br><span class="line">        num = num1 + <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;number:&#x27;</span>, num)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test2</span>(<span class="params">self, num2</span>):</span><br><span class="line">        num = num2 + <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;number:&#x27;</span>, num)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test3</span>(<span class="params">self, num3</span>):</span><br><span class="line">        num = num3 + <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;number:&#x27;</span>, num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用数据驱动测试的代码，执行效果与上文代码相同此处只需要了解大概框架，详细步骤下文会解释</span></span><br><span class="line"><span class="meta">@ddt</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasicTestCase</span>(unittest.TestCase):</span><br><span class="line"><span class="meta">    @data(<span class="params"><span class="string">&#x27;666&#x27;</span>, <span class="string">&#x27;777&#x27;</span>, <span class="string">&#x27;888&#x27;</span></span>)    </span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self, num</span>):     </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;数据驱动的number:&#x27;</span>, num)</span><br></pre></td></tr></table></figure><ul><li><p>单一参数的数据驱动测试</p><p>导包——设置@ddt装饰器——写入参数——形参传递——调用</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单一参数的数据驱动</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 前置步骤：</span></span><br><span class="line"><span class="comment"># 使用语句import unittest导入测试框架</span></span><br><span class="line"><span class="comment"># 使用语句from ddt import ddt, data导入单一参数的数据驱动需要的包</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例会执行三次test，参数分别为&#x27;666&#x27;,&#x27;777&#x27;,&#x27;888&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ddt    </span><span class="comment"># 设置@ddt装饰器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasicTestCase</span>(unittest.TestCase):</span><br><span class="line"><span class="meta">    @data(<span class="params"><span class="string">&#x27;666&#x27;</span>, <span class="string">&#x27;777&#x27;</span>, <span class="string">&#x27;888&#x27;</span></span>)    </span><span class="comment"># 设置@data装饰器，并将传入参数写进括号</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self, num</span>):     <span class="comment"># test入口设置形参</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;数据驱动的number:&#x27;</span>, num)</span><br><span class="line"><span class="comment"># 程序会执行三次测试，入口参数分别为666、777、888，结果见下图</span></span><br></pre></td></tr></table></figure><ul><li><p>多参数的数据驱动测试(一个测试参数中含多个元素)</p><p>导包——设置@ddt装饰器——设置@unpack解包——写入参数——形参传递——调用</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多参数的数据驱动</span></span><br><span class="line"><span class="comment"># 在单一参数包的基础上，额外导入一个unpack的包，from ddt import ddt, data, unpack</span></span><br><span class="line"><span class="comment"># 步骤：导包——设置@ddt装饰器——设置@unpack解包——写入参数——形参传递——调用</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ddt  </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasicTestCase</span>(unittest.TestCase):</span><br><span class="line"><span class="meta">    @data(<span class="params">[<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;18&#x27;</span>], [<span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;19&#x27;</span>]</span>)  </span><span class="comment"># 设置@data装饰器，并将同一组参数写进中括号[]</span></span><br><span class="line"><span class="meta">    @unpack  </span><span class="comment"># 设置@unpack装饰器顺序解包，缺少解包则相当于name = [&#x27;张三&#x27;, &#x27;18&#x27;]</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;姓名:&#x27;</span>, name, <span class="string">&#x27;年龄:&#x27;</span>, age)</span><br><span class="line"><span class="comment"># 程序会执行两次测试，入口参数分别为[&#x27;张三&#x27;, &#x27;18&#x27;],[&#x27;李四&#x27;, &#x27;19&#x27;]，测试结果见下图</span></span><br></pre></td></tr></table></figure><h4 id="txt格式文件驱动"><a href="#txt格式文件驱动" class="headerlink" title="txt格式文件驱动"></a>txt格式文件驱动</h4><ul><li><p>单一参数数据驱动</p><p>编写阅读数据文件的函数、@data入口参数加*读取</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单一参数txt文件</span></span><br><span class="line"><span class="comment"># 新建num文件，txt格式，按行存储777，888，999</span></span><br><span class="line"><span class="comment"># num文件内容(参数列表):</span></span><br><span class="line"><span class="comment"># 777</span></span><br><span class="line"><span class="comment"># 888</span></span><br><span class="line"><span class="comment"># 999</span></span><br><span class="line"><span class="comment"># 编辑阅读数据文件的函数</span></span><br><span class="line"><span class="comment"># 记住读取文件一定要设置编码方式，否则读取的汉字可能出现乱码！！！！！！</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_num</span>():</span><br><span class="line">    lis = []    <span class="comment"># 以列表形式存储数据，以便传入@data区域</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;num&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:    <span class="comment"># 以只读&#x27;r&#x27;,编码方式为&#x27;utf-8&#x27;的方式,打开文件&#x27;num&#x27;,并命名为file</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> file.readlines():   <span class="comment"># 循环按行读取文件的每一行</span></span><br><span class="line">            lis.append(line.strip(<span class="string">&#x27;\n&#x27;</span>))  <span class="comment"># 每读完一行将此行数据加入列表元素，记得元素要删除&#x27;/n&#x27;换行符！！！</span></span><br><span class="line">        <span class="keyword">return</span> lis    <span class="comment"># 将列表返回,作为@data接收的内容</span></span><br><span class="line"><span class="meta">@ddt</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasicTestCase</span>(unittest.TestCase):</span><br><span class="line"><span class="meta">    @data(<span class="params">*read_num(<span class="params"></span>)</span>)  </span><span class="comment"># 入口参数设定为read_num(),因为返回值是列表，所以加*表示逐个读取列表元素</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self, num</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;数据驱动的number:&#x27;</span>, num)</span><br></pre></td></tr></table></figure><ul><li><p>多参数数据驱动 </p><p>读取函数中的数据分割、@unpack解包</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多参数txt文件</span></span><br><span class="line"><span class="comment"># dict文件内容(参数列表)(按行存储)：</span></span><br><span class="line"><span class="comment"># 张三，18</span></span><br><span class="line"><span class="comment"># 李四，19</span></span><br><span class="line"><span class="comment"># 王五，20</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_dict</span>():</span><br><span class="line">    lis = []  <span class="comment"># 以列表形式存储数据，以便传入@data区域</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;dict&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:  <span class="comment"># 以只读&#x27;r&#x27;,编码方式为&#x27;utf-8&#x27;的方式,打开文件&#x27;num&#x27;,并命名为file</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> file.readlines():  <span class="comment"># 循环按行读取文件的每一行</span></span><br><span class="line">            lis.append(line.strip(<span class="string">&#x27;\n&#x27;</span>).split(<span class="string">&#x27;,&#x27;</span>))  <span class="comment"># 删除换行符后，列表为[&#x27;张三，18&#x27;, &#x27;李四，19&#x27;, &#x27;王五，20&#x27;]</span></span><br><span class="line">            <span class="comment"># 根据,分割后，列表为[[&#x27;张三&#x27;, &#x27;18&#x27;], [&#x27;李四&#x27;, &#x27;19&#x27;], [&#x27;王五&#x27;, &#x27;20&#x27;]]</span></span><br><span class="line">        <span class="keyword">return</span> lis  <span class="comment"># 将列表返回，作为@data接收的内容</span></span><br><span class="line"><span class="meta">@ddt</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasicTestCase</span>(unittest.TestCase):</span><br><span class="line"><span class="meta">    @data(<span class="params">*read_dict(<span class="params"></span>)</span>)  </span><span class="comment"># 加*表示逐个读取列表元素，Python中可变参数，*表示逐个读取列表元素，列表为[[&#x27;张三&#x27;, &#x27;18&#x27;], [&#x27;李四&#x27;, &#x27;19&#x27;], [&#x27;王五&#x27;, &#x27;20&#x27;]]</span></span><br><span class="line"><span class="meta">    @unpack  </span><span class="comment"># 通过unpack解包，逐个传参，缺少这句会将[&#x27;张三&#x27;, &#x27;18&#x27;]传给name,从而导致age为空</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self, name, age</span>):  <span class="comment"># 设置两个接收参数的形参</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;姓名为:&#x27;</span>, name, <span class="string">&#x27;年龄为:&#x27;</span>, age)</span><br></pre></td></tr></table></figure><h4 id="json格式文件驱动"><a href="#json格式文件驱动" class="headerlink" title="json格式文件驱动"></a>json格式文件驱动</h4><ul><li><p>单一参数数据驱动</p><p>使用json解析包读取文件</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单一参数——json文件</span></span><br><span class="line"><span class="comment"># num.json文件内容(参数列表)(注意命名后缀):</span></span><br><span class="line"><span class="comment"># [&quot;666&quot;,&quot;777&quot;,&quot;888&quot;]</span></span><br><span class="line"><span class="comment"># 注意JSON文件中，数据元素如果是字符串必须得用双引号</span></span><br><span class="line"><span class="comment"># 使用语句import json导入json包，快速读取文件用</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_num_json</span>():</span><br><span class="line">    <span class="keyword">return</span> json.load(<span class="built_in">open</span>(<span class="string">&#x27;num.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>))  <span class="comment"># 使用json包读取json文件，并作为返回值返回，注意读取的文件名</span></span><br><span class="line"><span class="meta">@ddt  </span><span class="comment"># 数据驱动步骤和txt相同</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasicTestCase</span>(unittest.TestCase):</span><br><span class="line"><span class="meta">    @data(<span class="params">*read_num_json(<span class="params"></span>)</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self, num</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;读取的数字是&#x27;</span>, num)</span><br></pre></td></tr></table></figure><ul><li><p>多参数数据驱动(以列表形式存储多参数)</p><p>@unpack装饰器的添加</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据分离</span></span><br><span class="line"><span class="comment"># 多参数——json文件</span></span><br><span class="line"><span class="comment"># 步骤和单一参数类似，仅需加入@unpack装饰器以及多参数传参入口</span></span><br><span class="line"><span class="comment"># dict文件内容(参数列表)(非规范json文件格式):</span></span><br><span class="line"><span class="comment"># [[&quot;张三&quot;, &quot;18&quot;], [&quot;李四&quot;, &quot;19&quot;], [&quot;王五&quot;, &quot;20&quot;]]</span></span><br><span class="line"><span class="comment"># 注意json文件格式中字符串用双引号</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_dict_json</span>():</span><br><span class="line">    <span class="keyword">return</span> json.load(<span class="built_in">open</span>(<span class="string">&#x27;dict.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>))  <span class="comment"># 使用json包读取json文件，并作为返回值返回</span></span><br><span class="line"><span class="meta">@ddt</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasicTestCase</span>(unittest.TestCase):</span><br><span class="line"><span class="meta">    @data(<span class="params">*read_dict_json(<span class="params"></span>)</span>)</span></span><br><span class="line"><span class="meta">    @unpack     </span><span class="comment"># 使用@unpack装饰器解包</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self, name, age</span>):    <span class="comment"># 因为是非规范json格式，所以形参名无限制，下文会解释规范json格式 </span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;姓名:&#x27;</span>, name, <span class="string">&#x27;年龄:&#x27;</span>, age)</span><br></pre></td></tr></table></figure><ul><li>多参数数据驱动(以对象形式存储多参数)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 规范json格式读取,每一组参数以对象形式存储</span></span><br><span class="line"><span class="comment"># dict文件内容:</span></span><br><span class="line"><span class="comment"># [</span></span><br><span class="line"><span class="comment">#   &#123;&quot;name&quot;:&quot;张三&quot;, &quot;age&quot;:&quot;18&quot;&#125;,</span></span><br><span class="line"><span class="comment">#   &#123;&quot;name&quot;:&quot;李四&quot;, &quot;age&quot;:&quot;19&quot;&#125;,</span></span><br><span class="line"><span class="comment">#   &#123;&quot;name&quot;:&quot;王五&quot;, &quot;age&quot;:&quot;20&quot;&#125;</span></span><br><span class="line"><span class="comment"># ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_dict_json</span>():</span><br><span class="line">    <span class="keyword">return</span> json.load(<span class="built_in">open</span>(<span class="string">&#x27;dictx.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>))  <span class="comment"># 使用json包读取json文件，并作为返回值返回</span></span><br><span class="line"><span class="meta">@ddt</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasicTestCase</span>(unittest.TestCase):</span><br><span class="line"><span class="meta">    @data(<span class="params">*read_dict_json(<span class="params"></span>)</span>)</span></span><br><span class="line"><span class="meta">    @unpack</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self, name, age</span>):    <span class="comment"># 令形参名字和json中命名相同name=name,age=age</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;姓名:&#x27;</span>, name, <span class="string">&#x27;年龄:&#x27;</span>, age)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 非常特殊情况：</span></span><br><span class="line"><span class="comment"># 形参名字和json中对象命名无法相同，则更改读取函数</span></span><br><span class="line"><span class="comment"># 提取已读完后的json文件(字典形式)，通过遍历获取元素，并返回</span></span><br><span class="line"><span class="comment"># def read_dict_json():</span></span><br><span class="line"><span class="comment">#     li = []</span></span><br><span class="line"><span class="comment">#     dic = json.load(open(&#x27;dict.json&#x27;, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;))</span></span><br><span class="line"><span class="comment">#     # 此处加上遍历获取语句，下文yaml格式有实例，方法一样</span></span><br><span class="line"><span class="comment">#     return li</span></span><br></pre></td></tr></table></figure><h4 id="yaml格式文件驱动"><a href="#yaml格式文件驱动" class="headerlink" title="yaml格式文件驱动"></a>yaml格式文件驱动</h4><p>​在unittest测试框架中，对yaml数据格式的支持十分强大，使用非常方便</p><p>​yaml文件的数据驱动执行代码十分简单！！！(但是要注意细节)</p><ul><li><p>单一参数数据驱动</p><p>使用yaml解析包读取文件，导入file_fata驱动数据</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># YAML数据格式驱动</span></span><br><span class="line"><span class="comment"># 单一参数</span></span><br><span class="line"><span class="comment"># import yaml   # 导入yaml解析包</span></span><br><span class="line"><span class="comment"># from ddt import file_data     # 导入file_data驱动数据</span></span><br><span class="line"><span class="comment"># yaml格式文件内容</span></span><br><span class="line"><span class="comment"># - 666</span></span><br><span class="line"><span class="comment"># - 777</span></span><br><span class="line"><span class="comment"># - 888</span></span><br><span class="line"><span class="comment"># &#x27;-&#x27;号之后一定要打空格！！！</span></span><br><span class="line"><span class="meta">@ddt</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasicTestCase</span>(unittest.TestCase):</span><br><span class="line"><span class="meta">    @file_data(<span class="params"><span class="string">&#x27;num.yml&#x27;</span></span>)   </span><span class="comment"># 采用文件数据驱动</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self, num</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;读取的数字是&#x27;</span>, num)</span><br></pre></td></tr></table></figure><ul><li><p>多参数数据驱动</p><p>​形参入口和数据参数key命名统一</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多参数yaml</span></span><br><span class="line"><span class="comment"># 以对象形式存储yml数据(字典)</span></span><br><span class="line"><span class="comment"># yaml格式文件内容</span></span><br><span class="line"><span class="comment"># -</span></span><br><span class="line"><span class="comment">#   name: 张三</span></span><br><span class="line"><span class="comment">#   age: 18</span></span><br><span class="line"><span class="comment"># -</span></span><br><span class="line"><span class="comment">#   name: 李四</span></span><br><span class="line"><span class="comment">#   age: 19</span></span><br><span class="line"><span class="comment"># -</span></span><br><span class="line"><span class="comment">#   name: 王五</span></span><br><span class="line"><span class="comment">#   age: 20</span></span><br><span class="line"><span class="comment"># &#x27;-&#x27;号之后一定要打空格！！！</span></span><br><span class="line"><span class="comment"># &#x27;:&#x27;号之后一定要打空格！！！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 入口参数与数据参数key命名统一即可导入</span></span><br><span class="line"><span class="meta">@ddt</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasicTestCase</span>(unittest.TestCase):</span><br><span class="line"><span class="meta">    @file_data(<span class="params"><span class="string">&#x27;dict.yml&#x27;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self, name, age</span>):  <span class="comment"># 设置入口参数名字与数据参数命名相同即可</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;姓名是：&#x27;</span>, name, <span class="string">&#x27;年龄为：&#x27;</span>, age)</span><br></pre></td></tr></table></figure><ul><li>特殊情况：当入口与文件中数据参数无法统一命名时，解决办法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 入口参数与数据参数命名不统一</span></span><br><span class="line"><span class="meta">@ddt</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasicTestCase</span>(unittest.TestCase):</span><br><span class="line"><span class="meta">    @file_data(<span class="params"><span class="string">&#x27;dict.yml&#x27;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self, **cdata</span>):  <span class="comment"># Python中可变参数传递的知识：**按对象顺序执行</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;姓名是：&#x27;</span>, cdata[<span class="string">&#x27;name&#x27;</span>], <span class="string">&#x27;年龄为：&#x27;</span>, cdata[<span class="string">&#x27;age&#x27;</span>])    <span class="comment"># 通过对象访问语法即可调用</span></span><br></pre></td></tr></table></figure><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>开发一个接口测试框架</p><p>需求：</p><ul><li>支持用例优先级、标签、支持通过优先级或标签帅选用例</li><li>支持用例负责人、迭代，以及通过负责人或迭代人筛选用例</li><li>支持多环境配置</li><li>支持超时重试机制，防止不稳定用例</li><li>并发执行用例以提高用例回归效率</li></ul><h3 id="为用例添加额外属性"><a href="#为用例添加额外属性" class="headerlink" title="为用例添加额外属性"></a>为用例添加额外属性</h3><ul><li>支持用例优先级、标签、支持通过优先级或标签帅选用例</li><li>支持用例负责人、迭代，以及通过负责人或迭代人筛选用例</li></ul><p>实现的步骤为：</p><ol><li>编写用例时，在测试函数上添加<strong>特殊标记</strong></li><li>正常加载用例生成测试套件</li><li>遍历测试套件所有测试用例，根据条件(如优先级为P0)，和用例<strong>特殊标记</strong>筛选生成新的测试套件</li></ol><ul><li>方法一：测试函数注释，如在测试函数注释第一行以外添加特定格式字符串如priority:0等</li><li>方法二：测试函数对象，为测试函数对象添加额外属性，可以通过装饰器实现</li><li>方法三：测试函数名，如test_a_p0，多种标签可能导致用例名太长或标识度不高  (不推荐)</li></ul><h4 id="通过测试函数注释-添加用例优先级属性"><a href="#通过测试函数注释-添加用例优先级属性" class="headerlink" title="通过测试函数注释-添加用例优先级属性"></a>通过测试函数注释-添加用例优先级属性</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试用例</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_suite_tests</span>(<span class="params">suite</span>):</span><br><span class="line">    tests = []</span><br><span class="line">    <span class="keyword">for</span> test <span class="keyword">in</span> suite:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(test, unittest.TestCase):</span><br><span class="line">            tests.append(test)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tests.extend(get_suite_tests(test))</span><br><span class="line">    <span class="keyword">return</span> tests</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDemo</span>(unittest.TestCase):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_a</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;测试a</span></span><br><span class="line"><span class="string">        priority:0</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_b</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;测试b</span></span><br><span class="line"><span class="string">        priority:1</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_c</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;测试c</span></span><br><span class="line"><span class="string">        priority:1</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试套件</span></span><br><span class="line">suite = unittest.defaultTestLoader.loadTestsFromTestCase(TestDemo)</span><br><span class="line">new_suite = unittest.TestSuite()  <span class="comment"># 新建测试套件(用于放筛选的用例)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 筛选p0用例</span></span><br><span class="line"><span class="keyword">for</span> test <span class="keyword">in</span> get_suite_tests(suite):</span><br><span class="line">    <span class="comment"># 通过正则匹配获取用例优先级</span></span><br><span class="line">    matched = re.search(<span class="string">r&#x27;priority:(\d)&#x27;</span>, test._testMethodDoc)</span><br><span class="line">    <span class="keyword">if</span> matched:</span><br><span class="line">        priority = matched.group(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        priority = <span class="literal">None</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;用例:<span class="subst">&#123;test._testMethodName&#125;</span> 优先级: <span class="subst">&#123;priority&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment"># 筛选p0用例-组成新测试套件</span></span><br><span class="line">    <span class="keyword">if</span> priority == <span class="number">0</span>:</span><br><span class="line">        new_suite.addTest(test)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;筛选得到的用例数量:&#x27;</span>, new_suite.countTestCases())</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="通过测试函数对象-添加额外属性"><a href="#通过测试函数对象-添加额外属性" class="headerlink" title="通过测试函数对象-添加额外属性"></a>通过测试函数对象-添加额外属性</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_suite_tests</span>(<span class="params">suite</span>):</span><br><span class="line">    tests = []</span><br><span class="line">    <span class="keyword">for</span> test <span class="keyword">in</span> suite:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(test, unittest.TestCase):</span><br><span class="line">            tests.append(test)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tests.extend(get_suite_tests(test))</span><br><span class="line">    <span class="keyword">return</span> tests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">priority=<span class="literal">None</span>, tags=<span class="literal">None</span>, owner=<span class="literal">None</span>, iteration=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;装饰器，为测试函数添加额外属性&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line">        <span class="comment"># 根据参数为测试函数添加额外属性</span></span><br><span class="line">        func.priority = priority</span><br><span class="line">        func.tags = tags</span><br><span class="line">        func.owner = owner</span><br><span class="line">        func.iteration = iteration</span><br><span class="line">        <span class="keyword">return</span> func</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用例</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDemo</span>(unittest.TestCase):</span><br><span class="line"><span class="meta">    @test(<span class="params">priority=<span class="number">0</span>, tags=[<span class="string">&#x27;demo&#x27;</span>], owner=<span class="string">&#x27;superhin&#x27;</span>, iteration=<span class="string">&#x27;v1.0.0&#x27;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_a</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;测试a&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @test(<span class="params">priority=<span class="number">1</span>, tags=[<span class="string">&#x27;demo&#x27;</span>], owner=<span class="string">&#x27;superhin&#x27;</span>, iteration=<span class="string">&#x27;v1.0.0&#x27;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_b</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;测试b&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @test(<span class="params">priority=<span class="number">1</span>, tags=[<span class="string">&#x27;demo&#x27;</span>], owner=<span class="string">&#x27;superhin&#x27;</span>, iteration=<span class="string">&#x27;v2.0.0&#x27;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_c</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;测试c&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试套件</span></span><br><span class="line">suite = unittest.defaultTestLoader.loadTestsFromTestCase(TestDemo)</span><br><span class="line">new_suite = unittest.TestSuite()  <span class="comment"># 新建测试套件(用于放筛选的用例)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 筛选p0用例</span></span><br><span class="line"><span class="keyword">for</span> test <span class="keyword">in</span> get_suite_tests(suite):</span><br><span class="line">    testMethod = <span class="built_in">getattr</span>(test.__class__, test._testMethodName)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">hasattr</span>(testMethod, <span class="string">&#x27;priority&#x27;</span>) <span class="keyword">and</span> <span class="built_in">getattr</span>(testMethod, <span class="string">&#x27;priority&#x27;</span>) == <span class="number">0</span>:</span><br><span class="line">        new_suite.addTest(test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;筛选得到的用例数量:&#x27;</span>, new_suite.countTestCases())</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="通过测试类-类属性设置用例通用属性"><a href="#通过测试类-类属性设置用例通用属性" class="headerlink" title="通过测试类-类属性设置用例通用属性"></a>通过测试类-类属性设置用例通用属性</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_suite_tests</span>(<span class="params">suite</span>):</span><br><span class="line">    tests = []</span><br><span class="line">    <span class="keyword">for</span> test <span class="keyword">in</span> suite:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(test, unittest.TestCase):</span><br><span class="line">            tests.append(test)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tests.extend(get_suite_tests(test))</span><br><span class="line">    <span class="keyword">return</span> tests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">safe_getattr</span>(<span class="params">obj, attr</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;对象没有该属性时返回None&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">hasattr</span>(obj, attr):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getattr</span>(obj, attr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">priority=<span class="literal">None</span>, tags=<span class="literal">None</span>, owner=<span class="literal">None</span>, iteration=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;装饰器，为测试函数添加额外属性&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line">        <span class="comment"># 根据参数为测试函数添加额外属性</span></span><br><span class="line">        func.priority = priority</span><br><span class="line">        func.tags = tags</span><br><span class="line">        func.owner = owner</span><br><span class="line">        func.iteration = iteration</span><br><span class="line">        <span class="keyword">return</span> func</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestCase</span>(unittest.TestCase):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, methodName=<span class="string">&#x27;runTest&#x27;</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(methodName)</span><br><span class="line">        testMethod = <span class="built_in">getattr</span>(self, methodName)</span><br><span class="line">        testClass = self.__class__</span><br><span class="line">        <span class="comment"># 拷贝测试方法(函数)属性到测试用例对象，测试方法无属性时尝试获取测试类对象指定属性</span></span><br><span class="line">        self.priority = safe_getattr(testMethod, <span class="string">&#x27;priority&#x27;</span>) <span class="keyword">or</span> safe_getattr(testClass, <span class="string">&#x27;priority&#x27;</span>)</span><br><span class="line">        self.tags = safe_getattr(testMethod, <span class="string">&#x27;tags&#x27;</span>) <span class="keyword">or</span> safe_getattr(testClass, <span class="string">&#x27;tags&#x27;</span>)</span><br><span class="line">        self.owner = safe_getattr(testMethod, <span class="string">&#x27;owner&#x27;</span>) <span class="keyword">or</span> safe_getattr(testClass, <span class="string">&#x27;owner&#x27;</span>)</span><br><span class="line">        self.iteration = safe_getattr(testMethod, <span class="string">&#x27;iteration&#x27;</span>) <span class="keyword">or</span> safe_getattr(testClass, <span class="string">&#x27;iteration&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDemo</span>(<span class="title class_ inherited__">TestCase</span>):</span><br><span class="line">    owner = <span class="string">&#x27;superhin&#x27;</span></span><br><span class="line">    iteration = <span class="string">&#x27;v1.0.0&#x27;</span></span><br><span class="line">    tags = [<span class="string">&#x27;demo&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">    @test(<span class="params">priority=<span class="number">0</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_a</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;测试a&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @test(<span class="params">priority=<span class="number">1</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_b</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;测试b&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @test(<span class="params">priority=<span class="number">1</span>, iteration=<span class="string">&#x27;v2.0.0&#x27;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_c</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;测试c&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 原测试套件</span></span><br><span class="line">suite = unittest.defaultTestLoader.loadTestsFromTestCase(TestDemo)</span><br><span class="line">new_suite = unittest.TestSuite()  <span class="comment"># 新建测试套件(用于放筛选的用例)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 筛选iteration=&#x27;v1.0.0&#x27;用例</span></span><br><span class="line"><span class="keyword">for</span> test <span class="keyword">in</span> get_suite_tests(suite):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;用例适用版本:&quot;</span>, safe_getattr(test, <span class="string">&#x27;iteration&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> safe_getattr(test, <span class="string">&#x27;iteration&#x27;</span>) == <span class="string">&#x27;v1.0.0&#x27;</span>:</span><br><span class="line">        new_suite.addTest(test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;筛选得到的用例数量:&#x27;</span>, new_suite.countTestCases())</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="测试计划-通过属性筛选测试用例"><a href="#测试计划-通过属性筛选测试用例" class="headerlink" title="测试计划-通过属性筛选测试用例"></a>测试计划-通过属性筛选测试用例</h4><p>​增加一个自定义的TestPlan对象，通过类属性描述</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestPlanDemo1</span>(<span class="title class_ inherited__">TestPlan</span>):</span><br><span class="line">    <span class="comment"># 测试目录(该目录所有的测试用例)</span></span><br><span class="line">    test_dir = <span class="string">&#x27;../testcases&#x27;</span></span><br><span class="line">    <span class="comment"># 可选, 支持priorities, owners, iterations, tags, exclude_tags等</span></span><br><span class="line">    <span class="built_in">filter</span> = &#123;</span><br><span class="line">        <span class="string">&quot;priorities&quot;</span>: [<span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">        <span class="string">&quot;tags&quot;</span>: [<span class="string">&quot;demo&quot;</span>],</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    TestPlanDemo1().run(verbosity=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>​用例过滤函数实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">filter_by_priorities</span>(<span class="params">tests, priorities</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;通过优先级列表筛选用例，返回筛选后用例对象列表&quot;&quot;&quot;</span></span><br><span class="line">    new_tests = []</span><br><span class="line">    <span class="keyword">for</span> test <span class="keyword">in</span> tests:</span><br><span class="line">        <span class="keyword">if</span> safe_getattr(test, <span class="string">&#x27;priority&#x27;</span>) <span class="keyword">in</span> priorities:</span><br><span class="line">            new_tests.append(test)</span><br><span class="line">    <span class="keyword">return</span> new_tests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filter_by_tags</span>(<span class="params">tests, tags</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;通过tags筛选用例，返回筛选后用例对象列表&quot;&quot;&quot;</span></span><br><span class="line">    new_tests = []</span><br><span class="line">    <span class="keyword">for</span> test <span class="keyword">in</span> tests:</span><br><span class="line">        test_tags = safe_getattr(test, <span class="string">&#x27;tags&#x27;</span>) <span class="keyword">or</span> []</span><br><span class="line">        <span class="built_in">print</span>(tags, test_tags)</span><br><span class="line">        <span class="comment"># 测试用例tags集合不完全包含指定tags集合</span></span><br><span class="line">        <span class="comment"># 通过差集：部分(指定tags) - 整体(用例tags), 为空集时, 则整体完全包含部分</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">set</span>(tags) - <span class="built_in">set</span>(test_tags) == <span class="built_in">set</span>():</span><br><span class="line">            new_tests.append(test)</span><br><span class="line">    <span class="keyword">return</span> new_tests</span><br><span class="line"></span><br><span class="line"><span class="comment"># ... 其他筛选方法</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​测试计划类实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestPlan</span>:</span><br><span class="line">    test_dir: <span class="built_in">str</span> = <span class="literal">None</span></span><br><span class="line">    tests = []</span><br><span class="line">    <span class="built_in">filter</span>: <span class="built_in">dict</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 组装测试套件</span></span><br><span class="line">        loader = unittest.defaultTestLoader</span><br><span class="line">        <span class="keyword">if</span> self.tests:   <span class="comment"># 通过用例名称-生成测试套件</span></span><br><span class="line">            suite = loader.loadTestsFromNames(self.tests)</span><br><span class="line">        <span class="keyword">elif</span> self.test_dir:  <span class="comment"># 通过测试目录-遍历生成测试套件</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;self.test_dir&#x27;</span>, self.test_dir)</span><br><span class="line">            suite = loader.discover(start_dir=self.test_dir)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;测试计划必须包含start_dir或tests属性&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 过滤用例</span></span><br><span class="line">        <span class="keyword">if</span> self.<span class="built_in">filter</span>:</span><br><span class="line">            tests = get_suite_tests(suite)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;priorities&#x27;</span> <span class="keyword">in</span> self.<span class="built_in">filter</span>:</span><br><span class="line">                tests = filter_by_priorities(tests, self.<span class="built_in">filter</span>[<span class="string">&#x27;priorities&#x27;</span>])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;tags&#x27;</span> <span class="keyword">in</span> self.<span class="built_in">filter</span>:</span><br><span class="line">                tests = filter_by_tags(tests, self.<span class="built_in">filter</span>[<span class="string">&#x27;tags&#x27;</span>])</span><br><span class="line">            <span class="comment"># ... 其他筛选条件</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 根据筛选的用例列表生成新的测试套件</span></span><br><span class="line">            suite = unittest.TestSuite()</span><br><span class="line">            suite.addTests(tests)</span><br><span class="line"></span><br><span class="line">        self.suite = suite</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self, verbosity=<span class="number">1</span></span>):</span><br><span class="line">        runner = unittest.TextTestRunner(verbosity=verbosity)</span><br><span class="line">        runner.run(self.suite)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> unittest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> unittest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytest测试框架</title>
      <link href="/2024/03/29/pytest%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
      <url>/2024/03/29/pytest%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="Pytest测试框架"><a href="#Pytest测试框架" class="headerlink" title="Pytest测试框架"></a>Pytest测试框架</h2><p>​Pytest是Python一款三方测试框架，用于编写和运行单元测试、集成测试和功能测试</p><p>主要特点：</p><ul><li>简单易用：Pytest测试框架的API简单易用，可以快速编写测试用例。</li><li>灵活多样：Pytest测试框架支持多种测试方式，包括函数式测试、类式测试、参数化测试、fixture测试等。</li><li>插件机制：Pytest测试框架支持插件机制，可以通过插件扩展测试框架的功能。</li><li>断言机制：Pytest测试框架支持多种断言方式，包括assert语句、assert关键字、assert表达式等。</li><li>报告机制：Pytest测试框架支持生成多种测试报告，包括控制台报告、HTML报告、JUnit报告等</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pytest</span><br></pre></td></tr></table></figure><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><h4 id="编写及运行测试用例"><a href="#编写及运行测试用例" class="headerlink" title="编写及运行测试用例"></a>编写及运行测试用例</h4><ul><li>新建test开头的测试脚本，如test_calc.py，编写测试函数 或 测试类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_add</span>(): <span class="comment"># 测试函数需以test_开头</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; 测试加法 &#x27;&#x27;&#x27;</span></span><br><span class="line">    s = <span class="number">1</span> + <span class="number">2</span></span><br><span class="line">    <span class="keyword">assert</span> s == <span class="number">3</span>, <span class="string">f&#x27;断言失败, <span class="subst">&#123;s&#125;</span> != 3&#x27;</span> <span class="comment"># 断言</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestAdd</span>:  <span class="comment"># 测试类</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">test_add_01</span>(<span class="params">self</span>):  <span class="comment"># 测试方法</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27; 测试加法01 &#x27;&#x27;&#x27;</span></span><br><span class="line">            s = <span class="number">1</span> + <span class="number">2</span></span><br><span class="line">             <span class="keyword">assert</span> s == <span class="number">3</span>, <span class="string">f&#x27;断言失败, <span class="subst">&#123;s&#125;</span> != 3&#x27;</span>  <span class="comment"># 断言</span></span><br></pre></td></tr></table></figure><ul><li>运行测试用例 一</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest test_calc.py</span><br></pre></td></tr></table></figure><ul><li>运行测试用例 二</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> pytest</span><br><span class="line">    pytest.main([__file__]) <span class="comment"># pytest测试当前文件</span></span><br></pre></td></tr></table></figure><h4 id="测试准备及清理"><a href="#测试准备及清理" class="headerlink" title="测试准备及清理"></a>测试准备及清理</h4><p>​Pytest中可以使用不同范围的setup&#x2F;teardown方法进行测试准备及清理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">setup_module</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试模块准备&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">teardown_module</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试模块清理&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setup_function</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试函数准备&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">teardown_function</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试函数清理&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_add</span>():  <span class="comment"># 测试函数</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;测试加法&quot;&quot;&quot;</span></span><br><span class="line">    s = <span class="number">1</span> + <span class="number">2</span></span><br><span class="line">    <span class="keyword">assert</span> s == <span class="number">3</span>, <span class="string">f&#x27;断言失败, <span class="subst">&#123;s&#125;</span> != 3&#x27;</span>  <span class="comment"># 断言</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment"># or </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestAdd</span>:  <span class="comment"># 测试类</span></span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">setup_class</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;测试类准备&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">teardown_class</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;测试类清理&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setup_method</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;测试方法准备&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">teardown_method</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;测试方法清理&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_add_01</span>(<span class="params">self</span>):  <span class="comment"># 测试方法</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;测试加法01&quot;&quot;&quot;</span></span><br><span class="line">        s = <span class="number">1</span> + <span class="number">2</span></span><br><span class="line">        <span class="keyword">assert</span> s == <span class="number">3</span>, <span class="string">f&#x27;断言失败, <span class="subst">&#123;s&#125;</span> != 3&#x27;</span>  <span class="comment"># 断言</span></span><br></pre></td></tr></table></figure><h4 id="参数化-数据驱动"><a href="#参数化-数据驱动" class="headerlink" title="参数化(数据驱动)"></a>参数化(数据驱动)</h4><p>​Pytest中可以<code>@pytest.mark.paramitrize()</code>装饰器将每条数据变成一条用例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@pytest.mark.parametrize(<span class="params"><span class="string">&#x27;a&#x27;</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span>) </span><span class="comment"># 参数变量名,数据列表</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_data</span>(<span class="params">a</span>):  <span class="comment"># 需要添加和上面同名的参数</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;测试参数化数据&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a =&#x27;</span>, a)</span><br></pre></td></tr></table></figure><p>​支持多个参数变量，也支持为每个数据添加自定义说明(id)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">data = [(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>), (<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), (-<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)]</span><br><span class="line">ids = [<span class="string">&#x27;test1+2&#x27;</span>, <span class="string">&#x27;test0+0&#x27;</span>, <span class="string">&#x27;test-1+2’]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@pytest.mark.parametrize(&#x27;</span>a,b,excepted<span class="string">&#x27;, data, ids=ids)  # 多个参数变量名写到同一字符串里</span></span><br><span class="line"><span class="string">def test_add(a,b,excepted):  # 需要添加和上面同名的参数</span></span><br><span class="line"><span class="string">    “”“测试加法&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    s = a + b</span></span><br><span class="line"><span class="string">    assert s == excepted, f&#x27;</span>断言失败, &#123;s&#125; != &#123;excepted&#125;<span class="string">&#x27;  # 断言</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h4 id="跳过及期望失败"><a href="#跳过及期望失败" class="headerlink" title="跳过及期望失败"></a>跳过及期望失败</h4><p>​Pytest中可以<code>@pytest.mark.skip()</code>或<code>@pytest.mark.skipif()</code>装饰器来跳过或根据条件跳过用例</p><ul><li>无条件跳过</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@pytest.mark.skip(<span class="params"><span class="string">&#x27;待实现&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_sub</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>根据条件跳过</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> platform <span class="keyword">import</span> platform</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.mark.skipif(<span class="params">platform == <span class="string">&#x27;Windows&#x27;</span>, reason=<span class="string">&#x27;不支持Windows&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_linux_cmd</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>也可以使用<code>@pytest.mark.xfail()</code>来期望用例失败</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@pytest.mark.xfail(<span class="params">reason=<span class="string">&#x27;期望失败，1+1!=3&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_add</span>():</span><br><span class="line">    <span class="keyword">assert</span> <span class="number">1</span> + <span class="number">1</span> == <span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="Pytest测试框架的命令行参数"><a href="#Pytest测试框架的命令行参数" class="headerlink" title="Pytest测试框架的命令行参数"></a>Pytest测试框架的命令行参数</h4><p>用例挑选相关命令行参数</p><ul><li>pytest &lt;目录或文件路径1&gt; &lt;目录或文件路径2&gt; ：运行指定目录或文件中所有的测试用例，支持指定多个路径。</li><li>pytest 文件路径::测试函数名：运行指定测试函数</li><li>pytest 文件路径::测试类名：运行指定测试类中所有用例</li><li>pytest 文件路径::测试类::测试方法名：运行指定测试类中指定测试方法</li><li>pytest –k&#x3D;&lt;正则表达式&gt;：指定测试类&#x2F;测试函数名称匹配规则，筛选指定用例。</li><li>pytest –m&#x3D;&lt;标签&gt;：指定标签筛选用例，支持and、or、not，例如 –m ‘api not web’</li></ul><p><strong>报告（命令行显示）相关命令行参数</strong></p><ul><li>–verbosity&#x3D;&lt;数值&gt;：指定显示详细级别，0-1，默认0。</li><li>-v &#x2F; –verbose：提高显示详细级别</li><li>-q &#x2F; –quiet：安静模式</li><li>-s：不捕获用例输出（用例print信息直接输出到命令行)</li><li>–capture&#x3D;&lt;捕获方法&gt;：选择捕获用例输出到方法，支持fd、sys、no、tee-sys</li><li>–no-header：不显示头部信息（测试开始环境信息）</li><li>–no-summary：不显示运行总结</li><li>-r &lt;字符&gt;：显示额外测试状态的详情信息，支持f-失败用例，E-异常用例，s-跳过用例,x-预期失败用例,X-非预期成功用例,p-通过用例,P-通过用例带输出,a-所有成功用例,A-全部用例</li><li>–duration&#x3D;&lt;数字&gt;：显示运行最慢的前几条用例</li><li>–duration-min: 设置运行时间最小阈值（大于该值视为运行较慢）</li></ul><p><strong>缓存（重复运行）相关命令行参数</strong></p><ul><li>–lf &#x2F; –last-failed：运行上次失败的用例</li><li>–ff &#x2F; –failed-first：先运行上次失败的用例，再运行其他用例</li><li>–nf &#x2F; –last-failed：先运行新的测试用例文件，在运行其他用例</li><li>–cache-clear：清理之前测试的缓存结果</li><li>… …</li></ul><p><strong>用例收集相关命令行参数</strong></p><ul><li>–log-level&#x3D;LEVEL：设置日志等级</li><li>–log-format&#x3D;LOG_FORMAT：设置日志格式</li><li>–log-date-format&#x3D;LOG_DATE_FORMAT：设置日志日期格式</li><li>–log-cli-level&#x3D;LOG_CLI_LEVEL：设置命令行日志登记</li><li>–log-cli-format&#x3D;LOG_CLI_FORMAT：设置命令行日志格式</li><li>–log-cli-date-format&#x3D;LOG_CLI_DATE_FORMAT：设置命令行日志日期格式</li><li>–log-file&#x3D;LOG_FILE：设置日志文件路径</li><li>–log-file-level&#x3D;LOG_FILE_LEVEL：设置日志文件等级</li><li>–log-file-format&#x3D;LOG_FILE_FORMAT：设置日志文件日志格式</li><li>–log-file-date-format&#x3D;LOG_FILE_DATE_FORMAT：设置日志文件日期格式</li><li>–log-auto-indent&#x3D;LOG_AUTO_INDENT：设置多行文本日志缩进，支持true|on, false|off 或整数值。</li><li>–log-disable&#x3D;LOGGER_DISABLE：根据名称禁用某个logger，支持指定多次</li></ul><h4 id="Pytest内置makers标记"><a href="#Pytest内置makers标记" class="headerlink" title="Pytest内置makers标记"></a>Pytest内置makers标记</h4><p>在命令行使用pytest –markers可以查看所有可使用(包含用户已注册)标记。<br>@pytest.mark.filterwarnings(warning)：过滤指定警告<br>@pytest.mark.skip(reason&#x3D;None)：无条件跳过用例个<br>@pytest.mark.skipif(condition, …, *, reason&#x3D;…)：根据条件跳过用例<br>@pytest.mark.xfail(condition, …, *, reason&#x3D;…, run&#x3D;True, raises&#x3D;None, strict&#x3D;xfail_strict)：根据条件期望用例失败<br>@pytest.mark.parametrize(argnames, argvalues)：参数化数据驱动<br>@pytest.mark.usefixtures(fixturename1, fixturename2, …)：标记引用(依赖)某些Fixture函数</p><h3 id="Pytest测试框架的配置项"><a href="#Pytest测试框架的配置项" class="headerlink" title="Pytest测试框架的配置项"></a>Pytest测试框架的配置项</h3><p>​<strong>pytest.ini文件[pytest]中常用配置项如下</strong></p><table><thead><tr><th>配置项</th><th>说明</th></tr></thead><tbody><tr><td>addopts</td><td>默认额外的参数；</td></tr><tr><td>cache_dir</td><td>缓存目录，用于缓存上次执行失败的用例；</td></tr><tr><td>markers</td><td>注册的自定义标记及说明；</td></tr><tr><td>norecursedirs</td><td>不遍历的目录；</td></tr><tr><td>testpaths</td><td>测试目录；</td></tr><tr><td>python_files</td><td>测试脚本匹配规则，默认test_开头的py文件视为用例，如果有的测试脚本不是以test_开头，可以配置为pythonfiles &#x3D; *；</td></tr><tr><td>python_class</td><td>测试类匹配规则，默认Test开头的类视为测试类；</td></tr><tr><td>python_functions</td><td>测试函数及测试方法匹配规则，默认test_开头的函数及方法视为测试用例；</td></tr><tr><td>console_output_style</td><td>命令行输出样式，支持classic、progress、counts三种样式；</td></tr><tr><td>filterwarnings</td><td>过滤的警告；</td></tr><tr><td>xfail_strict</td><td>启用时，标记为xfail的用例通过时状态为Fail，否则为XPassed。</td></tr></tbody></table><p>​<strong>日志相关配置</strong></p><table><thead><tr><th>配置项</th><th>说明</th></tr></thead><tbody><tr><td>log_print</td><td>用例失败时是否显示相关日志；</td></tr><tr><td>log_cli</td><td>配置为ture时开启命令行日志；</td></tr><tr><td>log_file</td><td>配置日志文件路径，每次覆盖，不支持追加模式；v</td></tr><tr><td>log_cli_level&#x2F;log_file_level</td><td>配置输出到命令行及文件的日志等级；</td></tr><tr><td>log_cli_format&#x2F;log_file_format</td><td>配置输出到命令行及文件的日志格式；</td></tr><tr><td>log_cli_date_format&#x2F;log_file_date_format</td><td>配置日志的日期格式。</td></tr></tbody></table><h3 id="Pytest测试框架的扩展-钩子-机制"><a href="#Pytest测试框架的扩展-钩子-机制" class="headerlink" title="Pytest测试框架的扩展(钩子)机制"></a>Pytest测试框架的扩展(钩子)机制</h3><p>​钩子函数(Hooks)是一种特殊的函数，可以在执行过程中“顺带”执行一些自定义的操作。Pytest测试框架提供了许多钩子函数，可以在测试过程的不同阶段执行自定义的操作。</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><ul><li>添加钩子pytest_addhooks</li><li>添加参数pytest_addoption</li><li>注册插件pytest_plugin_registered</li></ul><h4 id="初始化时的钩子函数"><a href="#初始化时的钩子函数" class="headerlink" title="初始化时的钩子函数"></a>初始化时的钩子函数</h4><ul><li>pytest_addhooks(pluginmanager)：添加新的钩子函数</li><li>pytest_addoption(parser, pluginmanager)：添加命令行参数及ini配置项</li><li>pytest_configure(config)：初始化配置</li><li>pytest_unconfigure(config)：恢复配置，退出测试进程前执行</li><li>pytest_sessionstart(session)：测试会话开始</li><li>pytest_sessionfinish(session, exitstatus)：测试会话结束</li><li>pytest_plugin_registered(plugin, manager)：注册了新插件</li></ul><h5 id="示例-添加自定义参数及配置项"><a href="#示例-添加自定义参数及配置项" class="headerlink" title="示例-添加自定义参数及配置项"></a>示例-添加自定义参数及配置项</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pytest_addoption</span>(<span class="params">parser</span>):  <span class="comment"># 初始化是的钩子放假，用来增加命令行参数</span></span><br><span class="line">    <span class="comment"># 添加命令行参数--send_email，执行时带上该参数则视为ture</span></span><br><span class="line">    parser.addoption(<span class="string">&quot;--send_email&quot;</span>, action=<span class="string">&quot;store_true&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;send email after test&quot;</span>)</span><br><span class="line">    <span class="comment"># 添加邮件主题、收件人、正文配置项</span></span><br><span class="line">    parser.addini(<span class="string">&#x27;email_subject&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;test report email subject&#x27;</span>)</span><br><span class="line">    parser.addini(<span class="string">&#x27;email_receivers&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;test report email receivers&#x27;</span>)</span><br><span class="line">    parser.addini(<span class="string">&#x27;email_body&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;test report email body&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="示例-修改配置-组装绝对路径"><a href="#示例-修改配置-组装绝对路径" class="headerlink" title="示例-修改配置-组装绝对路径"></a>示例-修改配置-组装绝对路径</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pytest_configure</span>(<span class="params">config</span>):  <span class="comment"># 初始化是的配置方法</span></span><br><span class="line">    log_file = config.getini(<span class="string">&#x27;log_file&#x27;</span>)  <span class="comment"># 如果配置文件配置了log_file</span></span><br><span class="line">    <span class="keyword">if</span> log_file:</span><br><span class="line">        <span class="comment"># 使用当前时间格式化后log_file名称，替换原有的配置</span></span><br><span class="line">        <span class="comment"># 如果配置的是不带时间格式的如log_file=last_run.log，格式化后不变，</span></span><br><span class="line">        <span class="comment"># 如果配置log_file=%Y%m%d%H%M%S.log，格式后成当前时间</span></span><br><span class="line">        config.option.log_file = datetime.now().strftime(log_file)</span><br></pre></td></tr></table></figure><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><ul><li>启动命令行主流程pytest_cmdline_main</li><li>生成配置 pytest_configure</li><li>启动运行会话 pytest_sessionstart</li></ul><h4 id="启动时的钩子函数"><a href="#启动时的钩子函数" class="headerlink" title="启动时的钩子函数"></a>启动时的钩子函数</h4><ul><li>pytest_load_initial_conftests(early_config, parser, args)：调用初始化conftest.py文件（仅作为安装插件时）</li><li>pytest_cmdline_parse(pluginmanager, args)：初始化config配置，解析命令行参数</li><li>pytest_cmdline_main(config)：调用执行主命令行操作，启动测试主循环</li></ul><p>​</p><h4 id="收集用例"><a href="#收集用例" class="headerlink" title="收集用例"></a>收集用例</h4><ul><li>判断是否忽略pytest_ignore_collect</li><li>创建待收集文件对象pytest_collect_file</li><li>创建待收集模块对象pytest_pycollect_makemodule</li><li>开始收集当前模块用例pytest_collectstart</li><li>创建当前模块收集报告对象pytest_make_collect_report</li><li>创建待收集用例对象pytest_pycollect_makeitem</li><li>生成用例pytest_generate_tests</li><li>收集用例完毕pytest_itemcollected</li><li>生成收集报告pytest_collectreport</li><li>调整收集的用例pytest_collection_modifyitems</li><li>用例收集完毕pytest_report_collectionfinish</li></ul><h4 id="收集用例时的钩子函数"><a href="#收集用例时的钩子函数" class="headerlink" title="收集用例时的钩子函数"></a>收集用例时的钩子函数</h4><ul><li>pytest_collection(session)：开始收集用例</li><li>pytest_ignore_collect(collection_path, path, config)：判断是否忽略该目录</li><li>pytest_collect_file(file_path, path, parent)：创建待收集文件对象</li><li>pytest_pycollect_makemodule(module_path, path, parent)：创建待收集模块</li><li>pytest_pycollect_makeitem(collector, name, obj)：创建待收集用例对象</li><li>pytest_generate_tests(metafunc)：生成用例</li><li>pytest_make_parametrize_id(config, val, argname)：生成参数化用例id</li><li>pytest_collection_modifyitems(session, config, items)：调整收集结果</li><li>pytest_collection_finish(session)：收集用例结束</li></ul><h5 id="示例-调整用例搜集结果-收集用例"><a href="#示例-调整用例搜集结果-收集用例" class="headerlink" title="示例-调整用例搜集结果-收集用例"></a>示例-调整用例搜集结果-收集用例</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestCollection</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.collected = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pytest_collection_modifyitems</span>(<span class="params">self, items</span>):</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">            self.collected.append(item.nodeid)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_testcases</span>(<span class="params">testpath</span>):</span><br><span class="line">    coll = TestCollection()</span><br><span class="line">    pytest.main([testpath, <span class="string">&#x27;--collect-only&#x27;</span>, <span class="string">&#x27;-q&#x27;</span>], plugins=[coll]) <span class="comment"># 指定插件</span></span><br><span class="line">    <span class="keyword">return</span> coll.collected</span><br><span class="line"></span><br><span class="line">get_testcases(<span class="string">&#x27;./testcases&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="执行测试"><a href="#执行测试" class="headerlink" title="执行测试"></a>执行测试</h4><ul><li>记录警告信息pytest_warning_recorded</li><li>启动执行循环pytest_runtestloop</li><li>开始执行当前用例pytest_runtest_protocol</li><li>开始记录日志pytest_runtest_logstart</li><li>开始运行测试准备pytest_runtest_setup</li><li>执行某个测试准备方法pytest_fixture_setup</li><li>执行测试用例函数pytest_pyfunc_call</li><li>开始运行测试清理pytest_runtest_teardown</li><li>执行某个测试清理方法pytest_fixture_post_finalizer</li><li>停止记录日志pytest_runtest_logfinish</li></ul><h4 id="执行测试时的钩子函数"><a href="#执行测试时的钩子函数" class="headerlink" title="执行测试时的钩子函数"></a>执行测试时的钩子函数</h4><ul><li>pytest_runtestloop(session)：开始执行用例</li><li>pytest_runtest_protocol(item, nextitem)：开始执行某条用例</li><li>pytest_runtest_logstart(nodeid, location)：开始记录日志</li><li>pytest_runtest_logfinish(nodeid, location)：停止记录日志</li><li>pytest_runtest_makereport(item, call)：创建报告对象</li><li>pytest_runtest_setup(item)：开始运行测试准备方法</li><li>pytest_runtest_call(item)：开始调用测试方法</li><li>pytest_pyfunc_call(pyfuncitem)：调用测试函数</li><li>pytest_runtest_teardown(item, nextitem)：开始执行测试清理方法</li></ul><h4 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h4><ul><li>测试会话结束 pytest_sessionfinish</li><li>生成命令行测试总结 pytest_terminal_summary</li><li>恢复配置 pytest_unconfigure</li></ul><h4 id="报告相关钩子函数"><a href="#报告相关钩子函数" class="headerlink" title="报告相关钩子函数"></a>报告相关钩子函数</h4><ul><li>pytest_collectstart(collector)：开始收集某个模块的用例</li><li>pytest_make_collect_report(collector)：为当前模块创建收集报告对象</li><li>pytest_itemcollected(item)：收集到一条用例</li><li>pytest_collectreport(report)：收集当前模块结束</li><li>pytest_deselected(items)：排除部分用例</li><li>pytest_report_header(config, start_path, startdir)：命令行输出收集信息</li><li>pytest_report_collectionfinish(config, start_path, startdir, items)：收集完毕</li><li>pytest_report_teststatus(report, config)：报告setup&#x2F;用例&#x2F;teardown执行状态</li><li>pytest_report_to_serializable(config, report)：序列化报告内容</li><li>pytest_report_from_serializable(config, data)：加载序列化报告内容</li><li>pytest_terminal_summary(terminalreporter, exitstatus, config)：生成命令行运行总结</li><li>pytest_fixture_setup(fixturedef, request)：执行某个测试准备方法</li><li>pytest_fixture_post_finalizer(fixturedef, request)：执行某个测试清理方法</li><li>pytest_warning_recorded(warning_message, when, nodeid, location)：记录到警告信息</li><li>pytest_runtest_logreport(report)：输出setup&#x2F;用例&#x2F;teardown日志</li><li>pytest_assertrepr_compare(config, op, left, right)：处理断言</li><li>pytest_assertion_pass(item, lineno, orig, expl)：处理用例断言通过</li></ul><h5 id="示例-命令行总结-运行后额外操作"><a href="#示例-命令行总结-运行后额外操作" class="headerlink" title="示例-命令行总结-运行后额外操作"></a>示例-命令行总结-运行后额外操作</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pytest_terminal_summary</span>(<span class="params">config</span>):  <span class="comment"># 生成报告时的命令行最终总结方法</span></span><br><span class="line">    send_email = config.getoption(<span class="string">&quot;--send-email&quot;</span>)</span><br><span class="line">    email_receivers = config.getini(<span class="string">&#x27;email_receivers&#x27;</span>).split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> send_email <span class="keyword">is</span> <span class="literal">True</span> <span class="keyword">and</span> email_receivers:</span><br><span class="line">        log_file = config.getoption(<span class="string">&#x27;log_file&#x27;</span>)</span><br><span class="line">        email_subject = config.getini(<span class="string">&#x27;email_subject&#x27;</span>) <span class="keyword">or</span> <span class="string">&#x27;TestReport&#x27;</span></span><br><span class="line">        email_body = config.getini(<span class="string">&#x27;email_body&#x27;</span>) <span class="keyword">or</span> <span class="string">&#x27;Hi&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> email_receivers:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;发送邮件 ...&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="调试-交互相关的钩子函数"><a href="#调试-交互相关的钩子函数" class="headerlink" title="调试&#x2F;交互相关的钩子函数"></a>调试&#x2F;交互相关的钩子函数</h4><ul><li>pytest_internalerror(excrepr, excinfo)：运行时出现内部错误</li><li>pytest_keyboard_interrupt(excinfo)：运行时用户Ctrl+C中断测试</li><li>pytest_exception_interact(node, call, report)：引发可交互的异常</li><li>pytest_enter_pdb(config, pdb)：进入pdb调试器</li><li>pytest_leave_pdb(config, pdb)：退出pdb调试器</li></ul><h3 id="Pytest测试框架的Fixture机制"><a href="#Pytest测试框架的Fixture机制" class="headerlink" title="Pytest测试框架的Fixture机制"></a>Pytest测试框架的Fixture机制</h3><blockquote><p>@pytest.fixture(scope&#x3D;,params&#x3D;,autouse&#x3D;,ids&#x3D;,name&#x3D;)<br>参数说明：<br>scope ：表示的是被@pytest.fixture标记的方法的作用域。 【function:默认，class（类），module（模块），package&#x2F;session】<br>params：参数化（支持：列表，元祖，字典列表[{},{},{}]，字典元祖[(),(),()]）<br>autouse：True:自动执行，默认False<br>ids：当 使用params参数化时，给每一个值设置一个变量名，意义不大<br>name：给表示的是被pytest.fixture标记的方法取一个别名</p></blockquote><p>​在Pytest测试框架中，Fixture机制是一种用于管理测试用例依赖关系的机制。Fixture机制可以在测试用例执行之前和之后执行一些操作，例如创建测试数据、打开数据库连接、清理测试数据等。</p><p>​在Pytest中使用@pytest.fixture装饰器装饰一个函数，该函数可以yield或return返回数据、对象或者一个函数。在测试用例中，使用@pytest.mark.usefixtures装饰器来或将Fixture函数名作为参数或使用Fixture。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;123456&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">user</span>):  <span class="comment"># Fixture函数可以引用(依赖)其他Fixture函数</span></span><br><span class="line">  <span class="comment"># 使用的user参数实际为调用user()函数后的返回值</span></span><br><span class="line">  username, password = user</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;username&#125;</span> 登录&#x27;</span>)</span><br><span class="line">    token = <span class="string">&#x27;abcdef&#x27;</span></span><br><span class="line">    <span class="keyword">yield</span> token  <span class="comment"># yield上为测试准备，yield下为测试清理</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;退出登录’)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def test_add_project(login):  # 引用(依赖)login方法</span></span><br><span class="line"><span class="string"> # 使用login参数实际是调用login()函数的返回值即&#x27;</span>abcde<span class="string">f&#x27;</span></span><br><span class="line"><span class="string">    print(&#x27;</span>token =<span class="string">&#x27;, login)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 也可以标记使用指定Fixture函数，执行其测试准备即清理方法</span></span><br><span class="line"><span class="string">@pytest.mark.userfixtures(&#x27;</span>login<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">def test_add_project02():</span></span><br><span class="line"><span class="string">    pass # 这种情况下拿不到Fixture函数的返回结果</span></span><br></pre></td></tr></table></figure><h5 id="Fixture生效范围"><a href="#Fixture生效范围" class="headerlink" title="Fixture生效范围"></a>Fixture生效范围</h5><p>Fixture函数可以通过scope指定作用范围，Pytest中的Fixture函数支持以下5种范围：</p><ul><li>Session会话级：scope&#x3D;‘session’，运行一次Pytest算一次会话。运行期间只setup&#x2F;teardown一次<br>Package包级：scope&#x3D;‘pacakge’，对每个包Python包setup&#x2F;teardown一次</li><li>Module模块级：scope&#x3D;‘module’，对每个Python脚本setup&#x2F;teardown一次</li><li>Class级：scope&#x3D;‘class’，对每个测试类setup&#x2F;teardown一次</li><li>Function级：scope&#x3D;‘function’，默认，每个测试函数或测试方法setup&#x2F;teardown一次</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="comment"># 整个运行过程中仅启动关闭一次浏览器</span></span><br><span class="line"><span class="meta">@pytest.fixture(<span class="params">scope=<span class="string">&#x27;session&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">driver</span>():</span><br><span class="line">    dr = webdriver.Chrome()</span><br><span class="line">    <span class="keyword">yield</span> dr</span><br><span class="line">    dr.quit()</span><br></pre></td></tr></table></figure><h5 id="Fixture共享及同名覆盖"><a href="#Fixture共享及同名覆盖" class="headerlink" title="Fixture共享及同名覆盖"></a>Fixture共享及同名覆盖</h5><p>​Fixture函数一般作为公用的辅助方法或全局变量来使用，因此需要在不同用例中都能使用。Pytest框架中使用固定名称的conftest.py文件，来集中管理Fixture函数 。<br>​conftest.py文件同级即下级目录中的所有用例可以无需导入，直接使用conftest.py中的所有Fixture函数。<br>​conftest.py文件在不同的目录中可以有多个（生效范围不同），同时用例文件中也可以编写Fixture函数，当Fixture函数有重名时，采用“就近”原则，离当前用例最近的Fixture函数生效。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@pytest.fixture(<span class="params">scope=<span class="string">&#x27;session&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base_url</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;http://localhost:3000&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_base_url</span>(<span class="params">base_url</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;base_url =&#x27;</span>, base_url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># pip install pytest-base-url</span></span><br><span class="line">    <span class="keyword">import</span> pytest</span><br><span class="line">    pytest.main([__file__, <span class="string">&#x27;-sq&#x27;</span>,<span class="string">&#x27;--base-url=http://www.xxx.com&#x27;</span>])</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">conftest.py文件的作用:</span><br><span class="line">用来编写Fixture函数</span><br><span class="line">编写钩子Hooks函数</span><br><span class="line">导入其所在目录或包的路径（可以确保项目根目录被导入）</span><br><span class="line"></span><br><span class="line">conftest.py所在导入规则：</span><br><span class="line">如果conftest.py所在目录没有__init__.py文件，则Pytest自动导入conftest.py所在目录。</span><br><span class="line">如果有则向上找到最上层的包（最上层一个包含__init__.py的目录），并导入包的所在目录，以确保conftest.py可以使用</span><br></pre></td></tr></table></figure><h5 id="Fixture返回函数对象"><a href="#Fixture返回函数对象" class="headerlink" title="Fixture返回函数对象"></a>Fixture返回函数对象</h5><p>​由于Fixture函数不接收普通参数，无法根据用例需要进行特定的测试准备，此时我们一般需要封装一个实用函数并导入使用，也可以把函数定义到Fixture函数的内部，并返回该函数对象，这样用例无需导入便可直接使用功能函数。</p><ul><li><strong>常规导入模块方式</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># auth.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">username, password</span>):</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    token = <span class="string">&#x27;abcdef&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> token</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># test_project_api.py</span></span><br><span class="line"><span class="keyword">from</span> .auth <span class="keyword">import</span> login</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_add_project</span>():</span><br><span class="line">    token = login(<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;abc123&#x27;</span>)</span><br><span class="line">    <span class="comment"># ...</span></span><br></pre></td></tr></table></figure><ul><li><strong>封装成Fixture方式</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># conftest.py</span></span><br><span class="line"><span class="meta">@pytest.fixture</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_login</span>(<span class="params">username, password</span>):</span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">        token = ‘abcdef’</span><br><span class="line">        <span class="keyword">return</span> token</span><br><span class="line">    <span class="keyword">return</span> _login</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># test_project_api.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_add_project</span>(<span class="params">login</span>):  <span class="comment"># 无需导入直接使用</span></span><br><span class="line"> <span class="comment"># 使用的login参数实际是login()函数的调用结果，</span></span><br><span class="line"> <span class="comment"># 即内部的_login函数</span></span><br><span class="line">  token = login(<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;abc123&#x27;</span>)</span><br><span class="line">    <span class="comment"># ...</span></span><br></pre></td></tr></table></figure><h3 id="Pytest测试框架的参数化机制"><a href="#Pytest测试框架的参数化机制" class="headerlink" title="Pytest测试框架的参数化机制"></a>Pytest测试框架的参数化机制</h3><p>​Pytest提供了三种参数化方式:</p><h4 id="使用-pytest-mark-paramitrize-标记进行数据驱动测试"><a href="#使用-pytest-mark-paramitrize-标记进行数据驱动测试" class="headerlink" title="使用@pytest.mark.paramitrize()标记进行数据驱动测试"></a><strong>使用@pytest.mark.paramitrize()标记进行数据驱动测试</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">users = [</span><br><span class="line">    (<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;kevin&#x27;</span>,<span class="string">&#x27;abc123&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;lily&#x27;</span>, <span class="string">&#x27;abcdef&#x27;</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.mark.parametrize(<span class="params"><span class="string">&#x27;user,pwd&#x27;</span>, users</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_login</span>(<span class="params">user, pwd</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;登录&#x27;</span>, user, pwd)</span><br></pre></td></tr></table></figure><h4 id="使用Fixture函数的params参数-进行参数化测试准备"><a href="#使用Fixture函数的params参数-进行参数化测试准备" class="headerlink" title="使用Fixture函数的params参数,进行参数化测试准备"></a>使用Fixture函数的params参数,进行参数化测试准备</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> users = [</span><br><span class="line">    (<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;kevin&#x27;</span>,<span class="string">&#x27;abc123&#x27;</span>), </span><br><span class="line">    (<span class="string">&#x27;lily&#x27;</span>, <span class="string">&#x27;abcdef&#x27;</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture(<span class="params">params=users</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>): <span class="comment"># request是系统内置Fixture</span></span><br><span class="line">    user, pwd = request.param</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;登录&#x27;</span>, user, pwd)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_add_project</span>(<span class="params">login</span>):    <span class="string">&quot;&quot;&quot;测试不同用户添加项目&quot;&quot;&quot;</span>    </span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="使用钩子函数pytest-generate-tests-，动态成多条用例"><a href="#使用钩子函数pytest-generate-tests-，动态成多条用例" class="headerlink" title="使用钩子函数pytest_generate_tests()，动态成多条用例"></a>使用钩子函数pytest_generate_tests()，动态成多条用例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># conftest.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pytest_addoption</span>(<span class="params">parser</span>): <span class="comment"># 添加命令行参数</span></span><br><span class="line">     parser.addoption(<span class="string">&quot;--filepath&quot;</span>, action=<span class="string">&quot;append&quot;</span>,default=[], <span class="built_in">help</span>=<span class="string">&quot;run file list&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pytest_generate_tests</span>(<span class="params">metafunc</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;filepath&quot;</span> <span class="keyword">in</span> metafunc.fixturenames:</span><br><span class="line">        filepaths = metafunc.config.getoption(<span class="string">&quot;filepath&quot;</span>)</span><br><span class="line">        metafunc.parametrize(<span class="string">&quot;filepath&quot;</span>,filepaths)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># test_a.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_a</span>(<span class="params">filepath</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;test_a&#x27;</span>, filepath)</span><br></pre></td></tr></table></figure><h3 id="Pytest测试框架的收集机制"><a href="#Pytest测试框架的收集机制" class="headerlink" title="Pytest测试框架的收集机制"></a>Pytest测试框架的收集机制</h3><p>​在Pytest测试框架中，收集机制是一种用于自动收集测试用例的机制。Pytest测试框架会自动搜索指定目录下的测试文件，并收集其中的测试用例。</p><p>以下是Pytest测试框架的收集机制的一些常用用法：</p><h4 id="默认收集规则"><a href="#默认收集规则" class="headerlink" title="默认收集规则"></a>默认收集规则</h4><p>Pytest测试框架的默认收集规则是搜索以test_开头或以_test结尾的文件，并收集其中的测试用例。例如，test_sum.py、sum_test.py、test_sum.py::test_sum等文件和测试用例都会被收集。</p><h4 id="根据正则匹配收集用例"><a href="#根据正则匹配收集用例" class="headerlink" title="根据正则匹配收集用例"></a>根据正则匹配收集用例</h4><p>可以使用pytest命令的-k选项来指定收集指定目录下的测试文件。例如，可以使用以下命令来收集tests目录下的所有测试文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pytest -k tests</span><br><span class="line"><span class="comment"># Pytest测试框架会自动搜索tests目录下的测试文件，并收集其中的测试用例</span></span><br></pre></td></tr></table></figure><h4 id="自定义收集规则"><a href="#自定义收集规则" class="headerlink" title="自定义收集规则"></a>自定义收集规则</h4><p>可以使用<code>pytest_collection_modifyitems</code>钩子函数来自定义收集规则</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pytest_collection_modifyitems</span>(<span class="params">items</span>):</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;slow&quot;</span> <span class="keyword">in</span> item.keywords:</span><br><span class="line">            item.add_marker(pytest.mark.slow)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">使用pytest_collection_modifyitems钩子函数来修改测试用例列表。如果测试用例的关键字中包含slow，则为该测试用例添加@pytest.mark.slow标记。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Pytest测试框架高级应用"><a href="#Pytest测试框架高级应用" class="headerlink" title="Pytest测试框架高级应用"></a>Pytest测试框架高级应用</h3><p>pass</p><h4 id="Pytest插件开发"><a href="#Pytest插件开发" class="headerlink" title="Pytest插件开发"></a>Pytest插件开发</h4><p>pass</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> pytest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pytest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端性能优化</title>
      <link href="/2024/02/24/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/2024/02/24/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h4 id="前端性能优化"><a href="#前端性能优化" class="headerlink" title="前端性能优化"></a>前端性能优化</h4><ol><li><p>减少http请求</p></li><li><p>使用http2.0</p></li><li><p>使用ssr服务端渲染</p><p><strong><code>SSR</code> 可以让首屏加载更快，带来更好的 <code>SEO</code></strong></p><p>前端基本上现在都是 <code>SPA</code> 单页应用，单页应用的缺陷就是首屏加载很慢。使用 <code>SSR</code> 服务端渲染可以带来更好的 <code>SEO</code> ，<code>SEO</code> 就是搜索引擎优化，搜索引擎就是爬虫，可以更好的爬数据</p><ol><li>vue官网ssr</li><li>Nuxt.js</li></ol></li><li><p>合理使用cdn</p></li><li><p>将css放在文件头部，将js放在文件底部</p></li><li><p>使用精灵图&#x2F; 雪碧图, 减少请求次数</p></li><li><p>善用http缓存：强缓存&amp;协商缓存</p><p>二者都是后端控制的东西，强缓存是响应头添加 <code>&#39;Cache-Control&#39;: &#39;max-age=xxx&#39;</code> 字段， <code>max-age</code> 是过期时间，强缓存后无法缓存输入 <code>url</code> 后的 <code>get </code>请求，想要缓存这个请求需要靠协商缓存来实现，协商缓存的实现是在强缓存的基础上添加一个 <code>&#39;Last-Modified&#39;: stats.mtimeMs</code> 或者 <code>etag</code> 字段，若检查到前端返回的 <code>If-Modified-Since</code> 时间一致，后端就返回 <code>304</code> 状态码给前端，浏览器就从缓存中读取静态资源</p></li><li><p>其他</p><ul><li>首屏速度优化(SPA)——静态资源体积(tree-shaking、gzip)、异步引入、延迟加载</li><li>大量数据 渲染优化——一次渲染一部分；分页处理</li><li>用户体验优化——骨架屏、loading、页面状态缓存；搭配首屏加载</li><li>组件可扩展性和易用性能优化</li><li>错误处理 - 优化接口的出错处理，并发处理。让页面响应更快，体验更加</li></ul></li><li><p>压缩文件</p></li><li><p>懒加载</p></li></ol><p>懒加载的实现需要获取到可视区范围的高度，以及每张图片的高度，监听用户滚动的过程中图片是否进入范围内，进入时才赋值 <code>src</code> ， <code>src</code> 只要有值就一定会发送 <code>http</code> 请求，此前存放 <code>src</code> 的属性可以任意取名，当然一般我们取名为 <code>data-</code> 前缀，比如下面这样</p><img src data-src="****"><ol start="10"><li><p>尽量使用css，字体来代表图片</p></li><li><p>使用webp格式的图片</p></li></ol><p><code>webp</code> 格式的图片是谷歌推出的，这种格式的图像压缩算法能力要优于传统的 <code>jpg</code> ， <code>png</code> 等格式，在相同图片质量的情况下，空间大小会优化 30% 左右的样子</p><p>关于图片的性能优化就是小图用雪碧图，大图用 <code>webp</code> 格式</p><ol start="12"><li>webpack：tree-shaking  | 打包文件名 + hash</li></ol><p><code>tree-shaking</code> 的作用就是帮我们把项目中无用的代码给找出来，比如我们调试用的 <code>console.log</code> ，其实 <code>console.log</code> 对浏览器的开销还是蛮大的</p><ol start="13"><li>尽量减少回流重绘</li></ol><p>输入url到页面渲染后半段：回流，重绘，优化</p><p>回流（重排）就是计算布局，重绘就是给页面上色</p><ul><li><strong>尽量不用 js 去直接修改 css</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 案例一</span></span><br><span class="line">box.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;200px&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 案例二</span></span><br><span class="line">.<span class="property">more</span>&#123;</span><br><span class="line"> <span class="attr">width</span>: <span class="string">&#x27;200px&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">box.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;more&#x27;</span>)</span><br><span class="line"><span class="comment">// 一种方案就是直接修改 css ，第二种是添加类名。方案一会导致回流，方案二不会导致回流，因为添加类名并没有修改几何属性，它是间接交给了 css</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="14"><li>合理使用事件委托</li></ol><p>事件委托的机制是借助冒泡机制，把原本需要批量操作子组件的操作代理到一个父组件上</p><ol start="15"><li>if-else &amp; switch</li></ol><p><code>if-else</code> 有个判断顺序的，一定是从上往下走逐个走到目标，每次都判断一下，浪费性能。而 <code>switch</code> 不然， <code>switch</code> 是直接命中目标，只有一次判断</p><p><code>if-else</code> 会更加灵活，但是性能又没有 <code>switch</code> 来得好</p><ol start="16"><li><p>动画效果: requestAnimationFrame避免页面卡顿</p></li><li><p>Web Worker 开启多线程</p></li></ol><p>js默认情况下是单线程，但是v8引擎执行js的时候是可以多开辟线程，像页面上的图片有水印一般都是页面加载的时候实现，而非图片就有水印，像这种操作就是交给另一个线程来实现的(postMessge<code>和</code>onmessge  )</p><ol start="18"><li>css选择器复杂性要低</li></ol><p>浏览器读取css是从右往左读，尽量给每个标签打上类名，不要通过多层父容器</p><ol start="19"><li>尽量使用弹性布局</li></ol><p>flexbox性能会比较好</p><ul><li><p>首屏加载速度</p><ul><li><p>首屏速度</p><ul><li>白屏时间<ul><li>资源加载时间(占比最大)</li><li>首屏js执行</li></ul></li><li>渲染页面 (SSR 项目发生在服务器端，可以提升页面加载速度和用户体验，同时也有利于SEO)<ul><li>首屏数据请求</li><li>Dom渲染</li></ul></li></ul><p>解决：最大效果就是 减少首屏资源体积(打包工具压缩，异步加载，懒加载) </p><p>打包 工具压缩：tree-shaking，按需引入，按需打包，减少打包体积</p></li></ul></li><li><p>操作速度以及渲染速度</p><p>造成操作卡顿渲染慢 原因：</p><ol><li>一次性操作大量的dom (例如页面操作大量数据表格tr)</li></ol><p>解决：长列表渲染和异步渲染</p><ol start="2"><li><p>进行了复杂度很高的运算 (常见于循环)</p></li><li><p>vue或react项目中，渲染太多不必要的元素</p></li></ol><p>解决：Vue中有依赖手机，配合vue3的静态节点标记，已经基本避免了因为数据改变引起的无意义渲染</p><ul><li>频繁切换使用v-show ,否则使用v-if</li><li>循环，动态切换内容可以加key值</li><li>keep-alive缓存</li><li>区分请求颗粒度，减少请求范围</li></ul><ol start="4"><li>不变数据，定期失效可以缓存在cookies或者localstorage中，比如token，用户名</li><li>可以考虑做一个缓存队列，存于内存中(全局对象，vuex)。这样能保证刷新就更新数据，也能一定程度上缓存数据</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue响应式原理</title>
      <link href="/2024/02/12/vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/"/>
      <url>/2024/02/12/vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h4 id="Object-defineProperty与-Proxy区别"><a href="#Object-defineProperty与-Proxy区别" class="headerlink" title="Object.defineProperty与 Proxy区别"></a>Object.defineProperty与 Proxy区别</h4><ol><li>所有属性监听</li></ol><ul><li>Object.defineProperty无法一次性监听对象所有属性，必须遍历或者递归来实现</li><li>Proxy的实现就不需要遍历<ul><li>Proxy 的get方法用于拦截某个属性的读取操作，可以接收三个参数，依次为目标、属性名和Proxy实例本身，其中最后一个参数为可选参数</li><li>set方法用来拦截某个属性的赋值操作，可以接受四个参数，依次为目标对象、属性名、属性值和Proxy实本身，其中最后一个为可选参数</li></ul></li></ul><ol start="2"><li>新增属性监听</li></ol><ul><li><p>Object.defineProPerty无法监听新增属性，如果需要监听新增属性，需要手动再做一次监听，在Vue中想动态监听属性，一般用Vue.set(对象实例, “新增对象属性”)这种形式来添加</p><p><img src="/2024/02/12/vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/%E6%96%B0%E5%A2%9E%E5%B1%9E%E6%80%A7.png"></p></li><li><p>Proxy可以监听新增属性</p></li></ul><ol start="3"><li>数组操作</li></ol><ul><li><p>Object.defineProperty 无法响应数组操作</p><ul><li><p>可以监听数组变化，但无法对新增数组变化进行监听，因此Mobk中为了监听数组变化，默认将数组长度设置为1000，监听0-999的属性变化</p></li><li><p>如果想要监听push、shift、pop、unshift等方法，该怎么做？Vue和Mobx中都是通过重写原型的方法实现的：在定义变量的时候，判断是否是数组，如果是数组，那么就修改它的proto，将其指向subArrProto，从而实现重写原型链。</p><p>vue源码：</p><p><img src="/2024/02/12/vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86.png" alt="响应式原理"></p></li></ul></li></ul><p>场景：</p><ul><li>利用Proxy set get 应用proxy表单验证</li></ul> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//验证规则</span></span><br><span class="line"><span class="keyword">const</span> validators = &#123;</span><br><span class="line">    <span class="attr">name</span>: &#123;</span><br><span class="line">        <span class="title function_">validate</span>(<span class="params">value</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> value.<span class="property">length</span> &gt; <span class="number">6</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attr">message</span>:<span class="string">&#x27;用户名长度不能小于六&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">password</span>: &#123; </span><br><span class="line">        <span class="title function_">validate</span>(<span class="params">value</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> value.<span class="property">length</span> &gt; <span class="number">10</span>; </span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;密码长度不能小于十&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">moblie</span>: &#123;</span><br><span class="line">        <span class="title function_">validate</span>(<span class="params">value</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^1(3|5|기8|9)[0-9]&#123;9&#125;$/</span>.<span class="title function_">test</span>(value);</span><br><span class="line">        &#125;,</span><br><span class="line">        message：<span class="string">&#x27;手机号格式错误&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//验证方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">validator</span>(<span class="params">obj, validators</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">target, key, value</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> validator = validators[key]</span><br><span class="line">            <span class="keyword">if</span> (!validator) &#123; </span><br><span class="line">                target[key] = value;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (validator.<span class="title function_">validate</span>(value)) &#123; </span><br><span class="line">                target[key] = value;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123; alert (validator.<span class="property">message</span> <span class="string">&quot;&quot;</span>);&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> form = &#123;&#125;;</span><br><span class="line">form = <span class="title function_">validator</span>(form, validators);</span><br><span class="line">form.<span class="property">name</span> = <span class="string">&#x27;666&#x27;</span>; <span class="comment">//用户名长度不能小于六</span></span><br><span class="line">form.<span class="property">password</span> = <span class="string">&#x27;113123123123123&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>get 用来拦截私有属性的读取， 用_ 开头的属性是私有属性， 禁止私有属性读取</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person =&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">_sex</span>: <span class="string">&#x27;male&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(person, &#123; </span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, prop</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (prop[<span class="number">0</span>] === <span class="string">&#x27;_&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`<span class="subst">$&#123;prop&#125;</span> is private attribute`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> target[prop]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">proxy.<span class="property">name</span>; <span class="comment">//tom</span></span><br><span class="line">proxy.<span class="property">_sex</span>; <span class="comment">// _sex is private attribute</span></span><br></pre></td></tr></table></figure><ul><li>等等还有其他Proxy的方法使用 …….(get&#x2F; set&#x2F; apply&#x2F; construct&#x2F; has&#x2F; delete&#x2F; delete)</li><li>!!! Proxy 可以提高开发效率和代码质量，但在使用过程中需要注意性能优化、避免循环引用导致栈溢出、合理使用拦截器和兼容性等方面的细节。</li></ul><h4 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h4><ul><li><p>[…arr]</p></li><li><p>支持展开运算符是要有Symbol.iterator</p><p>arr[Symbol.iterator]</p></li></ul><p>面试题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我们能否以某种方式为下面的语句使用展开运算而不导致类型错误 ？</span></span><br><span class="line"><span class="comment">//错误代码示例</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">z</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...obj])<span class="comment">//报错 根本原因是因为对象是不具备迭代器属性的数据结构</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//正确代码</span></span><br><span class="line">obj[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">next</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> objArr = <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj)</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">index</span> &lt; objArr.<span class="property">length</span> -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">let</span> key = objArr[<span class="variable language_">this</span>.<span class="property">index</span>]</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">index</span>++</span><br><span class="line">                <span class="keyword">return</span>&#123;</span><br><span class="line">                    <span class="attr">value</span>: obj[key]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="attr">done</span>: <span class="literal">true</span>&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">index</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...obj])  <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以在Object 构造函数的原型上添加，为所有对象提供迭代器</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES7 也提出了新的写法</span></span><br><span class="line"><span class="comment">//console.log(&#123;...objj&#125;) 会涉及到对象的拷贝操作,相当于对obj进行了浅拷贝</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;...obj&#125;) <span class="comment">// &#123;x: 1, y: 2, z: 3&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>对象转数组案例</li></ul><ol><li>使用 Object.keys() 方法获取对象的所有键，然后使用 map() 方法将每个键对应的值存入新数组中。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="title function_">map</span>(<span class="function"><span class="params">key</span> =&gt;</span> obj[key]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用 Object.values() 方法获取对象的所有值，直接将值存入新数组中。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Object</span>.<span class="title function_">values</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><ol start="3"><li>使用 Object.entries() 方法获取对象的键值对数组，然后对每个键值对进行处理。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Object</span>.<span class="title function_">entries</span>(obj).<span class="title function_">map</span>(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> value);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">#### 高效运算符  &#x27;?.&#x27; 和 &#x27;??&#x27; 和 &#x27;??=&#x27;  的区别</span><br><span class="line"></span><br><span class="line">* 可选链运算符(?.)</span><br><span class="line"></span><br><span class="line">可选链运算符, 允许读取位于连接对象深处的属性值，而不必明确验证链式中的每个引用是否有效。</span><br><span class="line"></span><br><span class="line">使用场景：当我们不确定一个对象是否存在时，调用对象属性，可以使用该操作符</span><br><span class="line"></span><br><span class="line">* 空值合并运算符(??)</span><br><span class="line"></span><br><span class="line">空值合并运算符，是一个逻辑运算符，当左侧的操作为null或undefined时，返回其右侧操作数，否则返回左侧操作数</span><br><span class="line"></span><br><span class="line">有点类似于 ||(逻辑或) ，与 || 区别在于 ??. 对0和 &quot; 会判断为真</span><br><span class="line"></span><br><span class="line">* 逻辑空赋值(??=)</span><br><span class="line"></span><br><span class="line">逻辑空赋值运算符(X ?? = Y) 仅在X是空值(null 或undefined) 时对其赋值。</span><br><span class="line"></span><br><span class="line">使用场景：当你需要通过if判断某个变量不存在时，才需要为该变量赋值时使用</span><br><span class="line"></span><br><span class="line">#### 原型和原型链</span><br><span class="line"></span><br><span class="line">1. **原型（Prototype）**：每个对象都有一个原型对象，可以通过`__proto__`属性来访问。原型对象可以包含共享的属性和方法，可以被对象实例共享。</span><br><span class="line">2. **原型链（Prototype Chain）**：当访问对象的属性或方法时，如果对象本身没有该属性或方法，JavaScript引擎会顺着原型链向上查找，直到找到对应的属性或方法或者到达原型链的顶端。</span><br><span class="line"></span><br><span class="line">~~~ js</span><br><span class="line">// 定义了一个构造函数Person，并在其原型对象上定义了一个方法greet。创建了一个Person对象实例person1，并演示了访问属性和方法以及原型链的关系</span><br><span class="line">function Person(name, age) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 在Person的原型对象上定义一个方法</span><br><span class="line">Person.prototype.greet = function() &#123;</span><br><span class="line">    console.log(`Hello, my name is $&#123;this.name&#125; and I am $&#123;this.age&#125; years old.`);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 创建一个Person对象实例</span><br><span class="line">let person1 = new Person(&#x27;Alice&#x27;, 30);</span><br><span class="line"></span><br><span class="line">// 访问实例对象的属性和方法</span><br><span class="line">console.log(person1.name); // Output: Alice</span><br><span class="line">person1.greet(); // Output: Hello, my name is Alice and I am 30 years old.</span><br><span class="line"></span><br><span class="line">// 演示原型链 实例的__proto__ === 其构造函数的prototype</span><br><span class="line">console.log(person1.__proto__ === Person.prototype); // Output: true</span><br><span class="line">// 构造函数的原型Object</span><br><span class="line">console.log(Person.prototype.__proto__ === Object.prototype); // Output: true</span><br><span class="line">// Object的原型为null</span><br><span class="line">console.log(Object.prototype.__proto__); // Output: null</span><br></pre></td></tr></table></figure><ul><li>其他<ul><li><strong>继承</strong>：通过原型链，我们可以实现对象之间的继承关系，子对象可以继承父对象的属性和方法。可以尝试创建一个新的构造函数，让它继承自<code>Person</code>构造函数，并添加新的属性或方法。</li><li><strong>原型修改</strong>：可以尝试修改<code>Person</code>构造函数的原型对象上的方法，然后看看实例对象是否能够访问到修改后的方法。</li><li><strong>原型链终止</strong>：在原型链的顶端是<code>Object.prototype</code>，它的原型是<code>null</code>。可以思考一下为什么原型链的顶端是<code>Object.prototype</code>，而不是其他对象。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写数组Map函数和filter函数</title>
      <link href="/2024/01/18/%E6%89%8B%E5%86%99%E6%95%B0%E7%BB%84map%E5%87%BD%E6%95%B0%E5%92%8Cfilter%E5%87%BD%E6%95%B0/"/>
      <url>/2024/01/18/%E6%89%8B%E5%86%99%E6%95%B0%E7%BB%84map%E5%87%BD%E6%95%B0%E5%92%8Cfilter%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="手写数组map函数和filter函数"><a href="#手写数组map函数和filter函数" class="headerlink" title="手写数组map函数和filter函数"></a>手写数组map函数和filter函数</h4><ul><li><p>map()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法实现</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">_map</span> = <span class="keyword">function</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> newArr = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="variable language_">this</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        newArr.<span class="title function_">push</span>(<span class="title function_">fn</span>(<span class="variable language_">this</span>[i],i))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法调用</span></span><br><span class="line">arr.<span class="title function_">_map</span>(<span class="function">(<span class="params">v</span>)=&gt;</span>v+<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li><li><p>filter()</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法实现</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">_filter</span> = <span class="keyword">function</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> newArr = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="variable language_">this</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_">fn</span>(<span class="params"><span class="variable language_">this</span>[i]</span>)&#123;</span><br><span class="line">            newArr.<span class="title function_">push</span>(<span class="title function_">fn</span>(<span class="variable language_">this</span>[i]))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法调用</span></span><br><span class="line">arr.<span class="title function_">_filter</span>(<span class="function">(<span class="params">v</span>)=&gt;</span>v==<span class="number">1</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写深拷贝浅拷贝方法</title>
      <link href="/2024/01/15/%E6%89%8B%E5%86%99%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D%E6%96%B9%E6%B3%95/"/>
      <url>/2024/01/15/%E6%89%8B%E5%86%99%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h4 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h4><ul><li><p>浅拷贝</p><p><img src="/2024/01/15/%E6%89%8B%E5%86%99%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D%E6%96%B9%E6%B3%95/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">shallowClone</span>(<span class="params">source</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> source !== <span class="string">&#x27;object&#x27;</span> || source == <span class="literal">null</span>）</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">return</span> source;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">let</span> target = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(source) ? [] : &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="comment">//source.hasOwnProperty(key) 判断是否是source自身的属性，不拷贝原型链的属性</span></span><br><span class="line">        <span class="keyword">if</span> (source.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">            <span class="comment">//shallowClone 实现对属性进行递归拷贝</span></span><br><span class="line">            target[key] = <span class="title function_">shallowClone</span>(source[key]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>深拷贝(复杂数据类型也会开辟新空间存储)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用json数据转换来达到深拷贝</span></span><br><span class="line"><span class="keyword">let</span> deePerson = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(person))</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者自己写递归循环实现深拷贝</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj, hash = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj == <span class="literal">null</span>) <span class="keyword">return</span> obj; <span class="comment">// 如果是null或者undefined我就不进行拷贝操作</span></span><br><span class="line">    <span class="comment">//如果是时间函数Date() 、正则表达式 RegExp()也直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(obj);</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(obj);</span><br><span class="line">  <span class="comment">// 可能是对象或者普通的值  如果是函数的话是不需要深拷贝</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&quot;object&quot;</span>) <span class="keyword">return</span> obj;</span><br><span class="line">  <span class="comment">// 是对象的话就要进行深拷贝</span></span><br><span class="line">  <span class="keyword">if</span> (hash.<span class="title function_">get</span>(obj)) <span class="keyword">return</span> hash.<span class="title function_">get</span>(obj);</span><br><span class="line">  <span class="keyword">let</span> cloneObj = <span class="keyword">new</span> obj.<span class="title function_">constructor</span>(<span class="params"></span>);</span><br><span class="line">  <span class="comment">// 找到的是所属类原型上的constructor,而原型上的 constructor指向的是当前类本身</span></span><br><span class="line">  hash.<span class="title function_">set</span>(obj, cloneObj);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">      <span class="comment">// 实现一个递归拷贝</span></span><br><span class="line">      cloneObj[key] = <span class="title function_">deepClone</span>(obj[key], hash);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cloneObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>拷贝弊端：不能拷贝函数 、正则表达式 RegExp()</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写Vue的v-Model指令</title>
      <link href="/2024/01/03/%E6%89%8B%E5%86%99vue%E7%9A%84v-model%E6%8C%87%E4%BB%A4/"/>
      <url>/2024/01/03/%E6%89%8B%E5%86%99vue%E7%9A%84v-model%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h4 id="手写双向数据绑定-v-mode"><a href="#手写双向数据绑定-v-mode" class="headerlink" title="手写双向数据绑定(v-mode)"></a>手写双向数据绑定(v-mode)</h4><ul><li>使用Obiect.defineProperty() 实现双向数据绑定  vue2</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;input&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;input&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;p&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> obj=&#123;<span class="attr">name</span>: <span class="string">&quot;&quot;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//当set或者get obj对象属性，就会触发事件</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;name&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">val</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//input.value = val</span></span></span><br><span class="line"><span class="language-javascript">                    p.<span class="property">innerHTML</span> = val</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> val</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//监听input的修改,并赋值给中间对象obj</span></span></span><br><span class="line"><span class="language-javascript">            input.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                obj.<span class="property">name</span> = e.<span class="property">target</span>.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>使用Proxy( ES6 的新特性) 和Reflect 实现双向数据绑定  vue3</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</span><br><span class="line">&lt;title&gt;</span><br><span class="line">&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; id=&quot;input&quot;&gt;</span><br><span class="line">        &lt;p id=&quot;p&quot;&gt; &lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">            var input = document.getElementById(&#x27;input&#x27;)</span><br><span class="line">            var p = document.getElementById(&#x27;p&#x27;)</span><br><span class="line">var obj=&#123;&#125;</span><br><span class="line">            //Reflect 可以用于获取可以获取对象对象的行为，它与Object类似，但更易读,为操作对象提供一种更优雅地 方式。它地方法与Proxy是对应的</span><br><span class="line">            let newProxy = new Proxy(obj, &#123;</span><br><span class="line">                get: (target, key, recevier)=&gt;&#123;</span><br><span class="line">                    return Reflect.get(target, key, recrvier)</span><br><span class="line">                &#125;,</span><br><span class="line">                set: (target, key, value, recevier)=&gt;&#123;</span><br><span class="line">                    //监听newProxy是否有变化, 如果有则设置值</span><br><span class="line">                    if(key == &quot;text&quot;)&#123;</span><br><span class="line">                        input.value = val</span><br><span class="line">                        p.innerHTML = value;</span><br><span class="line">                    &#125;</span><br><span class="line">                    //将变化反射回原有对象</span><br><span class="line">                    return Reflect.set(target, key, value, recevier)</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            </span><br><span class="line">          //监听input的修改,并赋值给代理对象newProxy</span><br><span class="line">            input.addEventListener(&#x27;input&#x27;, function(e)&#123;</span><br><span class="line">                newProxy.text = e.target.value</span><br><span class="line">            &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask框架</title>
      <link href="/2023/12/21/Flask%E6%A1%86%E6%9E%B6/"/>
      <url>/2023/12/21/Flask%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="虚拟环境安装"><a href="#虚拟环境安装" class="headerlink" title="虚拟环境安装"></a>虚拟环境安装</h3><h4 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h4><ul><li><p>作用</p><p>virtualenv是一个虚拟的Python环境构建器。 它可以帮助用户并行创建多个Python环境。 因此，它可以避免不同版本的库之间的兼容性问题。</p></li><li><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// pip 安装</span><br><span class="line">pip install virtualenv</span><br><span class="line"></span><br><span class="line">// linux安装</span><br><span class="line">sudo apt-get install virtualenv</span><br></pre></td></tr></table></figure></li><li><p>创建虚拟环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv venv</span><br></pre></td></tr></table></figure></li><li><p>激活相应的环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// linux</span><br><span class="line">venv/bin/activate</span><br><span class="line"></span><br><span class="line">//windows</span><br><span class="line">venv\scripts\activate</span><br></pre></td></tr></table></figure></li></ul><h3 id="Flask-Swagger-生成API-文档"><a href="#Flask-Swagger-生成API-文档" class="headerlink" title="Flask-Swagger (生成API 文档)"></a>Flask-Swagger (生成API 文档)</h3><p><a href="https://geek-docs.com/flask/flask-top-articles/1001100_index.html">Flask</a>-Swagger 是一个用于集成 Swagger 和 Flask 的插件。它可以自动根据 Flask 应用程序中的路由信息生成 Swagger&#x2F;OpenAPI 3.0 文档。</p><p>首先，我们需要安装 Flask-Swagger。可以使用 pip 命令来安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-swagger</span><br></pre></td></tr></table></figure><p>安装完成后，在 Flask 应用程序中导入 Flask-Swagger：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_swagger <span class="keyword">import</span> Swagger</span><br></pre></td></tr></table></figure><p>接下来，创建一个 Flask 应用程序实例，并初始化 Swagger：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line">swagger = Swagger(app)</span><br></pre></td></tr></table></figure><p>现在，我们可以使用 <code>@app.route</code> 装饰器定义 API 路由，并添加 Swagger 注释。下面是一个简单的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/users&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="comment"># Swagger 注释</span></span><br><span class="line"><span class="comment"># @swagger</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_users</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取用户列表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This is a sample request.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ---</span></span><br><span class="line"><span class="string">    responses:</span></span><br><span class="line"><span class="string">      200:</span></span><br><span class="line"><span class="string">        description: 成功获取用户列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实现获取用户列表的逻辑</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>在该示例代码中，<code>@app.route</code> 装饰器用于定义路由和请求方法。<code>@swagger</code> 注释用于告诉 Flask-Swagger 该路由需要生成 Swagger 文档。通过浏览器访问 <code>/apidocs</code> 路径即可打开 Swagger UI</p><h3 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h3><ul><li><p>Flask 框架 轻量级，三方支持全</p></li><li><p>-Django  原生组件全</p></li></ul><h4 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install Flask</span><br></pre></td></tr></table></figure><h4 id="使用并创建应用"><a href="#使用并创建应用" class="headerlink" title="使用并创建应用"></a>使用并创建应用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="comment"># 创建 app 应用实例</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;Hello World&#x27;</span> <span class="comment"># HttpResponse</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure><ul><li><p>Flask构造函数将当前模块的名称(<strong>name</strong>)作为参数。</p></li><li><p>Flask类的route()函数是一个装饰器，它告诉应用程序哪个URL应该调用相关的函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">rule 参数表示与该函数绑定的URL。</span></span><br><span class="line"><span class="string">options 是要转发给底层Rule对象的参数列表。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params">rule, options</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fn</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Flask类的run()方法在本地开发服务器上运行应用程序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment">#方法中的所有参数都是可选的，作用如下表描述说明</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">app.run(host, port, debug, options)</span><br></pre></td></tr></table></figure><table><thead><tr><th>编号</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>host</td><td>监听的主机名。默认为127.0.0.1(localhost)。 设置为’0.0.0.0’使服务器在外部可用</td></tr><tr><td>2</td><td>port</td><td>监听端口号，默认为:5000</td></tr><tr><td>3</td><td>debug</td><td>默认为:false。 如果设置为:true，则提供调试信息</td></tr><tr><td>4</td><td>options</td><td>被转发到底层的Werkzeug服务器。</td></tr></tbody></table></li></ul><h4 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h4><p>​flask 中的调试模式类似于前端的热更新，在开发过程中，修改代码，会自动重新启动server，重新加载最新代码，还可以提供一个有用的调试器来跟踪应用程序中的错误</p><p>​在运行或将调试参数传递给run()方法之前，通过将应用程序对象的调试属性设置为True来启用调试模式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.debug = <span class="literal">True</span></span><br><span class="line">    app.run()</span><br><span class="line">    <span class="comment"># 或</span></span><br><span class="line">    app.run(debug = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h4 id="Flask-路由"><a href="#Flask-路由" class="headerlink" title="Flask 路由"></a>Flask 路由</h4><ul><li><p>Flask中的route()装饰器用于将URL绑定到函数。 例如 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.debug = <span class="literal">True</span></span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>此时浏览器应该访问 <a href="http://localhost:5000/hello">http://localhost:5000/hello</a></p></li><li><p>也可以使用<code>add_url_rule</code>函数来添加一个URL规则。例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/hello&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>, hello_world)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1、&#x27;/hello&#x27;：这是要添加的URL路径，表示用户在浏览器中访问的地址。</span></span><br><span class="line"><span class="string">2、&#x27;hello&#x27;：这是规则的命名，用于在代码中引用该规# 获取&#x27;/hello&#x27;路径的URL</span></span><br><span class="line"><span class="string">with app.test_request_context():</span></span><br><span class="line"><span class="string">    print(url_for(&#x27;hello&#x27;))  # 输出：/hello则。 可以在后续代码中使用这个命名获取相应信息</span></span><br><span class="line"><span class="string">3、hello_world：这是一个函数，它将在用户访问&#x27;/hello&#x27;路径时被调用，执行相应的操作。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.debug = <span class="literal">True</span></span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></li></ul><h4 id="Flask变量规则-路由传参"><a href="#Flask变量规则-路由传参" class="headerlink" title="Flask变量规则 ( 路由传参)"></a>Flask变量规则 ( 路由传参)</h4><p>​可以通过将可变部分添加到规则参数来动态构建URL。 它作为关键字参数传递给规则所关联的函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_name</span>(<span class="params">name</span>):</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;Hello %s!&#x27;</span> % name</span><br><span class="line"><span class="comment"># 其他格式化输出：</span></span><br><span class="line"><span class="comment"># return &quot;Hello &#123;&#125;!&quot;.format(name)</span></span><br><span class="line">    <span class="comment"># return f&quot;Hello &#123;name&#125;!&quot;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>​除了默认的字符串变量部分之外，还可以使用以下转换器构造规则 -</p><table><thead><tr><th>编号</th><th>转换器</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>int</td><td>接受整数</td></tr><tr><td>2</td><td>float</td><td>对于浮点值</td></tr><tr><td>3</td><td>path</td><td>接受用作目录分隔符的斜杠符(&#x2F;)</td></tr></tbody></table><h4 id="重定向-redirect"><a href="#重定向-redirect" class="headerlink" title="重定向 - redirect()"></a>重定向 - redirect()</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#### URL构建 - redirect重定向</span><br><span class="line"></span><br><span class="line">* redirect重定向</span><br><span class="line"></span><br><span class="line">​重定向redirect()函数。调用时，它会返回一个响应对象，并将用户重定向到具有指定状态码的另一个目标位置。</span><br><span class="line"></span><br><span class="line">~~~ python</span><br><span class="line">Flask.redirect(location, statuscode, response)</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">location 参数是响应应该被重定向的URL。</span><br><span class="line">statuscode 参数发送到浏览器的头标，默认为302。</span><br><span class="line">response 参数用于实例化响应。</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><h4 id="url-for"><a href="#url-for" class="headerlink" title="url_for()"></a>url_for()</h4><p>url_for()函数可以动态构建特定函数，该函数接受函数的名称作为第一个参数，并接受一个或多个关键字参数，每个参数对应于URL的变量部分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, redirect, url_for</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/admin&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_admin</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello Admin&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/guest/&lt;guest&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_guest</span>(<span class="params">guest</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello %s as Guest&#x27;</span> % guest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用user函数，根据name的值，跳转到不同的页面</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">if</span> name ==<span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">        <span class="comment"># url_for(&#x27;hello_admin&#x27;)表示跳转到hello_admin函数，只能被路由生命的函数</span></span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;hello_admin&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># url_for(&#x27;hello_guest&#x27;,guest = name)表示跳转到hello_guest函数，并将name作为新值参数传递给guest</span></span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;hello_guest&#x27;</span>,guest = name))</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">app.run(debug = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><ul><li><p>Flask.abort (code)</p><p>Flask类具有带有错误代码的abort()函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Flask.abort(code)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">code参数使用以下值之一 -</span></span><br><span class="line"><span class="string">400 - 对于错误的请求</span></span><br><span class="line"><span class="string">401 - 用于未经身份验证</span></span><br><span class="line"><span class="string">403 - 禁止</span></span><br><span class="line"><span class="string">404 - 未找到</span></span><br><span class="line"><span class="string">406 - 不可接受</span></span><br><span class="line"><span class="string">415 - 用于不支持的媒体类型</span></span><br><span class="line"><span class="string">429 - 请求过多</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, redirect, url_for, render_template, request, abort</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;log_in.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>,methods = [<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> request.form[<span class="string">&#x27;username&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span> :</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;success&#x27;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 将其替换为中止(401)的调用</span></span><br><span class="line">            abort(<span class="number">401</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">            </span><br><span class="line"><span class="meta">            @app.route(<span class="params"><span class="string">&#x27;/success&#x27;</span></span>)</span></span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">success</span>():</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;logged in successfully&#x27;</span></span><br><span class="line">            </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">app.run(debug = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h4 id="Flask-特殊封装"><a href="#Flask-特殊封装" class="headerlink" title="Flask 特殊封装"></a>Flask 特殊封装</h4><h5 id="send-file"><a href="#send-file" class="headerlink" title="send_file()"></a>send_file()</h5><p>​打开并返回文件内容，自动识别文件类型  Content-Type: text&#x2F;plan</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="comment"># 创建 app 应用实例</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/page&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getPage</span>():</span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> send_file(<span class="string">&quot;./logo.png&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure><h5 id="jsonify"><a href="#jsonify" class="headerlink" title="jsonify()"></a>jsonify()</h5><p>​将字典变成标准的字符串 Content-Type: application&#x2F;json</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="comment"># 创建 app 应用实例</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    user = &#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: <span class="string">&quot;fafafa&quot;</span>,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>: <span class="string">&quot;123456&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> jsonify(user)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure><h4 id="request-实例方法"><a href="#request-实例方法" class="headerlink" title="request 实例方法"></a>request 实例方法</h4><h5 id="request-method-请求方式"><a href="#request-method-请求方式" class="headerlink" title="request.method  - 请求方式"></a>request.method  - 请求方式</h5><h5 id="request-args-请求url-中的请求参数"><a href="#request-args-请求url-中的请求参数" class="headerlink" title="request.args  - 请求url 中的请求参数"></a>request.args  - 请求url 中的请求参数</h5><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?name=&#x27;123&#x27;&amp;id=&#x27;123&#x27; </span><br><span class="line">request.args.get() 获取参数</span><br><span class="line">request.args.todict()  将获取数据转化为字典</span><br></pre></td></tr></table></figure><h5 id="request-from-FromData-数据-post请求提交"><a href="#request-from-FromData-数据-post请求提交" class="headerlink" title="request.from  - FromData 数据  post请求提交"></a>request.from  - FromData 数据  post请求提交</h5><h5 id="request-json-请求头中带有-Content-Type-application-json"><a href="#request-json-请求头中带有-Content-Type-application-json" class="headerlink" title="request.json  - 请求头中带有 Content-Type:application&#x2F;json"></a>request.json  - 请求头中带有 Content-Type:application&#x2F;json</h5><h5 id="request-data-请求头中不带有-From-或-FromData-会保存请求体中的原始信息"><a href="#request-data-请求头中不带有-From-或-FromData-会保存请求体中的原始信息" class="headerlink" title="request.data  - 请求头中不带有 From 或 FromData 会保存请求体中的原始信息"></a>request.data  - 请求头中不带有 From 或 FromData 会保存请求体中的原始信息</h5><h5 id="request-url-请求路径"><a href="#request-url-请求路径" class="headerlink" title="request.url  - 请求路径"></a>request.url  - 请求路径</h5><h5 id="request-path-请求方式"><a href="#request-path-请求方式" class="headerlink" title="request.path  - 请求方式"></a>request.path  - 请求方式</h5><h5 id="request-host-请求-IP"><a href="#request-host-请求-IP" class="headerlink" title="request.host  - 请求 IP"></a>request.host  - 请求 IP</h5><h5 id="request-host-url-请求协议"><a href="#request-host-url-请求协议" class="headerlink" title="request.host_url  - 请求协议"></a>request.host_url  - 请求协议</h5><h5 id="request-files-请求携带的文件信息"><a href="#request-files-请求携带的文件信息" class="headerlink" title="request.files - 请求携带的文件信息"></a>request.files - 请求携带的文件信息</h5><p>​</p><h4 id="HTTP方法-请求允许，获取请求参数"><a href="#HTTP方法-请求允许，获取请求参数" class="headerlink" title="HTTP方法 - 请求允许，获取请求参数"></a>HTTP方法 - 请求允许，获取请求参数</h4><table><thead><tr><th>编号</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>GET</td><td>将数据以未加密的形式发送到服务器，这最常用的方法。</td></tr><tr><td>2</td><td>HEAD</td><td>与GET相同，但没有响应主体</td></tr><tr><td>3</td><td>POST</td><td>用于将HTML表单数据发送到服务器。通过POST方法接收的数据不会被服务器缓存。</td></tr><tr><td>4</td><td>PUT</td><td>用上传的内容替换目标资源的所有当前表示。</td></tr><tr><td>5</td><td>DELETE</td><td>删除由URL给出的所有目标资源的所有表示</td></tr></tbody></table><p>默认情况下，Flask路由响应GET请求。 但是，可以通过为route()装饰器提供方法参数来更改此首选项。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, redirect, url_for</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/success/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">success</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;welcome %s&#x27;</span> % name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用method参数，允许POST、GET、PUT、DELETE请求</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;PUT&#x27;</span>, <span class="string">&#x27;DELETE&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="comment"># 通过 request.form.get(&#x27;name&#x27;) 获取post请求表单中的name字段</span></span><br><span class="line">        user = request.form.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;success&#x27;</span>, name=user))</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="comment"># 通过 request.args.get(&#x27;name&#x27;) 获取get请求url中的name字段</span></span><br><span class="line">        user = request.args.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;success&#x27;</span>, name=user))</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;PUT&#x27;</span>:</span><br><span class="line">        <span class="comment"># 通过 request.get_json() 获取put请求中的json数据</span></span><br><span class="line">        data = request.get_json()</span><br><span class="line">        user = data.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;success&#x27;</span>, name=user))</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;DELETE&#x27;</span>:</span><br><span class="line">        <span class="comment"># 通过 request.form.get(&#x27;name&#x27;) 获取delete请求表单中的name字段</span></span><br><span class="line">        user = request.form.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;success&#x27;</span>, name=user))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h4 id="Flask-模板"><a href="#Flask-模板" class="headerlink" title="Flask 模板"></a>Flask 模板</h4><h5 id="返回html模板"><a href="#返回html模板" class="headerlink" title="返回html模板"></a>返回html模板</h5><p>​Flask可以以HTML形式返回绑定到某个URL的函数的输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&lt;h1&gt;Hello World&lt;/h1&gt;&quot;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><img src="/2023/12/21/Flask%E6%A1%86%E6%9E%B6/helloword.png" alt="image-20240710231046160"></p><h5 id="使用-render-template-返回一个html文件"><a href="#使用-render-template-返回一个html文件" class="headerlink" title="使用 render_template() 返回一个html文件"></a>使用 render_template() 返回一个html文件</h5><p>​从Python代码生成HTML内容非常麻烦，尤其是在需要放置可变数据和Python语言元素(如条件或循环)时。经常需要转义HTML代码。</p><p>​Flask使用jinga2模板引擎，可以利用Jinja2模板引擎技术，而不需要从函数返回硬编码HTML。</p><p>​可以通过render_template()函数渲染HTML文件。</p><p>​Flask将尝试在该脚本所在的同一文件夹中查找templates文件夹中的HTML文件，其中可以动态插入变量数据。 Web模板系统由模板引擎，某种数据源和模板处理器组成。</p><p>!!! 需要创建一个 templates 文件夹；templates 文件夹为根目录相对于render_template()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello/&lt;user&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_name</span>(<span class="params">user</span>):</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;hello.html&#x27;</span>, name = user)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>Flask HTTP请求方法处理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Web模板包含用于变量和表达式(这些情况下为Python表达式)的HTML语法散布占位符，这些变量和表达式在模板呈现时被替换为值。 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;&#123; name &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="Jinja2模板引擎语法"><a href="#Jinja2模板引擎语法" class="headerlink" title="Jinja2模板引擎语法"></a>Jinja2模板引擎语法</h5><p>​Jinja2模板引擎使用以下分隔符来从HTML转义。</p><ul><li><code>&#123;% ... %&#125;</code> 用于多行语句</li><li><code>&#123;&#123; ... &#125;&#125;</code> 用于将表达式打印输出到模板</li><li>&#96;&#96; 用于未包含在模板输出中的注释</li><li><code>#... ##</code> 用于单行语句</li></ul><p>在html模板中使用语法</p><ul><li>if… else…endif</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello/&lt;int:score&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_name</span>(<span class="params">score</span>):</span><br><span class="line">    <span class="comment"># 将score 参数 命名marks参数 传递给hello.html</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;hello.html&#x27;</span>, marks = score)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ./templates/hello.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Flask模板示例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        &#123;% if marks&gt;50 %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span> 通过考试！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>未通过考试！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>for循环</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/result&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">result</span>():</span><br><span class="line">    <span class="built_in">dict</span> = &#123;<span class="string">&#x27;phy&#x27;</span>:<span class="number">59</span>,<span class="string">&#x27;che&#x27;</span>:<span class="number">60</span>,<span class="string">&#x27;maths&#x27;</span>:<span class="number">90</span>&#125;</span><br><span class="line">    <span class="comment"># 将dict 参数 命名result参数 传递给result.html</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;result.html&#x27;</span>, result = <span class="built_in">dict</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ./templates/result.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Flask模板示例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span> = <span class="string">1</span>&gt;</span></span><br><span class="line">            &#123;% for key, value in result.items() %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span> &#123;&#123; key &#125;&#125; <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span> &#123;&#123; value &#125;&#125; <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h4><p>​Web应用程序通常需要一个静态文件，例如支持显示网页的JavaScript文件或CSS文件。它将在应用程序的&#x2F;static上提供</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ./templates/index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入 ./static/hello.js --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span> = <span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename = &#x27;hello.js&#x27;) &#125;&#125;&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;button&quot;</span> <span class="attr">onclick</span> = <span class="string">&quot;sayHello()&quot;</span> <span class="attr">value</span> = <span class="string">&quot;Say Hello&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./static/hello.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="请求对象"><a href="#请求对象" class="headerlink" title="请求对象"></a>请求对象</h4><p>当处理请求时，可以使用 Flask 的 request 对象来访问客户端发送的数据。以下是对 request 对象中常用属性的详细说明，并说明如何设置和获取这些属性以及需要注意的事项：</p><ol><li><code>form</code> 属性:<ul><li>设置：在处理包含表单数据的 POST 请求时，可以通过 HTML 表单提交数据来设置此属性。</li><li>获取：使用 <code>request.form[&#39;key&#39;]</code> 来获取特定表单字段的值。</li><li>注意事项：确保在访问 form 属性之前检查请求方法是否为 POST，以免意外访问到无效数据。</li></ul></li><li><code>args</code> 属性:<ul><li>设置：直接在 URL 中添加查询参数来设置此属性。</li><li>获取：使用 <code>request.args.get(&#39;key&#39;)</code> 来获取特定查询参数的值。</li><li>注意事项：要小心处理从 URL 中获取的用户输入数据，以防止恶意输入或不安全字符。</li></ul></li><li><code>cookies</code> 属性:<ul><li>设置：通过响应对象中设置 Set-Cookie 头部信息来设置此属性。</li><li>获取：使用 <code>request.cookies.get(&#39;key&#39;)</code> 来获取特定 Cookie 的值。</li><li>注意事项: 要谨慎处理敏感信息，并考虑安全性和隐私问题。</li></ul></li><li><code>file</code> 属性:  - 设置: 在 HTML 表单中添加文件上传控件，并将文件上传到服务器时，会自动填充该字段  - 获取: 使用 request.files[‘file_key’] 来访问上传文件对象  - 注意事项: 需要确保对于接收和存储上传文件做好必要的安全验证和限制</li><li><code>method</code> 属性：   - 获取当前请求方法（GET、POST等），   - 不需要手动设置此属性</li></ol><p>以上就是对 Flask 请求对象中常用属性及其操作方式、注意事项进行了详细介绍。在实际编码过程中，请根据具体场景谨慎操作并遵循最佳实践以确保代码安全可靠。</p><h4 id="表单处理"><a href="#表单处理" class="headerlink" title="表单处理"></a>表单处理</h4><p>​通过post方法提交from表单数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">student</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;student.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/result&#x27;</span>,methods = [<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">result</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        _result = request.form</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&quot;result.html&quot;</span>,result = _result)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        _result = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&quot;result.html&quot;</span>, result=_result)</span><br><span class="line">    <span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">        app.run(debug = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 表格提交 ./template/index.html  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Flask示例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span> = <span class="string">&quot;http://localhost:5000/result&quot;</span> <span class="attr">method</span> = <span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;Name&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>物理分数: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;Physics&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>化学分数: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;Chemistry&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>数学分数: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> =<span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;Mathematics&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;submit&quot;</span> <span class="attr">value</span> = <span class="string">&quot;提交&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 提交表格后的信息展示 ./template/result.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>Flask示例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        &#123;% if marks==None %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span> 还没有提交数据<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span> 请<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://localhost:5000/&quot;</span>&gt;</span>填写数据<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span> = <span class="string">1</span>&gt;</span></span><br><span class="line">          &#123;% for key, value in result.items() %&#125;</span><br><span class="line">             <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span> &#123;&#123; key &#125;&#125; <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span> &#123;&#123; value &#125;&#125; <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">          &#123;% endfor %&#125;</span><br><span class="line">       <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​!!! 通过上述表单处理方式有个问题就是提交后的数据没办法保留；可以通过cookie或者session的方式保存信息或者当前会话；</p><h4 id="Cookie-处理"><a href="#Cookie-处理" class="headerlink" title="Cookie 处理"></a>Cookie 处理</h4><p>​Cookie以文本文件的形式存储在客户端计算机上。 其目的是记住和跟踪与客户使用有关的数据，以获得更好的访问体验和网站统计。</p><p>​Request对象包含一个cookie的属性。 它是所有cookie变量及其对应值的字典对象，客户端已发送。 除此之外，cookie还会存储其到期时间，路径和站点的域名。</p><p>​在Flask中，cookies设置在响应对象上。 使用make_response()函数从视图函数的返回值中获取响应对象。 之后，使用响应对象的set_cookie()函数来存储cookie。</p><p>​重读cookie很容易。 可以使用request.cookies属性的get()方法来读取cookie。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, make_response</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 &#x27;/&#x27; 获取表格成绩填写</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">student</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># post 方法用来提交表格</span></span><br><span class="line"><span class="comment"># get 方法用来展示提交后的表格信息</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/result&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">result</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        _result = <span class="built_in">dict</span>(request.form)  <span class="comment"># 将 ImmutableMultiDict 转换为字典，避免后面读取cookie数据失败</span></span><br><span class="line">        resp = make_response(render_template(<span class="string">&quot;result.html&quot;</span>, result=_result))</span><br><span class="line">        <span class="comment"># 添加cookie信息, 和cookie过期时间单位ms</span></span><br><span class="line">        resp.set_cookie(<span class="string">&#x27;result&#x27;</span>, <span class="built_in">str</span>(_result),  max_age=<span class="number">3600</span>) <span class="comment"># 有效期1小时</span></span><br><span class="line">        <span class="keyword">return</span> resp</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        _result = request.cookies.get(<span class="string">&#x27;result&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> _result:</span><br><span class="line">            _result = <span class="built_in">eval</span>(_result)  <span class="comment"># 将字符串转换回字典</span></span><br><span class="line">            <span class="built_in">print</span>(_result)</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&quot;result.html&quot;</span>, result=_result)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&quot;result.html&quot;</span>, result=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 表格提交 ./template/index.html  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Flask示例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span> = <span class="string">&quot;http://localhost:5000/result&quot;</span> <span class="attr">method</span> = <span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;Name&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>物理分数: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;Physics&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>化学分数: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;Chemistry&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>数学分数: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> =<span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;Mathematics&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;submit&quot;</span> <span class="attr">value</span> = <span class="string">&quot;提交&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 提交表格后的信息展示 ./template/result.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>Flask示例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        &#123;% if marks==None %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span> 还没有提交数据<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span> 请<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://localhost:5000/&quot;</span>&gt;</span>填写数据<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span> = <span class="string">1</span>&gt;</span></span><br><span class="line">          &#123;% for key, value in result.items() %&#125;</span><br><span class="line">             <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span> &#123;&#123; key &#125;&#125; <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span> &#123;&#123; value &#125;&#125; <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">          &#123;% endfor %&#125;</span><br><span class="line">       <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用set_cookie 将存储在cookie的信息一同发给用户，记录在浏览器端 ( 避免敏感信息)</p><p><img src="/2023/12/21/Flask%E6%A1%86%E6%9E%B6/cookie1.png" alt="image-20240711013344347"></p><p>后续在请求中就会在请求中带上这上Cookie</p><p><img src="/2023/12/21/Flask%E6%A1%86%E6%9E%B6/cookie2.png" alt="image-20240711013843475"></p><p>当设置过期时间时，会将有效时间保存在浏览器端；cookie 的过期时间是由客户端（浏览器）管理的，当客户端发送包含过期 cookie 的请求时，服务器会像处理未过期的 cookie 一样处理它</p><p><img src="/2023/12/21/Flask%E6%A1%86%E6%9E%B6/cookie3.png" alt="image-20240711014403422"></p><h4 id="Session-处理"><a href="#Session-处理" class="headerlink" title="Session 处理"></a>Session 处理</h4><p>​Flask 可以通过 app.secret_key 给当前 app server 添加session会话id，用来保存当前会话的信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, session</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># 添加session会话的id</span></span><br><span class="line">app.secret_key = <span class="string">&#x27;123123&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 &#x27;/&#x27; 获取表格成绩填写</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">student</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># post 方法用来提交表格</span></span><br><span class="line"><span class="comment"># get 方法用来展示提交后的表格信息</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/result&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">result</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        _result_len = <span class="built_in">len</span>(session[<span class="string">&#x27;result&#x27;</span>])</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        _result_len = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">            _result = request.form</span><br><span class="line">            <span class="comment"># 当提交表单是会向session设置&#x27;result&#x27;字段，同时向浏览器</span></span><br><span class="line">            session[<span class="string">&#x27;result&#x27;</span>] = _result</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&quot;result.html&quot;</span>, result=session[<span class="string">&#x27;result&#x27;</span>])</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;GET&#x27;</span> <span class="keyword">and</span> _result_len &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&quot;result.html&quot;</span>, result=session[<span class="string">&#x27;result&#x27;</span>])</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;GET&#x27;</span> <span class="keyword">and</span> _result_len == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&quot;result.html&quot;</span>, result=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 表格提交 ./template/index.html  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Flask示例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span> = <span class="string">&quot;http://localhost:5000/result&quot;</span> <span class="attr">method</span> = <span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;Name&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>物理分数: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;Physics&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>化学分数: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;Chemistry&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>数学分数: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> =<span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;Mathematics&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;submit&quot;</span> <span class="attr">value</span> = <span class="string">&quot;提交&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 提交表格后的信息展示 ./template/result.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>Flask示例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        &#123;% if marks==None %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span> 还没有提交数据<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span> 请<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://localhost:5000/&quot;</span>&gt;</span>填写数据<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span> = <span class="string">1</span>&gt;</span></span><br><span class="line">          &#123;% for key, value in result.items() %&#125;</span><br><span class="line">             <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span> &#123;&#123; key &#125;&#125; <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span> &#123;&#123; value &#125;&#125; <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">          &#123;% endfor %&#125;</span><br><span class="line">       <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当提交表单是会向session设置’result’字段，同时向浏览器Cookie中记录当前session</p><p><img src="/2023/12/21/Flask%E6%A1%86%E6%9E%B6/session1.png" alt="image-20240711012049022"></p><p>后续在请求中就会在请求头中带上这个Set-Cookie</p><p><img src="/2023/12/21/Flask%E6%A1%86%E6%9E%B6/session2.png" alt="image-20240711012113348"></p><ul><li><p>添加会话变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;admin&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>删除会话变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.pop(<span class="string">&#x27;username&#x27;</span>, <span class="literal">None</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="Token-处理"><a href="#Token-处理" class="headerlink" title="Token 处理"></a>Token 处理</h4><p>pass</p><h4 id="消息闪现-对话框或消息框"><a href="#消息闪现-对话框或消息框" class="headerlink" title="消息闪现 - 对话框或消息框  &gt;&gt;&gt;"></a>消息闪现 - 对话框或消息框  &gt;&gt;&gt;</h4><p>​一个基于GUI好的应用程序需要向用户提供交互的反馈信息。 例如，桌面应用程序使用对话框或消息框，JavaScript使用alert()函数用于类似的目的; </p><p>​Flask框架的闪现系统使得可以在一个视图中创建一个消息并将其呈现在名为next的视图函数中。</p><ul><li><p>flash()</p><p>Flask模块包含flash()方法。 它将消息传递给下一个请求，该请求通常是一个模板。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flash(message, category)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">message - 参数是要刷新的实际消息。</span></span><br><span class="line"><span class="string">category - 参数是可选的。 它可以是’错误’，’信息’或’警告’。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>get_flashed_messages()</p><p>要从会话中删除消息，模板调用get_flashed_messages()函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">get_flashed_messages(with_categories, category_filter)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">两个参数都是可选的</span></span><br><span class="line"><span class="string">第一个参数是元组</span></span><br><span class="line"><span class="string">第二个参数对于仅显示特定消息有用。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><p>​Flask中处理文件上传非常简单。 它需要一个enctype属性设置为’multipart&#x2F;form-data’的HTML表单，将该文提交到指定URL。 URL处理程序从request.files[]对象中提取文件并将其保存到所需的位置。</p><p>​每个上传的文件首先保存在服务器上的临时位置，然后再保存到最终位置。 目标文件的名称可以是硬编码的，也可以从request.files [file]对象的filename属性中获取。 但是，建议使用secure_filename()函数获取它的安全版本。</p><p>​Flask对象的配置设置中定义默认上传文件夹的路径和上传文件的最大大小。</p><table><thead><tr><th>变量</th><th>说明</th></tr></thead><tbody><tr><td>app.config[‘UPLOAD_FOLDER’]</td><td>定义上传文件夹的路径</td></tr><tr><td>app.config[‘MAX_CONTENT_PATH’]</td><td>指定要上传的文件的最大大小 - 以字节为单位</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request</span><br><span class="line"><span class="keyword">from</span> werkzeug <span class="keyword">import</span> secure_filename</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        f = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">        <span class="built_in">print</span>(request.files)</span><br><span class="line">        保存文件</span><br><span class="line">        f.save(secure_filename(f.filename))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;file uploaded successfully&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;upload.html&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">app.run(debug = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h4 id="SQLite"><a href="#SQLite" class="headerlink" title="SQLite"></a>SQLite</h4><p>​其特点为：</p><ul><li>零配置，无需安装和管理配置；</li><li>储存在单一磁盘文件中的一个完整的数据库；</li><li>数据库文件可以在不同字节顺序的机器间自由的共享；</li><li>足够小, 大致13万行C代码, 4.43M，支持数据库大小可至2TB；</li><li>数据库操作快；</li><li>不需要任何外部的依赖。</li></ul><table><thead><tr><th>存储类</th><th>描述</th></tr></thead><tbody><tr><td>NULL</td><td>值是一个 NULL 值。</td></tr><tr><td>INTEGER</td><td>值是一个带符号的整数，根据值的大小存储在 1、2、3、4、6 或 8 字节中。</td></tr><tr><td>REAL</td><td>值是一个浮点值，存储为 8 字节的 IEEE 浮点数字。</td></tr><tr><td>TEXT</td><td>值是一个文本字符串，使用数据库编码（UTF-8、UTF-16BE 或 UTF-16LE）存储。</td></tr><tr><td>BLOB</td><td>值是一个 blob 数据，完全根据它的输入存储</td></tr></tbody></table><ul><li><p>创建一个SQLite数据库<br>创建一个SQLite数据库 <em>‘database.db’</em>并在其中创建一个student表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="comment"># 创建连接SQLite数据库 *‘database.db’*</span></span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;database.db&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Opened database successfully&quot;</span>);</span><br><span class="line"><span class="comment"># 创建一个student表，并输入字段与字段类型 name TEXT, addr TEXT, city TEXT, pin TEXT</span></span><br><span class="line">conn.execute(<span class="string">&#x27;CREATE TABLE students (name TEXT, addr TEXT, city TEXT, pin TEXT)&#x27;</span>) <span class="comment">#执行单条sql语句</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Table created successfully&quot;</span>);</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure></li><li><p>案例 - 通过html向flask后端服务存储SQlite 学生数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request</span><br><span class="line"><span class="keyword">from</span> werkzeug <span class="keyword">import</span> secure_filename</span><br><span class="line"><span class="comment"># 创建实例</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问主页面返回index.html</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">new_student</span>():</span><br><span class="line">     <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问 &#x27;/create&#x27; 渲染添加学生信息模板</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/create&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_student</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;addStudent.html&#x27;</span>)  <span class="comment">#渲染addStudent.html模板</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加到数据库中</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/addStudent&#x27;</span>, methods = [<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_student</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">#获取请求中的数据</span></span><br><span class="line">        nm = request.form[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">        addr = request.form[<span class="string">&#x27;address&#x27;</span>]</span><br><span class="line">        city = request.form[<span class="string">&#x27;city&#x27;</span>]</span><br><span class="line">        pin = request.form[<span class="string">&#x27;postcode&#x27;</span>]</span><br><span class="line">        <span class="keyword">with</span> sqlite3.connect(<span class="string">&quot;database.db&quot;</span>) <span class="keyword">as</span> con:  <span class="comment">#建立与database.db数据库的连接</span></span><br><span class="line">           cur = con.cursor()    <span class="comment">#获取游标</span></span><br><span class="line">           cur.execute(<span class="string">&quot;INSERT INTO students (name,addr,city,pin) VALUES (?,?,?,?)&quot;</span>,(nm,addr,city,pin) )     <span class="comment">#添加数据，执行单条的sql语句</span></span><br><span class="line">           con.commit()     <span class="comment">#提交事务</span></span><br><span class="line">           msg = <span class="string">&quot;数据添加成功&quot;</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        con.rollback()    <span class="comment">#撤消当前事务中所做的所有更改</span></span><br><span class="line">        msg = <span class="string">&quot;操作失败&quot;</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&quot;result.html&quot;</span>,msg = msg)  <span class="comment">#渲染result.html模板并传递msg值</span></span><br><span class="line">        con.close()     <span class="comment">#关闭数据库连接</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># 查询数据库数据</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/showData&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_student</span>():</span><br><span class="line">    con = sqlite3.connect(<span class="string">&quot;database.db&quot;</span>)  <span class="comment">#建立数据库连接</span></span><br><span class="line">    con.row_factory = sqlite3.Row      <span class="comment">#设置row_factory,对查询到的数据，通过字段名获取列数据</span></span><br><span class="line">    cur = con.cursor()        <span class="comment">#获取游标</span></span><br><span class="line">    cur.execute(<span class="string">&quot;select * from students&quot;</span>)   <span class="comment">#执行sql语句选择数据表</span></span><br><span class="line">    rows = cur.fetchall()      <span class="comment">#获取多条记录数据  </span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;studentList.html&quot;</span>,rows = rows)  <span class="comment">#渲染show.html模板并传递rows值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">app.run(debug = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>学生系统<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;/create&#x27;</span>&gt;</span>添加学生信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span> | <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;/studentList&#x27;</span>&gt;</span>学生信息列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- addStudent.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 向add_student函数传递from表单数据 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span> = <span class="string">&quot;&#123;&#123; url_for(&#x27;add_student&#x27;) &#125;&#125;&quot;</span> <span class="attr">method</span> = <span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>地址<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>城市<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>邮编<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;postcode&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- studentList.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>Flask示例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;<span class="attribute">background-color</span>: <span class="number">#ffffcc</span>;&#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;<span class="attribute">width</span>: <span class="number">500px</span>; <span class="attribute">margin</span>: <span class="number">0</span> auto;<span class="attribute">text-align</span>: center;&#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">table</span> &#123;<span class="attribute">margin</span>: <span class="number">0</span> auto;&#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">td</span> &#123;<span class="attribute">border</span>:<span class="number">1px</span> solid black;&#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>改名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>地址<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>城市<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>编码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">         &#123;% for row in rows %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;row[&quot;name&quot;]&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;row[&quot;addr&quot;]&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;row[&quot;city&quot;]&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;row[&#x27;pin&#x27;]&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">         &#123;% endfor %&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&quot;/&quot;</span>&gt;</span>返回主页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="扩展-Flask-SQLAlchemy"><a href="#扩展-Flask-SQLAlchemy" class="headerlink" title="扩展 - Flask-SQLAlchemy"></a>扩展 - Flask-SQLAlchemy</h4><h5 id="ORM-对象关系映射"><a href="#ORM-对象关系映射" class="headerlink" title="ORM(对象关系映射)"></a><strong>ORM(对象关系映射)</strong></h5><p>​RDBMS服务器中的数据以表格形式存储。 对象关系映射是一种将对象参数映射到底层RDBMS表结构的技术。 ORM API提供了执行CRUD操作的方法，而无需编写原始SQL语句。</p><ul><li><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-sqlalchemy</span><br><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure></li><li><p>从该模块导入SQLAlchemy类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br></pre></td></tr></table></figure></li><li><p>创建一个Flask应用程序对象并为要使用的数据库设置URI。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;DATABASE_URL&#x27;</span>] = <span class="string">&#x27;mysql://root:root@127.0.0.1/blog&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>然后用应用程序对象作为参数创建一个SQLAlchemy类的对象。 该对象包含ORM操作的辅助函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">students</span>(db.Model):</span><br><span class="line">    <span class="comment"># 定义这个类使用的数据库</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(<span class="string">&#x27;student_id&#x27;</span>, db.Integer, primary_key = <span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 定义字段</span></span><br><span class="line">    name = db.Column(db.String(<span class="number">100</span>))</span><br><span class="line">    city = db.Column(db.String(<span class="number">50</span>)) </span><br><span class="line">    addr = db.Column(db.String(<span class="number">200</span>))</span><br><span class="line">    pin = db.Column(db.String(<span class="number">10</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 初始化实例赋值</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, city, addr,pin</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.city = city</span><br><span class="line">        self.addr = addr</span><br><span class="line">        self.pin = pin</span><br></pre></td></tr></table></figure></li><li><p>创建&#x2F;使用URI中提到的数据库，请运行create_all()方法</p><p>创建数据库中所有尚未在数据库中存在的表。这个函数通常在开发过程中使用，特别是当你添加、修改了模型类后需要将这些变化同步到数据库时。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建所有尚未在数据库中存在的表</span></span><br><span class="line">db.create_all()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">请注意，在生产环境中并不推荐使用 create_all() 方法来自动创建表格。相反，建议使用迁移工具来管理和更新数据模型。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>使用SQLAlchemy的Session对象管理ORM对象的所有持久性操作</p><ul><li><p>增 - db.session.add(模型对象) - 将一条记录插入到映射表中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 假设我们有一个名为User的模型</span><br><span class="line">new_user = User(username=&#x27;john_doe&#x27;, email=&#x27;john.doe@example.com&#x27;)</span><br><span class="line">db.session.add(new_user)  # 将新用户对象添加到会话中</span><br><span class="line">db.session.commit()  # 提交更改到数据库</span><br></pre></td></tr></table></figure></li><li><p>删 - db.session.delete(模型对象) - 从表中删除记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 假设我们有一个名为User的模型</span><br><span class="line">user = User.query.get(1)  # 获取ID为1的用户</span><br><span class="line">db.session.delete(user)  # 删除用户记录</span><br><span class="line">db.session.commit()  # 提交更改到数据库</span><br></pre></td></tr></table></figure></li><li><p>查 - model.query.all() - 从表中检索所有记录(对应于SELECT查询)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&#x27;/&#x27;)</span><br><span class="line"> def show_all():</span><br><span class="line">     return render_template(&#x27;show_all.html&#x27;, students = students.query.all() )</span><br></pre></td></tr></table></figure></li><li><p>更改 or 查单个数据 - 可以使用filter属性将筛选器应用于检索到的记录集。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 获取单个数据</span><br><span class="line">Students.query.filter_by(city = &#x27;Haikou&#x27;).all()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 更新数据</span><br><span class="line"># 假设我们有一个名为User的模型，并且存在一个用户名为&#x27;john_doe&#x27;的用户</span><br><span class="line">user = User.query.filter_by(username=&#x27;john_doe&#x27;).first()</span><br><span class="line">if user:</span><br><span class="line">    user.email = &#x27;new_email@example.com&#x27; # 修改email属性值</span><br><span class="line">    db.session.commit() # 提交更改到数据库</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id><a href="#" class="headerlink" title></a></h4><h5 id="驱动包"><a href="#驱动包" class="headerlink" title="驱动包"></a>驱动包</h5><ul><li>MySQL-python:也就是MySQLdb。是对C语言操作 MySQL数据库的一个简单封装。遵循了Python-DB-API v2。但是只支持Python2。</li><li>mysqlclient:是 MySQL-python的另外一个分支。支持Python3并且修复了一些bug。是目前为止执行效率最高的驱动，但是安装的时候容易因为环境问题出错。</li><li>pymysql:纯 Python实现的一个驱动。因为是纯 Python编写的，因此执行效率不如 mysqlclient。也正因为是纯 Python写的，因此可以和 Python代码无缝衔接。</li><li>mysql-connector-python: MySQL官方推出的纯 Python连接MySQL的驱动，执行效率pymysql还慢。</li></ul><h4 id="扩展-Flask-restful"><a href="#扩展-Flask-restful" class="headerlink" title="扩展 - Flask-restful"></a>扩展 - Flask-restful</h4><p>Flask-RESTful 是一个 Flask 扩展，它添加了快速构建 REST APIs 的支持。它当然也是一个能够跟你现有的ORM&#x2F;库协同工作的轻量级的扩展。</p><h5 id="RESTful-风格-设计介绍"><a href="#RESTful-风格-设计介绍" class="headerlink" title="RESTful 风格 设计介绍"></a>RESTful 风格 设计介绍</h5><p><strong>REST 系统的特点:</strong></p><ul><li><strong>客户端-服务器</strong>: 客户端和服务器之间隔离，服务器提供服务，客户端进行消费。</li><li><strong>无状态</strong>: 从客户端到服务器的每个请求都必须包含理解请求所必需的信息。换句话说， 服务器不会存储客户端上一次请求的信息用来给下一次使用。</li><li><strong>可缓存</strong>: 服务器必须明示客户端请求能否缓存。</li><li><strong>分层系统</strong>: 客户端和服务器之间的通信应该以一种标准的方式，就是中间层代替服务器做出响应的时候，客户端不需要做任何变动。</li><li><strong>统一的接口</strong>: 服务器和客户端的通信方法必须是统一的。</li><li><strong>按需编码</strong>: 服务器可以提供可执行代码或脚本，为客户端在它们的环境中执行。这个约束是唯一一个是可选的。</li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HTTP 标准的方法有如下：</span><br><span class="line">==========  =====================  ==================================</span><br><span class="line">HTTP 方法   行为                   示例</span><br><span class="line">==========  =====================  ==================================</span><br><span class="line">GET         获取资源的信息         http://example.com/api/orders</span><br><span class="line">GET         获取某个特定资源的信息 http://example.com/api/orders/123</span><br><span class="line">POST        创建新资源             http://example.com/api/orders</span><br><span class="line">PUT         更新资源               http://example.com/api/orders/123</span><br><span class="line">DELETE      删除资源               http://example.com/api/orders/123</span><br><span class="line">==========  ====================== ==================================</span><br></pre></td></tr></table></figure><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-restful</span><br><span class="line"><span class="comment"># 开发的版本可以从 GitHub 上的页面 下载</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/twilio/flask-restful.git</span><br><span class="line"><span class="built_in">cd</span> flask-restful</span><br><span class="line">python setup.py develop</span><br></pre></td></tr></table></figure><h5 id="创建请求方法"><a href="#创建请求方法" class="headerlink" title="创建请求方法"></a>创建请求方法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask  </span><br><span class="line"><span class="keyword">from</span> flask_restful <span class="keyword">import</span> Api, Resource  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Flask应用  </span></span><br><span class="line">app = Flask(__name__)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建API对象  </span></span><br><span class="line">api = Api(app)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个资源类，用于处理请求  </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloWorld</span>(<span class="title class_ inherited__">Resource</span>):  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):  </span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;hello&#x27;</span>: <span class="string">&#x27;world&#x27;</span>&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 将资源类添加到API，并指定路由  </span></span><br><span class="line">api.add_resource(HelloWorld, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 程序入口：运行Flask应用  </span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    app.run(debug=<span class="literal">True</span>)  </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">测试：</span></span><br><span class="line"><span class="string">$ curl http://localhost:5000</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request  </span><br><span class="line"><span class="keyword">from</span> flask_restful <span class="keyword">import</span> Api, Resource  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Flask应用  </span></span><br><span class="line">app = Flask(__name__)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建API对象  </span></span><br><span class="line">api = Api(app)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># todos字典，用于存储待办事项数据  </span></span><br><span class="line">todos = &#123;<span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;name&#x27;</span>&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个资源类，用于处理对特定待办事项的请求  </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TodoSimple</span>(<span class="title class_ inherited__">Resource</span>):  </span><br><span class="line">    <span class="comment"># 处理GET请求的方法，返回指定todo_id的数据  </span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, todo_id</span>):  </span><br><span class="line">        <span class="keyword">return</span> &#123;todo_id: todos[todo_id]&#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理PUT请求的方法，将提交的数据存入todos字典中，并返回更新后的数据  </span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, todo_id</span>):  </span><br><span class="line">        <span class="comment"># 将提交的数据存入todos字典中  </span></span><br><span class="line">        todos[todo_id] = request.form[<span class="string">&#x27;data&#x27;</span>]  </span><br><span class="line">        <span class="keyword">return</span> &#123;todo_id: todos[todo_id]&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 将TodoSimple资源类与路由绑定，并使用&lt;..&gt;定义URL参数(todo_id)  </span></span><br><span class="line">api.add_resource(TodoSimple, <span class="string">&#x27;/&lt;string:todo_id&gt;&#x27;</span>)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 程序入口：运行Flask应用，启用调试模式  </span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">测试：</span></span><br><span class="line"><span class="string">get请求：</span></span><br><span class="line"><span class="string">$ curl http://localhost:5000/todo1</span></span><br><span class="line"><span class="string">put添加：</span></span><br><span class="line"><span class="string">$ curl http://localhost:5000/todo1 -d &quot;data=Remember the milk&quot; -X PUT</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="设置多个路由端点"><a href="#设置多个路由端点" class="headerlink" title="设置多个路由端点"></a>设置多个路由端点</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_restful <span class="keyword">import</span> Api, Resource</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Flask应用</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建API对象</span></span><br><span class="line">api = Api(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个资源类，用于处理请求</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloWorld1</span>(<span class="title class_ inherited__">Resource</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;hello&#x27;</span>: <span class="string">&#x27;world1&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloWorld2</span>(<span class="title class_ inherited__">Resource</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;hello&#x27;</span>: <span class="string">&#x27;world2&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将资源类添加到API，并指定路由</span></span><br><span class="line">api.add_resource(HelloWorld1, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"><span class="comment"># 设置多个路由端点</span></span><br><span class="line">api.add_resource(HelloWorld2,</span><br><span class="line">                 <span class="string">&#x27;/hello1&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;/hello2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 程序入口：运行Flask应用</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">测试：</span></span><br><span class="line"><span class="string">get请求：</span></span><br><span class="line"><span class="string">$ curl http://localhost:5000</span></span><br><span class="line"><span class="string">$ curl http://localhost:5000/hello1</span></span><br><span class="line"><span class="string">$ curl http://localhost:5000/hello2</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="案例：todoList"><a href="#案例：todoList" class="headerlink" title="案例：todoList"></a>案例：todoList</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_restful <span class="keyword">import</span> reqparse, abort, Api, Resource</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">api = Api(app)</span><br><span class="line">TODOS = &#123;</span><br><span class="line">    <span class="string">&#x27;todo1&#x27;</span>: &#123;<span class="string">&#x27;task&#x27;</span>: <span class="string">&#x27;build an API&#x27;</span>&#125;,</span><br><span class="line">    <span class="string">&#x27;todo2&#x27;</span>: &#123;<span class="string">&#x27;task&#x27;</span>: <span class="string">&#x27;?????&#x27;</span>&#125;,</span><br><span class="line">    <span class="string">&#x27;todo3&#x27;</span>: &#123;<span class="string">&#x27;task&#x27;</span>: <span class="string">&#x27;profit!&#x27;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">abort_if_todo_doesnt_exist</span>(<span class="params">todo_id</span>):</span><br><span class="line">    <span class="keyword">if</span> todo_id <span class="keyword">not</span> <span class="keyword">in</span> TODOS:</span><br><span class="line">        abort(<span class="number">404</span>, message=<span class="string">&quot;Todo &#123;&#125; doesn&#x27;t exist&quot;</span>.<span class="built_in">format</span>(todo_id))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">parser = reqparse.RequestParser()</span><br><span class="line">parser.add_argument(<span class="string">&#x27;task&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Todo</span></span><br><span class="line"><span class="comment">##   显示单个代办事项，并允许删除</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Todo</span>(<span class="title class_ inherited__">Resource</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, todo_id</span>):</span><br><span class="line">        abort_if_todo_doesnt_exist(todo_id)</span><br><span class="line">        <span class="keyword">return</span> TODOS[todo_id]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self, todo_id</span>):</span><br><span class="line">        abort_if_todo_doesnt_exist(todo_id)</span><br><span class="line">        <span class="keyword">del</span> TODOS[todo_id]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>, <span class="number">204</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, todo_id</span>):</span><br><span class="line">        args = parser.parse_args()</span><br><span class="line">        task = &#123;<span class="string">&#x27;task&#x27;</span>: args[<span class="string">&#x27;task&#x27;</span>]&#125;</span><br><span class="line">        TODOS[todo_id] = task</span><br><span class="line">        <span class="keyword">return</span> task, <span class="number">201</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## TodoList</span></span><br><span class="line"><span class="comment">##   显示所有代办列表，并允许post新添加任务</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TodoList</span>(<span class="title class_ inherited__">Resource</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> TODOS</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self</span>):</span><br><span class="line">        args = parser.parse_args()</span><br><span class="line">        todo_id = <span class="built_in">int</span>(<span class="built_in">max</span>(TODOS.keys()).lstrip(<span class="string">&#x27;todo&#x27;</span>)) + <span class="number">1</span></span><br><span class="line">        todo_id = <span class="string">&#x27;todo%i&#x27;</span> % todo_id</span><br><span class="line">        TODOS[todo_id] = &#123;<span class="string">&#x27;task&#x27;</span>: args[<span class="string">&#x27;task&#x27;</span>]&#125;</span><br><span class="line">        <span class="keyword">return</span> TODOS[todo_id], <span class="number">201</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置资源</span></span><br><span class="line">api.add_resource(TodoList, <span class="string">&#x27;/todos&#x27;</span>)</span><br><span class="line">api.add_resource(Todo, <span class="string">&#x27;/todo/&lt;todo_id&gt;&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">测试：</span></span><br><span class="line"><span class="string">获取列表</span></span><br><span class="line"><span class="string">$ curl http://localhost:5000/todos</span></span><br><span class="line"><span class="string">获取单个事务</span></span><br><span class="line"><span class="string">$ curl http://localhost:5000/todo/todo1</span></span><br><span class="line"><span class="string">删除单个事务</span></span><br><span class="line"><span class="string">$ curl http://localhost:5000/todos/todo2 -X DELETE -v</span></span><br><span class="line"><span class="string">新增一个事务</span></span><br><span class="line"><span class="string">$ curl http://localhost:5000/todos -d &quot;task=something new&quot; -X POST -v</span></span><br><span class="line"><span class="string">更新一个事务</span></span><br><span class="line"><span class="string">$ curl http://localhost:5000/todos/todo3 -d &quot;task=something different&quot; -X PUT -v</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="字段类型定义-fields-接口类型推断-marshal-with"><a href="#字段类型定义-fields-接口类型推断-marshal-with" class="headerlink" title="字段类型定义 - fields   &amp;   接口类型推断 - @marshal_with()"></a>字段类型定义 - fields   &amp;   接口类型推断 - @marshal_with()</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基本用法</span></span><br><span class="line"><span class="comment"># 可以定义一个字典或者 fields 的 OrderedDict 类型</span></span><br><span class="line"><span class="keyword">from</span> flask_restful <span class="keyword">import</span> fields, marshal_with  </span><br><span class="line"><span class="comment"># 定义类型</span></span><br><span class="line">user_fields = &#123;  </span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: fields.Integer,  </span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>: fields.String(default=<span class="string">&#x27;fafafa&#x27;</span>),  </span><br><span class="line">    <span class="string">&#x27;email&#x27;</span>: fields.String(attribute=<span class="string">&#x27;email_address&#x27;</span>),  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Flask请求方法中使用marshal_with装饰器时，它会自动将返回值转换为指定字段格式的JSON响应，并忽略任何直接打印或返回的内容。</span></span><br><span class="line"><span class="string">将该get请求数据与user_fields 定义类型进行绑定</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">Resource</span>):</span><br><span class="line"><span class="meta">    @marshal_with(<span class="params">user_fields</span>) </span><span class="comment"># 或者使用marshal进行数据重组</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, user_id</span>):</span><br><span class="line">        <span class="comment"># 获取用户信息</span></span><br><span class="line">        user = &#123;<span class="string">&#x27;id&#x27;</span>: user_id, <span class="string">&#x27;email_address&#x27;</span>: <span class="string">&#x27;example@example.com&#x27;</span>&#125;</span><br><span class="line">        <span class="keyword">return</span> user</span><br><span class="line">    <span class="comment"># &#123;&quot;id&quot;: 1,&quot;username&quot;: &quot;fafafa&quot;,&quot;email&quot;: &quot;example@example.com&quot;&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">String：用于表示字符串类型的字段。</span></span><br><span class="line"><span class="string">Integer：用于表示整数类型的字段。</span></span><br><span class="line"><span class="string">Float：用于表示浮点数类型的字段。</span></span><br><span class="line"><span class="string">Boolean：用于表示布尔值类型的字段。</span></span><br><span class="line"><span class="string">DateTime：用于表示日期和时间类型的字段。</span></span><br><span class="line"><span class="string">Nested：允许你嵌套其他 fields 定义，以便处理复杂结构的数据。例如，你可以在一个对象中嵌套另一个对象或列表等复杂结构数据。</span></span><br><span class="line"><span class="string">List：用于定义列表型数据，可以嵌套其他 fields 定义来处理列表中元素的格式和类型。</span></span><br><span class="line"><span class="string">Raw：直接将原始值返回，不进行格式化处理。通常用在需要自定义处理逻辑时使用。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">每种字段都有一些可选参数来定制响应输出：</span></span><br><span class="line"><span class="string">Attribute: 这个参数用于指定需要序列化对象上相对应的属性名。如果不指定 attribute，则默认使用与字段同名的属性</span></span><br><span class="line"><span class="string">user_fields = &#123;  </span></span><br><span class="line"><span class="string">    &#x27;id&#x27;: fields.Integer(attribute=&#x27;user_id&#x27;),  </span></span><br><span class="line"><span class="string">    &#x27;username&#x27;: fields.String,  </span></span><br><span class="line"><span class="string">&#125;  </span></span><br><span class="line"><span class="string">Default: 当指定属性不存在时返回默认值</span></span><br><span class="line"><span class="string">user_fields = &#123;  </span></span><br><span class="line"><span class="string">    &#x27;id&#x27;: fields.Integer,  </span></span><br><span class="line"><span class="string">    &#x27;username&#x27;: fields.String,  </span></span><br><span class="line"><span class="string">    &#x27;email&#x27;: fields.String(default=&#x27;example@example.com&#x27;),  </span></span><br><span class="line"><span class="string">&#125;  </span></span><br><span class="line"><span class="string">Format: 用于格式化输出结果，在响应中将值转换为特定格式。例如，你可以使用 date_format 来将日期格式化为特定的字符串形式。</span></span><br><span class="line"><span class="string">user_fields = &#123;  </span></span><br><span class="line"><span class="string">    &#x27;birth_date&#x27;: fields.DateTime(dt_format=&#x27;iso8601&#x27;)  </span></span><br><span class="line"><span class="string">&#125;  </span></span><br><span class="line"><span class="string">Required: 设置是否必须包含该属性，默认为 True。当设为 False 时，如果对象上没有该属性，则不会在响应中包含该字段。</span></span><br><span class="line"><span class="string">Nullable：设置是否允许该字段的值为空（None）。默认情况下，所有字段都允许为空</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="自定义字段类型匹配-fields-Raw"><a href="#自定义字段类型匹配-fields-Raw" class="headerlink" title="自定义字段类型匹配 - fields.Raw"></a>自定义字段类型匹配 - fields.Raw</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_restful <span class="keyword">import</span> fields </span><br><span class="line"><span class="comment"># 将类继承fields，新添加自定义匹配字段</span></span><br><span class="line"><span class="comment"># 匹配成功时，将会转换为大写</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UrgentItem</span>(fields.Raw):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">format</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="keyword">return</span> value.upper()</span><br><span class="line"><span class="comment"># 匹配成功时，将会转换为小写</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UnreadItem</span>(fields.Raw):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">format</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="keyword">return</span> value.lower()</span><br><span class="line"></span><br><span class="line">fields = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: fields.String,</span><br><span class="line">    <span class="comment"># 使用自定义匹配</span></span><br><span class="line">    <span class="string">&#x27;priority&#x27;</span>: UrgentItem(attribute=<span class="string">&#x27;flags&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;status&#x27;</span>: UnreadItem(attribute=<span class="string">&#x27;flags&#x27;</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="扁平化处理-结构重组-marshal"><a href="#扁平化处理-结构重组-marshal" class="headerlink" title="扁平化处理 - 结构重组( marshal)"></a>扁平化处理 - 结构重组( marshal)</h5><ul><li>字典字段 - { }</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字典字段</span></span><br><span class="line"><span class="keyword">from</span> flask_restful <span class="keyword">import</span> fields, marshal</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment"># 原字典数据 - 从数据库返回</span></span><br><span class="line">data = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;addr1&#x27;</span>: <span class="string">&#x27;123 fake street&#x27;</span>, <span class="string">&#x27;addr2&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;New York&#x27;</span>, <span class="string">&#x27;state&#x27;</span>: <span class="string">&#x27;NY&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;21&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义结构</span></span><br><span class="line">resource_fields = &#123;<span class="string">&#x27;name&#x27;</span>: fields.String, <span class="string">&#x27;age&#x27;</span>: fields.Integer, <span class="string">&#x27;address&#x27;</span>: &#123;fields.String&#125;&#125;</span><br><span class="line">resource_fields[<span class="string">&#x27;address&#x27;</span>][<span class="string">&#x27;line 1&#x27;</span>] = fields.String(attribute=<span class="string">&#x27;addr1&#x27;</span>)</span><br><span class="line">resource_fields[<span class="string">&#x27;address&#x27;</span>][<span class="string">&#x27;line 2&#x27;</span>] = fields.String(attribute=<span class="string">&#x27;addr2&#x27;</span>)</span><br><span class="line">resource_fields[<span class="string">&#x27;address&#x27;</span>][<span class="string">&#x27;city&#x27;</span>] = fields.String</span><br><span class="line">resource_fields[<span class="string">&#x27;address&#x27;</span>][<span class="string">&#x27;state&#x27;</span>] = fields.String</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据定义结构进行重组，并转成json字符串</span></span><br><span class="line">json.dumps(marshal(data, resource_fields))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;&#123;&quot;name&quot;: &quot;bob&quot;, &quot;age&quot;: &quot;21&quot;, &quot;address&quot;: &#123;&quot;line 1&quot;: &quot;123 fake street&quot;, &quot;line 2&quot;: &quot;&quot;, &quot;state&quot;: &quot;NY&quot;, &quot;city&quot;: &quot;New York&quot;&#125;&#125;&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>列表字段 - [ ]</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表字段</span></span><br><span class="line"><span class="keyword">from</span> flask_restful <span class="keyword">import</span> fields, marshal</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment"># 原数据  </span></span><br><span class="line">data = &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;slide&#x27;</span>, <span class="string">&#x27;pic_image1&#x27;</span>: <span class="string">&#x27;/upload/images/01.png&#x27;</span>, <span class="string">&#x27;pic_image2&#x27;</span>: <span class="string">&#x27;/upload/images/02.png&#x27;</span>, <span class="string">&#x27;pic_image3&#x27;</span>: <span class="string">&#x27;/upload/images/03.png&#x27;</span>&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 将&#x27;pic_images&#x27;字段加入到原数据中  </span></span><br><span class="line">data[<span class="string">&#x27;pic_images&#x27;</span>] = [data[<span class="string">&#x27;pic_image1&#x27;</span>], data[<span class="string">&#x27;pic_image2&#x27;</span>], data[<span class="string">&#x27;piicmage_3&#x27;</span>]]  </span><br><span class="line"><span class="keyword">del</span> data[<span class="string">&#x27;piicmage_1&#x27;</span>]  </span><br><span class="line"><span class="keyword">del</span> data[<span class="string">&#x27;piicmage_2&#x27;</span>]  </span><br><span class="line"><span class="keyword">del</span> data[<span class="string">&#x27;piicmage_3&#x27;</span>]  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义结构  </span></span><br><span class="line">resource_fields = &#123;<span class="string">&#x27;type&#x27;</span>: fields.String, <span class="string">&#x27;images&#x27;</span>: fields.<span class="type">List</span>(fields.String)&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据定义的结构进行重组，并转成json字符串  </span></span><br><span class="line">json_data = json.dumps(marshal(data, resource_fields))  </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;&#123;&quot;type&quot;: &quot;slide&quot;, &quot;pic_images&quot;: [&quot;/upload/images/01.png&quot;, &quot;/upload/images/02.png&quot;, &quot;/upload/images/03.png&quot;]&#125;&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>嵌套类型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_restful <span class="keyword">import</span> fields, marshal</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment"># 里层原数据</span></span><br><span class="line">address1 = &#123;<span class="string">&#x27;addr1&#x27;</span>: <span class="string">&#x27;123 fake street&#x27;</span>, <span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;New York&#x27;</span>, <span class="string">&#x27;state&#x27;</span>: <span class="string">&#x27;NY&#x27;</span>, <span class="string">&#x27;zip&#x27;</span>: <span class="string">&#x27;10468&#x27;</span>&#125;</span><br><span class="line">address2 = &#123;<span class="string">&#x27;addr1&#x27;</span>: <span class="string">&#x27;555 nowhere&#x27;</span>, <span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;New York&#x27;</span>, <span class="string">&#x27;state&#x27;</span>: <span class="string">&#x27;NY&#x27;</span>, <span class="string">&#x27;zip&#x27;</span>: <span class="string">&#x27;10468&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 外层数据</span></span><br><span class="line">data = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;billing_address&#x27;</span>: address1, <span class="string">&#x27;shipping_address&#x27;</span>: address2&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义里层数据结构</span></span><br><span class="line">address_fields = &#123;<span class="string">&#x27;line 1&#x27;</span>: fields.String(attribute=<span class="string">&#x27;addr1&#x27;</span>), <span class="string">&#x27;line 2&#x27;</span>: fields.String(attribute=<span class="string">&#x27;addr2&#x27;</span>),</span><br><span class="line">                  <span class="string">&#x27;city&#x27;</span>: fields.String(attribute=<span class="string">&#x27;city&#x27;</span>), <span class="string">&#x27;state&#x27;</span>: fields.String(attribute=<span class="string">&#x27;state&#x27;</span>),</span><br><span class="line">                  <span class="string">&#x27;zip&#x27;</span>: fields.String(attribute=<span class="string">&#x27;zip&#x27;</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义外层数据结构 Nested-解组</span></span><br><span class="line">resource_fields = &#123;<span class="string">&#x27;name&#x27;</span>: fields.String, <span class="string">&#x27;billing_address&#x27;</span>: fields.Nested(address_fields),</span><br><span class="line">                   <span class="string">&#x27;shipping_address&#x27;</span>: fields.Nested(address_fields)&#125;</span><br><span class="line"></span><br><span class="line">json_data = json.dumps(marshal(data, resource_fields))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;&#123;&quot;billing_address&quot;: &#123;&quot;line 1&quot;: &quot;123 fake street&quot;, &quot;line 2&quot;: null, &quot;state&quot;: &quot;NY&quot;, &quot;zip&quot;: &quot;10468&quot;, &quot;city&quot;: &quot;New York&quot;&#125;, &quot;name&quot;: &quot;bob&quot;, &quot;shipping_address&quot;: &#123;&quot;line 1&quot;: &quot;555 nowhere&quot;, &quot;line 2&quot;: null, &quot;state&quot;: &quot;NY&quot;, &quot;zip&quot;: &quot;10468&quot;, &quot;city&quot;: &quot;New York&quot;&#125;&#125;&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="内容协商"><a href="#内容协商" class="headerlink" title="内容协商"></a>内容协商</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line">api = restful.Api(app)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用@api.representation() 装饰器来协商该接口的返回对象</span></span><br><span class="line"><span class="meta">@api.representation(<span class="params"><span class="string">&#x27;application/json&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">output_json</span>(<span class="params">data, code, headers=<span class="literal">None</span></span>):</span><br><span class="line">    resp = make_response(json.dumps(data), code)</span><br><span class="line">    resp.headers.extend(headers <span class="keyword">or</span> &#123;&#125;)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure><h4 id="扩展-Flask-WTF"><a href="#扩展-Flask-WTF" class="headerlink" title="扩展 - Flask-WTF"></a>扩展 - Flask-WTF</h4><p>​使用Flask-WTF，可以在Python脚本中定义表单域并使用HTML模板来呈现它们。 也可以将验证应用于WTF字段</p><ul><li><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-WTF</span><br></pre></td></tr></table></figure></li><li><p>Form类，该类必须用作用户定义表单的父级，标准表单字段</p><table><thead><tr><th>编号</th><th>标准表单字段</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>TextField</td><td>表示<input type="text"> HTML表单元素</td></tr><tr><td>2</td><td>BooleanField</td><td>表示<input type="checkbox"> HTML表单元素</td></tr><tr><td>3</td><td>DecimalField</td><td>用小数显示数字的文本字段</td></tr><tr><td>4</td><td>IntegerField</td><td>用于显示整数的文本字段</td></tr><tr><td>5</td><td>RadioField</td><td>表示<input type="radio">的HTML表单元素</td></tr><tr><td>6</td><td>SelectField</td><td>表示选择表单元素</td></tr><tr><td>7</td><td>TextAreaField</td><td>表示<testarea> html表单元素</testarea></td></tr><tr><td>8</td><td>PasswordField</td><td>表示<input type="password"> HTML表单元素</td></tr><tr><td>9</td><td>SubmitField</td><td>表示<input type="submit">表单元素</td></tr></tbody></table></li><li><p>案例 - 一个包含文本字段的表单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> Form</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> TextField</span><br><span class="line"><span class="comment"># 除了name字段之外，还会自动创建一个CSRF令牌的隐藏字段。 这是为了防止跨站请求伪造攻击。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ContactForm</span>(<span class="title class_ inherited__">Form</span>):</span><br><span class="line">    name = TextField(<span class="string">&quot;Name Of Student&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="扩展-Flask-Testing"><a href="#扩展-Flask-Testing" class="headerlink" title="扩展 - Flask-Testing"></a>扩展 - Flask-Testing</h4><h4 id="扩展-Flask-PyMongo"><a href="#扩展-Flask-PyMongo" class="headerlink" title="扩展 - Flask-PyMongo"></a>扩展 - Flask-PyMongo</h4><h4 id="扩展-Flask-Mail"><a href="#扩展-Flask-Mail" class="headerlink" title="扩展 - Flask-Mail"></a>扩展 - Flask-Mail</h4><p>​基于Web的应用程序通常需要具有向用户&#x2F;客户端发送邮件的功能。 Flask-Mail扩展</p><ul><li><p>安装扩展</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Flask-Mail</span><br></pre></td></tr></table></figure></li><li><p>配置Flask-Mail</p></li></ul><table><thead><tr><th>编号</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>MAIL_SERVER</td><td>邮件服务器的名称&#x2F;IP地址</td></tr><tr><td>2</td><td>MAIL_PORT</td><td>所用服务器的端口号</td></tr><tr><td>3</td><td>MAIL_USE_TLS</td><td>启用&#x2F;禁用传输安全层加密</td></tr><tr><td>4</td><td>MAIL_USE_SSL</td><td>启用&#x2F;禁用安全套接字层加密</td></tr><tr><td>5</td><td>MAIL_DEBUG</td><td>调试支持，默认是Flask应用程序的调试状态</td></tr><tr><td>6</td><td>MAIL_USERNAME</td><td>发件人的用户名</td></tr><tr><td>7</td><td>MAIL_PASSWORD</td><td>发件人的密码</td></tr><tr><td>8</td><td>MAIL_DEFAULT_SENDER</td><td>设置默认发件人</td></tr><tr><td>9</td><td>MAIL_MAX_EMAILS</td><td>设置要发送的最大邮件</td></tr><tr><td>10</td><td>MAIL_SUPPRESS_SEND</td><td>如果app.testing设置为true，则发送被抑制</td></tr><tr><td>11</td><td>MAIL_ASCII_ATTACHMENTS</td><td>如果设置为true，则将附加的文件名转换为ASCII</td></tr></tbody></table><ul><li><p>flask-mail模块包含以下重要类的定义</p><ul><li><p>Mail类</p><p>它管理电子邮件消息的要求。 类构造函数采用以下形式 </p><table><thead><tr><th>编号</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>send()</td><td>发送Message类对象的内容</td></tr><tr><td>2</td><td>connect()</td><td>与邮件主机打开连接</td></tr><tr><td>3</td><td>send_message()</td><td>发送消息对象</td></tr></tbody></table></li><li><p>Message类</p><p>它封装了一封电子邮件，Message类的构造函数有几个参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flask-mail.Message(subject, recipients, body, html, sender, cc, bcc, </span><br><span class="line">    reply-to, date, charset, extra_headers, mail_options, rcpt_options)</span><br></pre></td></tr></table></figure></li><li><p>Message类方法</p><ul><li>attach() - 向消息添加附件。 该方法采用以下参数<ul><li>filename - 要附加的文件的名称</li><li>content_type - 文件的MIME类型</li><li>data - 原始文件数据</li><li>disposition - 内容处置</li></ul></li><li>add_recipient() - 向消息添加另一个收件人</li></ul></li></ul></li><li><p>代码示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第1步 flask-mail模块导入Mail和Message类</span></span><br><span class="line"><span class="keyword">from</span> flask_mail <span class="keyword">import</span> Mail, Message</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第2步 - 然后根据以下设置配置Flask-Mail。</span></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_SERVER&#x27;</span>]=<span class="string">&#x27;smtp.gmail.com&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_PORT&#x27;</span>] = <span class="number">465</span></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_USERNAME&#x27;</span>] = <span class="string">&#x27;yourId@gmail.com&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_PASSWORD&#x27;</span>] = <span class="string">&#x27;*****&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_USE_TLS&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_USE_SSL&#x27;</span>] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第3步 - 创建一个Mail类的实例</span></span><br><span class="line">mail = Mail(app)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第4步 - 在由URL规则映射的Python函数(‘/‘)中设置Message对象</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    msg = Message(<span class="string">&#x27;Hello&#x27;</span>, sender = <span class="string">&#x27;yourId@gmail.com&#x27;</span>, recipients = [<span class="string">&#x27;id1@gmail.com&#x27;</span>])</span><br><span class="line">    msg.body = <span class="string">&quot;This is the email body&quot;</span></span><br><span class="line">    mail.send(msg)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Sent&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第5步 - 整个代码如下。 在Python Shell中运行以下脚本并访问URL: http://localhost:5000/</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_mail <span class="keyword">import</span> Mail, Message</span><br><span class="line"><span class="comment"># 创建app实例</span></span><br><span class="line">app =Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置mail信息</span></span><br><span class="line">mail=Mail(app)</span><br><span class="line">app.config[<span class="string">&#x27;MAIL_SERVER&#x27;</span>]=<span class="string">&#x27;smtp.gmail.com&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_PORT&#x27;</span>] = <span class="number">465</span></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_USERNAME&#x27;</span>] = <span class="string">&#x27;yourId@gmail.com&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_PASSWORD&#x27;</span>] = <span class="string">&#x27;*****&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_USE_TLS&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_USE_SSL&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">mail = Mail(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    msg = Message(<span class="string">&#x27;Hello&#x27;</span>, sender = <span class="string">&#x27;yourId@gmail.com&#x27;</span>, recipients = [<span class="string">&#x27;id1@gmail.com&#x27;</span>])</span><br><span class="line">    msg.body = <span class="string">&quot;Hello Flask message sent from Flask-Mail&quot;</span></span><br><span class="line">    mail.send(msg)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Sent&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="扩展-Flask-Login"><a href="#扩展-Flask-Login" class="headerlink" title="扩展 - Flask-Login"></a>扩展 - Flask-Login</h4><h4 id="扩展-Flask-Exceptional"><a href="#扩展-Flask-Exceptional" class="headerlink" title="扩展 - Flask-Exceptional"></a>扩展 - Flask-Exceptional</h4><h4 id="扩展-Flask-DebugToolbar"><a href="#扩展-Flask-DebugToolbar" class="headerlink" title="扩展 - Flask-DebugToolbar"></a>扩展 - Flask-DebugToolbar</h4><h4 id="扩展-Flaks-Dashed"><a href="#扩展-Flaks-Dashed" class="headerlink" title="扩展 - Flaks-Dashed"></a>扩展 - Flaks-Dashed</h4><h4 id="扩展-Flask-Celery"><a href="#扩展-Flask-Celery" class="headerlink" title="扩展 - Flask-Celery"></a>扩展 - Flask-Celery</h4><h4 id="扩展-Flask-Celery-1"><a href="#扩展-Flask-Celery-1" class="headerlink" title="扩展 - Flask-Celery"></a>扩展 - Flask-Celery</h4><h4 id="扩展-Flask-Cache"><a href="#扩展-Flask-Cache" class="headerlink" title="扩展 - Flask-Cache"></a>扩展 - Flask-Cache</h4><h4 id="扩展-Flask-Babel"><a href="#扩展-Flask-Babel" class="headerlink" title="扩展 - Flask-Babel"></a>扩展 - Flask-Babel</h4>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片懒加载</title>
      <link href="/2023/11/24/%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
      <url>/2023/11/24/%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h4 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h4><p>​图片懒加载是一种网页优化技术，用于延迟加载页面中的图片，以减少页面加载时间和带宽消耗。在网页中，当用户滚动浏览页面时，只有当图片进入可视窗口时才加载图片，而不是一次性加载所有图片</p><p>​思路：通过JavaScript监听滚动事件，当图片进入可视窗口时再动态加载图片。</p><ul><li>原生js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 获取所有带有.lazy-load类的图片元素</span></span><br><span class="line">  <span class="keyword">let</span> lazyImages = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.lazy-load&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 懒加载函数</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">lazyLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">    lazyImages.<span class="title function_">forEach</span>(<span class="function"><span class="params">img</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 判断图片是否进入可视区域并且有data-src属性</span></span><br><span class="line">      <span class="keyword">if</span> (img.<span class="title function_">getBoundingClientRect</span>().<span class="property">top</span> &lt; <span class="variable language_">window</span>.<span class="property">innerHeight</span> &amp;&amp; img.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-src&#x27;</span>)) &#123;</span><br><span class="line">        <span class="comment">// 将data-src属性的值赋给src属性，实现图片加载</span></span><br><span class="line">        img.<span class="property">src</span> = img.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-src&#x27;</span>);</span><br><span class="line">        <span class="comment">// 加载完成后移除data-src属性，避免重复加载</span></span><br><span class="line">        img.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;data-src&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听滚动事件和窗口大小改变事件，触发懒加载函数</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, lazyLoad);</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, lazyLoad);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 页面加载完成后立即执行一次懒加载函数</span></span><br><span class="line">  <span class="title function_">lazyLoad</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>vue3 setup 组合式api 写法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div ref=&quot;imageRef&quot;&gt;</span><br><span class="line">    &lt;img v-if=&quot;isVisible&quot; :src=&quot;imageSrc&quot; alt=&quot;Lazy Loaded Image&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, onMounted &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const imageSrc = &#x27;image.jpg&#x27;; // 图片的真实URL</span><br><span class="line">    const isVisible = ref(false); // 控制图片是否显示的变量</span><br><span class="line"></span><br><span class="line">    const imageRef = ref(null); // 图片元素的引用</span><br><span class="line"></span><br><span class="line">    // 创建 Intersection Observer 实例</span><br><span class="line">    const intersectionObserver = new IntersectionObserver((entries) =&gt; &#123;</span><br><span class="line">      entries.forEach(entry =&gt; &#123;</span><br><span class="line">        if (entry.isIntersecting) &#123;</span><br><span class="line">          isVisible.value = true; // 图片进入可视区域时显示图片</span><br><span class="line">          intersectionObserver.unobserve(imageRef.value); // 停止观察图片元素</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 在组件挂载后开始观察图片元素</span><br><span class="line">    onMounted(() =&gt; &#123;</span><br><span class="line">      intersectionObserver.observe(imageRef.value);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>下拉刷新，触底加载</title>
      <link href="/2023/10/13/%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%EF%BC%8C%E8%A7%A6%E5%BA%95%E5%8A%A0%E8%BD%BD/"/>
      <url>/2023/10/13/%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%EF%BC%8C%E8%A7%A6%E5%BA%95%E5%8A%A0%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h4 id="上拉刷新，触底加载"><a href="#上拉刷新，触底加载" class="headerlink" title="上拉刷新，触底加载"></a>上拉刷新，触底加载</h4><ul><li>原生js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> content = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;content&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> isLoading = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// 上拉刷新</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handlePullToRefresh</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (content.<span class="property">scrollTop</span> === <span class="number">0</span> &amp;&amp; !isLoading) &#123;</span><br><span class="line">      isLoading = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">// 模拟数据加载</span></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 插入新内容到顶部</span></span><br><span class="line">        <span class="keyword">const</span> newContent = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        newContent.<span class="property">textContent</span> = <span class="string">&#x27;New Content&#x27;</span>;</span><br><span class="line">        content.<span class="title function_">insertBefore</span>(newContent, content.<span class="property">firstChild</span>);</span><br><span class="line">        isLoading = <span class="literal">false</span>;</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 触底加载</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleLoadMore</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (content.<span class="property">scrollHeight</span> - content.<span class="property">scrollTop</span> &lt;= content.<span class="property">clientHeight</span> &amp;&amp; !isLoading) &#123;</span><br><span class="line">      isLoading = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">// 模拟数据加载</span></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 插入新内容到底部</span></span><br><span class="line">        <span class="keyword">const</span> newContent = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        newContent.<span class="property">textContent</span> = <span class="string">&#x27;More Content&#x27;</span>;</span><br><span class="line">        content.<span class="title function_">appendChild</span>(newContent);</span><br><span class="line">        isLoading = <span class="literal">false</span>;</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 监听滚动事件，触发上拉刷新和触底加载</span></span><br><span class="line">  content.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">handlePullToRefresh</span>();</span><br><span class="line">    <span class="title function_">handleLoadMore</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>vue3 setup 组合式api 写法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;content&quot; @scroll=&quot;handleScroll&quot;&gt;</span><br><span class="line">    &lt;div v-for=&quot;item in items&quot; :key=&quot;item&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const items = ref([1, 2, 3, 4, 5]);</span><br><span class="line">    let isLoading = false;</span><br><span class="line"></span><br><span class="line">    // 上拉刷新</span><br><span class="line">    function handlePullToRefresh(e) &#123;</span><br><span class="line">      if (e.target.scrollTop === 0 &amp;&amp; !isLoading) &#123;</span><br><span class="line">        isLoading = true;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">          items.value.unshift(&#x27;New Content&#x27;);</span><br><span class="line">          isLoading = false;</span><br><span class="line">        &#125;, 1000);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 触底加载</span><br><span class="line">    function handleLoadMore(e) &#123;</span><br><span class="line">      if (e.target.scrollHeight - e.target.scrollTop &lt;= e.target.clientHeight &amp;&amp; !isLoading) &#123;</span><br><span class="line">        isLoading = true;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">          items.value.push(&#x27;More Content&#x27;);</span><br><span class="line">          isLoading = false;</span><br><span class="line">        &#125;, 1000);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 处理滚动事件</span><br><span class="line">    function handleScroll(e) &#123;</span><br><span class="line">      handlePullToRefresh(e);</span><br><span class="line">      handleLoadMore(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      items,</span><br><span class="line">      handleScroll</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原生Js实现路由</title>
      <link href="/2023/08/25/%E5%8E%9F%E7%94%9Fjs%E5%AE%9E%E7%8E%B0%E8%B7%AF%E7%94%B1/"/>
      <url>/2023/08/25/%E5%8E%9F%E7%94%9Fjs%E5%AE%9E%E7%8E%B0%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<h4 id="原生js实现路由"><a href="#原生js实现路由" class="headerlink" title="原生js实现路由"></a>原生js实现路由</h4><p>​背景： 再过去，路由切换只出现在后台，前端想要切换到某个页面，就需要向后端请求，随后完成路由切换。但随着spa单页面应用模型的发展，前端路由也逐渐火热，单页面顾名思义就是一个html页面，但当我们点击导航的时候url会改变，网页也会显示不同的内容。简而言之就是js监测url变化，从而改变内容</p><p>​实现思路：实现前端路由是为了在单页面应用中实现页面切换而不刷新整个页面。原生JavaScript可以通过监听URL的变化来实现简单的路由功能</p><p>​步骤：</p><ol><li><strong>使用<code>hash</code>实现路由</strong>：在URL中使用<code>#</code>后面的部分来表示路由路径，当<code>hash</code>发生变化时，可以通过监听<code>hashchange</code>事件来捕获路由变化。</li><li><strong>动态更新页面内容</strong>：根据不同的路由路径，动态更新页面内容，实现页面切换的效果</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自执行函数</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 定义 Router 构造函数</span></span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Router</span> = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">routers</span> = &#123;&#125; <span class="comment">//保存路由</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">curUrl</span> = <span class="string">&#x27;&#x27;</span> <span class="comment">//获取当前的hash</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 给构造函数Router原型添加初始化方法</span></span><br><span class="line">    <span class="title class_">Router</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">init</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;hashchange&#x27;</span>, <span class="variable language_">this</span>.<span class="property">reloadPage</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Router</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">reloadPage</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//获取当前hash值</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">curUrl</span> = location.<span class="property">hash</span>.<span class="title function_">substring</span>(<span class="number">1</span>) || <span class="string">&#x27;/&#x27;</span></span><br><span class="line">        <span class="comment">//运行hash值对应的函数</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">routers</span>[<span class="variable language_">this</span>.<span class="property">curUrl</span>]()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Router</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">map</span> = <span class="keyword">function</span>(<span class="params">key,callback</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">router</span>[key] = callback</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//暴露出去,挂载到oRou</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">oRou</span> = <span class="title class_">Router</span></span><br><span class="line">&#125;)&#123;&#125;</span><br><span class="line"><span class="comment">//实例化</span></span><br><span class="line"><span class="keyword">var</span> oRouter = <span class="keyword">new</span> <span class="title function_">oRou</span>()</span><br><span class="line">oROuter.<span class="title function_">init</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取路由并展示main可视区内容</span></span><br><span class="line">oRouter.<span class="title function_">map</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">var</span> oSidebar = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;sidebar&#x27;</span>)</span><br><span class="line">    oSidebar.<span class="property">innerHTML</span> = <span class="string">&#x27;我是主页&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">oRouter.<span class="title function_">map</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">var</span> oSidebar = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;sidebar&#x27;</span>)</span><br><span class="line">    oSidebar.<span class="property">innerHTML</span> = <span class="string">&#x27;我是html页面&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">oRouter.<span class="title function_">map</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">var</span> oSidebar = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;sidebar&#x27;</span>)</span><br><span class="line">    oSidebar.<span class="property">innerHTML</span> = <span class="string">&#x27;我是css页面&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>其他：</p><ol><li><strong>参数传递</strong>：可以在路由路径中传递参数，通过解析参数来动态展示页面内容。</li><li><strong>路由拦截</strong>：可以在路由处理函数中增加拦截逻辑，实现路由权限控制或其他逻辑。</li><li><strong>路由动画</strong>：可以在页面切换时添加动画效果，提升用户体验</li></ol><ul><li>使用history</li></ul><p>​通过<code>history</code>对象的<code>popstate</code>事件，我们可以在浏览历史记录发生变化时捕获路由的变化</p><p>​我们通过<code>window.addEventListener(&#39;popstate&#39;, function(event) &#123; ... &#125;)</code>来监听<code>popstate</code>事件，当浏览历史记录发生变化时，会触发该事件。在事件处理函数中，我们可以获取当前的URL，从而实现路由变化的监听和处理。</p><p>通过监听<code>history</code>对象的路由变化，我们可以实现更灵活的路由管理，同时可以结合<code>pushState</code>、<code>replaceState</code>等方法来改变路由并触发相应的事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听popstate事件</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;popstate&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理路由变化</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Current URL: &#x27;</span> + <span class="variable language_">document</span>.<span class="property">location</span>.<span class="property">href</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改变路由并触发popstate事件</span></span><br><span class="line">history.<span class="title function_">pushState</span>(&#123;<span class="attr">page</span>: <span class="number">1</span>&#125;, <span class="string">&quot;title 1&quot;</span>, <span class="string">&quot;/page1&quot;</span>);</span><br><span class="line">history.<span class="title function_">pushState</span>(&#123;<span class="attr">page</span>: <span class="number">2</span>&#125;, <span class="string">&quot;title 2&quot;</span>, <span class="string">&quot;/page2&quot;</span>);</span><br><span class="line">history.<span class="title function_">replaceState</span>(&#123;<span class="attr">page</span>: <span class="number">3</span>&#125;, <span class="string">&quot;title 3&quot;</span>, <span class="string">&quot;/page3&quot;</span>);</span><br><span class="line">history.<span class="title function_">back</span>(); <span class="comment">// 模拟后退操作</span></span><br><span class="line">history.<span class="title function_">forward</span>(); <span class="comment">// 模拟前进操作</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础</title>
      <link href="/2023/06/14/python%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/06/14/python%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>​Python是一门动态、解释型、强类型语言</p><ol><li>动态：在运行期间才做数据检查（不用提前声明变量）- 静态语音(C&#x2F;Java)：编译时检查数据类型（编码时需要声明变量类型）</li><li>解释型：在执行程序时，才一条条解释成机器语言给计算机执行（无需编译，速度较慢）- 编译型语言(C&#x2F;Java)：先要将代码编译成二进制可执行文件，再执行</li><li>强类型：类型安全，变量一旦被指定了数据类型，如果不强制转换，那么永远是这种类型（严谨，避免类型错误，速度较慢）- 弱类型（VBScript&#x2F;JavaScript）: 类型在运行期间会转化，如 js中的 1+”2”&#x3D;”12”, 1会由数字转化为string</li></ol><p><img src="/2023/06/14/python%E5%9F%BA%E7%A1%80/python%E8%A7%A3%E6%9E%90%E5%99%A8.png" alt="python解析器"></p><p><strong>优点</strong></p><ol><li>简单易学</li><li>开发效率高</li><li>高级语言</li><li>可移植、可扩展、可嵌入</li><li>庞大的三方库</li></ol><p><strong>缺点</strong></p><ol><li>速度慢</li><li>代码不能加密</li><li>多线程不能充分利用多核cpu(GIL全局解释性锁，同一时刻只能运行一个线程</li></ol><p><strong>应用领域</strong></p><ol><li>自动化测试（UI&#x2F;接口）</li><li>自动化运维</li><li>爬虫</li><li>Web开发（Django&#x2F;Flask&#x2F;..)</li><li>图形GUI开发</li><li>游戏脚本</li><li>金融、量化交易</li><li>数据分析，大数据</li><li>人工智能、机器学习、NLP、计算机视觉</li><li>云计算</li></ol><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>Windows Python3环境搭建</p><ol><li>从<a href="https://www.python.org/getit/">Python官网</a>，下载Python3安装包</li><li>双击安装，第一个节目选中Add Python3.* to PATH，点击Install Now(默认安装pip)，一路下一步</li><li>验证：打开cmd命令行，输入python，应能进入python shell 并显示为Python 3.6.5版本</li></ol><p>Mac OS Python3环境搭建</p><ol><li>安装brew：在终端执行以下命令 <code>ruby -e &quot;$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)&quot;</code></li><li>使用brew安装python3：<code>brew install python3</code></li></ol><p>CentOS Python3环境搭建</p><ol><li><p>安装依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make</span><br><span class="line">yum install libffi-devel -y</span><br></pre></td></tr></table></figure></li><li><p>下载Python3源码安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz</span><br><span class="line">tar -zxvf Python-3.7.0.tgz</span><br><span class="line"><span class="built_in">cd</span> Python-3.7.0</span><br><span class="line">./configure --prefix=/usr/local/python37</span><br><span class="line">make &amp; make install</span><br></pre></td></tr></table></figure></li><li><p>建立软连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /usr/local/python37/bin/python3.7 /usr/bin/python3</span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/python37/bin/pip3 /usr/bin/pip3</span><br></pre></td></tr></table></figure></li><li><p>添加环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/local/python37/bin</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">vim ~/.bashrc, 增加</span><br></pre></td></tr></table></figure></li></ol><h3 id="包管理工具-pip"><a href="#包管理工具-pip" class="headerlink" title="包管理工具-pip"></a>包管理工具-pip</h3><h4 id="在线安装库文件"><a href="#在线安装库文件" class="headerlink" title="在线安装库文件"></a>在线安装库文件</h4><ul><li>在线安装：<code>pip install 包名</code></li><li>从豆瓣源查找安装：<code>pip install 包名 -i https://pypi.doubanio.com/simple/</code></li><li>直接从GitHub安装：<code>git+https://github.com/hanzhichao/logz</code></li><li>一次安装多个：<code>pip install 包1 包2</code></li><li>指定安装版本：<code>pip install 包名==1.5.6</code></li><li>升级到包的最新版本：·pip install 包名 –upgrade·</li><li>卸载包：pip uninstall 包名</li><li>批量安装requiements.txt文件中所有列出的包：<code>pip install -r requiements.txt</code></li><li>查看已安装包的信息：<code>pip show 包名</code></li><li>查看已安装的所有包：<code>pip list</code></li><li>导出当前环境所有安装的包：<code>pip freeze &gt; requirements.txt</code></li></ul><h4 id="修改pip源"><a href="#修改pip源" class="headerlink" title="修改pip源"></a>修改pip源</h4><p>​Linux&#x2F;MacOS下，修改 ~&#x2F;.pip&#x2F;pip.conf (没有就创建一个)，windows下，直接在user目录中创建一个pip目录，如：C:\Users\xx\pip，新建文件pip.ini，内容如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">index-url</span> = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"><span class="comment">#豆瓣：http://pypi.douban.com/simple/</span></span><br><span class="line"><span class="comment">#中科大：https://pypi.mirrors.ustc.edu.cn/simple/</span></span><br><span class="line"><span class="comment">#清华：https://pypi.tuna.tsinghua.edu.cn/simple</span></span><br></pre></td></tr></table></figure><h4 id="pip-离线安装"><a href="#pip-离线安装" class="headerlink" title="pip 离线安装"></a>pip 离线安装</h4><ul><li>离线安装<ol><li>从<a href="https://pypi.org/">Pypi.org</a>网站查找需要的包，下载.whl文件</li><li>使用pip install &lt;下载的whl包&gt;  进行本地whl文件安装</li></ol></li><li>源码安装<ol><li>从<a href="https://pypi.org/">Pypi.org</a>下载源码包，解压，进入解压目录</li><li>打开命令行，执行 <code>python setup.py install</code></li><li>验证：pip list  进行查找</li></ol></li></ul><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h4><p>​python 语法没有 { } 代码块，严格按照缩进进行代码块的规范</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> x &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正数&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> x = <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;0&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;负数&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br></pre></td></tr></table></figure><h4 id="一行多条语句"><a href="#一行多条语句" class="headerlink" title="一行多条语句"></a>一行多条语句</h4><p> 除了可以利用换行进行语句结束划分，也可以使用 ;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">1</span>; y=<span class="number">2</span>; <span class="built_in">print</span>(x+y)</span><br></pre></td></tr></table></figure><h4 id="断行"><a href="#断行" class="headerlink" title="断行"></a>断行</h4><p>当一行语句太长时，会显得累赘；可以使用 ‘\‘ 将两行语句归为一行</p><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单行注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">多行注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">多行注释，也可以代表函数说明</span></span><br><span class="line"><span class="string">使用三个单引号（&#x27;&#x27;&#x27; &#x27;&#x27;&#x27;）或三个双引号（&quot;&quot;&quot;</span> <span class="string">&quot;&quot;&quot;）来创建多行注释</span></span><br><span class="line"><span class="string">用法：三个单引号和三个双引号都可以用来创建多行注释。两者的作用是一样的，都可以用于对代码进行注释和说明。</span></span><br><span class="line"><span class="string">使用双引号时，你不需要转义单引号，而使用单引号时则需要转义双引号。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="类型注释"><a href="#类型注释" class="headerlink" title="类型注释"></a>类型注释</h4><p>在函数中，可以对参数及返回值类型进行注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x: <span class="built_in">int</span>, y: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br></pre></td></tr></table></figure><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><ol><li><p>变量类型（局部变量、全局变量、系统变量）</p></li><li><p>变量赋值</p><ul><li><p>多重赋值<code>x=y=z=1</code></p></li><li><p>多元赋值<code>x,y = y,x</code></p></li></ul></li><li><p>变量自增 <code>x+=1</code>，<code>x-=1</code>(不支持<code>x++</code>, <code>x--</code>)</p></li><li><p>Python 语言本身没有提供内置的常量机制，但是通常使用全大写命名的变量来表示常量，在 Python 3.8 中引入了 <code>typing.Final</code> 来标识一个变量为最终值；Python 中，使用约定而不是强制，不像Java 有明确的常量关键字 <code>final</code> 来定义常量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Final</span><br><span class="line">PI: Final = <span class="number">3.14159</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><ul><li><p>算术运算符：一般用于数字类型的计算</p><ul><li>+：加，如 <code>1+2</code>，结果为3，在字符串中为连接，如<code>&#39;1&#39; + &#39;2&#39;</code>，结果为’12’，不同类型不能直接相加。</li><li><ul><li>：减，如 <code>3-1</code>，结果2</li></ul></li><li><em>：乘，如&#96;2</em>3，结果为6</li><li>&#x2F;：除：如 <code>3/2</code>，结果为1.5</li><li>&#x2F;&#x2F;：地板除（只向下保留整数），如<code>3//2</code>，结果为1，<code>3//-2</code>，结果为-2</li><li>**：乘方，如<code>4**2</code>，结果为16</li><li>%： 取余，如果<code>5%2</code>，结果为1</li></ul></li><li><p>比较运算符：可用于两个相同类型对象的比较</p><ul><li>&#x3D;&#x3D;：相等比较，如<code>1+1==2</code>，结果为True，<code>&#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125; = &#123;&#39;b&#39;: 1 , &#39;a&#39;: 1&#125;</code>，结果为True</li><li>!&#x3D;：比较是否不等，如<code>1+1 != 3</code>，结果为True，<code>[1,2,3] != [2,1,3]</code>，结果为True</li><li>&lt;：比较小于</li><li>&lt;&#x3D;：比较小于等于</li></ul></li><li><p>身份运算符：用于判断是否同一对象</p><ul><li>is：判断是同一对象，’&#x3D;&#x3D;’只判断值是否相等，如<code>True==1</code>，is则判断是否同一对象（使用id()得出的内存地址相同），2&gt;1 is True<code>，结果为True，</code>a&#x3D;None;a is None&#96;，结果为True</li><li>is not：判断非同一对象，如<code>True is not 1</code>结果为True。</li></ul></li><li><p>赋值运算符：用于将值赋给变量</p><ul><li>&#x3D;：赋值，如<code>a = 1</code>，将1赋给变量a，支持多重赋值，如<code>a,b = 1,2</code>或<code>a,b=[1,2]</code>（赋值时序列会自动解包变为1,2两个变量），结果为将1赋给a，将2赋给b</li><li>+&#x3D;：变量自增，如<code>a+=1</code>相当于<code>a=a+1</code></li><li>-&#x3D;: 自减</li><li>*&#x3D;：自乘</li><li>&#x2F;&#x3D;：自除</li><li>&#x2F;&#x2F;&#x3D;：自地板除</li><li>**&#x3D;：自乘方</li><li>%&#x3D;：自取余</li></ul></li><li><p>逻辑运算符：用于多个表达式的逻辑判断，有短路效应</p><ul><li>and：并且，如<code>1&gt;2 and 1&gt;0</code>，都为真时返回最后一个结果的值。当第一个条件为假时不执行后面的判断，直接返回False，如果第一个条件为真时结果为第二个判断的结果（本例实际1&gt;0不会执行）</li><li>or：或，如<code>1&gt;2 or 1&gt;0</code>，返回第一个为真的值或都无假时返回最后一个结果的值。当第一个条件为真是不执行后面的判断，直接返回True，否则返回第二个结果的值（本例1&gt;0会执行）</li><li>not：非，如<code>not 1&gt;2</code>，结果为True</li></ul></li><li><p>成员运算符：用于判断包含，常用判断字符串、列表、元祖、集合、字典中是否包含某元素（某键值）</p><ul><li>in：是否在其中，如<code>a in &#39;abcd&#39;</code>，结果为True，或<code>1 in [1,2,3]</code>，结果为True，或<code>&#39;name&#39; in &#123;&#39;name&#39;: &#39;kevin&#39;, &#39;age&#39;: 12&#125;</code>，结果为True。</li><li>not in：判断不包含，如<code>a not in &#39;bcde&#39;</code>结果为True，从效率上由于not in会对比所有的元素，因此效率比使用in低</li></ul></li><li><p>位运算符：用于二进制或集合运算</p><ul><li>&amp;：按位与</li><li>|：按位或</li><li>~：按位取反</li><li>^：按位异或</li><li>&lt;&lt;：左移</li></ul></li></ul><h4 id="运算符优先级-从高到低"><a href="#运算符优先级-从高到低" class="headerlink" title="运算符优先级 ( 从高到低)"></a>运算符优先级 ( 从高到低)</h4><table><thead><tr><th align="center">运算符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">**</td><td align="center">指数（最高优先级）</td></tr><tr><td align="center">~、+、-</td><td align="center">按位翻转，一元加号和减号（最后两个的方法名为+@和-@）</td></tr><tr><td align="center">*、&#x2F;、%、&#x2F;&#x2F;</td><td align="center">乘、除、取模和取整除</td></tr><tr><td align="center">+、-</td><td align="center">加法、减法</td></tr><tr><td align="center">&gt;&gt;、&lt;&lt;</td><td align="center">右移、左移运算符</td></tr><tr><td align="center">&amp;</td><td align="center">位与</td></tr><tr><td align="center">^、|</td><td align="center">位运算符</td></tr><tr><td align="center">&lt;&#x3D;、&lt;、&gt;、&gt;&#x3D;</td><td align="center">比较运算符</td></tr><tr><td align="center">&lt;&gt; &#x3D;&#x3D; !&#x3D;</td><td align="center">等于运算符</td></tr><tr><td align="center">&#x3D; %&#x3D; &#x2F;&#x3D; &#x2F;&#x2F;&#x3D; -&#x3D; +&#x3D; *&#x3D; **&#x3D;</td><td align="center">赋值运算符</td></tr><tr><td align="center">is  is not</td><td align="center">身份运算符</td></tr><tr><td align="center">in  in not</td><td align="center">成员运算符</td></tr><tr><td align="center">not or and</td><td align="center">逻辑运算符</td></tr></tbody></table><p><code>[&#39;&#39;]</code>，<code>[[],[]]</code>由于不是空列表，在逻辑判断时被认为是True。</p><h4 id="表达式与语句"><a href="#表达式与语句" class="headerlink" title="表达式与语句"></a>表达式与语句</h4><p>​Python代码由表达式和语句组成；表达式(Expression)是运算符(operator)和操作数(operand)所构成的序列,语句是让计算机执行特定操作的指示</p><ul><li><p>表达式</p><p>表达式一般结果为一个Python对象，如<code>1+2</code>, <code>int(&#39;123&#39;)</code>，<code>range(10)</code><br>表达式一般可以包含算数运算符、比较运算符、逻辑运算符、成员运算符、位运算符，但不能包含赋值运算符</p><p>由于表达式计算后返回一个Python对象，因此表达式可以当做待计算的变量一样使用</p></li><li><p>语句</p><p>结果不是对象的代码则成为‘语句’。它们表示的是一个动作而不是生成或者返回一个值。</p><p>常见的Python语句有：</p><ul><li>赋值语句</li><li>调用</li><li>print：打印对象</li><li>if&#x2F;elif&#x2F;else</li><li>for&#x2F;else、while&#x2F;else</li><li>pass</li><li>break、continue</li><li>def</li><li>return、yield</li><li>global</li><li>raise</li><li>import、from … import</li></ul></li></ul><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>Python基本的数据类型包含10种，分别是：</p><ul><li>整数（int）：表示整数值，例如：5、-10、100。</li><li>浮点数（float）：表示带有小数点的数值，例如：3.14、-2.5、1.0。</li><li>布尔类型（bool）：表示真（True）或假（False）的值。</li><li>字符串类型（str）：表示文本数据，使用单引号（’）或双引号（”）括起来，例如：”Hello”、’World’。</li><li>列表类型（list）：表示有序、可变的集合，可以包含不同类型的元素，使用方括号（[]）括起来，例如：[1, 2, ‘three’, True]。</li><li>元组类型（tuple）：表示有序、不可变的集合，可以包含不同类型的元素，使用圆括号（()）括起来，例如：(1, 2, ‘three’, True)。</li><li>集合类型（set）：表示无序、唯一的元素集合，不包含重复的元素，使用大括号（{}）或 set() 函数创建，例如：{1, 2, 3}、set([1, 2, 3])。</li><li>字典类型（dict）：表示键值对的集合，每个键都是唯一的，使用大括号（{}）括起来，键和值之间使用冒号（:）分隔，例如：{‘name’: ‘John’, ‘age’: 25}。</li><li><code>NoneType</code> 类型：<code>None</code> 是一个特殊的常量，表示一个空对象或空值。它是一个内置的对象</li><li>复数类型（complex）</li></ul><p>这些又可以分为可变类型和不可变类型</p><ul><li>不可变类型- 整数、浮点数、布尔类型、字符串、元组</li></ul><p>不可变类型指的是一旦创建就不能被修改的数据类型，例如整数、浮点数、布尔类型、字符串、元组等。对于不可变类型的数据，如果需要修改，通常需要创建一个新的对象来代替原来的对象。</p><p>对于不可变类型的数据，虽然不能直接修改其内容，但是可以通过重新赋值的方式来改变其值。</p><ul><li>可变类型 - 列表、集合、字典等</li></ul><p>可变类型指的是可以被修改的数据类型，例如列表、集合、字典等。对于可变类型的数据，可以直接修改其内容，而不需要创建新的对象。</p><p>可以通过选择合适的数据类型、避免频繁的对象复制、使用不可变类型作为函数参数、使用生成器和迭代器等方式来提高程序的性能。</p><p>总结：</p><p>不可变类型：数字&#x2F;字符串&#x2F;元祖&#x2F;frozen set<br>可变类型：列表、集合、字典</p><p>有序类型：序列(字符串&#x2F;列表&#x2F;元祖<br>无序类型：集合、字典</p><h4 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h4><ul><li><code>+</code>：加</li><li><code>-</code>：减</li><li><code>*</code>：乘</li><li><code>/</code>：除，结果为浮点数，如<code>1/2=0.5</code>，又称真实除</li><li><code>//</code>：整除，舍去所有小数，又称地板除</li><li><code>%</code>：取模，如<code>3 % 2 = 1</code></li><li><code>**</code>：乘方，如<code>3 ** 2 = 9</code></li></ul><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p>​!!! 字符串形式的浮点数，如’1.23’，只能使用float转为浮点数，用int转为整数则会报错。</p><ul><li>str(): 其他类型转为字符串, 如<code>str(12)</code></li><li>int()：字符串整数或浮点数转为整型，如<code>int(&quot;12&quot;)</code></li><li>float()：字符串数字或整形，转换为浮点数，如<code>float(&quot;1.23&quot;)</code></li></ul><h4 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h4><p>Python中的数字除了10进制数之外，还支持2进制（表示为0b开头）、8进制（表示为0o开头）、16进制数（表示为0x开头）。相互转换方法如下：</p><ul><li>bin()：转为2进制，如<code>bin(10)</code>，结果为<code>0b1010</code></li><li>oct()：转为8进制，如<code>oct(10)</code>，结果为<code>0o12</code></li><li>hex()：转为16进制，如<code>hex(10)</code>，结果为<code>0xa</code></li><li>int()：转为10进制，如<code>int(0b1010)</code>结果为<code>10</code></li></ul><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="系统方法"><a href="#系统方法" class="headerlink" title="系统方法"></a>系统方法</h4><table><thead><tr><th>方法</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>len()</td><td>计算字符串长度</td><td>len(“abcdefg”)，结果为7</td></tr><tr><td>count()</td><td>查询字符串中某个元素的数量</td><td>aabcabc”.count(“a”)，结果为3</td></tr><tr><td>find() &#x2F; index()</td><td>查找字符串中某个字符第一次出现的索引，find()找不到返回-1 , index()找不到报错</td><td>“abcdefg”.find(“b”)，结果为1 , ”abcdefg”.index(“b”)，结果也为1</td></tr><tr><td>replace()</td><td>替换字符串中的某部分</td><td>“hello,java”.replace(“java”, “python”)，结果为hello,python</td></tr><tr><td>split()</td><td>将字符串按分隔符分割成列表</td><td>“a,b,c,d”.split(“,”)，结果为[“a”, “b”, “c”, “d”]</td></tr><tr><td>join()</td><td>将字符串作为分隔符连接列表元素得到一个字符串</td><td>“-“.join([“a”, “b”, “c”, “d”])，结果为a-b-c-d</td></tr><tr><td>lower() &#x2F; upper()</td><td>将字符串转换为全小写&#x2F;大写</td><td>“AbcdeF”.lower()，结果为abcdef , “abcedF”.upper()，结果也为ABCDEF</td></tr><tr><td>isdigit() &#x2F; isalpha() &#x2F; isalnum()</td><td>字符串是否纯数字&#x2F;纯字母&#x2F;纯数字字母组合</td><td>“123”.isdigit()，结果为True</td></tr><tr><td>strip() &#x2F; lstrip() &#x2F; rstrip()</td><td>去掉字符串左右&#x2F;左边&#x2F;右边的无意字符（包括空格、换行等非显示字符)</td><td>“ this has blanks \n”.strip()，结果为this has balnks</td></tr></tbody></table><h4 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h4><p>字符串格式化是指，将字符串的某部分按一定格式输出，同时也可以将某些变量的实际值，插入到字符串中。</p><ul><li>%: 如<code>&quot;Name: %s, Age: %d&quot; % (&quot;Lily&quot;, 12)</code>或<code>&quot;Name: %(name)s, Age: %(age)d&quot; % &#123;&quot;name&quot;: &quot;Lily&quot;, &quot;age&quot;: 12&#125;</code></li><li>format: 如<code>&quot;Name: &#123;&#125;, Age: &#123;&#125;&quot;.format(&quot;Lily&quot;, 12)</code>或<code>&quot;Name: &#123;name&#125;, Age: &#123;age&#125;&quot;.format(name=&quot;Lily&quot;,age=12)</code></li><li>fstring：如 <code>f&#39;Name: &#123;name&#125;, Age: &#123;age&#125;&#39;</code></li><li>substitude(不完全替换会报错)&#x2F;safe_substitude: 如&#96;”Name: ${name}, Age: ${age}”.safe_substitude(name&#x3D;”Lily”,age&#x3D;12)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">tpl=<span class="string">&#x27;&#x27;&#x27;&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;&lt;title&gt;&#123;title&#125;&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;h1&gt;&#123;title&#125;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">&lt;table border=1px&gt;</span></span><br><span class="line"><span class="string">    &lt;tr&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;序号&lt;/th&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;用例&lt;/th&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;结果&lt;/th&gt;</span></span><br><span class="line"><span class="string">    &lt;/tr&gt;</span></span><br><span class="line"><span class="string">    &#123;trs&#125;</span></span><br><span class="line"><span class="string">&lt;/table&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">tr=<span class="string">&#x27;&#x27;&#x27;&lt;tr&gt;&lt;td&gt;&#123;sn&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="string">&lt;td&gt;&#123;case_name&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="string">&lt;td&gt;&#123;result&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">title=<span class="string">&quot;自动化测试报告&quot;</span></span><br><span class="line">case_results = [(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;test_add_normal&quot;</span>, <span class="string">&quot;PASS&quot;</span>),(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;test_add_negative&quot;</span>, <span class="string">&quot;PASS&quot;</span>), (<span class="string">&quot;3&quot;</span>, <span class="string">&quot;test_add_float&quot;</span>, <span class="string">&quot;FAIL&quot;</span>)]</span><br><span class="line"></span><br><span class="line">trs=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> case_result <span class="keyword">in</span> case_results:</span><br><span class="line">    tr_format = tr.<span class="built_in">format</span>(sn=case_result[<span class="number">0</span>], case_name=case_result[<span class="number">1</span>], result=case_result[<span class="number">2</span>])</span><br><span class="line">    trs += tr_format</span><br><span class="line"></span><br><span class="line">html = tpl.<span class="built_in">format</span>(title=title, trs=trs)</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;report.html&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">f.write(html)</span><br><span class="line">f.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="列表list"><a href="#列表list" class="headerlink" title="列表list"></a>列表list</h3><p>​列表元素支持各种对象的混合,支持嵌套各种对象,如<code>[&quot;a&quot;, 1, &#123;&quot;b&quot;: 3&#125;, [1,2,3]]</code></p><h4 id="列表操作"><a href="#列表操作" class="headerlink" title="列表操作"></a>列表操作</h4><ul><li>赋值: <code>l = [1, &quot;hello&quot;, (&quot;a&quot;, &quot;b&quot;)]</code></li><li>获取: <code>a = l[0] # 通过索引获取</code></li><li>增: <code>l.append(&quot;c&quot;);l.extend([&quot;d&quot;,&quot;e&quot;]);l+[&quot;f&quot;]</code></li><li>删: <code>l.pop() # 按索引删除,无参数默认删除最后一个;l.remove(&quot;c&quot;) # 按元素删除</code></li><li>改:<code>l[1]=&quot;HELLO&quot; # 通过索引修改</code></li><li>查: 遍历 <code>for i in l: print(i)</code></li></ul><h4 id="列表系统方法"><a href="#列表系统方法" class="headerlink" title="列表系统方法"></a>列表系统方法</h4><table><thead><tr><th>方法</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>append()&#x2F;insert()&#x2F;extend()</td><td>添加&#x2F;插入&#x2F;扩展(连接)</td><td>[1,2].append(3)</td></tr><tr><td>insert()</td><td>插入</td><td>[1,3].insert(1,2)</td></tr><tr><td>extend()</td><td>扩展(连接)</td><td>[1,2].extend([3,4])</td></tr><tr><td>index()</td><td>获取元素索引</td><td>[1,2].index(2)</td></tr><tr><td>count()</td><td>统计元素个数</td><td>[1,2,1,1].count(1)</td></tr><tr><td>pop()</td><td>按索引删除</td><td>[1,2].pop(0)</td></tr><tr><td>remove()</td><td>按元素删除</td><td>[1,2].remove(1)</td></tr><tr><td>sort()</td><td>排序</td><td>[1,3,2].sort()</td></tr><tr><td>reverse()</td><td>反转</td><td>[1,3,2].reverse()</td></tr></tbody></table><h3 id="元祖tuple"><a href="#元祖tuple" class="headerlink" title="元祖tuple"></a>元祖tuple</h3><ol><li>不可改变,常用作函数参数(安全性好)</li><li>同样支持混合元素以及嵌套</li><li>只有一个元素时,必须加”,”号,如<code>a=(&quot;hello&quot;,)</code> - 因为Python中()还有分组的含义,不加”,”会识别为字符串</li></ol><p>为什么需要元祖？有时候我们需要多个变量来表达一个确定的值，如坐标(x,y)。在哈希算法中，不可变是非常重要的，这样每次生成的哈希值才能相同。作为不可变对象，元祖可以作为字典的KEY，即<code>&#123;(1,2): 3&#125;</code>是合法的。</p><h4 id="元祖对象操作方法"><a href="#元祖对象操作方法" class="headerlink" title="元祖对象操作方法"></a>元祖对象操作方法</h4><p>​由于元素是不可变对象，自带操作对象较少</p><table><thead><tr><th>方法</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>index()</td><td>获取元素索引</td><td>t&#x3D;(1,2,3); print(t.index(2)</td></tr><tr><td>count()</td><td>获取元素个数</td><td>t&#x3D;(1,2,3,2,1,2,3); print(t.index(2)</td></tr></tbody></table><h3 id="序列类型相关操作方法"><a href="#序列类型相关操作方法" class="headerlink" title="序列类型相关操作方法"></a>序列类型相关操作方法</h3><p>​字符串、列表、元祖等按顺序存储的变量类型，我们统称为序列类型。</p><h4 id="序列类型-索引"><a href="#序列类型-索引" class="headerlink" title="序列类型 - 索引"></a>序列类型 - 索引</h4><ul><li>正反索引: <code>l[3];l[-1]</code></li><li>索引溢出(IndexError): 当索引大于序列的最大索引时会报错,如[1,2,3,4]最大索引是3,引用l[4]会报IndexError</li></ul><h4 id="序列类型-切片"><a href="#序列类型-切片" class="headerlink" title="序列类型 - 切片"></a>序列类型 - 切片</h4><ul><li>l[1:3] # 从列表索引1到索引3(不包含索引3)进行截取, 如 l &#x3D; [1, 2, 3, 4, 5], l[1:3]为[2, 3]</li><li>l[:5:2] # 第一个表示开始索引(留空0), 第二个表示结束索引(留空为最后一个,即-1), 第三个是步长, 即从开头到第5个(不包含第5个),跳一个取一个</li><li><em>案例</em>: 字符串反转 <code>s=&quot;abcdefg&quot;;r=s[::-1]</code></li></ul><h4 id="序列类型-遍历"><a href="#序列类型-遍历" class="headerlink" title="序列类型-遍历"></a>序列类型-遍历</h4><ul><li>按元素遍历: <code>for item in l: print(item)</code></li><li>按索引遍历: <code>for index in range(len(l)): print(l[index])</code></li><li>按枚举遍历: <code>for i,v in enumerate(l): print((i,v))</code></li></ul><p>当遍历序列类型（如列表、元组、字符串等）和非序列类型（如集合、字典等）时，存在一些区别和注意点。</p><h4 id="遍历序列类型"><a href="#遍历序列类型" class="headerlink" title="遍历序列类型"></a>遍历序列类型</h4><ol><li><p>使用 for 循环：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> my_list:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure></li><li><p>使用 while 循环和索引：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">my_tuple = (<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line">index = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> index &lt; <span class="built_in">len</span>(my_tuple):</span><br><span class="line">    <span class="built_in">print</span>(my_tuple[index])</span><br><span class="line">    index += <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>使用内置函数 enumerate() 获取索引和值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my_string = <span class="string">&quot;Hello&quot;</span></span><br><span class="line"><span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(my_string):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Index: <span class="subst">&#123;index&#125;</span>, Value: <span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>列表解析（List comprehension）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">squared_values = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> my_list]</span><br><span class="line"><span class="built_in">print</span>(squared_values) </span><br></pre></td></tr></table></figure></li></ol><ul><li>序列类型支持索引操作，因此可以使用循环或者内置函数来获取每个元素。</li><li>序列类型的元素有顺序，因此我们可以按照它们在序列中的位置来进行遍历。</li><li>序列类型通常具有固定长度，因此我们可以使用内置函数 <code>len()</code> 来获取其长度</li></ul><h4 id="遍历非序列类型"><a href="#遍历非序列类型" class="headerlink" title="遍历非序列类型"></a>遍历非序列类型</h4><h4 id="集合-set-示例："><a href="#集合-set-示例：" class="headerlink" title="集合 (set) 示例："></a>集合 (set) 示例：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my_set = &#123;<span class="number">10</span>, <span class="string">&#x27;a&#x27;</span>, <span class="literal">True</span>&#125;</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> my_set:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure><h4 id="字典-dict-示例："><a href="#字典-dict-示例：" class="headerlink" title="字典 (dict) 示例："></a>字典 (dict) 示例：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">my_dict = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">25</span>&#125;</span><br><span class="line"><span class="comment"># 遍历键值对</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> my_dict.items():</span><br><span class="line">    <span class="built_in">print</span>(key, value)</span><br><span class="line"><span class="comment"># 只遍历键或值</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> my_dict.keys():</span><br><span class="line">     <span class="built_in">print</span>(key)</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> my_dict.values():</span><br><span class="line">     <span class="built_in">print</span>(value)</span><br></pre></td></tr></table></figure><p>某些非序列对象可能具有特定方法用于迭代。例如，在 pandas 的 DataFrame 中，我们可以使用 iteritems() 方法来遍历每一行数据。</p><h4 id="区别与注意点"><a href="#区别与注意点" class="headerlink" title="区别与注意点"></a>区别与注意点</h4><ul><li>对于集合（set），由于其是无需且不重复的容器，所以在遍历时不能保证元素的顺序。</li><li>字典（dict）是键值对形式存储数据的对象，在循环中需要考虑是否要同时处理键和值。</li><li>其他非序列对象可能具有特定方法用于迭代。需要查看相应文档以了解如何进行迭代操作。</li></ul><h4 id="扩展-连接-添加多个元素"><a href="#扩展-连接-添加多个元素" class="headerlink" title="扩展&#x2F;连接(添加多个元素"></a>扩展&#x2F;连接(添加多个元素</h4><p>extend()&#x2F;+ <code>&quot;abc&quot;+&quot;123&quot;;[1,2,3]+[4,5];[1,2,3].extend([4,5,6,7])</code></p><h4 id="类型互转-str-list-tuple"><a href="#类型互转-str-list-tuple" class="headerlink" title="类型互转: str()&#x2F;list()&#x2F;tuple()"></a>类型互转: str()&#x2F;list()&#x2F;tuple()</h4><p>list转str一般用join(), str转list一般用split()</p><h4 id="系统函数"><a href="#系统函数" class="headerlink" title="系统函数"></a>系统函数</h4><ul><li>len(): 计算长度</li><li>max()&#x2F;min(): 求最大&#x2F;最小元素</li><li>sorted()&#x2F;reversed(): 排序&#x2F;反转并生成新序列(sort()&#x2F;reverse()直接操作原序列)<code>l_new=sorted(l);l_new2=reversed(l)</code></li></ul><h3 id="集合-set"><a href="#集合-set" class="headerlink" title="集合 set"></a>集合 set</h3><p>集合是Python中一种映射类型，集合中的元素要是不可变类型（数字、字符串、元祖），元素不重复（自动去重）。</p><p>由于集合是基于映射类型（基于hash算法计算得到的元素地址，而不是顺序排列），相比于列表和元祖，集合的查询效率非常高，无论集合中有多少个元素，查询某个元素只需要一次操作。</p><p>Python中有可变结合set和不可变集合frozenset两种</p><h4 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line">s = <span class="built_in">set</span>()  <span class="comment"># 创建空集合</span></span><br><span class="line">s = <span class="built_in">set</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])  <span class="comment"># 将列表转为集合</span></span><br></pre></td></tr></table></figure><h4 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h4><p>同数学概念中的集合，Python中的集合也支持交集、并集、差集等操作，集合于集合常见操作符如下：</p><ul><li>联合(并集): 例如：<code>&#123;&#39;a&#39;, &#39;b&#39; &#125; | &#123;&#39;b&#39;, &#39;c&#39;&#125;</code>，结果为<code>&#123;&#39;a&#39;, &#39;b&#39;, &#39;c&#39;&#125;</code></li><li>交集: <code>&amp;</code>: 例如：<code>&#123;&#39;a&#39;, &#39;b&#39; &#125; | &#123;&#39;b&#39;, &#39;c&#39;&#125;</code> ，结果为<code>&#123;&#39;b&#39;&#125;</code></li><li>差集: 例如：<code>&#123;&#39;a&#39;, &#39;b&#39; &#125; - &#123;&#39;b&#39;, &#39;c&#39;&#125;</code>，结果为 <code>&#123;&#39;a&#39;&#125;</code>，相反<code>&#123;&#39;b&#39;, &#39;c&#39; &#125; - &#123;&#39;a&#39;, &#39;b&#39;&#125;</code>，结果为<code>&#123;&#39;c&#39;&#125;</code></li><li>对称差分(去除相同的项做并集): 例如<code>&#123;&#39;a&#39;, &#39;b&#39; &#125; ^ &#123;&#39;b&#39;, &#39;c&#39;&#125;</code>结果为<code>&#123;&#39;a&#39;, &#39;c&#39;&#125;</code></li></ul><h4 id="通过集合操作快速对比出一些数据的不同"><a href="#通过集合操作快速对比出一些数据的不同" class="headerlink" title="通过集合操作快速对比出一些数据的不同"></a>通过集合操作快速对比出一些数据的不同</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">data1 = [&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;王六&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">75</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">98</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;赵六&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">89</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">87</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;李五&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">87</span>&#125;]</span><br><span class="line">data2 = [&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;赵六&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">89</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">98</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">98</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">75</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;王六&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">85</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将列表中的每一项转为value值组成的不可变元祖, 然后将列表转为集合</span></span><br><span class="line">set1 = <span class="built_in">set</span>([<span class="built_in">tuple</span>(i.values()) <span class="keyword">for</span> i <span class="keyword">in</span> data1])  </span><br><span class="line">set2 = <span class="built_in">set</span>([<span class="built_in">tuple</span>(i.values()) <span class="keyword">for</span> i <span class="keyword">in</span> data2])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;data2中于data1中不同的有&#x27;</span>, set1-set2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;data1中于data2中不同的有&#x27;</span>, set2-set1)</span><br></pre></td></tr></table></figure><h4 id="集合对象自带方法"><a href="#集合对象自带方法" class="headerlink" title="集合对象自带方法"></a>集合对象自带方法</h4><table><thead><tr><th>方法</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>add()</td><td>添加元素</td><td>s &#x3D; set(); s.add(‘a’)</td></tr><tr><td>update()</td><td>更新集合(批量添加多个)</td><td>s &#x3D; {‘a’, ‘b’}; s1&#x3D;set([‘b’, ‘c’]); s.update(s1)</td></tr><tr><td>remove(element)</td><td>移除指定元素(如果元素不存在报错)</td><td>s &#x3D; {‘a’, ‘b’, ‘c’}; s.remove(‘a’) ;print(s)</td></tr><tr><td>discard(element)</td><td>丢弃指定元素(如果元素不存在不报错）</td><td>s &#x3D; {‘a’, ‘b’, ‘c’}; s.discard(‘d’) ;print(s)</td></tr><tr><td>pop()</td><td>随机移除一个元素</td><td>s&#x3D;{‘a’, ‘b’, ‘c’}; s.pop(); print(s)</td></tr><tr><td>copy()</td><td>复制集合</td><td>s &#x3D; {‘a’, ‘b’, ‘c’}; s1 &#x3D; s.copy(); print(s1)</td></tr><tr><td>clear()</td><td>清空集合</td><td>s &#x3D; {‘a’, ‘b’, ‘c’}; s.clear() ; print(s)</td></tr><tr><td>difference(s1)</td><td>与另一个集合的差别（相当于差集）</td><td>s &#x3D; {‘a’, ‘b’};s1 &#x3D; {‘b’, ‘c’};print(s.difference(s1))</td></tr><tr><td>issubset(s1)</td><td>是否子集</td><td>s &#x3D; {‘a’, ‘b’}; s1 &#x3D; {‘a’, ‘b’, ‘c’}; print(s.issubset(s1))</td></tr><tr><td>issuperset(s)</td><td>是否父集</td><td>s &#x3D; {‘a’, ‘b’};s1 &#x3D; {‘a’, ‘b’, ‘c’}; print(s1.issuperset(s))</td></tr><tr><td>isdisjoint(s)</td><td>是否互斥(彼此都不包含对方元素)</td><td>s &#x3D; {‘a’, ‘b’};s1 &#x3D; {‘c’, ‘d’}; print(s1.isdisjoint(s))</td></tr></tbody></table><h4 id="案例1-列表去重"><a href="#案例1-列表去重" class="headerlink" title="案例1: 列表去重"></a><em>案例1</em>: 列表去重</h4><p><code>l=[1,2,3,1,4,3,2,5,6,2];l=list(set(l))</code> (由于集合无序,无法保持原有顺序)</p><h4 id="案例2-100w条数据-用列表和集合哪个性能更好"><a href="#案例2-100w条数据-用列表和集合哪个性能更好" class="headerlink" title="案例2: 100w条数据,用列表和集合哪个性能更好?"></a><em>案例2</em>: 100w条数据,用列表和集合哪个性能更好?</h4><p>集合性能要远远优于列表, 集合是基于哈希的, 无论有多少元素,查找元素永远只需要一步操作, 而列表长度多次就可能需要操作多少次(比如元素在列表最后一个位置)</p><h3 id="字典-dict"><a href="#字典-dict" class="headerlink" title="字典 dict"></a>字典 dict</h3><p>​字典是由若干key-value对组成, Python3.6后字典是有序的, 字典的key不能重复,而且必须是可哈希的,通常是字符串</p><h4 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h4><ul><li><p>dict(key1&#x3D;value1, key2&#x3D;value2, …): 创建字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = <span class="built_in">dict</span>(a=<span class="number">1</span>, b=<span class="number">2</span>, c=<span class="number">3</span>)</span><br><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>dict.fromkeys(key1, key2, key3, … , default): 以默认值创建包含多个键的字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = <span class="built_in">dict</span>.fromkeys([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], <span class="number">1</span>)</span><br><span class="line">d=&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="字典操作"><a href="#字典操作" class="headerlink" title="字典操作"></a>字典操作</h4><ul><li>赋值: <code>d = &#123;&quot;a&quot;:1, &quot;b&quot;:2&#125;</code></li><li>获取: <code>a = d[&#39;a&#39;]</code>或<code>a = d.get(&quot;a&quot;) # d中不存在&quot;a&quot;元素时不会报错</code></li><li>增: <code>d[&quot;c&quot;] = 3; d.update(&#123;&quot;d&quot;:5, &quot;e&quot;: 6&#125;</code></li><li>删: <code>d.pop(&quot;d&quot;); d.clear() # 清空</code></li><li>查: <code>d.get(&quot;c&quot;)</code></li><li>遍历:<ul><li>遍历key: <code>for key in d:</code>或<code>for key in d.keys():</code></li><li>遍历value: <code>for value in d.values():</code></li><li>遍历key-value对: <code>for item in d.items():</code></li></ul></li></ul><h4 id="字典常用方法"><a href="#字典常用方法" class="headerlink" title="字典常用方法"></a>字典常用方法</h4><table><thead><tr><th>方法</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>get(key, default&#x3D;None)</td><td>获取指定键的值，如果不存在该键，则返回default默认值，</td><td>d &#x3D; {‘a’: 1, ‘b’: 2, ‘c’: 3}; print(d.get(e, 5))</td></tr><tr><td>setdefault(key, default)</td><td>设置没有字典中该项时的默认值</td><td>d &#x3D; {‘a’: 1, ‘b’: 2, ‘c’: 3}; d.set_default(‘e’, 5); print(d[‘e’])</td></tr><tr><td>keys()</td><td>所有键的集合(类似列表)</td><td>d &#x3D; {‘a’: 1, ‘b’: 2, ‘c’: 3}; print(d.keys())</td></tr><tr><td>values()</td><td>所有值的集合(类似列表)</td><td>d &#x3D; {‘a’: 1, ‘b’: 2, ‘c’: 3}; print(d.values())</td></tr><tr><td>items()</td><td>所有key, value对的集合(类似列表)</td><td>d &#x3D; {‘a’: 1, ‘b’: 2, ‘c’: 3}; print(d.items())</td></tr><tr><td>copy()</td><td>复制字典(浅拷贝)</td><td>d &#x3D; {‘a’: 1, ‘b’: 2, ‘c’: 3}; d2 &#x3D; d.copy(); print(d2)</td></tr><tr><td>update(…)</td><td>更新字典</td><td>d &#x3D; {‘a’: 1, ‘b’: 2, ‘c’: 3}; d.update({‘c’: 4, ‘d’: 5}; print(d)</td></tr><tr><td>clear()</td><td>清空字典</td><td>d &#x3D; {‘a’: 1, ‘b’: 2, ‘c’: 3}; d.clear(); print(d)</td></tr><tr><td>pop(key)</td><td>取出(移除)指定key并获取对应的值</td><td>d &#x3D; {‘a’: 1, ‘b’: 2, ‘c’: 3}; b_value &#x3D; d.pop(‘b’); print(d)</td></tr><tr><td>popitem()</td><td>取出(移除)末尾的key-value对</td><td>d &#x3D; {‘a’: 1, ‘b’: 2, ‘c’: 3}; print(d.popitem())</td></tr></tbody></table><h4 id="更新字典数据"><a href="#更新字典数据" class="headerlink" title="更新字典数据"></a>更新字典数据</h4><ul><li><p>通过key值修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">api = &#123;<span class="string">&quot;url&quot;</span>: <span class="string">&quot;/api/user/login&quot;</span>: data: &#123;<span class="string">&quot;username&quot;</span>: <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;123456&quot;</span>&#125;&#125;</span><br><span class="line">api[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;username&#x27;</span>] = <span class="string">&quot;李四&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>通过update() 方法修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">api = &#123;<span class="string">&quot;url&quot;</span>: <span class="string">&quot;/api/user/login&quot;</span>: data: &#123;<span class="string">&quot;username&quot;</span>: <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;123456&quot;</span>&#125;&#125;</span><br><span class="line">api[<span class="string">&#x27;data&#x27;</span>].update(&#123;<span class="string">&quot;username&quot;</span>: <span class="string">&quot;李四&quot;</span>&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="哈希与可哈希元素"><a href="#哈希与可哈希元素" class="headerlink" title="哈希与可哈希元素"></a>哈希与可哈希元素</h4><ol><li>哈希是通过计算得到元素的存储地址(映射), 这就要求不同长度的元素都能计算出地址,相同元素每次计算出的地址都一样, 不同元素计算的地址必须唯一, 基于哈希的查找永远只需要一步操作, 计算一下得到元素相应的地址, 不需要向序列那样遍历, 所以性能较好</li><li>可哈希元素: 为了保证每次计算出的地址相同, 要求元素长度是固定的, 如数字&#x2F;字符串&#x2F;只包含数字,字符串的元组, 这些都是可哈希元素</li></ol><h2 id="分支及循环"><a href="#分支及循环" class="headerlink" title="分支及循环"></a>分支及循环</h2><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><h4 id="if条件判断"><a href="#if条件判断" class="headerlink" title="if条件判断"></a>if条件判断</h4><h5 id="if-…"><a href="#if-…" class="headerlink" title="if …"></a>if …</h5><p>如果条件满足，才执行其中语句，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> x&gt;<span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正数&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;结束&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="if-…-else-…"><a href="#if-…-else-…" class="headerlink" title="if … else …"></a>if … else …</h5><p>即，如果条件满足，执行某些语句，否则执行另一些语句，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> x&gt;<span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正数&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;不是正数&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;结束&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="f…-elif-…-else-…"><a href="#f…-elif-…-else-…" class="headerlink" title="f… elif … else …"></a>f… elif … else …</h5><p>即，如果满足某条件，执行某些语句，否则如果满足另一条件，执行该条件语句，如果都不满足所列条件则执行其他语句。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> x&gt;<span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正数&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> x=<span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;0&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;负数&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;结束&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="真假值"><a href="#真假值" class="headerlink" title="真假值"></a>真假值</h4><p>​在Python中False、None，数字0，字符串’0’，以及空字符串’’，空列表[]、空字典{}，空元祖(,)，空集合set()，都被失望假值；否则被视为真。比如可以直接使用if list判断列表为空：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = []</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">list</span>:   <span class="comment"># 也可以使用if len(list)&gt;0:</span></span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&#x27;列表不为空&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h4><p>​三元表达式即 当条件满足时 变量 为一个值，条件不满足时，变量为另一个值，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">max</span> = a <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> b</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">当 a&gt;b 为true时</span></span><br><span class="line"><span class="string">max = a</span></span><br><span class="line"><span class="string">若 a&gt;b 为false</span></span><br><span class="line"><span class="string">max = b</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="逻辑符代替if判断"><a href="#逻辑符代替if判断" class="headerlink" title="逻辑符代替if判断"></a>逻辑符代替if判断</h4><p>在Python语句中and和or也可以用于逻辑判断。</p><ul><li><code>c = a and b</code>：如果a为假，则c的值为a，否则c的值为b</li><li><code>c = a or b</code>：想反，如果a为假，c的值为b，否则c的值为a</li></ul><p>特别是or语句，常用来确保变量的值非空并赋于默认值，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>&#125;</span><br><span class="line">c = d.get(<span class="string">&#x27;c&#x27;</span>) <span class="keyword">or</span> <span class="string">&#x27;默认值&#x27;</span>  </span><br><span class="line"><span class="comment"># 如果d.get(&#x27;c&#x27;)的结果为None,0,空字符串等假值，c被赋予默认值</span></span><br></pre></td></tr></table></figure><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>Python中的循环有for循环和while循环两种</p><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><p>for循环（也称遍历），是从一个含有多个变量的数据集合中，依次取出每一项，进行操作。</p><p>for循环可以对字符串、列表、元祖、集合、字典及生成器、迭代器、文件指针等可以迭代的对象进行遍历输出。</p><ul><li><p>遍历获取一组顺序的数字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):  <span class="comment"># range(10)即生成0-9的10个数字，不包括10</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure></li><li><p>遍历字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str_var = <span class="string">&#x27;hello,world&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str_var:  <span class="comment"># i是代表所遍历对象的每一项的一个变量，可以是任意变量名</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure></li><li><p>遍历列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list_var = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list_var:  <span class="comment"># i是代表所遍历对象的每一项的一个变量，可以是任意变量名</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>在遍历时如果想连同该项的索引一起输出，可以使用enumerate实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list_var = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(list_var):  <span class="comment"># index代表索引，item代表每一项的值</span></span><br><span class="line">    <span class="built_in">print</span>(index, item)</span><br></pre></td></tr></table></figure></li><li><p>遍历字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dict_var =&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="comment"># 遍历字典时，需要使用字典的items()方法，得到每一项key,value的组合</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> dict_var.items():  <span class="comment"># i是代表所遍历对象的每一项的一个变量，可以是任意变量名</span></span><br><span class="line">    <span class="built_in">print</span>(key, value)</span><br></pre></td></tr></table></figure></li></ul><h4 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h4><p>​while循环用于当指定条件满足时，循环执行某些语句，直到条件不满足。while循环中为了避免死循环，一般循环中要有使循环趋于结束的语句，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:  <span class="comment"># 当i&lt;10时，循环执行下面语句</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    i += <span class="number">1</span>  <span class="comment"># i每次自己增加1，等i&gt;=10时，循环自动结束</span></span><br></pre></td></tr></table></figure><h4 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h4><p>break用于结束当前循环，continue用于结束本次循环，直接开始下次循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># break    当有多层循环嵌套时，break每次只能跳出一层循环</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">5</span>:  <span class="comment"># 如果大于5，结束循环</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># continue</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:  <span class="comment"># 如果是偶数，跳过本次循环</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h4 id="循环中的else"><a href="#循环中的else" class="headerlink" title="循环中的else"></a>循环中的else</h4><p>​循环结束有break结束和全部循环完结束两种，为了判断是哪种结束方式，可以使用else。当非break结束时执行else。</p><p>由于实际不会break，因此运行结果会打印’循环完毕’，while…else的使用和for…else类似：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">5</span>:  <span class="comment"># 如果大于5，结束循环</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">else</span>:  <span class="comment"># 非break结束时执行</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;非break跳出，循环全部执行完毕&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;非break跳出，循环全部执行完毕&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>Python中的函数可以理解为一种<em>预先设定</em>的处理过程。一般过程都会包含输入、处理、和输出三个部分。</p><ul><li>输入，即函数参数，可以有多个参数；</li><li>处理：函数内部的处理过程，可以调用其他函数及模块；</li><li>输出：即返回值，也有可以返回多个。</li></ul><p>数学中的函数指一种映射的变换关系，如<code>f(x)=2x+1</code>，转换为Python函数为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x*<span class="number">2</span> + <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="函数定义和调用"><a href="#函数定义和调用" class="headerlink" title="函数定义和调用"></a>函数定义和调用</h3><p>函数分为函数定义和函数调用两部分。</p><ul><li>函数定义即设计函数，是对参数、处理过程和返回值的描述。</li><li>函数调用及使用函数，是使用实际的数据，运行函数并得到实际的返回值。</li></ul><h4 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h4><p>定义一个函数使用<code>def</code>关键字，格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">参数<span class="number">1</span>,参数<span class="number">2</span>, ...</span>):</span><br><span class="line">    处理过程</span><br></pre></td></tr></table></figure><h4 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h4><p>定义的函数需要调用才能执行，调用是按定义的格式传入和参数对应的实际数据，调用方式如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名(数据<span class="number">1</span>,数据<span class="number">2</span>,...)</span><br></pre></td></tr></table></figure><p>如果需要获取函数的返回结果，可以使用将函数调用复制给变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量 = 函数名(数据<span class="number">1</span>,数据<span class="number">2</span>,...) </span><br></pre></td></tr></table></figure><h4 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h4><p>参数是指使用函数时需要提供的信息，如一个登录函数<code>add(a, b)</code>，需要提供加数和被加数，才能进行运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>): <span class="comment"># 定义函数</span></span><br><span class="line">    s = x+y     <span class="comment"># 处理过程</span></span><br><span class="line">    <span class="keyword">return</span> s   <span class="comment"># 返回结果</span></span><br></pre></td></tr></table></figure><h4 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h4><p>函数分为定义和调用，在定义函数时的参数称为形式参数，如<code>def add(x, y): ...</code>，这里的<code>x</code>和<code>y</code>便是形式参数，形式参数是函数内部使用的。<br>在调用函数时需要传入实际的数据，如<code>add(3,5)</code>，这里的<code>3</code>和<code>5</code>便是实际参数。实际参数也可以是预先定义好的变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>): </span><br><span class="line">    <span class="comment"># 这里的 x,y 便是形参，函数外部不能调用</span></span><br><span class="line">    s = x+y     </span><br><span class="line">    <span class="keyword">return</span> s </span><br><span class="line"></span><br><span class="line">a, b = <span class="number">3</span>, <span class="number">5</span> <span class="comment"># 实参</span></span><br><span class="line">add(a, b)</span><br></pre></td></tr></table></figure><h4 id="参数类型注解"><a href="#参数类型注解" class="headerlink" title="参数类型注解"></a>参数类型注解</h4><p>Python3.5版本以后提供了类型注解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x: <span class="built_in">int</span>, y: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:   <span class="comment"># 说明x,y应为整型 -&gt; 返回值也会整数</span></span><br><span class="line">    s = x+y </span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"><span class="comment"># 类型注释也可以指定多种类型，同时也可以注释函数返回值类型。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x: (<span class="params"><span class="built_in">int</span>, <span class="built_in">float</span></span>), y: (<span class="params"><span class="built_in">int</span>, <span class="built_in">float</span></span>)</span>) -&gt; (<span class="built_in">int</span>, <span class="built_in">float</span>):  <span class="comment"># -&gt;指返回值类型</span></span><br><span class="line">    s = x+y</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure><h4 id="参数默认值-必选和可选参数"><a href="#参数默认值-必选和可选参数" class="headerlink" title="参数默认值-必选和可选参数"></a>参数默认值-必选和可选参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y=<span class="number">1</span></span>): <span class="comment"># x 为必传参数， y 为可选传参数，不传默认值为1； 提供默认值的参数必须写到后面</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果加上类型注解，写法为</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x: (<span class="params"><span class="built_in">int</span>,<span class="built_in">float</span></span>), y: (<span class="params"><span class="built_in">int</span>, <span class="built_in">float</span></span>) = <span class="number">1</span></span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h4 id="位置参数和关键字参数"><a href="#位置参数和关键字参数" class="headerlink" title="位置参数和关键字参数"></a>位置参数和关键字参数</h4><p>参数在定义时只有必选和可选之分，可选的参数需要写到后面。<br>但是在函数调用时就有如下两种传参方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line">add(y=<span class="number">3</span>,x=<span class="number">5</span>) <span class="comment"># 加了y= 就会将3传值给y形数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>): </span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h4 id="不定参数"><a href="#不定参数" class="headerlink" title="不定参数"></a>不定参数</h4><p>​当一个函数使用方式不确定，需要设计其支持任意多个、任意方式（位置&#x2F;关键字形式）传入时。可以使用<code>*args</code>和<code>**kwargs</code><br>args即参数(复数)：arguments的缩写，kwargs即关键词参数(复数)：keyword arguments的缩写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> args:   <span class="comment"># args得到一个元祖类型，没有位置参数时为空元祖</span></span><br><span class="line">        s += num</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> kwargs.values():  <span class="comment"># kwargs得到一个字典类型，无关键词参数时为空字典</span></span><br><span class="line">        s += num</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">add()   <span class="comment"># args 为 空元祖 ()  kwargs 为空字典 &#123;&#125;  结果为 0</span></span><br><span class="line">add(<span class="number">3</span>, <span class="number">5</span>) <span class="comment"># args 为 元祖 (3,5)  kwargs 为空字典 &#123;&#125;  结果为 8</span></span><br><span class="line">add(x=<span class="number">3</span>, y=<span class="number">5</span>)  <span class="comment"># args 为 空元祖 ()  kwargs 为空字典 &#123;&#x27;x&#x27;: 3, &#x27;y&#x27;: 5&#125;  结果为 8</span></span><br><span class="line">add(<span class="number">3</span>, <span class="number">5</span>, z=<span class="number">6</span>)   <span class="comment"># 此时 args为(3,5)  kwargs为 &#123;&#x27;z&#x27;: 6&#125;, 得到 14</span></span><br></pre></td></tr></table></figure><h4 id="限定关键字参数"><a href="#限定关键字参数" class="headerlink" title="限定关键字参数"></a>限定关键字参数</h4><p>函数中可以使用<code>*</code>参数，其后的参数在使用时只能按<code>key=value</code>形式使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">*, a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">1</span>, <span class="number">2</span>)) <span class="comment"># 报错</span></span><br><span class="line"><span class="built_in">print</span>(add(a=<span class="number">1</span>,b=<span class="number">2</span>))</span><br></pre></td></tr></table></figure><h4 id="限定位置参数"><a href="#限定位置参数" class="headerlink" title="限定位置参数"></a>限定位置参数</h4><p>函数中可以使用<code>/</code>参数，其前的参数在使用时只能按位置参数形式使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b, /</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(add(a=<span class="number">1</span>,b=<span class="number">2</span>)) <span class="comment"># 报错</span></span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>函数中也可以使用不定参 <code>def add(*args): ...</code> 来仅允许使用位置参数，使用起来不如上述形式方便，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">*args</span>):</span><br><span class="line">    a, b = args</span><br><span class="line">    <span class="built_in">print</span>(a + b)</span><br><span class="line"></span><br><span class="line">add(a=<span class="number">1</span>, b=<span class="number">2</span>)  <span class="comment"># 报错</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h4 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h4><p>函数中使用关键<code>return</code>返回结果，return操作后，函数结束（后面的语句不会再执行)</p><p>如果想函数每次调用都返回一个值后并不终止，而是暂停等待下次调用，可以使用<code>yield</code>代替<code>return</code>，这样便得到一个生成器函数。</p><h4 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h4><p>函数内部的变量被称为<em>局部变量</em>，局部变量是私有变量，一般情况下，一个函数无法访问其他函数的局部变量。</p><p>如果需要在一个函数中声明一个变量，让所有函数都可以使用，可以使用global关键字声明其为全局变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">global</span> z</span><br><span class="line">    z = <span class="number">3</span></span><br><span class="line">    <span class="keyword">return</span> x + y + z</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x - y -z  <span class="comment"># 可以使用全局变量z</span></span><br><span class="line"><span class="comment"># 由于函数都可以访问和改变全局变量，这会导致全局变量的值不可预测，因此需要谨慎使用全局变量。</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">3</span>   <span class="comment"># 模块中的全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>():</span><br><span class="line">    a = a + <span class="number">3</span> <span class="comment"># 将全局变量 进行加3 赋值给局部变量</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addGlobal</span>():</span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line">    a = a + <span class="number">3</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> 参数: 返回值</span><br><span class="line">add = lamda x,y: x+y</span><br></pre></td></tr></table></figure><h4 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h4><p>函数用于显示一个函数的信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;加法函数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数描述的方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">info</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="comment"># 使用魔术方法获取func方法的信息并打印</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;函数名称:&#x27;</span>, func.__name__) <span class="comment"># __name__: 可以获取函数的方法名</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;函数描述:&#x27;</span>, func.__doc__)<span class="comment"># __doc__: 可以获取到函数的解析注释</span></span><br><span class="line">    <span class="comment"># 通常情况下，我们不会直接使用 func.__name__ 来获取函数或者方法的名称，通常会使用内置函数 getattr() 来动态地获取对象属性。</span></span><br><span class="line">    function_name = <span class="built_in">getattr</span>(my_function, <span class="string">&#x27;__name__&#x27;</span>)</span><br><span class="line">    method_name = <span class="built_in">getattr</span>(obj.my_method, <span class="string">&#x27;__doc__&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;函数名称:&#x27;</span>, function_name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;函数描述:&#x27;</span>, method_name) </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">info(add) </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">函数名称: add</span></span><br><span class="line"><span class="string">函数描述: 加法函数</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h4><p>装饰器也是一种典型的以函数为参数的函数，装饰器旨在通过包装，在不改变原函数的情况下，为函数来增加功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接使用@info为add函数加上装饰器</span></span><br><span class="line"><span class="meta">@info   </span><span class="comment"># @info 装饰器 - 在调用函数add时会自动打印相应的函数信息。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;加法函数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br></pre></td></tr></table></figure><h5 id="装饰器的执行流程"><a href="#装饰器的执行流程" class="headerlink" title="装饰器的执行流程"></a>装饰器的执行流程</h5><ol><li>定义装饰器函数：首先需要定义一个装饰器函数。这个函数将接收一个被装饰的目标函数作为参数，并返回一个新的内嵌（包裹）了目标函数功能的封闭（wrapper）函数。</li><li>应用装饰器：使用 <code>@</code> 符号将定义好的装饰器应用到目标函数上。这相当于将目标函数作为参数传递给了装饰器，并重新赋值给了原来的名称。</li><li>装饰过程：当调用被修饰后的原始目标函时数时，实际上调用并执行了封闭（wrapper） 函数。这个封闭函（wrapper）数接收到相同参数并执行了额外操作或者修改后再调用内部保存着目标函数引用 的实际逻辑代码。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">uppercase_decorator</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>():</span><br><span class="line">        result = func() <span class="comment"># 获取原函数的返回值</span></span><br><span class="line">        <span class="keyword">return</span> result.upper() <span class="comment"># 将原函数的返回值进行大写</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> wrapper  </span><br><span class="line"></span><br><span class="line"><span class="meta">@uppercase_decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(greet())  <span class="comment"># 输出: HELLO WORLD</span></span><br></pre></td></tr></table></figure><h4 id="常用高阶函数"><a href="#常用高阶函数" class="headerlink" title="常用高阶函数"></a>常用高阶函数</h4><p>map, filter和reduce是Python中常用的3个高阶函数</p><ul><li><p>map()<br>map用于使用一个函数，对一个序列进行批量操作，示例如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add1 = <span class="keyword">lambda</span> x: x + <span class="number">1</span>   <span class="comment"># 处理函数，由于一次处理一个，所有只能有一个参数</span></span><br><span class="line">data = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line">new_data = <span class="built_in">list</span>(<span class="built_in">map</span>(add1, data)   <span class="comment"># map(add1,  data)  实际上是一个生成器，不会自动执行，必须遍历或者转成列表才会执行</span></span><br><span class="line"><span class="built_in">print</span>(new_data)  <span class="comment"># 得到列表 [2, 4, 8 , 10]</span></span><br></pre></td></tr></table></figure></li><li><p>filter()<br>filter使用一个函数来过滤数据<br>当某个数据传入函数时返回非”假”值（Python中False,None,0, ‘0’, ‘’,[], {}, (,)都被视为假），则保留。否则抛弃。示例如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">is_even = <span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span>   <span class="comment">#  过滤函数，x是偶数是 x对2取模==0，返回True，奇数时不等于0，返回False。</span></span><br><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">new_data = <span class="built_in">list</span>(<span class="built_in">filter</span>(is_even, data))   <span class="comment"># filter同样是一个生成器，需要转列表才会执行。</span></span><br><span class="line"><span class="built_in">print</span>(new_data)  <span class="comment"># 得到列表 [2, 4, 6, 8]</span></span><br></pre></td></tr></table></figure></li><li><p>reduce()<br>reduce使用一个函数，对序列进行累积操作，不同的是，这个函数接受两个参数，操作完将结果作为下一轮的第一个参数，再读入下一个参数。<br>如累加[1, 2, 3, 4, 5,6 ,7, 8, 9, 10]，先传入add(1,2)得到和3，第二轮结果3作为第一个参数，再传入下一个参数3得到add(3,3)结果6，下一轮则为add(6,4)…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fuctools <span class="keyword">import</span> reduce  <span class="comment"># 不同于map/filter，reduce需要导入方可使用</span></span><br><span class="line"></span><br><span class="line">add = <span class="keyword">lambda</span> x,y: x + y</span><br><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>,<span class="number">6</span> ,<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line">result = reduce(add, data)  <span class="comment"># reduce调用即执行，返回序列操作完的最后结果</span></span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 得到 55</span></span><br></pre></td></tr></table></figure></li><li><p>sorted()</p><p>Python内置的<code>sorted()</code>函数就可以对list进行排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>([<span class="number">36</span>, <span class="number">5</span>, -<span class="number">12</span>, <span class="number">9</span>, -<span class="number">21</span>])</span><br><span class="line">[-<span class="number">21</span>, -<span class="number">12</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">36</span>]</span><br></pre></td></tr></table></figure><p>它还可以接收一个<code>key</code>函数来实现自定义的排序<br>绝对值大小排序 - key &#x3D; abs</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>([<span class="number">36</span>, <span class="number">5</span>, -<span class="number">12</span>, <span class="number">9</span>, -<span class="number">21</span>], key=<span class="built_in">abs</span>)</span><br><span class="line">[<span class="number">5</span>, <span class="number">9</span>, -<span class="number">12</span>, -<span class="number">21</span>, <span class="number">36</span>]</span><br></pre></td></tr></table></figure><p>忽略大小写 - key &#x3D; str.lower </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>([<span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;about&#x27;</span>, <span class="string">&#x27;Zoo&#x27;</span>, <span class="string">&#x27;Credit&#x27;</span>], key=<span class="built_in">str</span>.lower)</span><br><span class="line">[<span class="string">&#x27;about&#x27;</span>, <span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;Credit&#x27;</span>, <span class="string">&#x27;Zoo&#x27;</span>]</span><br></pre></td></tr></table></figure><p>进行反向排序 - reverse&#x3D;True</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>([<span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;about&#x27;</span>, <span class="string">&#x27;Zoo&#x27;</span>, <span class="string">&#x27;Credit&#x27;</span>], key=<span class="built_in">str</span>.lower, reverse=<span class="literal">True</span>)</span><br><span class="line">[<span class="string">&#x27;Zoo&#x27;</span>, <span class="string">&#x27;Credit&#x27;</span>, <span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;about&#x27;</span>]</span><br></pre></td></tr></table></figure></li></ul><h4 id="函数嵌套-和闭包"><a href="#函数嵌套-和闭包" class="headerlink" title="函数嵌套 和闭包"></a>函数嵌套 和闭包</h4><h5 id="函数嵌套"><a href="#函数嵌套" class="headerlink" title="函数嵌套"></a>函数嵌套</h5><p>​函数嵌套是指在一个函数内部定义了另一个函数。这种嵌套的函数被称为内部函数，而包含它的外部函数被称为外部函数</p><p>嵌套的内部函数可以访问外部函数的参数，但是外部函数无法访问内部函数的参数。<br>如果想在内部函数内声明一个具有外部函数范围的参数可以使用<code>nolocal</code>关键字声明其为自由变量</p><p>优点：内部函数可以使用外部函数中的参数 (当内部函数使用了外部函数的参数时，就形成了闭包。)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">outer_function</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner_function</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This is inner function&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;This is outer function&quot;</span>)</span><br><span class="line">    inner_function()</span><br><span class="line">outer_function()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当嵌套函数传入的参数是函数，则会变成装饰器； 这样便得到一个参数类型，检查装饰器@check</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">add</span>):  <span class="comment"># 外部函数，接受一个add函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">new_add</span>(<span class="params">x, y</span>):  <span class="comment"># 内部函数</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(x, <span class="built_in">int</span>) <span class="keyword">or</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(y, <span class="built_in">int</span>):   <span class="comment"># 参数类型校验</span></span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;x,y两个参数必须是整数类型&#x27;</span>)</span><br><span class="line">        result = add(x,y)   <span class="comment"># 可以使用外部函数参数add并得到结果</span></span><br><span class="line">        <span class="comment"># return result</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> new_add   <span class="comment"># 返回替换后的new_add函数，具有函数add的功能，还加了参数检查功能</span></span><br></pre></td></tr></table></figure><h5 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h5><p>​闭包是指在一个内层函数中引用了其外层（封闭）作用域中变量的情况。这样的情况下，如果返回了内层函数，则该内层函数将继续保持对其封闭作用域中变量的引用，即使这些变量已经超出了其正常生命周期或者超出了原本作用域。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">counter</span>():</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">increment</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> count</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> increment</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建两个计数器实例</span></span><br><span class="line">counter1 = counter()</span><br><span class="line">counter2 = counter()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(counter1()) <span class="comment"># 输出: 1</span></span><br><span class="line"><span class="built_in">print</span>(counter1()) <span class="comment"># 输出: 2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(counter2()) <span class="comment"># 输出: 1</span></span><br><span class="line"><span class="built_in">print</span>(counter2()) <span class="comment"># 输出: 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：每个计数器实例都有自己独立的状态和计数值。</span></span><br></pre></td></tr></table></figure><h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h5><ul><li>函数嵌套是指在一个函数里定义另一个子级或者局部级别别名。</li><li>当子级或者局势级别师徒能够访问父级别名称空间时就形成了闭包关系。</li><li>这种情况下，如果返回了子级或者局势级别师徒则他将会继续保存父亲名称空间数据区块信息</li></ul><h4 id="递归函数和尾递归"><a href="#递归函数和尾递归" class="headerlink" title="递归函数和尾递归"></a>递归函数和尾递归</h4><h5 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h5><ol><li>必须有出口条件，如最后一层1，有明确的结果1。</li><li>每层只负责乘以本层数字，调用自己推给下一层</li><li>整个推导过程要逐步趋于出口</li></ol><p>递归函数是指在函数的定义中调用函数本身的过程。递归函数通常用于解决可以被分解为相同问题的子问题的情况，每次递归调用都会将问题规模缩小，直到达到基本情况（递归终止条件）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n-<span class="number">1</span>) <span class="comment"># 自己调用自己</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">factorial() 函数通过递归调用自身来计算阶乘。当 n 的值为 0 时，递归终止，返回 1。否则，函数会将问题规模缩小，将 n 乘以 factorial(n-1) 的结果。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(factorial(<span class="number">5</span>))  <span class="comment"># 输出: 120</span></span><br></pre></td></tr></table></figure><h5 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归"></a>尾递归</h5><p>尾递归是一种特殊的递归形式，指的是递归函数的最后一个操作是递归调用本身。在尾递归中，递归调用是函数的最后一步操作，不会再有其他操作。</p><p>尾递归函数可以通过优化来避免栈溢出的问题，因为它们可以被转换为循环的形式，不会在每次递归调用时创建新的栈帧。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算斐波那契数列的尾递归函数的示例</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fibonacci</span>(<span class="params">n, a=<span class="number">0</span>, b=<span class="number">1</span></span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fibonacci(n-<span class="number">1</span>, b, a+b)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">fibonacci() 函数使用尾递归的方式计算斐波那契数列。每次递归调用时，更新参数 a 和 b 的值，并将 n 的值减少，直到达到递归终止条件。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(fibonacci(<span class="number">6</span>))  <span class="comment"># 输出: 8</span></span><br></pre></td></tr></table></figure><h5 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h5><ul><li>递归函数是指在函数的定义中调用函数本身的过程，用于解决可以被分解为相同问题的子问题的情况。</li><li>尾递归是一种特殊的递归形式，指的是递归函数的最后一个操作是递归调用本身。</li><li>尾递归函数可以通过优化来避免栈溢出的问题，因为它们可以被转换为循环的形式，不会在每次递归调用时创建新的栈帧。</li></ul><h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><p>类（Class）和对象（Object），也称作实例（Instance）是面向对象编程（OOP)中的重要概念。类的主要作用如下：</p><ul><li>在同一模块中，对多个函数进行分组，并共享其中的变量；</li><li>按动作主体归类函数动作，使得逻辑更清晰。</li></ul><h3 id="面向过程及面向对象"><a href="#面向过程及面向对象" class="headerlink" title="面向过程及面向对象"></a>面向过程及面向对象</h3><p>面向过和面向对象是两种编程风格。</p><ul><li>面向过程：<strong>主要考虑功能的实现步骤和过程</strong>，即怎么去实现，多使用函数相互组合调用实现。</li><li>面向对象：<strong>主要考虑动作的主体和相互关系</strong>，即谁去实现，怎么配合，使用类的继承或组合实现。</li></ul><p>面向过程的实现逻辑如下：</p><ul><li>拆分过程</li><li>定义函数实现每个过程（过程可以包含子过程及相互调用）</li><li>在主函数中组合调用各个过程函数，完成整个流程。</li></ul><p>面向对象实现逻辑如下：</p><ul><li>根据动作主体进行建模，即需要几种对象（角色），每个对象需要哪些属性和方法</li><li>设计各个对象需要的类</li><li>在主流程中将每个类生成对象，组合对象完成整个流程操作。</li></ul><p><img src="/2023/06/14/python%E5%9F%BA%E7%A1%80/%E9%9D%A2%E7%9B%B8%E5%AF%B9%E8%B1%A1%E4%B8%8E%E9%9D%A2%E7%9B%B8%E8%BF%87%E7%A8%8B.png" alt="面相对象与面相过程"></p><h3 id="类与对象-实例-的关系"><a href="#类与对象-实例-的关系" class="headerlink" title="类与对象(实例)的关系"></a>类与对象(实例)的关系</h3><p>类是创建实例的模板，而实例则是一个一个具体的对象，各个实例拥有的数据都互相独立，互不影响；</p><h3 id="对象初始化方法"><a href="#对象初始化方法" class="headerlink" title="对象初始化方法"></a>对象初始化方法</h3><p>Python类中拥有很多魔术方法，起不同的作用，其中<code>__init__(self)</code>方法称作对象初始化方法，在调用类创建对象时自动调用，通常作用如下：</p><ul><li>将创建类传人的参数，绑定到对象属性</li><li>做一些对象初始化操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我是一个学生&#x27;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 创建对象时将自动将参数传递给对象，并打印初始化信息</span></span><br><span class="line">lilei = Student(<span class="string">&#x27;李磊&#x27;</span>, <span class="number">18</span>)  <span class="comment"># 创建对象</span></span><br><span class="line"><span class="built_in">print</span>(lilei.name, lilei.age)</span><br></pre></td></tr></table></figure><h3 id="类属性及实例属性"><a href="#类属性及实例属性" class="headerlink" title="类属性及实例属性"></a>类属性及实例属性</h3><p>类中的属性称为类属性 ( 类共享)，绑定self的属性称为实例属性 (实例独有)，同时实例自动继承类属性</p><ul><li>类属性：可以使用类名或对象访问</li><li>对象属性：一般使用对象进行访问</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    role = <span class="string">&#x27;学生&#x27;</span>  <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name  <span class="comment"># 对象属性</span></span><br><span class="line">        self.age = age    <span class="comment"># 对象属性</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lilei = Student(<span class="string">&#x27;李磊&#x27;</span>, <span class="number">18</span>)  <span class="comment"># 生成对象</span></span><br><span class="line"><span class="built_in">print</span>(lilei.role)  <span class="comment"># 使用对象引用类属性</span></span><br><span class="line"><span class="built_in">print</span>(lilei.name, lilei.age)  <span class="comment"># 使用对象引用对象属性</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Student.role)  <span class="comment"># 使用类名引用类属性</span></span><br></pre></td></tr></table></figure><h3 id="访问限制-私有变量"><a href="#访问限制-私有变量" class="headerlink" title="访问限制 - 私有变量"></a>访问限制 - 私有变量</h3><p>如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线<code>__</code>，在Python中，实例的变量名如果以<code>__</code>开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问</p><p>不能直接访问<code>__name</code>是因为Python解释器对外把<code>__name</code>变量改成了<code>_Student__name</code>，所以，仍然可以通过<code>_Student__name</code>来访问<code>__name</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, score</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__score = score</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_score</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s: %s&#x27;</span> % (self.__name, self.__score))</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_name</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_score</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__score</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_score</span>(<span class="params">self, score</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= score &lt;= <span class="number">100</span>:</span><br><span class="line">            self.__score = score</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;bad score&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="类方法、实例方法及静态方法"><a href="#类方法、实例方法及静态方法" class="headerlink" title="类方法、实例方法及静态方法"></a>类方法、实例方法及静态方法</h3><p>类和实例是两种不同的范畴，因此在类中可以实例方法，也可以有类方法，如果方法根类和实例都没有关系，则可以设置成静态方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    role = <span class="string">&#x27;学生&#x27;</span>  <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name  <span class="comment"># 对象属性</span></span><br><span class="line">        self.age = age    <span class="comment"># 对象属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">self</span>):  <span class="comment"># 实例方法，self代表实例本身</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_class_role</span>(<span class="params">cls</span>):  <span class="comment"># 类方法，cls代表当前类名</span></span><br><span class="line">        <span class="keyword">return</span> cls.role</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_datetime</span>():  <span class="comment"># 静态方法，与类和对象都无关 (无需访问类/对象属性或调用其方法)</span></span><br><span class="line">        <span class="keyword">return</span> datetime.now().strftime(<span class="string">&#x27;%Y%m%d %H:%M:%D&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用对象调用</span></span><br><span class="line">lilei = Student(<span class="string">&#x27;李磊&#x27;</span>, <span class="number">18</span>)  <span class="comment"># 生成对象</span></span><br><span class="line"><span class="built_in">print</span>(lilei.get_name())  <span class="comment"># 对象调用实例方法</span></span><br><span class="line"><span class="built_in">print</span>(lilei.get_class_role())  <span class="comment"># 对象调用类方法</span></span><br><span class="line"><span class="built_in">print</span>(lilei.get_datetime())  <span class="comment"># 对象调用静态方法</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">静态方法和静态类属性是所有类和实例共享的。它们属于类本身，而不是类的实例。因此，无论是通过类还是实例访问和修改静态方法或静态类属性，都会影响到所有的类和实例。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 使用类名调用，注意类名后不加括号(加括号是调用类并生成对象，即实际为对象）</span></span><br><span class="line"><span class="built_in">print</span>(Student.get_class_role())  <span class="comment"># 类名调用类方法</span></span><br><span class="line"><span class="built_in">print</span>(Student.get_datetime())    <span class="comment"># 类名调用静态方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类也可以调用对象实例方法，但是需要传入一个对象本身，将self指向该对象</span></span><br><span class="line"><span class="built_in">print</span>(Student.get_name(lilei))   <span class="comment"># 类名调用对象方法，需要一个对象</span></span><br></pre></td></tr></table></figure><h3 id="继承和多态"><a href="#继承和多态" class="headerlink" title="继承和多态"></a>继承和多态</h3><p>在OOP程序设计中，当我们定义一个class的时候，可以从某个现有的class继承，新的class称为子类（Subclass），而被继承的class称为基类、父类或超类（Base class、Super class）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Animal is running...&#x27;</span>)</span><br><span class="line">       </span><br><span class="line"><span class="comment"># 继承可以让子类获得了父类的全部功能</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):  <span class="comment"># 继承Animal</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Animal</span>):<span class="comment"># 继承Animal</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    重写是针对继承关系中的父类和子类，子类通过重写方法来改变继承自父类的方法的行为。</span></span><br><span class="line"><span class="string">重载是在同一个类中定义多个具有相同名称但参数列表不同的方法，通过参数的不同来区分方法的调用。</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):  <span class="comment"># 重写run方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Animal-Cat is running...&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="获取对象属性"><a href="#获取对象属性" class="headerlink" title="获取对象属性"></a>获取对象属性</h3><ul><li><p>dir()</p><p>获得一个对象的所有属性和方法，可以使用<code>dir()</code>函数，它返回一个包含字符串的list</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dir</span>(<span class="string">&#x27;ABC&#x27;</span>)</span><br><span class="line">[<span class="string">&#x27;__add__&#x27;</span>, <span class="string">&#x27;__class__&#x27;</span>,..., <span class="string">&#x27;__subclasshook__&#x27;</span>, <span class="string">&#x27;capitalize&#x27;</span>, <span class="string">&#x27;casefold&#x27;</span>,..., <span class="string">&#x27;zfill&#x27;</span>]</span><br></pre></td></tr></table></figure></li><li><p>__len__() or len()</p><p><code>len()</code>函数试图获取一个对象的长度，实际上，在<code>len()</code>函数内部，它自动去调用该对象的<code>__len__()</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(<span class="string">&#x27;ABC&#x27;</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;ABC&#x27;</span>.__len__()</span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给自己的类写一个__len__()方法</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">class</span> <span class="title class_">MyDog</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="number">100</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dog = MyDog()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(dog)</span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure></li><li><p>hasattr()</p><p>判断某个对象中是否有该属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hasattr</span>(obj1, <span class="string">&#x27;x&#x27;</span>) <span class="comment"># 有属性&#x27;x&#x27;吗？</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></li><li><p>getattr()</p><p>获取某个对象中的属性；当前属性不存在时会报错，建议结合hasattr() 使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">hasattr</span>(obj1, <span class="string">&#x27;x&#x27;</span>):</span><br><span class="line">    <span class="built_in">getattr</span>(obj1, <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"><span class="comment"># 通过第三个参数给默认值，当属性不存在时，返回默认值</span></span><br><span class="line"><span class="built_in">getattr</span>(obj1, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;属性不存在&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过getattr的返回值，把地址赋给fn变量</span></span><br><span class="line">fn = <span class="built_in">getattr</span>(obj1, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;属性不存在&#x27;</span>)</span><br><span class="line"><span class="comment"># 此时fn() 等同于 obj1.x()</span></span><br></pre></td></tr></table></figure></li><li><p>setattr()</p><p>给某个对象的属性设置新的值</p></li><li><p>MethodType()</p><p>给对象实例绑定方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> types <span class="keyword">import</span> MethodType</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_age</span>(<span class="params">self, age</span>): <span class="comment"># 定义一个函数作为实例方法</span></span><br><span class="line">self.age = age</span><br><span class="line">s = Student() <span class="comment"># 创建实例</span></span><br><span class="line"><span class="comment"># MethodType函数的第一个参数是方法，第二个参数是要绑定该方法的实例。</span></span><br><span class="line">s.set_age = MethodType(set_age, s) <span class="comment"># 给实例绑定一个方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 扩展：给class绑定方法，所有实例均可调用</span></span><br><span class="line">Student.set_age = set_age</span><br></pre></td></tr></table></figure></li></ul><h2 id="模块与包"><a href="#模块与包" class="headerlink" title="模块与包"></a>模块与包</h2><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><h4 id="一个-py脚本就是一个模块"><a href="#一个-py脚本就是一个模块" class="headerlink" title="一个.py脚本就是一个模块"></a>一个.py脚本就是一个模块</h4><p>当程序较为复杂时，我们可以将不同类型的功能拆分成不同的模块，每个模块建立一个.py脚本。这样做的好处是：</p><ul><li>不同模块负责不同部分的内容，逻辑更清晰；</li><li>公共模块部分可以复用；</li><li>模块拥有独立的命名空间（不同模块中可以拥有同名的变量&#x2F;函数&#x2F;类型）。</li></ul><h4 id="模块导入"><a href="#模块导入" class="headerlink" title="模块导入"></a>模块导入</h4><p>一个模块可以导入其他模块，；但要避免循环导入，导入的名不能与当前模块重名</p><ul><li><p>import moudle</p><p>如<code>import time</code>，此时模块名被导入到当前命名空间，使用模块名引用其中的函数，如<code>time.sleep(1)</code></p></li><li><p>from moudle import …</p><p>如果要最小导入到模块，不能直接使用import 导入模块中的变量&#x2F;函数&#x2F;类，如<code>import time.sleep</code>；要使用<code>from .. import ...</code>语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分开导入</span></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> localtime <span class="keyword">as</span> lt <span class="comment"># 如果一个模块的函数名太长，可以使用as别名，在该模块下可以使用别名来使用该函数 localtime() 等同于 lt()</span></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep </span><br><span class="line"></span><br><span class="line"><span class="comment"># 一起导入</span></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> localtime, sleep</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一起导入</span></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> (localtime, sleep)</span><br></pre></td></tr></table></figure></li><li><p>from moudle import *</p><p>如，<code>from time import *</code>，将导入<code>time</code>模块所有，非下划线<code>_</code>开头的变量&#x2F;函数&#x2F;类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># aaa.py</span></span><br><span class="line">__all__ = [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]  <span class="comment"># 设置from b import * 时只导入b和c变量</span></span><br><span class="line"></span><br><span class="line">b = <span class="number">1</span></span><br><span class="line">_b = <span class="number">2</span>  <span class="comment"># 下划线开头到变量视为私有变量，from b import * 时不会被导入</span></span><br><span class="line">c = <span class="number">3</span></span><br><span class="line">d = <span class="number">4</span>  <span class="comment"># __all__ 设置了不会导入d变量</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bbb.py</span></span><br><span class="line"><span class="keyword">from</span> b <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="number">4</span> <span class="comment"># 将覆盖b中导入的c</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment"># print(d)  # 由于没有导入d，因此打印d会报错</span></span><br><span class="line"><span class="comment"># print(_b)  # 由于没有导入d，因此打印d会报错</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">如果想使用b模块的私有变量_b，可以使用import b; print(b._b)，或 from b import _b; print(_b)等方式</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">这种方式是不被推荐的，原因如下：</span></span><br><span class="line"><span class="string">不知道都导入了哪些变量/模块/类；</span></span><br><span class="line"><span class="string">把其他模块的变量全部导入到当前命名空间，可能导致名称覆盖（重复），及来源不清楚。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="模块导入常见问题"><a href="#模块导入常见问题" class="headerlink" title="模块导入常见问题"></a>模块导入常见问题</h4><h5 id="主模块和导入模块"><a href="#主模块和导入模块" class="headerlink" title="主模块和导入模块"></a>主模块和导入模块</h5><p>模块分为主模块和导入模块，当前执行模块被称为主模块，其他被导入的模块称为导入模块。可以使用Python魔术变量<code>__name__</code>（注意不加引号)，来查看当前模块是否主模块。<br>如果当前模块为主模块时，模块名<code>__name__</code>为字符串<code>&#39;__main__&#39;</code>;因此在模块中常用<code>if __name__ == &#39;__main__&#39;</code>来判断当前模块是不是主模块（即是不是以当前脚本为开始运行的）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;b模块，当前模块名&#x27;</span>, __name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;模块私有代码，只有b模块自己运行才会输出，别的模块导入不会输出&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="间接导入问题"><a href="#间接导入问题" class="headerlink" title="间接导入问题"></a>间接导入问题</h5><p>间接导入是指a模块导入b模块，b模块导入c模块，运行a模块时c模块被间接导入</p><p>根本原因是：相对路径问题</p><p>例如：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">假如目录结构为：</span><br><span class="line">project/</span><br><span class="line">    package1/</span><br><span class="line">        __init__.py</span><br><span class="line">        ccc.py</span><br><span class="line">        bbb.py</span><br><span class="line">    package2/</span><br><span class="line">        __init__.py</span><br><span class="line">        aaa.py</span><br></pre></td></tr></table></figure><p>aaa.py 导入了bbb.py  ，但是 bbb.py 里面已经导入了ccc.py<br>此时，运行a.py，间接导入c模块时便会出现异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    ...</span><br><span class="line">    <span class="keyword">import</span> ccc</span><br><span class="line">ModuleNotFoundError: No module named <span class="string">&#x27;ccc&#x27;</span></span><br></pre></td></tr></table></figure><p>原因为，运行a.py时，间接导入<code>import c</code>时，只会在a.py所在目录（当前运行目录是package2, 在bbb.py 中导入的路径是package1，导致找不到模块ccc.py）及PYTHONPATH、三方包site-packages中查找。而不会切换目录到b.py所在目录进行查找。</p><p>需要为当前python模块添加package1添加环境变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前脚本文件的路径</span></span><br><span class="line">current_file_path = os.path.abspath(__file__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前文件所在目录的父目录（即项目根目录）</span></span><br><span class="line">project_root = os.path.dirname(os.path.dirname(current_file_path))</span><br><span class="line"><span class="comment"># 添加到环境变量中</span></span><br><span class="line">sys.path.append(project_root)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="循环导入问题"><a href="#循环导入问题" class="headerlink" title="循环导入问题"></a>循环导入问题</h5><p>​循环导入指a导入了b模块，b模块又直接或间接导入了a模块</p><ul><li>使用<code>import 模块</code> 导入时，允许循环导入，模块只在第一次导入时及作为主模块时运行</li><li>使用<code>from ... import ...</code>时不允许循环导入</li></ul><p>处理方法有以下几种：</p><ul><li>使用<code>import 模块</code>方式导入</li><li>将<code>from ... import ...</code>改到函数内部（延迟执行）</li><li>使用包<code>__init__.py</code>统一规划导入方式</li></ul><h5 id="导入立即执行及调用-延迟-执行"><a href="#导入立即执行及调用-延迟-执行" class="headerlink" title="导入立即执行及调用(延迟)执行"></a>导入立即执行及调用(延迟)执行</h5><p>在导入模块时，有些是立即执行，有些时调用时才执行的</p><p>第一次导入模块时立即执行的有：</p><ul><li>直接写模块中的语句</li><li>装饰器</li><li>类变量</li></ul><p>调用时才执行的有：</p><ul><li>定义的函数</li><li>定义的类及方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">deco</span>(<span class="params">func</span>):   <span class="comment"># 装饰器函数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;调用 %s&#x27;</span> % func.__name__)</span><br><span class="line">    <span class="keyword">return</span> func</span><br><span class="line"></span><br><span class="line"><span class="meta">@deco  </span><span class="comment"># 装饰器调用，第一次导入模块时立即执行</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):  <span class="comment"># 函数定义，调用函数时执行</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s+%s&#x27;</span> % (x, y))</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line">s1 = add(<span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># 模块语句，第一次导入模块时立即执行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Calc</span>:  <span class="comment"># 类定义，调用类(生成对象时) 执行__init__方法</span></span><br><span class="line">    s2 = add(<span class="number">3</span>, <span class="number">4</span>)  <span class="comment"># 类属性，第一次导入模块时立即执行</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;对象初始化&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sub</span>(<span class="params">self, x, y</span>):  <span class="comment"># 对象方法，调用时执行</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s-%s&#x27;</span> % (x, y))</span><br><span class="line">        <span class="keyword">return</span> x - y</span><br></pre></td></tr></table></figure><h3 id="包-package"><a href="#包-package" class="headerlink" title="包 package"></a>包 package</h3><h4 id="包Package"><a href="#包Package" class="headerlink" title="包Package"></a>包Package</h4><p>当拥有多个模块时，我们可以使用包来组织同一类别或层次的模块。在Python<br><strong>在Python中，一个目录被视为包</strong>，包中可以包含其他子包（子目录），包中不强制必须有<code>__init__.py</code>文件。<br>包中可以包含<code>__init__.py</code>文件作为包的初始化配置，<code>__init__.py</code>可以为空。<br>在Python3中，目录中是否包含<code>__init__.py</code>机会没有区别，我们可以使用Python魔术变量__pacakge__查看当前模块所在包路径。</p><p>ython中常用的魔术变量如下：</p><ul><li><code>__file__</code>：表示当前脚本路径</li><li><code>__name__</code>: 表示当前模块导入路径，作为主模块时（当前运行脚本)，其值为<code>&#39;__main__&#39;</code>，否则为其模块导入路径</li><li><code>__package__</code>: 当前包导入路径，作为主模块时（当前运行脚本)，其值为<code>None</code>，否则为其模块所在包导入路径</li><li><code>__buildins__</code>: 当前所有可用内置变量&#x2F;函数组成的字典</li></ul><h4 id="导入包及模块"><a href="#导入包及模块" class="headerlink" title="导入包及模块"></a>导入包及模块</h4><p>同模块导入一样，包的导入也支持<code>import ...</code>和<code>from ... import ...</code>两种导入方式</p><h4 id="导入包或子包"><a href="#导入包或子包" class="headerlink" title="导入包或子包"></a>导入包或子包</h4><p>在main.py中，可以使用如下语句导入包或子包</p><ul><li>import package</li><li>import package.sub_package</li></ul><p>此时实际导入的是<code>package/__init__.py</code>,及<code>package/sub_package/__init__.py</code></p><h4 id="包中-init-py的作用"><a href="#包中-init-py的作用" class="headerlink" title="包中__init__.py的作用"></a>包中<code>__init__.py</code>的作用</h4><p>包中的<code>__init__.py</code>常用作包的初始配置，常见使用场景如下：</p><ul><li>导入包时进行一些初始化操作</li><li>修改包中模块的导入设置</li></ul><p>从包中导入模块时的查找顺序为，先从包<code>__init__.py</code>中查找同名变量，如果没有，则在包所在目录中查找同名脚本（模块）。<br>一般可以使用__init__.py来整理包所要暴露的模块及功能（模块中的变量&#x2F;函数&#x2F;类）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># package/__init__.py</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> a</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> b</span><br><span class="line"><span class="keyword">from</span> .sub_package <span class="keyword">import</span> c</span><br><span class="line"><span class="keyword">from</span> .a <span class="keyword">import</span> var_a</span><br><span class="line"><span class="keyword">from</span> .b <span class="keyword">import</span> var_b</span><br><span class="line"><span class="keyword">from</span> .sub_package.c <span class="keyword">import</span> var_c</span><br></pre></td></tr></table></figure><p>此时我们便可以直接通过package导入所暴露的变量，例如在main.py中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过模块直接导入</span></span><br><span class="line"><span class="keyword">from</span> package <span class="keyword">import</span> a, b, c, var_a, var_b, var_c</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a.var_a, b.var_b, c.var_c)</span><br><span class="line"><span class="built_in">print</span>(var_a, var_b, var_c)</span><br></pre></td></tr></table></figure><p>同时，在包<code>__init__.py</code>中也可以下划线开头的私有变量，及使用<code>__all__</code>变量来限制<code>from package import *</code>时导入的全部变量。</p><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="纯文本文件读取"><a href="#纯文本文件读取" class="headerlink" title="纯文本文件读取"></a>纯文本文件读取</h3><ul><li><p><strong>读取全部内容</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;demo.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">data = f.read()  <span class="comment"># 读取文件全部内容</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li><li><p><strong>按行读取</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;demo.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">line = f.readline()  <span class="comment"># 读取一行(包括结尾的换行符)</span></span><br><span class="line"><span class="built_in">print</span>(line)</span><br><span class="line">line = f.readline()  <span class="comment"># 读取下一行(包括结尾的换行符)</span></span><br><span class="line"><span class="built_in">print</span>(line)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li><li><p><strong>结合for循环按行读取文件全部内容</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;demo.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():   <span class="comment"># 也可以直接 for line in f:</span></span><br><span class="line">    <span class="built_in">print</span>(line)  <span class="comment"># 每一行内容包括结尾的换行符</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li></ul><h3 id="纯文本文件写入"><a href="#纯文本文件写入" class="headerlink" title="纯文本文件写入"></a>纯文本文件写入</h3><ul><li><p><strong>写入整段文本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="string">&#x27;&#x27;&#x27;hello</span></span><br><span class="line"><span class="string">world</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;demo2.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    f.write(data)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li><li><p><strong>写入多行数据</strong><br>有一行一行文本组成的列表型数据，可以使用f.writelines()写入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="string">&#x27;hello\n&#x27;</span>, <span class="string">&#x27;world\n&#x27;</span>]</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;demo2.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    f.writelines(data)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li></ul><h3 id="使用上下文格式自动关闭文件"><a href="#使用上下文格式自动关闭文件" class="headerlink" title="使用上下文格式自动关闭文件"></a>使用上下文格式自动关闭文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 退出with语句(如print时)，自动关闭文件。</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;demo.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><h3 id="非纯文件读写"><a href="#非纯文件读写" class="headerlink" title="非纯文件读写"></a>非纯文件读写</h3><p>二进制格式读写图片等非二进制文件，有一张图片hua.jpg，我们可以读写来复制文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用二进制读/写模式打开时无需指定编码</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;hua.jpg&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;hua_copy.jpg&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(data)</span><br></pre></td></tr></table></figure><h3 id="读写模式"><a href="#读写模式" class="headerlink" title="读写模式"></a>读写模式</h3><table><thead><tr><th>标示</th><th>文本模式 (默认)。</th></tr></thead><tbody><tr><td>x</td><td>写模式，新建一个文件，如果该文件已存在则会报错。</td></tr><tr><td>b</td><td>二进制模式。</td></tr><tr><td>+</td><td>打开一个文件进行更新(可读可写)。</td></tr><tr><td>U</td><td>通用换行模式（Python 3 不支持）。</td></tr><tr><td>r</td><td>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td>rb</td><td>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。</td></tr><tr><td>r+</td><td>打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td>rb+</td><td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。</td></tr><tr><td>w</td><td>打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>wb</td><td>以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td>w+</td><td>打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>wb+</td><td>以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td>a</td><td>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>ab</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>a+</td><td>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td>ab+</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><h3 id="其他类型文件读取"><a href="#其他类型文件读取" class="headerlink" title="其他类型文件读取"></a>其他类型文件读取</h3><h4 id="数据及配置文件之争"><a href="#数据及配置文件之争" class="headerlink" title="数据及配置文件之争"></a>数据及配置文件之争</h4><p>数据及文件通常有三种类型：</p><ol><li>配置文件型：如ini，conf，properties文件，适合存储简单变量和配置项，最多支持两层，不适合存储多层嵌套数据</li><li>表格矩阵型：如csv，excel等，适合于存储大量同类数据，不适合存储层级结构的数据</li><li>多层嵌套型：如XML，HTMl，JSON、YAML，TOML等，适合存储单条或少数多层嵌套数据，不适合存储大量数据</li></ol><h4 id="CSV文件"><a href="#CSV文件" class="headerlink" title="CSV文件"></a>CSV文件</h4><p>​CSV(Comma-Separated Values)即逗号分隔值，一种以逗号分隔按行存储的文本文件，所有的值都表现为字符串类型（注意：数字为字符串类型）。<br>​如果CSV中有中文，应以utf-8编码读写，如果要支持Excel查看，应是要用utf-8 with bom格式及utf-8-sig</p><h5 id="Python3操作CSV文件使用自带的csv包"><a href="#Python3操作CSV文件使用自带的csv包" class="headerlink" title="Python3操作CSV文件使用自带的csv包"></a>Python3操作CSV文件使用自带的csv包</h5><ul><li>reader&#x3D;csv.reader(f, delimiter&#x3D;’,’)：用来读取数据，reader为生成器，每次读取一行，每行数据为列表格式，可以通过delimiter参数指定分隔符</li><li>writer&#x3D;csv.writer(f)：用来写入数据，按行写入，writer支持writerow(列表)单行写入，和writerows(嵌套列表)批量写入多行，无须手动保存。</li><li>当文件中有标题行时，可以使用header&#x3D;next(reader)先获取到第一行的数据，再进行遍历所有的数据行。</li><li>写入时，可以先使用writer.writerow(标题行列表)，写入标题行，再使用writer.writerows(多行数据嵌套列表)，写入多行数据（也可以逐行写入）。</li></ul><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 数据文件data.csv</span><br><span class="line">name,password,status</span><br><span class="line">abc,123456,</span><br><span class="line">张五,123#456,</span><br><span class="line">张#abc123,123456,</span><br><span class="line">666,123456,</span><br><span class="line">a b,123456,</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># getCsvFile.py  读取</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.csv&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># 读取数据，reader为生成器，每次读取一行，每行数据为列表格式</span></span><br><span class="line">    reader = csv.reader(f)</span><br><span class="line">    header = <span class="built_in">next</span>(reader)</span><br><span class="line">    <span class="built_in">print</span>(header)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">        <span class="built_in">print</span>(row)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">reader必须在文件打开的上下文中使用，否则文件被关闭后reader无法使用</span></span><br><span class="line"><span class="string">所有的数字被作为字符串，如果要使用数字格式，应使用int()/float()做相应转换</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># setCsvFile.py  写入</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">header = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;password&#x27;</span>, <span class="string">&#x27;status&#x27;</span>]</span><br><span class="line"></span><br><span class="line">data = [</span><br><span class="line">    [<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;PASS&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;张五&#x27;</span>, <span class="string">&#x27;123#456&#x27;</span>, <span class="string">&#x27;PASS&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;张#abc123&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;PASS&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;666&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;PASS&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;a b&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;PASS&#x27;</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;result.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    writer = csv.writer(f)</span><br><span class="line">    writer.writerow(header)</span><br><span class="line">    writer.writerows(data)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">打开文件时应指定格式为w, 文本写入，不支持wb,二进制写入，当然，也可以使用a/w+/r+</span></span><br><span class="line"><span class="string">打开文件时，指定不自动添加新行newline=&#x27;&#x27;,否则每写入一行就或多一个空行。</span></span><br><span class="line"><span class="string">如果想写入的文件Excel打开没有乱码，utf-8可以改为utf-8-sig。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="使用字典格式的数据：DictReader-DictWriter"><a href="#使用字典格式的数据：DictReader-DictWriter" class="headerlink" title="使用字典格式的数据：DictReader, DictWriter"></a>使用字典格式的数据：DictReader, DictWriter</h5><p>​!!! 使用此方法时，必须有标题行才能使用</p><ul><li>reader&#x3D;csv.DictReader(f)：直接将标题和每一列数据组装成有序字典（OrderedDict）格式，无须再单独读取标题行</li><li>writer&#x3D;csv.DictWriter(f, 标题行列表)：写入时可使用writer.writeheader()写入标题，然后使用writer.writerow(字典格式数据行)或write.writerows(多行数据)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># getCsvFile.py</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.csv&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    reader = csv.DictReader(f)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">        <span class="built_in">print</span>(row[<span class="string">&#x27;name&#x27;</span>], row[<span class="string">&#x27;password&#x27;</span>],row[<span class="string">&#x27;status&#x27;</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># setCsvFile.py</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">header = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;password&#x27;</span>, <span class="string">&#x27;status&#x27;</span>]</span><br><span class="line"></span><br><span class="line">data = [</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;status&#x27;</span>:<span class="string">&#x27;PASS&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;张五&#x27;</span>, <span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;123#456&#x27;</span>, <span class="string">&#x27;status&#x27;</span>:<span class="string">&#x27;PASS&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;张#abc123&#x27;</span>, <span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;status&#x27;</span>:<span class="string">&#x27;PASS&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;666&#x27;</span>, <span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;status&#x27;</span>:<span class="string">&#x27;PASS&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;a b&#x27;</span>, <span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;status&#x27;</span>:<span class="string">&#x27;PASS&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;result2.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    writer = csv.DictWriter(f, header)</span><br><span class="line">    writer.writeheader()</span><br><span class="line">    writer.writerows(data)</span><br></pre></td></tr></table></figure><h4 id="ini文件"><a href="#ini文件" class="headerlink" title="ini文件"></a>ini文件</h4><p>​ini文件即Initialization File初始化文件，在应用程序及框架中常作为配置文件使用，是一种静态纯文本文件，使用记事本即可编辑。<br>​配置文件的主要功能就是存储一批变量和变量值，在ini文件中使用<code>[章(Section)]</code>对变量进行了分组，基本格式如下。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: config.ini</span></span><br><span class="line"><span class="section">[user]</span></span><br><span class="line"><span class="attr">name</span>=admin</span><br><span class="line"><span class="attr">password</span>=<span class="number">123456</span></span><br><span class="line"><span class="attr">is_admin</span>=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="attr">host</span>=<span class="number">10.10</span>.<span class="number">10.10</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="attr">db</span>=apitest</span><br><span class="line"><span class="attr">user</span>=root</span><br><span class="line"><span class="attr">password</span>=<span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="section">[log]</span></span><br><span class="line"><span class="attr">file</span>=run.log</span><br><span class="line"><span class="attr">level</span>=info</span><br></pre></td></tr></table></figure><p>以上文件中，有3个Section段，分别user、mysql和log<br>ini文件中使用<code>#</code>或者<code>;</code>添加注释，最好独占一行，不能写在变量后面</p><h5 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h5><p>读取ini配置文件需要使用Python3自带的configparser库，使用示例如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> configparser <span class="keyword">import</span> ConfigParser   <span class="comment"># Python2中是from ConfigParser import ConfigParser</span></span><br><span class="line"></span><br><span class="line">conf = ConfigParser()  <span class="comment"># 需要实例化一个ConfigParser对象</span></span><br><span class="line">conf.read(<span class="string">&#x27;config.ini&#x27;</span>)  <span class="comment"># 需要添加上config.ini的路径，不需要open打开，直接给文件路径就读取，也可以指定encoding=&#x27;utf-8&#x27;</span></span><br><span class="line"><span class="comment"># conf对象每个section段的数据类似于一个字典，可以使用[&#x27;变量名&#x27;]或者.get(&#x27;变量名&#x27;)获取对应的值，获取到的是字符串格式。</span></span><br><span class="line"><span class="built_in">print</span>(conf[<span class="string">&#x27;user&#x27;</span>][<span class="string">&#x27;name&#x27;</span>])  <span class="comment"># 读取user段的name变量的值，字符串格式</span></span><br></pre></td></tr></table></figure><p>其他常用的读取方法如下：</p><ul><li>conf.sections(): 获取所有的section名，结果[‘user’, ‘mysql’, ‘log’]</li><li>conf[‘mysql’][‘port’]: 获取section端port变量的值，字符串格式</li><li>conf[‘mysql’].get(‘port’): 同上，字符串格式</li><li>conf.get(‘mysql’, ‘port’): 同上，字符串格式</li><li>conf[‘mysql’].getint(‘port’): 获取对应变量的整型值</li><li>conf[‘mysql’].getfloat(‘port’): 获取对应变量的浮点型值</li><li>conf[‘user’].getboolean(‘is_admin’): 获取对应变量的布尔值，支持配置为<code>yes/no, on/‘off, true/false 和 1/0</code>，都可以转化为Python中的True&#x2F;False</li><li>conf.has_section(section)：检查是否有该section</li><li>conf.options(section)：输出section中所有的变量名</li><li>conf.has_option(section, option)：检查指定section下是否有该变量值</li></ul><p>如果想遍历一个section所有的变量和值，可以像遍历字典意义操作，示例如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> conf[<span class="string">&#x27;mysql&#x27;</span>].items():</span><br><span class="line">    <span class="built_in">print</span>(key, value)</span><br><span class="line"><span class="comment"># ini文件中的变量名是大小写不敏感的，而Section名是大小写敏感的。</span></span><br></pre></td></tr></table></figure><h5 id="公共变量"><a href="#公共变量" class="headerlink" title="公共变量"></a>公共变量</h5><p>假如我们每个Section变量组都有一批相同的重复变量，如：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[dev]</span></span><br><span class="line"><span class="comment"># 开发环境</span></span><br><span class="line"><span class="attr">user</span>=admin</span><br><span class="line"><span class="attr">password</span>=<span class="number">123456</span></span><br><span class="line"><span class="attr">base_url</span>=http://localhost:<span class="number">7777</span></span><br><span class="line"></span><br><span class="line"><span class="section">[test]</span></span><br><span class="line"><span class="comment"># 测试环境</span></span><br><span class="line"><span class="attr">user</span>=admin</span><br><span class="line"><span class="attr">password</span>=<span class="number">123456</span></span><br><span class="line"><span class="attr">base_url</span>=http://test.abc.com</span><br><span class="line"></span><br><span class="line"><span class="section">[prod]</span></span><br><span class="line"><span class="comment"># 生产环境</span></span><br><span class="line"><span class="attr">user</span>=admin</span><br><span class="line"><span class="attr">password</span>=<span class="number">123456</span></span><br><span class="line"><span class="attr">base_url</span>=http://www.abc.com</span><br></pre></td></tr></table></figure><p>对应这种，我们可以设置[DEFAULT]段公用变量，公用变量会自动添加到每一个段中，修改后如下</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[DEFAULT]</span></span><br><span class="line"><span class="attr">user</span>=admin</span><br><span class="line"><span class="attr">password</span>=<span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="section">[dev]</span></span><br><span class="line"><span class="comment"># 开发环境</span></span><br><span class="line"><span class="attr">base_url</span>=http://localhost:<span class="number">7777</span></span><br><span class="line"></span><br><span class="line"><span class="section">[test]</span></span><br><span class="line"><span class="comment"># 测试环境</span></span><br><span class="line"><span class="attr">base_url</span>=http://test.abc.com</span><br><span class="line"></span><br><span class="line"><span class="section">[prod]</span></span><br><span class="line"><span class="comment"># 生产环境</span></span><br><span class="line"><span class="attr">base_url</span>=http://www.abc.com</span><br></pre></td></tr></table></figure><h5 id="参数化"><a href="#参数化" class="headerlink" title="参数化"></a>参数化</h5><p>在ini文件中我们还可以使用<code>%(变量名)s</code>的占位符进行参数化，这种特性被称为Interpolation(插值)。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[DEFAULT]</span></span><br><span class="line"><span class="attr">url</span> = %(base_url)s/get?a=%(a)s&amp;b=%(b)s</span><br><span class="line"><span class="attr">base_url</span>=https://httpbin.org</span><br><span class="line"></span><br><span class="line"><span class="section">[dev]</span></span><br><span class="line"><span class="comment"># 开发环境</span></span><br><span class="line"><span class="attr">base_url</span>=http://localhost:<span class="number">5555</span></span><br><span class="line"><span class="attr">a</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">b</span>=<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="section">[prod-case1]</span></span><br><span class="line"><span class="comment"># 生成环境-场景1</span></span><br><span class="line"><span class="attr">a</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">b</span>=<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="section">[prod-case2]</span></span><br><span class="line"><span class="comment"># 生成环境-场景2</span></span><br><span class="line"><span class="attr">a</span>=kevin</span><br><span class="line"><span class="attr">b</span>=male</span><br></pre></td></tr></table></figure><p>上例中，我们在[DEFAULT]段设置了一个参数化的公用变量url，其中埋设了三个占位符，%(base_url)s、%(a)s、和%(b)s。<br>并且我们设置了base_url变量的默认值为<a href="https://httpbin.org./">https://httpbin.org。</a><br>当下面的section中没有覆盖该变量时，如prod-case1和prod-case2中，是用base_url的默认值。</p><p>!!!  每个section段中，加上默认变量base_url，必须提供所有参数化变量的值，比如此例中每个段最少必须设置a和b的值，否则会报错。</p><p>在Python脚本中打印<code>conf[&#39;prod-case2&#39;][&#39;url&#39;]</code>，可以得到组装后的url。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base_url = conf[<span class="string">&#x27;prod-case2&#x27;</span>][<span class="string">&#x27;url&#x27;</span>] <span class="comment"># https://httpbin.org/get?a=kevin&amp;b=male</span></span><br></pre></td></tr></table></figure><h5 id="修改保存"><a href="#修改保存" class="headerlink" title="修改保存"></a>修改保存</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> configparser <span class="keyword">import</span> ConfigParser</span><br><span class="line"><span class="keyword">from</span> configparser <span class="keyword">import</span> ConfigParser</span><br><span class="line"></span><br><span class="line">conf = ConfigParser()</span><br><span class="line"></span><br><span class="line">conf.read(<span class="string">&#x27;httpbin.ini&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="comment"># 如果新建的话就不需要read,如果修改则需要使用read打开</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用set() 方法修改</span></span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&#x27;DEFAULT&#x27;</span>, <span class="string">&#x27;url&#x27;</span>, <span class="string">&#x27;%(base_url)s/get?a=%(a)s&amp;b=%(b)s&#x27;</span>)  <span class="comment"># 可以设置DEFAULT段的值</span></span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&#x27;DEFAULT&#x27;</span>, <span class="string">&#x27;base_url&#x27;</span>, <span class="string">&#x27;https://httpbin.org&#x27;</span>)  <span class="comment"># 可以设置DEFAULT段的值</span></span><br><span class="line">conf.add_section(<span class="string">&#x27;dev&#x27;</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&#x27;dev&#x27;</span>, <span class="string">&#x27;base_url&#x27;</span>, <span class="string">&#x27;http://localhost:5555&#x27;</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&#x27;dev&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)  <span class="comment"># 值必须是字符串</span></span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&#x27;dev&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用下标的方式</span></span><br><span class="line">conf[<span class="string">&#x27;prod-case1&#x27;</span>] = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;  <span class="comment"># 直接使用字典添加多个变量</span></span><br><span class="line">conf[<span class="string">&#x27;prod-case2&#x27;</span>] = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;kevin&#x27;</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;male&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(conf.get(<span class="string">&#x27;dev&#x27;</span>, <span class="string">&#x27;url&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(conf.get(<span class="string">&#x27;prod-case1&#x27;</span>, <span class="string">&#x27;url&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(conf.get(<span class="string">&#x27;prod-case2&#x27;</span>, <span class="string">&#x27;url&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存csv</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;httpbin.ini&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    conf.write(f)</span><br></pre></td></tr></table></figure><h4 id="JSON文件"><a href="#JSON文件" class="headerlink" title="JSON文件"></a>JSON文件</h4><p>JSON(JavaScript Object Notation)即JavaScript对象表示法,一种轻量级，通用的<strong>文本</strong>数据格式。<br>JSON语法支持对象（Object），数组（Array），字符串，数字（int&#x2F;float）以及true&#x2F;false和null。<br>JSON拥有严格的格式，主要格式如下：</p><ul><li>只能用双引号，不能用单引号</li><li>元素之间用逗号隔开，最后一个元素不能有逗号</li><li>不支持注释</li><li>中文等特殊字符传输时应确保转为ASCII码（\uXXX格式）</li><li>支持多层嵌套Object或Array</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Cactus&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skills&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;Python&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Java&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Go&quot;</span><span class="punctuation">,</span> <span class="string">&quot;NodeJS&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;has_blog&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;gf&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="JSON与Python数据类型的对应关系"><a href="#JSON与Python数据类型的对应关系" class="headerlink" title="JSON与Python数据类型的对应关系"></a>JSON与Python数据类型的对应关系</h5><table><thead><tr><th>JSON</th><th>Python</th></tr></thead><tbody><tr><td>Object</td><td>字典</td></tr><tr><td>Array</td><td>列表</td></tr><tr><td>字符串</td><td>字符串</td></tr><tr><td>数字</td><td>数字（int&#x2F;float）</td></tr><tr><td>true&#x2F;false</td><td>True&#x2F;False</td></tr><tr><td>null</td><td>Null</td></tr></tbody></table><h5 id="JSON字符串与Python字典的相互转换"><a href="#JSON字符串与Python字典的相互转换" class="headerlink" title="JSON字符串与Python字典的相互转换"></a>JSON字符串与Python字典的相互转换</h5><p>!!!  为什么要相互转换，JSON是字符串，方便存储传输，不方便提取值；字典是内存中的数据结构，取值方便，不方便传输和存储</p><p>使用Python自带的json包可以完成字典与JSON字符串的相互转换</p><ul><li>json.dumps(字典)：将字典转为JSON字符串</li><li>json.loads(JSON字符串)：将JSON字符串转为字典，如果字符串不是合法的JSON格式，会报JSONDecodeError</li></ul><p><strong>字典转JSON字符串</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">dict_var = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Cactus&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, </span><br><span class="line">    <span class="string">&#x27;skills&#x27;</span>: [<span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;Go&#x27;</span>, <span class="string">&#x27;NodeJS&#x27;</span>], </span><br><span class="line">    <span class="string">&#x27;has_blog&#x27;</span>: <span class="literal">True</span>, </span><br><span class="line">    <span class="string">&#x27;gf&#x27;</span>: <span class="literal">None</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(json.dumps(dict_var))</span><br><span class="line"><span class="built_in">print</span>(json.dumps(dict_var, indent=<span class="number">2</span>,sort_keys=<span class="literal">True</span>, ensure_ascii=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure><p><strong>JSON字符串转字典</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">json_str = <span class="string">&#x27;&#x27;&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;name&quot;: &quot;Cactus&quot;,</span></span><br><span class="line"><span class="string">    &quot;age&quot;: 18,</span></span><br><span class="line"><span class="string">    &quot;skills&quot;: [&quot;Python&quot;, &quot;Java&quot;, &quot;Go&quot;, &quot;NodeJS&quot;],</span></span><br><span class="line"><span class="string">    &quot;has_blog&quot;: true,</span></span><br><span class="line"><span class="string">    &quot;gf&quot;: null</span></span><br><span class="line"><span class="string">&#125;&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(json.loads(json_str))</span><br></pre></td></tr></table></figure><h5 id="JSON文件与字典的相互转换"><a href="#JSON文件与字典的相互转换" class="headerlink" title="JSON文件与字典的相互转换"></a>JSON文件与字典的相互转换</h5><p>将字典保存为JSON文件或从JSON文件转为字典</p><ul><li>json.dump(字典, f)：将字典转为JSON文件（句柄）</li><li>json.loads(f)：将打开的JSON文件句柄转为字典</li></ul><p><strong>字典转成JSON文件</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">dict_var = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Cactus&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, </span><br><span class="line">    <span class="string">&#x27;skills&#x27;</span>: [<span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;Go&#x27;</span>, <span class="string">&#x27;NodeJS&#x27;</span>], </span><br><span class="line">    <span class="string">&#x27;has_blog&#x27;</span>: <span class="literal">True</span>, </span><br><span class="line">    <span class="string">&#x27;gf&#x27;</span>: <span class="literal">None</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;demo2.json&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># json.dump(dict_var, f)  # 写为一行</span></span><br><span class="line">    json.dump(dict_var, f,indent=<span class="number">2</span>,sort_keys=<span class="literal">True</span>, ensure_ascii=<span class="literal">False</span>)  <span class="comment"># 写为多行</span></span><br></pre></td></tr></table></figure><p><strong>JSON文件转成字典</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;demo2.json&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = json.load(f)</span><br><span class="line"></span><br><span class="line">pritn(data)</span><br></pre></td></tr></table></figure><p>!!! 字典转为JSON时，只支持嵌套字典、列表、字符串、数字、True&#x2F;False&#x2F;None等，不支持日期对象以及Python的其他对象<br>!!! 解析复杂嵌套JSON格式，请使用JSONPath</p><h4 id="YAML-文件"><a href="#YAML-文件" class="headerlink" title="YAML 文件"></a>YAML 文件</h4><p>​YAML兼容JSON格式，简洁，强大，灵活，可以很方便的构造层级数据并快速转为Python中的字典。</p><h5 id="yaml简介"><a href="#yaml简介" class="headerlink" title="yaml简介"></a>yaml简介</h5><p>​YAML（YAML Ain’t Markup Language）即一种反标记（XML）语言。强调数据为中心，而非标记。YAML大小写敏感，使用缩进代表层级关系。<br>​YAML中支持对象Object(对应Python中的字典), 数组Array(对应Python中的列表)以及常量（字符串、数字（int&#x2F;float），true&#x2F;false&#x2F;null）。<br>​相比于JSON格式，YAML免除了双引号，逗号，大括号，中括号等，（当然也支持原始的JSON格式），并且支持注释，类型转换，跨行，锚点，引用及插入等等。</p><h5 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h5><ul><li>对象：使用<code>key: value</code>表示，<strong>冒号后面有一个空格</strong>，也可以是使用<code>&#123;key: value&#125;</code>（flow流格式）或<code>&#123;&quot;key&quot;: &quot;value&quot;&#125;</code>表示</li><li>数组：使用<code>- value</code>表示，**-后面有一个空格**，每项一行，也可以使用<code>[value1,value2,value3,...]</code> （flow流格式）或<code>[&quot;value1&quot;, &quot;value2&quot;, &quot;value3&quot;, ...]</code></li><li>字符串：<code>abc</code>或<code>&quot;abc&quot;</code></li><li>数字：<code>123</code>或<code>123.45</code></li><li>true&#x2F;false：<code>true</code>&#x2F;<code>false</code>,<code>TRUE</code>&#x2F;<code>FALSE</code>,<code>True</code>&#x2F;<code>False</code>或<code>on</code>&#x2F;<code>off</code>, <code>ON</code>&#x2F;<code>OFF</code>, <code>On</code>&#x2F;<code>Off</code></li><li>null: <code>null</code>,<code>NULL</code>, <code>Null</code>或<code>~</code></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注释：示例yaml文件</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Cactus</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">18</span></span><br><span class="line"><span class="attr">skills:</span> </span><br><span class="line">  <span class="bullet">-</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Python</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">3</span></span><br><span class="line">  <span class="bullet">-</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Java</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">5</span></span><br><span class="line"><span class="attr">has_blog:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">gf:</span> <span class="string">~</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转译成json文件</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Cactus&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;skills&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;Python&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="number">3</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;Java&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="number">5</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;has_blog&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;gf&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="类型转换-1"><a href="#类型转换-1" class="headerlink" title="类型转换"></a>类型转换</h5><p>使用<code>!!str</code>, <code>!!float</code>等可以将默认类型转为指定类型</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="type">!!float</span> <span class="number">3</span></span><br><span class="line"><span class="bullet">-</span> <span class="type">!!str</span> <span class="number">4</span></span><br><span class="line"><span class="bullet">-</span> <span class="type">!!str</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>对应JSON格式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="number">3.0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;4&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;true&quot;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h5 id="多行文本及拼接"><a href="#多行文本及拼接" class="headerlink" title="多行文本及拼接"></a>多行文本及拼接</h5><ul><li><code>|</code> 保留多行文本（保留换行符）</li><li><code>&gt;</code> 将多行拼接为一行</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">a:</span> <span class="string">|</span></span><br><span class="line"><span class="string">  我</span></span><br><span class="line"><span class="string">  喜欢你</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="attr">b:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">  我</span></span><br><span class="line"><span class="string">  不喜欢你</span></span><br><span class="line"><span class="string">  才怪</span></span><br></pre></td></tr></table></figure><p>对应JSON格式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="string">&quot;我\n喜欢你\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="string">&quot;我 不喜欢你 才怪&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="锚点，引用及插入"><a href="#锚点，引用及插入" class="headerlink" title="锚点，引用及插入"></a>锚点，引用及插入</h5><p>在<code>-</code>或<code>:</code>后 加上<code>&amp;锚点名</code>为当前字段建立锚点，下面可使用<code>*锚点名</code>引用锚点，或使用<code>&lt;&lt;: *锚点名</code>直接将锚点数据插入到当前的数据中，示例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">users:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="meta">&amp;zs</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">张三</span></span><br><span class="line">    <span class="attr">password:</span> <span class="type">!!str</span> <span class="number">123456</span></span><br><span class="line">  <span class="bullet">-</span> <span class="meta">&amp;ls</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">李四</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">abcdefg</span></span><br><span class="line"></span><br><span class="line"><span class="attr">case1:</span></span><br><span class="line">  <span class="attr">login:</span> <span class="meta">*zs</span></span><br><span class="line"></span><br><span class="line"><span class="attr">case2:</span></span><br><span class="line">  <span class="attr">user:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="meta">*ls</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><p>对应JSON格式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;users&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;李四&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;abcdefg&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;case1&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;login&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;case2&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;李四&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;abcdefg&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">20</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="Python操作YAML文件及字符串"><a href="#Python操作YAML文件及字符串" class="headerlink" title="Python操作YAML文件及字符串"></a>Python操作YAML文件及字符串</h5><p>​需要安装pyyaml， <code>pip install pyyaml</code></p><p>和JSON文件类似，yaml也提供load和dump两种方法。</p><ul><li><code>yaml.load()</code>或<code>yaml.safe_load(YAML字符串或文件句柄)</code>：yaml -&gt; 字典，如yaml中有中文，需要使用 <code>字符串.encode(&#39;utf-8&#39;)</code>或打开文件时指定<code>encoding=&#39;utf-8&#39;</code></li><li><code>yaml.dump(字典)</code>：默认为flow流格式，即字典<code>&#123;b&#39;: &#123;&#39;c&#39;: 3, &#39;d&#39;: 4&#125;&#125;</code>，会被转为<code>b: &#123;c: 3, d: 4&#125;</code>形式，可以使用<code>default_flow_style=False</code>关闭流模式</li></ul><p>由于<code>yaml.load()</code>支持原生Python对象，不安全，建议使用<code>yaml.safe_load()</code></p><h5 id="yaml-字符串-转成-字典"><a href="#yaml-字符串-转成-字典" class="headerlink" title="yaml 字符串 转成 字典"></a>yaml 字符串 转成 字典</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="comment"># yaml字符串</span></span><br><span class="line">yaml_str = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">name: Cactus</span></span><br><span class="line"><span class="string">age: 18</span></span><br><span class="line"><span class="string">skills: </span></span><br><span class="line"><span class="string">  -</span></span><br><span class="line"><span class="string">    - Python</span></span><br><span class="line"><span class="string">    - 3</span></span><br><span class="line"><span class="string">  -</span></span><br><span class="line"><span class="string">    - Java</span></span><br><span class="line"><span class="string">    - 5</span></span><br><span class="line"><span class="string">has_blog: true</span></span><br><span class="line"><span class="string">gf: ~</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(yaml.safe_load(yaml_str)) </span><br><span class="line"><span class="comment"># 如果有中文，可以使用</span></span><br><span class="line">yaml.load(yaml_str.encoding(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><h5 id="yaml-文件转成字典"><a href="#yaml-文件转成字典" class="headerlink" title="yaml 文件转成字典"></a>yaml 文件转成字典</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;demo.yaml&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:   <span class="comment"># demo.yaml内容同上例yaml字符串 </span></span><br><span class="line">    <span class="built_in">print</span>(yaml.safe_load(f))</span><br></pre></td></tr></table></figure><h5 id="字典-转成-yaml字符串或文件"><a href="#字典-转成-yaml字符串或文件" class="headerlink" title="字典 转成 yaml字符串或文件"></a>字典 转成 yaml字符串或文件</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line">dict_var = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Cactus&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;skills&#x27;</span>: [[<span class="string">&#x27;Python&#x27;</span>, <span class="number">3</span>], [<span class="string">&#x27;Java&#x27;</span>, <span class="number">5</span>]], <span class="string">&#x27;has_blog&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;gf&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(yaml.dump(dict_var,))  <span class="comment"># 转为字符串，使用默认flow流格式</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;demo5.yaml&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    yaml.dump(dict_var, f, default_flow_style=<span class="literal">False</span>)  <span class="comment"># 写入文件，不是用flow流格式</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># demo5.yaml</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">18</span></span><br><span class="line"><span class="attr">gf:</span> <span class="literal">null</span></span><br><span class="line"><span class="attr">has_blog:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Cactus</span></span><br><span class="line"><span class="attr">skills:</span></span><br><span class="line"><span class="bullet">-</span> <span class="bullet">-</span> <span class="string">Python</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">3</span></span><br><span class="line"><span class="bullet">-</span> <span class="bullet">-</span> <span class="string">Java</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><h5 id="自定义tag"><a href="#自定义tag" class="headerlink" title="自定义tag"></a>自定义tag</h5><p>​YAML常用于配置文件，当配置文件中需要配置一些用户名密码时，直接写在YAML文件并上传到代码仓库中则很容易造成密码泄露。</p><p>解决的方法有两种：</p><ol><li>配置文件仅本地使用，不传到代码仓库中</li><li>将密码配置到执行机器的环境变量中，在YAML中使用特殊标记表示读取一个环境变量 (推荐)</li></ol><p>在PyYAML中一种tag标识一种类型，常见的tag有：</p><table><thead><tr><th>!!null</th><th>None</th></tr></thead><tbody><tr><td>!!bool</td><td>bool</td></tr><tr><td>!!int</td><td>int</td></tr><tr><td>!!float</td><td>float</td></tr><tr><td>!!binary</td><td>bytes</td></tr><tr><td>!!timestamp</td><td>datetime.datetime</td></tr><tr><td>!!omap, !!pairs</td><td>list of pairs</td></tr><tr><td>!!set</td><td>set</td></tr><tr><td>!!str</td><td>str</td></tr><tr><td>!!seq</td><td>list</td></tr><tr><td>!!map</td><td>dict</td></tr></tbody></table><p>我们自定义一个新的tag, <code>!env</code>, 并编写一个对应的处理函数（PyYAML中称为constructor构造器），代码如下：<br>demo.yaml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># demo.yml</span></span><br><span class="line"><span class="attr">user:</span> <span class="type">!env</span> <span class="string">$&#123;USER&#125;</span>  <span class="comment"># 表示环境变量USER，即当前用户名</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tag在python中使用</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> yaml  <span class="comment"># 需要pip install pyyaml</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">env_var_constructor</span>(<span class="params">loader, node</span>):</span><br><span class="line">    value = loader.construct_scalar(node)   <span class="comment"># PyYAML loader的固定方法，用于根据当前节点构造一个变量值</span></span><br><span class="line">    var_name = value.strip(<span class="string">&#x27;$&#123;&#125; &#x27;</span>)  <span class="comment"># 去除变量值（例如$&#123;USER&#125;）前后的特殊字符及空格</span></span><br><span class="line">    <span class="keyword">return</span> os.getenv(var_name, value)  <span class="comment"># 尝试在环境变量中获取变量名（如USER）对应的值，获取不到使用默认值value（即原来的$&#123;USER&#125;）</span></span><br><span class="line"></span><br><span class="line">yaml.SafeLoader.add_constructor(<span class="string">&#x27;!env&#x27;</span>, env_var_constructor)  <span class="comment"># 为SafeLoader添加新的tag和构造器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;demo.yml&#x27;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">    <span class="built_in">print</span>(yaml.safe_load(f))  <span class="comment"># 打开文件并使用SafeLoader加载文件内容</span></span><br></pre></td></tr></table></figure><p><strong>为tag分配匹配模式</strong></p><p>此时YAML文件中环境变量只能使用强制类型声明<code>!env $&#123;变量名&#125;</code>来使用，如果想直接使用<code>$&#123;变量名&#125;</code>来使用则需要为该tag指定一种正则匹配模式，即识别到类似<code>$&#123;变量名&#125;</code>格式时自动使用!env这个tag。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># demo.yml</span></span><br><span class="line"><span class="attr">user:</span> <span class="type">!env</span> <span class="string">$&#123;USER&#125;</span>  <span class="comment"># 表示环境变量USER，即当前用户名</span></span><br><span class="line"><span class="attr">path:</span> <span class="string">$&#123;PATH&#125;</span>  <span class="comment"># 期望可以直接使用</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tag在python中使用</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"></span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;\$&#123;\w+&#125;&#x27;</span>)  <span class="comment"># 匹配 $&#123;一个或多个字母或数字&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">env_var_constructor</span>(<span class="params">loader, node</span>):</span><br><span class="line">    value = loader.construct_scalar(node)  </span><br><span class="line">    var_name = value.strip(<span class="string">&#x27;$&#123;&#125; &#x27;</span>)  </span><br><span class="line">    <span class="keyword">return</span> os.getenv(var_name, value)  </span><br><span class="line"></span><br><span class="line">yaml.SafeLoader.add_constructor(<span class="string">&#x27;!env&#x27;</span>, env_var_constructor)  <span class="comment"># 添加新tag即对应的构造器</span></span><br><span class="line">yaml.SafeLoader.add_implicit_resolver(<span class="string">&#x27;!env&#x27;</span>, pattern, <span class="literal">None</span>)    <span class="comment">#  为tag指定一种正则匹配</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;demo.yml&#x27;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">    <span class="built_in">print</span>(yaml.safe_load(f))  <span class="comment"># 打开文件并使用SafeLoader加载文件内容</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>一个节点使用多个变量</strong></p><p>如果我们想要在一个节点中使用多个变量，如</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># demo.yml</span></span><br><span class="line"><span class="attr">user:</span> <span class="type">!env</span> <span class="string">$&#123;USER&#125;</span></span><br><span class="line"><span class="attr">path:</span> <span class="string">$&#123;PATH&#125;</span></span><br><span class="line"><span class="attr">msg:</span> <span class="string">当前用户名</span> <span class="string">$&#123;USER&#125;</span> <span class="string">系统路径</span> <span class="string">$&#123;PATH&#125;</span></span><br></pre></td></tr></table></figure><p>则需要对节点值value(字符串格式)进行逐个替换。<br>首先我们需要修改我们的匹配模式，允许${变量}前后可以拥有多个任意字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"></span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;.*?(\$&#123;\w+&#125;).*?&#x27;</span>)  <span class="comment"># 前后可以拥有多个任意字符，使用小括号分组只取当前变量$&#123;变量名&#125;内容，`?`表示非贪婪匹配。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">env_var_constructor</span>(<span class="params">loader, node</span>):</span><br><span class="line">    value = loader.construct_scalar(node)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> pattern.findall(value):  <span class="comment"># 遍历所有匹配到到$&#123;变量名&#125;的变量, 如$&#123;USER&#125;</span></span><br><span class="line">        var_name = item.strip(<span class="string">&#x27;$&#123;&#125; &#x27;</span>)    <span class="comment"># 如,USER</span></span><br><span class="line">        value = value.replace(item, os.getenv(var_name, item))  <span class="comment"># 用环境变量中取到的对应值替换当前变量</span></span><br><span class="line">    <span class="keyword">return</span> value                                  <span class="comment"># 如superin替换$&#123;USER&#125;，取不到则使用原值$&#123;USER&#125;</span></span><br><span class="line"></span><br><span class="line">yaml.SafeLoader.add_constructor(<span class="string">&#x27;!env&#x27;</span>, env_var_constructor)</span><br><span class="line">yaml.SafeLoader.add_implicit_resolver(<span class="string">&#x27;!env&#x27;</span>, pattern, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;demo.yml&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(yaml.safe_load(f))</span><br></pre></td></tr></table></figure><h4 id="Excel文件"><a href="#Excel文件" class="headerlink" title="Excel文件"></a>Excel文件</h4><p>Python中常用的操作Excel的三方包有xlrd,xlwt和openpyxl等</p><ul><li>xlrd支持读取.xls和.xlsx格式的Excel文件，只支持读取，不支持写入。</li><li>xlwt只支持写入.xls格式的文件，不支持读取。</li><li>openpyxl不支持.xls格式，但是支持.xlsx格式的读取写入，并且支持写入公式等。</li></ul><h5 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h5><h6 id="读取所有数据"><a href="#读取所有数据" class="headerlink" title="读取所有数据"></a>读取所有数据</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开excel</span></span><br><span class="line">excel = openpyxl.load_workbook(<span class="string">&#x27;apis.xlsx&#x27;</span>)  <span class="comment"># 有路径应带上路径</span></span><br><span class="line"><span class="comment"># 使用指定工作表</span></span><br><span class="line">sheet = excel.active  <span class="comment"># 当前激活的工作表</span></span><br><span class="line"><span class="comment"># sheet = excel.get_sheet_by_name(&#x27;Sheet1&#x27;)</span></span><br><span class="line"><span class="comment"># 读取所有数据</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(sheet.values))  <span class="comment"># sheet.values 生成器</span></span><br><span class="line"><span class="built_in">print</span>(sheet.max_column)  <span class="comment"># 最大列数</span></span><br><span class="line"><span class="built_in">print</span>(sheet.max_row)  <span class="comment"># 最大行数</span></span><br></pre></td></tr></table></figure><h6 id="按行读取"><a href="#按行读取" class="headerlink" title="按行读取"></a>按行读取</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开excel</span></span><br><span class="line">excel = openpyxl.load_workbook(<span class="string">&#x27;apis.xlsx&#x27;</span>)  <span class="comment"># 有路径应带上路径</span></span><br><span class="line"><span class="comment"># 使用指定工作表</span></span><br><span class="line">sheet = excel.active  <span class="comment"># 当前激活的工作表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按行读取</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> sheet.iter_rows(min_row=<span class="number">1</span>, min_col=<span class="number">1</span>, max_col=<span class="number">3</span>, max_row=<span class="number">3</span>): </span><br><span class="line">    <span class="built_in">print</span>(row)</span><br><span class="line"><span class="comment"># 读取标题行</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> sheet.iter_rows(max_row=<span class="number">1</span>):</span><br><span class="line">    title_row = [cell.value <span class="keyword">for</span> cell <span class="keyword">in</span> row]</span><br><span class="line"><span class="built_in">print</span>(title_row)</span><br><span class="line"><span class="comment"># 读取标题行以外数据</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> sheet.iter_rows(min_row=<span class="number">2</span>):</span><br><span class="line">    row_data = [cell.value <span class="keyword">for</span> cell <span class="keyword">in</span> row]</span><br><span class="line">    <span class="built_in">print</span>(row_data)</span><br></pre></td></tr></table></figure><h6 id="读取单元格数据"><a href="#读取单元格数据" class="headerlink" title="读取单元格数据"></a>读取单元格数据</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开excel</span></span><br><span class="line">excel = openpyxl.load_workbook(<span class="string">&#x27;apis.xlsx&#x27;</span>)  <span class="comment"># 有路径应带上路径</span></span><br><span class="line"><span class="comment"># 使用指定工作表</span></span><br><span class="line">sheet = excel.active  <span class="comment"># 当前激活的工作表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取单元格数据</span></span><br><span class="line"><span class="built_in">print</span>(sheet[<span class="string">&#x27;A1&#x27;</span>].value)</span><br><span class="line"><span class="built_in">print</span>(sheet.cell(<span class="number">1</span>,<span class="number">1</span>).value)  <span class="comment"># 索引从1开始</span></span><br></pre></td></tr></table></figure><h6 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开excel</span></span><br><span class="line">excel = openpyxl.load_workbook(<span class="string">&#x27;apis.xlsx&#x27;</span>)  <span class="comment"># 有路径应带上路径</span></span><br><span class="line"><span class="comment"># 使用指定工作表</span></span><br><span class="line">sheet = excel.active  <span class="comment"># 当前激活的工作表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入单元格</span></span><br><span class="line">sheet[<span class="string">&#x27;F2&#x27;</span>] = <span class="string">&#x27;PASS&#x27;</span></span><br><span class="line">result_col = title_row.index(<span class="string">&#x27;result&#x27;</span>)+<span class="number">1</span>  <span class="comment"># &#x27;result&#x27;所在的列号</span></span><br><span class="line">sheet.cell(<span class="number">3</span>, result_col).value = <span class="string">&#x27;PASS&#x27;</span></span><br><span class="line"><span class="comment"># 整行写入</span></span><br><span class="line">new_row = [<span class="string">&#x27;post-xml接口&#x27;</span>, <span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;https://httpbin.org/post&#x27;</span>]</span><br><span class="line">sheet.append(new_row)</span><br><span class="line"><span class="comment"># 保存文件，也可覆盖原文件</span></span><br><span class="line">excel.save(<span class="string">&quot;apis2.xlsx&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="html文件"><a href="#html文件" class="headerlink" title="html文件"></a>html文件</h4><p>lxml支持HTML及XML，解析速度快，兼容性强。使用方式和ElementTree比较像。</p><h5 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install lxml</span><br></pre></td></tr></table></figure><h5 id="lxml节点对象常用方法："><a href="#lxml节点对象常用方法：" class="headerlink" title="lxml节点对象常用方法："></a>lxml节点对象常用方法：</h5><ul><li>xpath(): 使用XPath获取下级节点，结果为列表</li><li>text: 节点文本</li><li>itertext(): 迭代输出当前节点及下级所有节点文本，例如<code>&#39;&#39;.join(node.itertext())</code> 可以拿到节点中所有文本</li><li>attrib: 节点属性字典，如a节点 <code>node.attrib[&#39;href&#39;]</code>可以拿到其url</li></ul><h5 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h5><ul><li><p>第一步：使用etree.HTML()实例化得到根节点，实例化时会自动补全HTML代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">html = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;div id=&quot;content&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li id=&quot;top_001&quot; class=&quot;item&quot;&gt;肖申克的救赎&lt;li&gt;</span></span><br><span class="line"><span class="string">        &lt;li id=&quot;top_001&quot; class=&quot;item&quot;&gt;霸王别姬&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li id=&quot;top_002&quot; class=&quot;item&quot;&gt;阿甘正传&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">root = etree.HTML(html) </span><br></pre></td></tr></table></figure></li><li><p>第二步：使用root.xpath()查找节点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">不同于xml.etree.ElementTree中只支持部分的XPath语法，root.xpath()中支持使用完整的XPath语法，路径不需要使用“.”开始，root.xpath()方法返回查找到的所有节点列表</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">root.xpath(<span class="string">&#x27;/html/body/div&#x27;</span>)：绝对路径查找</span><br><span class="line">root.xpath(<span class="string">&#x27;//ul/li[2]&#x27;</span>) ：相对路径，结合索引</span><br><span class="line">root.xpath(<span class="string">&#x27;//div[@id=&quot;content&quot;]&#x27;</span>)：结合属性查找</span><br><span class="line">root.xpath(<span class="string">&#x27;//li[@id=&quot;top_001&quot; and @class=&quot;item&quot;]&#x27;</span>)：多条件查找</span><br><span class="line">root.xpath(<span class="string">&#x27;//li[text()=&quot;阿甘正传&quot;]&#x27;</span>)：使用text()函数根据元素文本查找</span><br><span class="line">root.xpath(<span class="string">&#x27;//li[contains(text(), &quot;阿甘&quot;)]&#x27;</span>)：使用contains函数查找文本包含</span><br><span class="line">root.xpath(<span class="string">&#x27;//li[1]/following-sibling::li&#x27;</span>)：使用XPath的轴方法获取后面所有的同级元素</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">如果想要获取节点是属性或文本等，可以从返回的节点列表中取出节点，并使用.tag、.text或.attrib获取节点的标签、文本或属性字典，也可以直接在XPath语句中使用/@attribute或/text来获取属性</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">div = root.xpath(<span class="string">&#x27;//div&#x27;</span>)[<span class="number">0</span>] </span><br><span class="line"><span class="built_in">print</span>(div.attrib)</span><br><span class="line"><span class="built_in">print</span>(root.xpath(<span class="string">&#x27;//div/@id&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(root.xpath(<span class="string">&#x27;//ul/li[last()]/text()&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">由于root.xpath()方法返回节点列表，这里去第一个元素，并打印其属性字典。第三行直接使用XPath表达式取相应节点的id属性，返回属性列表。第四行使用XPath表达式text()函数取节点的文本，返回文本列表</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;content&#x27;</span>&#125;</span><br><span class="line">[<span class="string">&#x27;content&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;阿甘正传&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="StringIO和BytesIO"><a href="#StringIO和BytesIO" class="headerlink" title="StringIO和BytesIO"></a>StringIO和BytesIO</h2><h3 id="StringIO"><a href="#StringIO" class="headerlink" title="StringIO"></a>StringIO</h3><p>数据读写不一定是文件，也可以在内存中读写;<br><code>StringIO</code>顾名思义就是在内存中读写<code>str</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line">f = StringIO() <span class="comment"># 创建 StringIO</span></span><br><span class="line">f.write(<span class="string">&#x27;hello&#x27;</span>) <span class="comment"># 返回写入的长度： 5</span></span><br><span class="line">f.write(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">f.write(<span class="string">&#x27;world!&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(f.getvalue()) <span class="comment"># 通过 getvalue() 方法读取f的值</span></span><br><span class="line">hello world!</span><br></pre></td></tr></table></figure><h3 id="BytesIO"><a href="#BytesIO" class="headerlink" title="BytesIO"></a>BytesIO</h3><p><code>StringIO</code>操作的只能是<code>str</code>，如果要操作二进制数据，就需要使用<code>BytesIO</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line">f = BytesIO()</span><br><span class="line"><span class="comment"># 写入的不是str，而是经过UTF-8编码的bytes</span></span><br><span class="line">f.write(<span class="string">&#x27;中文&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)) <span class="comment"># 返回写入的长度 6</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f.getvalue())</span><br><span class="line"><span class="comment">#  b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="os-文件及目录操作"><a href="#os-文件及目录操作" class="headerlink" title="os 文件及目录操作"></a>os 文件及目录操作</h2><h3 id="os-name"><a href="#os-name" class="headerlink" title="os.name"></a>os.name</h3><p>通过name的值可以判断是什么系统<br>如果是<code>posix</code>，说明系统是<code>Linux</code>、<code>Unix</code>或<code>Mac OS X</code>，如果是<code>nt</code>，就是<code>Windows</code>系统。<br>详细信息可以使用 os.uname()</p><h3 id="环境变量-os-environ"><a href="#环境变量-os-environ" class="headerlink" title="环境变量 - os.environ"></a>环境变量 - os.environ</h3><p>在操作系统中定义的环境变量，全部保存在<code>os.environ</code>这个变量中, 要获取某个环境变量的值，可以调用<code>os.environ.get(&#39;key&#39;)</code></p><h3 id="操作文件和目录"><a href="#操作文件和目录" class="headerlink" title="操作文件和目录"></a>操作文件和目录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 查看当前目录的绝对路径:</span></span><br><span class="line">os.path.abspath(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前模块的文件名</span></span><br><span class="line"><span class="built_in">print</span>(__file__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取命令行参数</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="built_in">print</span>(sys.argv)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并路径</span></span><br><span class="line">os.path.join(<span class="string">&#x27;/Users/michael&#x27;</span>, <span class="string">&#x27;testdir&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个目录</span></span><br><span class="line">os.mkdir(<span class="string">&#x27;/Users/michael/testdir&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删掉一个目录:</span></span><br><span class="line">os.rmdir(<span class="string">&#x27;/Users/michael/testdir&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拆分路径</span></span><br><span class="line">os.path.split(<span class="string">&#x27;/Users/michael/testdir/file.txt&#x27;</span>)</span><br><span class="line"><span class="comment"># (&#x27;/Users/michael/testdir&#x27;, &#x27;file.txt&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到文件扩展名</span></span><br><span class="line">os.path.splitext(<span class="string">&#x27;/path/to/file.txt&#x27;</span>)</span><br><span class="line"><span class="comment"># (&#x27;/path/to/file&#x27;, &#x27;.txt&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件重命名</span></span><br><span class="line">os.rename(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;test.py&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删掉文件</span></span><br><span class="line">os.remove(<span class="string">&#x27;test.py&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件复制</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">`shutil`模块提供了`copyfile()`的复制函数，你还可以在`shutil`模块中找到很多实用函数，它们可以看做是`os`模块的补充。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> shutil  </span><br><span class="line"><span class="comment"># 源文件路径  </span></span><br><span class="line">source_file = <span class="string">&#x27;path/to/source/file.txt&#x27;</span>  </span><br><span class="line"><span class="comment"># 目标文件路径  </span></span><br><span class="line">destination_file = <span class="string">&#x27;path/to/destination/file.txt&#x27;</span>  </span><br><span class="line"><span class="comment"># 复制文件  </span></span><br><span class="line">shutil.copy(source_file, destination_file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取文件路径下的所有文件</span></span><br><span class="line"><span class="comment"># 指定要遍历的文件夹路径  </span></span><br><span class="line">folder_path = <span class="string">&#x27;path/to/your/folder&#x27;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定目录下所有的文件  </span></span><br><span class="line">files_in_folder = [f <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(folder_path) <span class="keyword">if</span> os.path.isfile(os.path.join(folder_path, f))]  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印输出所有文件名  </span></span><br><span class="line"><span class="keyword">for</span> file_name <span class="keyword">in</span> files_in_folder:  </span><br><span class="line">    <span class="built_in">print</span>(file_name)  </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 获取目录和子目录</span></span><br><span class="line"><span class="comment"># 指定要遍历的根路径  </span></span><br><span class="line">root_folder = <span class="string">&#x27;path/to/your/folder&#x27;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用os.walk()遍历根路径以及其子路径，并打印每个找到项  </span></span><br><span class="line"><span class="keyword">for</span> folder_path, folders, files <span class="keyword">in</span> os.walk(root_folder):  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;当前所在位置: <span class="subst">&#123;folder_path&#125;</span>&#x27;</span>)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;包含以下子目录：&#x27;</span>)  </span><br><span class="line">    <span class="keyword">for</span> folder <span class="keyword">in</span> folders:  </span><br><span class="line">        <span class="built_in">print</span>(os.path.join(folder_path, folder))</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment"># 获取整个树结构</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">list_files</span>(<span class="params">startpath</span>):  </span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(startpath):  </span><br><span class="line">        level = root.replace(startpath, <span class="string">&#x27;&#x27;</span>).count(os.sep)  </span><br><span class="line">        indent = <span class="string">&#x27; &#x27;</span> * <span class="number">4</span> * (level)  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125;&#123;&#125;/&#x27;</span>.<span class="built_in">format</span>(indent, os.path.basename(root)))  </span><br><span class="line">        subindent = <span class="string">&#x27; &#x27;</span> * <span class="number">4</span> * (level + <span class="number">1</span>)  </span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> files:  </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(subindent, f))  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root_folder = <span class="string">&#x27;path/to/your/folder&#x27;</span>  </span><br><span class="line">list_files(root_folder)  </span><br></pre></td></tr></table></figure><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>在程序运行的过程中，所有的变量都是在内存中<br>把变量从内存中变成可存储或传输的过程称之为序列化<br>序列化之后，就可以把序列化后的内容写入磁盘，或者通过网络传输到别的机器上。<br>反过来，把变量内容从序列化的对象重新读到内存里称之为反序列化</p><p>Python提供了<code>pickle</code>模块来实现序列化。</p><p><strong>序列化</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle  </span><br><span class="line">d = <span class="built_in">dict</span>(name=<span class="string">&#x27;Bob&#x27;</span>, age=<span class="number">20</span>, score=<span class="number">88</span>)  </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.pickle&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">    pickle.dump(d, f)</span><br></pre></td></tr></table></figure><p><strong>反序列化</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle  </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.pickle&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">    d = pickle.load(f)  </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(d)  <span class="comment"># Output: &#123;&#x27;name&#x27;: &#x27;Bob&#x27;, &#x27;age&#x27;: 20, &#x27;score&#x27;: 88&#125;</span></span><br></pre></td></tr></table></figure><h3 id="JSON处理"><a href="#JSON处理" class="headerlink" title="JSON处理"></a>JSON处理</h3><p>如果我们要在不同的编程语言之间传递对象，就必须把对象序列化为标准格式，例如XML，JSON</p><table><thead><tr><th>JSON类型</th><th>Python类型</th></tr></thead><tbody><tr><td>{}</td><td>dict</td></tr><tr><td>[]</td><td>list</td></tr><tr><td>“string”</td><td>str</td></tr><tr><td>1234.56</td><td>int或float</td></tr><tr><td>true&#x2F;false</td><td>True&#x2F;False</td></tr><tr><td>null</td><td>None</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):  </span><br><span class="line">        self.name = name  </span><br><span class="line">        self.age = age  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建类的实例  </span></span><br><span class="line">my_object = MyClass(<span class="string">&quot;John&quot;</span>, <span class="number">25</span>)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 将类实例转换为JSON字符串  </span></span><br><span class="line">json_string = json.dumps(my_object.__dict__)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 将JSON字符串序列化到文件中  </span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data.json&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> file:  </span><br><span class="line">    json.dump(json_string, file)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 从JSON文件中读取数据  </span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data.json&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file:  </span><br><span class="line">    json_string = json.load(file)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 将JSON字符串转换为Python对象  </span></span><br><span class="line">my_object = json.loads(json_string)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印Python对象的属性  </span></span><br><span class="line"><span class="built_in">print</span>(my_object[<span class="string">&quot;name&quot;</span>])  </span><br><span class="line"><span class="built_in">print</span>(my_object[<span class="string">&quot;age&quot;</span>])</span><br></pre></td></tr></table></figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="try…-except"><a href="#try…-except" class="headerlink" title="try… except"></a>try… except</h3><p>一般情况下，异常会导致程序中断退出，为避免程序中断，我们需要对异常进行处理，在Python中我们使用<code>try ... except ...</code>语句处理异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">div</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> a / b</span><br><span class="line">    <span class="comment"># 使用Exception代表任何异常, as ex是对异常添加别名，ex就是具体的异常对象</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> ex:</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&#x27;出现异常&#x27;</span>, <span class="built_in">type</span>(ex), ex)</span><br><span class="line">       </span><br><span class="line">div(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">div(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure><p>一般来说，建议对不同类型的异常进行单独处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">div</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> a / b</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;被除数b不能为0&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> TypeError:</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&#x27;类型错误a和b应为数字&#x27;</span>)</span><br><span class="line">       </span><br><span class="line">div(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">div(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure><p>except也可以一次捕获多个异常，对任意一种异常做同一处理，例如<code>try: ... except: (ZeroDivisionError, TypeError): ...</code></p><h3 id="无异常及无论是否有异常都执行的操作"><a href="#无异常及无论是否有异常都执行的操作" class="headerlink" title="无异常及无论是否有异常都执行的操作"></a>无异常及无论是否有异常都执行的操作</h3><p>异常处理支持使用<code>try: ... except: ...</code>后使用<code>else: ...</code>在无异常时执行某些操作，及使用<code>finally: ...</code>，无论是否有异常都执行某些语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">div</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        c = a / b</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;被除数b不能为0&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> TypeError:</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&#x27;类型错误a和b应为数字&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;结果为&#x27;</span>, c)</span><br><span class="line">        <span class="keyword">return</span> c</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;执行结束...&#x27;</span>)</span><br><span class="line">     </span><br><span class="line">div(<span class="number">4</span>, <span class="number">2</span>)</span><br><span class="line">div(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">div(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">结果为 2.0</span></span><br><span class="line"><span class="string">执行结束...</span></span><br><span class="line"><span class="string">被除数b不能为0</span></span><br><span class="line"><span class="string">执行结束...</span></span><br><span class="line"><span class="string">类型错误a和b应为数字</span></span><br><span class="line"><span class="string">执行结束...</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Python中常见异常"><a href="#Python中常见异常" class="headerlink" title="Python中常见异常"></a>Python中常见异常</h3><table><thead><tr><th>异常类型</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>SyntaxError</td><td>Python语法异常(缩紧或语法错误)</td><td>int a &#x3D; 1</td></tr><tr><td>NameError</td><td>变量名异常(不存在该变量名)</td><td>print(a)</td></tr><tr><td>TypeError</td><td>变量类型异常</td><td>print(‘a’&#x2F; ‘b’)</td></tr><tr><td>ValueError</td><td>值异常(变量值异常)</td><td>int(‘a’)</td></tr><tr><td>ZeroDivisionError</td><td>0除异常(被除数不能为0)</td><td>10&#x2F;0</td></tr><tr><td>IndexError</td><td>索引异常(列表等中不存在该索引对应的值)</td><td>s &#x3D; [‘a’, ‘b’, ‘c’] ; print(s[5])</td></tr><tr><td>KeyError</td><td>键异常(字典中不存在这个Key对应的值)</td><td>s &#x3D; {‘a’:1, ‘b’:2, ‘c’:3} ; print(s[‘d’])</td></tr><tr><td>AttributeError</td><td>获取属性异常(对象没有该属性)</td><td>a &#x3D; ‘hello’; print(a.name)</td></tr><tr><td>AssertionError</td><td>断言异常(断言未通过)</td><td>assert 1&gt;2</td></tr><tr><td>FileNotFoundError</td><td>文件不存在</td><td>open(‘abc.txt’)</td></tr><tr><td>OSError</td><td>操作系统错误</td><td>os.mkdirs(‘&#x2F;ddd&#x2F;xxx’)</td></tr></tbody></table><h3 id="主动抛出异常"><a href="#主动抛出异常" class="headerlink" title="主动抛出异常"></a>主动抛出异常</h3><p>在编写程序中不一定要捕获并处理（抑制）所有异常，有时候快速抛出异常并清楚的说明原因也是一种比较好的使用方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">div</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(a, (<span class="built_in">int</span>, <span class="built_in">float</span>)) <span class="keyword">or</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(b, (<span class="built_in">int</span>, <span class="built_in">float</span>)):</span><br><span class="line">        <span class="comment"># 使用raise排除异常，终止程序</span></span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&#x27;a和b必须为int或float类型&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&#x27;被除数b不能为0&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> a / b</span><br><span class="line"></span><br><span class="line">div(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">div(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也可以自定义异常类型进行抛出，以使的错误类型更清晰</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NotNumberError</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;非数字异常&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CannotBeZeroError</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;不能为0异常&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">div</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(a, (<span class="built_in">int</span>, <span class="built_in">float</span>)) <span class="keyword">or</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(b, (<span class="built_in">int</span>, <span class="built_in">float</span>)):</span><br><span class="line">        <span class="keyword">raise</span> NotNumberError(<span class="string">&#x27;a和b必须为int或float类型&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> CannotBeZeroError(<span class="string">&#x27;被除数b不能为0&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> a / b</span><br><span class="line"></span><br><span class="line">div(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">div(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="装饰器-1"><a href="#装饰器-1" class="headerlink" title="装饰器"></a>装饰器</h2><p>装饰器是Python中的一个重要概念，多用于在不修改原函数的基础上，为函数增加额外的功能</p><h3 id="基础装饰器"><a href="#基础装饰器" class="headerlink" title="基础装饰器"></a>基础装饰器</h3><p>案例： 你要喝水</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">DrinkWater</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; 喝水(动作) &quot;</span>)</span><br><span class="line">DrinkWater()</span><br></pre></td></tr></table></figure><p>但你杯子里没水了，你还需要往杯子里装水</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">drinkWater</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; 喝水(动作) &quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 装水</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fillWater</span>(<span class="params">fn</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; 往杯子倒水 &quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> drinkWater</span><br><span class="line"></span><br><span class="line">drinkWater = fillWater(drinkWater)</span><br><span class="line"></span><br><span class="line">drinkWater()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">print 打印：</span></span><br><span class="line"><span class="string">往杯子倒水</span></span><br><span class="line"><span class="string">喝水(动作)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">fillWater 便是一个装饰器，它的参数是一个函数对象，同数字、字符串、列表、字典等数据类型一样，函数和类也可以作为函数的参数使用</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>装饰器本质上就是以函数作为参数，对函数做一些处理，并替换原函数的一种高阶函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 装水</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fillWater</span>(<span class="params">fn</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; 往杯子倒水 &quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> drinkWater</span><br><span class="line"></span><br><span class="line"><span class="meta">@fillWater  </span><span class="comment"># 挂载装饰器，会自动替换原函数, 我们只需要执行原函数就行</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">drinkWater</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; 喝水(动作) &quot;</span>)</span><br><span class="line">    </span><br><span class="line">drinkWater() <span class="comment"># 这里的drinkWater() 实际就是装饰后的drinkWater() == fillWater(drinkWater)</span></span><br></pre></td></tr></table></figure><h3 id="装饰器处理函数参数"><a href="#装饰器处理函数参数" class="headerlink" title="装饰器处理函数参数"></a>装饰器处理函数参数</h3><p>如果需要给喝水加入一个参数，控制喝几口水</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fillWater</span>(<span class="params">fn</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">new_gift</span>(<span class="params">item</span>):  <span class="comment"># 准备一个新的函数，跟drinkWater()一样传递一个数字</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot; 往杯子倒水 &quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> drinkWater(item)  <span class="comment"># 调用原函数，保证原函数的输出，并return结果出去</span></span><br><span class="line">    <span class="keyword">return</span> new_gift   <span class="comment"># 返回新的喝水函数，包装了倒水动作的新喝水函数</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@fillWater</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">drinkWater</span>(<span class="params">item</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;喝<span class="subst">&#123;item&#125;</span>口水&#x27;</span>)</span><br><span class="line"></span><br><span class="line">drinkWater(<span class="number">2</span>)   <span class="comment"># 通过传递参数喝几口水</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="带参装饰器"><a href="#带参装饰器" class="headerlink" title="带参装饰器"></a>带参装饰器</h3><p>如果给杯子倒水也加上倒多少毫升，通过装饰器传递多少毫升</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fillWater</span>(<span class="params">ms</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">new_gift</span>(<span class="params">item</span>):  <span class="comment"># 准备一个新的函数，跟drinkWater()一样传递一个数字</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot; 往杯子倒<span class="subst">&#123;ms&#125;</span>毫升水 &quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> drinkWater(item)  <span class="comment"># 调用原函数，保证原函数的输出，并return结果出去</span></span><br><span class="line">    <span class="keyword">return</span> new_gift   <span class="comment"># 返回新的喝水函数，包装了倒水动作的新喝水函数</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@fillWater(<span class="params"><span class="number">500</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">drinkWater</span>(<span class="params">item</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;喝<span class="subst">&#123;item&#125;</span>口水&#x27;</span>)</span><br><span class="line"></span><br><span class="line">drinkWater(<span class="number">2</span>)   <span class="comment"># 通过传递参数喝几口水</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>!!! 装饰器在导入模块时立即计算的，即没调用<code>drinkWater()</code>之前就已经执行生成定制后的new_gift</p><h2 id="生成器和迭代器"><a href="#生成器和迭代器" class="headerlink" title="生成器和迭代器"></a>生成器和迭代器</h2><h3 id="可迭代对象"><a href="#可迭代对象" class="headerlink" title="可迭代对象"></a>可迭代对象</h3><p>​实现了__iter__方法, __iter__方法返回一个迭代器</p><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>​按标准的迭代协议实现__iter__和__next__方法,StopIteration结束</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    start = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.start &gt; <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        self.start += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.start</span><br></pre></td></tr></table></figure><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>​内部实现了迭代器的一种函数,通过yield记录当前位置并返回一次迭代结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params"><span class="built_in">max</span></span>):</span><br><span class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="built_in">max</span>:</span><br><span class="line">        <span class="built_in">print</span>(b)</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;done&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h3><p>!!! 推倒式：当我们对一批可迭代的数据（如列表或字典）进行提取或处理，最后要得到一个新的列表或字典时，推导式是一种非常简洁的表达方式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">data = [</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span>,  <span class="string">&#x27;age&#x27;</span>: <span class="number">12</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;female&#x27;</span>,  <span class="string">&#x27;age&#x27;</span>: <span class="number">10</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span>,  <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;赵六&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span>,  <span class="string">&#x27;age&#x27;</span>: <span class="number">11</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;周七&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;female&#x27;</span>,  <span class="string">&#x27;age&#x27;</span>: <span class="number">16</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;孙八&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span>,  <span class="string">&#x27;age&#x27;</span>: <span class="number">13</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">names = []  <span class="comment"># 定义一个空列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用for循环</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> data:  <span class="comment"># 遍历数据</span></span><br><span class="line">    name = item[<span class="string">&#x27;name&#x27;</span>]  <span class="comment"># 提取每行中的name</span></span><br><span class="line">    names.append(name)  <span class="comment"># 追加到列表中</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用推导式</span></span><br><span class="line">names = [item[<span class="string">&#x27;name&#x27;</span>] <span class="keyword">for</span> item <span class="keyword">in</span> data]     <span class="comment"># 遍历data，提取每项中的name生成一个新列表</span></span><br><span class="line"><span class="comment"># 在提取数据时，我们还可以对每一项数据进行</span></span><br><span class="line">names = [<span class="string">&#x27;姓名: &#x27;</span>+item[<span class="string">&#x27;name&#x27;</span>] <span class="keyword">for</span> item <span class="keyword">in</span> data]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>多重循环</strong></p><p>推导式还支持多重循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">if</span> x &gt; <span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>)</span><br><span class="line">            <span class="keyword">if</span> y &lt; <span class="number">3</span></span><br><span class="line">                x*y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用推导式</span></span><br><span class="line">[x*y <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>) <span class="keyword">if</span> x &gt; <span class="number">2</span> <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>) <span class="keyword">if</span> y &lt; <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p><strong>批量执行操作</strong></p><p>推导式就是一种循环操作，我们也可以使用推导式来批量执行一些相似操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">step1</span>(<span class="params">driver</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;步骤1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def step2(driver):</span></span><br><span class="line"><span class="string">    print(&#x27;</span>步骤<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">step3</span>(<span class="params">driver</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;步骤3)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 用推导式实现</span></span><br><span class="line"><span class="string"># 我们可以将函数名放到一个列表里，然后使用推导式循环执行</span></span><br><span class="line"><span class="string">steps = [step1, step2, step3]   # 函数名列表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[step(driver) for step in steps]  # 不需要变量接收，我们只需要它循环执行</span></span><br></pre></td></tr></table></figure><h3 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h3><p>当我们需要遍历一批数据最后得到一个字典时，同样可以使用字典推导式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">data = [</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span>,  <span class="string">&#x27;age&#x27;</span>: <span class="number">12</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;female&#x27;</span>,  <span class="string">&#x27;age&#x27;</span>: <span class="number">10</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span>,  <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;赵六&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span>,  <span class="string">&#x27;age&#x27;</span>: <span class="number">11</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;周七&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;female&#x27;</span>,  <span class="string">&#x27;age&#x27;</span>: <span class="number">16</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;孙八&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span>,  <span class="string">&#x27;age&#x27;</span>: <span class="number">13</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用字典推导式</span></span><br><span class="line">persons = &#123;item[<span class="string">&#x27;name&#x27;</span>]: item[<span class="string">&#x27;age&#x27;</span>] <span class="keyword">for</span> item <span class="keyword">in</span> data&#125;</span><br></pre></td></tr></table></figure><h3 id="生成器-1"><a href="#生成器-1" class="headerlink" title="生成器"></a>生成器</h3><p>生成器实际上是一种包含初始数据和推导法则的对象</p><p>对应大量的数据或者CSV&#x2F;Excel文件中的数据，生成器可以大量的节省内存，比如csv.Reader(f)就是一个生成器，只存了当前位置和读取下一行数据的方法；当你需要遍历时，它再每次给你读取一行数据给你</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">data = [</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span>,  <span class="string">&#x27;age&#x27;</span>: <span class="number">12</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;female&#x27;</span>,  <span class="string">&#x27;age&#x27;</span>: <span class="number">10</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span>,  <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;赵六&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span>,  <span class="string">&#x27;age&#x27;</span>: <span class="number">11</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;周七&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;female&#x27;</span>,  <span class="string">&#x27;age&#x27;</span>: <span class="number">16</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;孙八&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span>,  <span class="string">&#x27;age&#x27;</span>: <span class="number">13</span>&#125;,</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 列表推导式</span></span><br><span class="line">names = [item[<span class="string">&#x27;name&#x27;</span>] <span class="keyword">for</span> item <span class="keyword">in</span> data]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们把列表的中括号改为小括号就得到一个生成器</span></span><br><span class="line">names2 = (item[<span class="string">&#x27;name&#x27;</span>] <span class="keyword">for</span> item <span class="keyword">in</span> data)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">!!! 生成器和推导式不同，其中的循环不是立即执行的，只用你遍历这个生成器时才会执行</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><table><thead><tr><th>魔术方法</th><th>描述</th></tr></thead><tbody><tr><td><code>__new__</code></td><td>创建类并返回这个类的实例</td></tr><tr><td><code>__init__</code></td><td>可理解为“构造函数”，在对象初始化的时候调用，使用传入的参数初始化该实例</td></tr><tr><td><code>__del__</code></td><td>可理解为“析构函数”，当一个对象进行垃圾回收时调用</td></tr><tr><td><code>__metaclass__</code></td><td>定义当前类的元类</td></tr><tr><td><code>__class__</code></td><td>查看对象所属的类</td></tr><tr><td><code>__base__</code></td><td>获取当前类的父类</td></tr><tr><td><code>__bases__</code></td><td>获取当前类的所有父类</td></tr><tr><td><code>__str__</code></td><td>定义当前类的实例的文本显示内容</td></tr><tr><td><code>__getattribute__</code></td><td>定义属性被访问时的行为</td></tr><tr><td><code>__getattr__</code></td><td>定义试图访问一个不存在的属性时的行为</td></tr><tr><td><code>__setattr__</code></td><td>定义对属性进行赋值和修改操作时的行为</td></tr><tr><td><code>__delattr__</code></td><td>定义删除属性时的行为</td></tr><tr><td><code>__copy__</code></td><td>定义对类的实例调用 copy.copy() 获得对象的一个浅拷贝时所产生的行为</td></tr><tr><td><code>__deepcopy__</code></td><td>定义对类的实例调用 copy.deepcopy() 获得对象的一个深拷贝时所产生的行为</td></tr><tr><td><code>__eq__</code></td><td>定义相等符号“&#x3D;&#x3D;”的行为</td></tr><tr><td><code>__ne__</code></td><td>定义不等符号“!&#x3D;”的行为</td></tr><tr><td><code>__lt__</code></td><td>定义小于符号“&lt;”的行为</td></tr><tr><td><code>__gt__</code></td><td>定义大于符号“&gt;”的行为</td></tr><tr><td><code>__le__</code></td><td>定义小于等于符号“&lt;&#x3D;”的行为</td></tr><tr><td><code>__ge__</code></td><td>定义大于等于符号“&gt;&#x3D;”的行为</td></tr><tr><td><code>__add__</code></td><td>实现操作符“+”表示的加法</td></tr><tr><td><code>__sub__</code></td><td>实现操作符“-”表示的减法</td></tr><tr><td><code>__mul__</code></td><td>实现操作符“*”表示的乘法</td></tr><tr><td><code>__div__</code></td><td>实现操作符“&#x2F;”表示的除法</td></tr><tr><td><code>__mod__</code></td><td>实现操作符“％”表示的取模(求余数)</td></tr><tr><td><code>__pow__</code></td><td>实现操作符“**”表示的指数操作</td></tr><tr><td><code>__and__</code></td><td>实现按位与操作</td></tr><tr><td><code>__or__</code></td><td>实现按位或操作</td></tr><tr><td><code>__xor__</code></td><td>实现按位异或操作</td></tr><tr><td><code>__len__</code></td><td>用于自定义容器类型，表示容器的长度</td></tr><tr><td><code>__getitem__</code></td><td>用于自定义容器类型，定义当某一项被访问时，使用 self[key] 所产生的行为</td></tr><tr><td><code>__setitem__</code></td><td>用于自定义容器类型，定义执行 self[key]&#x3D;value 时产生的行为</td></tr><tr><td><code>__delitem__</code></td><td>用于自定义容器类型，定义一个项目被删除时的行为</td></tr><tr><td><code>__iter__</code></td><td>用于自定义容器类型，一个容器迭代器</td></tr><tr><td><code>__reversed__</code></td><td>用于自定义容器类型，定义当 reversed( ) 被调用时的行为</td></tr><tr><td><code>__contains__</code></td><td>用于自定义容器类型，定义调用 in 和 not in 来测试成员是否存在的时候所产生的行为</td></tr><tr><td><code>__missing__</code></td><td>用于自定义容器类型，定义在容器中找不到 key 时触发的行为</td></tr></tbody></table><h2 id="面向对象-slots"><a href="#面向对象-slots" class="headerlink" title="面向对象 - __slots__"></a>面向对象 - __slots__</h2><p>如果我们想要限制实例的属性怎么办？比如，只允许对Student实例添加<code>name</code>和<code>age</code>属性。</p><p>为了达到限制的目的，Python允许在定义<code>class</code>的时候，定义一个特殊的<code>__slots__</code>变量，来限制该<code>class</code>实例能添加的属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    __slots__ = (<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>) <span class="comment"># 用tuple定义允许绑定的属性名称</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 当你给限定之外的属性绑定值，正常情况下会创建新属性，并赋值。但加了限制后会直接报错</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student() <span class="comment"># 创建新的实例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.name = <span class="string">&#x27;Michael&#x27;</span> <span class="comment"># 绑定属性&#x27;name&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.age = <span class="number">25</span> <span class="comment"># 绑定属性&#x27;age&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">99</span> <span class="comment"># 绑定属性&#x27;score&#x27;</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">&#x27;Student&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;score&#x27;</span></span><br></pre></td></tr></table></figure><p>!!! 使用<code>__slots__</code>要注意，<code>__slots__</code>定义的属性仅对当前类实例起作用，对继承的子类是不起作用的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ParentClass</span>:</span><br><span class="line">    __slots__ = [<span class="string">&#x27;attribute1&#x27;</span>, <span class="string">&#x27;attribute2&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChildClass</span>(<span class="title class_ inherited__">ParentClass</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在 ChildClass 没有定义自己的 __slots__，不受限制</span></span><br><span class="line"></span><br><span class="line">c1 = ChildClass() </span><br><span class="line">c1.attribute3 = <span class="number">1</span> <span class="comment"># success</span></span><br><span class="line"><span class="built_in">print</span>(c1.attribute3)</span><br></pre></td></tr></table></figure><p>除非在子类中也定义<code>__slots__</code>，这样，子类实例允许定义的属性就是自身的<code>__slots__</code>加上父类的<code>__slots__</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ParentClass</span>:</span><br><span class="line">    __slots__ = [<span class="string">&#x27;attribute1&#x27;</span>, <span class="string">&#x27;attribute2&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChildClass</span>(<span class="title class_ inherited__">ParentClass</span>):</span><br><span class="line">    __slots__ = []</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在 ChildClass 定义自己的 __slots__，它将会继承父类的 __slots__加上自己的 __slots__</span></span><br><span class="line"></span><br><span class="line">c1 = ChildClass()</span><br><span class="line">c1.attribute3 = <span class="number">1</span> <span class="comment"># 报错</span></span><br><span class="line"><span class="built_in">print</span>(c1.attribute3)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c1.attribute3 = 1</span></span><br><span class="line"><span class="string">AttributeError: &#x27;ChildClass&#x27; object has no attribute &#x27;attribute3&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="面相对象-MixIn"><a href="#面相对象-MixIn" class="headerlink" title="面相对象 - MixIn"></a>面相对象 - MixIn</h2><p>通过多重继承，一个子类就可以同时获得多个父类的所有功能</p><p>mixln - 可以让一个类除了继承其他类外，再同时集成其他类。这种设计通常称之为MixIn。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这样一来，我们不需要复杂而庞大的继承链，只要选择组合不同的类的功能，就可以快速构造出所需的子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(Mammal, RunnableMixIn, CarnivorousMixIn):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="面相对象-订制类"><a href="#面相对象-订制类" class="headerlink" title="面相对象 - 订制类"></a>面相对象 - 订制类</h2><h3 id="str"><a href="#str" class="headerlink" title="__str__"></a>__str__</h3><p>打印一个类实例会打印这种信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line"><span class="meta">... </span>        self.name = name</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(Student(<span class="string">&#x27;Michael&#x27;</span>))</span><br><span class="line">&lt;__main__.Student <span class="built_in">object</span> at <span class="number">0x109afb190</span>&gt;</span><br></pre></td></tr></table></figure><p>我们可以通过 __str__ 进行输出格式化操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">self.name = name</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):  <span class="comment"># print输出时调用</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;Student object (name: %s)&#x27;</span> % self.name</span><br><span class="line">__repr__ = __str__  </span><br><span class="line">s = Student(<span class="string">&#x27;Michael&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line">s</span><br><span class="line"><span class="comment"># Student object (name: Michael)</span></span><br></pre></td></tr></table></figure><p>如果一个类想被用于<code>for ... in</code>循环，类似list或tuple那样，就必须实现一个<code>__iter__()</code>方法，该方法返回一个迭代对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fib</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.a, self.b = <span class="number">0</span>, <span class="number">1</span> <span class="comment"># 初始化两个计数器a，b</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self <span class="comment"># 实例本身就是迭代对象，故返回自己</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        self.a, self.b = self.b, self.a + self.b <span class="comment"># 计算下一个值</span></span><br><span class="line">        <span class="keyword">if</span> self.a &gt; <span class="number">100000</span>: <span class="comment"># 退出循环的条件</span></span><br><span class="line">            <span class="keyword">raise</span> StopIteration()</span><br><span class="line">        <span class="keyword">return</span> self.a <span class="comment"># 返回下一个值</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> Fib():</span><br><span class="line"><span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure><h3 id="getitem"><a href="#getitem" class="headerlink" title="__getitem__"></a>__getitem__</h3><p>__iter__() 可以让类进行遍历，但不能拿到某一个单一的值，因为它不是了列表。不能用下标获取</p><p>但可以通过实现__getitem__ 可以实现用下标获取某一个值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fib</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, n</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(n, <span class="built_in">int</span>): <span class="comment"># n是索引</span></span><br><span class="line">            a, b = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                a, b = b, a + b</span><br><span class="line">            <span class="keyword">return</span> a</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(n, <span class="built_in">slice</span>): <span class="comment"># n是切片</span></span><br><span class="line">            start = n.start</span><br><span class="line">            stop = n.stop</span><br><span class="line">            <span class="keyword">if</span> start <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                start = <span class="number">0</span></span><br><span class="line">            a, b = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">            L = []</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(stop):</span><br><span class="line">                <span class="keyword">if</span> x &gt;= start:</span><br><span class="line">                    L.append(a)</span><br><span class="line">                a, b = b, a + b</span><br><span class="line">            <span class="keyword">return</span> L</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">f = Fib()</span><br><span class="line"><span class="built_in">print</span>(f[<span class="number">0</span>]) <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f[<span class="number">0</span>:<span class="number">5</span>]) <span class="comment"># [1, 1, 2, 3, 5]</span></span><br></pre></td></tr></table></figure><h3 id="getattr-和-setattr"><a href="#getattr-和-setattr" class="headerlink" title="__getattr__ 和 __setattr__"></a>__getattr__ 和 __setattr__</h3><p><code>__getattr__()</code>方法在访问一个不存在的属性时会被调用，可以在该方法中自定义返回值。<br>而<code>__setattr__()</code>方法在给对象的属性赋值时会被调用，可以在该方法中自定义赋值操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># __getattr__</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):  </span><br><span class="line">        self.name = name  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, attr</span>):  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;attr&#125;</span>属性不存在&quot;</span>  </span><br><span class="line"></span><br><span class="line">p = Person(<span class="string">&quot;Tom&quot;</span>)  </span><br><span class="line"><span class="built_in">print</span>(p.name)  <span class="comment"># 输出 &quot;Tom&quot;  </span></span><br><span class="line"><span class="built_in">print</span>(p.age)   <span class="comment"># 输出 &quot;age属性不存在&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># __setattr__()</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):  </span><br><span class="line">        self.name = name  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setattr__</span>(<span class="params">self, attr, value</span>):  </span><br><span class="line">        <span class="keyword">if</span> attr == <span class="string">&quot;name&quot;</span>:  </span><br><span class="line">            self.__dict__[attr] = value.upper()  <span class="comment"># 赋值时，对形参进行特殊处理</span></span><br><span class="line">        <span class="keyword">else</span>:  </span><br><span class="line">            self.__dict__[attr] = value  </span><br><span class="line"></span><br><span class="line">p = Person(<span class="string">&quot;Tom&quot;</span>)  </span><br><span class="line"><span class="built_in">print</span>(p.name)  <span class="comment"># 输出 &quot;TOM&quot;  </span></span><br><span class="line">p.age = <span class="number">18</span>  </span><br><span class="line"><span class="built_in">print</span>(p.age)   <span class="comment"># 输出 18</span></span><br></pre></td></tr></table></figure><h3 id="call"><a href="#call" class="headerlink" title="__call__"></a>__call__</h3><p>只需要定义一个<code>__call__()</code>方法，就可以直接对实例进行调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;hello word %s&#x27;</span> % self.name)</span><br><span class="line">        </span><br><span class="line">s = Student(<span class="string">&#x27;Michael&#x27;</span>)</span><br><span class="line">s() <span class="comment"># 直接调用实例，就会调用__call__方法</span></span><br></pre></td></tr></table></figure><h2 id="面向对象-枚举类"><a href="#面向对象-枚举类" class="headerlink" title="面向对象 - 枚举类"></a>面向对象 - 枚举类</h2><ol><li>枚举类中的成员是从1开始计数的int常量。</li><li>可以通过名称或值来获取对应的枚举成员，使用 <code>EnumName.member_name</code> 或 <code>EnumName(&#39;member_value&#39;)</code>。</li><li>枚举成员的值是自动赋给成员的int常量。</li><li>枚举类型会自动实现比较和排序功能。</li></ol><h3 id="列表类型"><a href="#列表类型" class="headerlink" title="列表类型"></a>列表类型</h3><p>当需要定义的类型，只含有值，可以这样定义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"></span><br><span class="line">Month = Enum(<span class="string">&#x27;Month&#x27;</span>, (<span class="string">&#x27;Jan&#x27;</span>, <span class="string">&#x27;Feb&#x27;</span>, <span class="string">&#x27;Mar&#x27;</span>, <span class="string">&#x27;Apr&#x27;</span>, <span class="string">&#x27;May&#x27;</span>, <span class="string">&#x27;Jun&#x27;</span>, <span class="string">&#x27;Jul&#x27;</span>, <span class="string">&#x27;Aug&#x27;</span>, <span class="string">&#x27;Sep&#x27;</span>, <span class="string">&#x27;Oct&#x27;</span>, <span class="string">&#x27;Nov&#x27;</span>, <span class="string">&#x27;Dec&#x27;</span>)) <span class="comment"># value属性则是自动赋给成员的int常量，默认从1开始计数。</span></span><br><span class="line"><span class="comment"># 访问枚举成员  </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Month.Jan)   <span class="comment"># 输出: Month.Jan（通过名称访问）  </span></span><br><span class="line"><span class="built_in">print</span>(Month[<span class="string">&#x27;Jan&#x27;</span>])   <span class="comment"># 输出: Month.Jan（通过名称访问）  </span></span><br><span class="line"><span class="built_in">print</span>(Month(<span class="number">1</span>))     <span class="comment"># 输出: Month.Jan（通过值访问）  </span></span><br><span class="line"><span class="built_in">print</span>(Month.Jan.value)   <span class="comment"># 输出: 1（通过名称访问）  </span></span><br><span class="line"><span class="built_in">print</span>(Month[<span class="string">&#x27;Jan&#x27;</span>].value)   <span class="comment"># 输出: 1（通过名称访问）  </span></span><br><span class="line"><span class="built_in">print</span>(Month(<span class="number">1</span>).value)     <span class="comment"># 输出: 1（通过值访问）  </span></span><br></pre></td></tr></table></figure><h3 id="键值对类型"><a href="#键值对类型" class="headerlink" title="键值对类型"></a>键值对类型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum, unique</span><br><span class="line"></span><br><span class="line"><span class="meta">@unique </span><span class="comment"># @unique装饰器可以帮助我们检查保证没有重复值。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Weekday</span>(<span class="title class_ inherited__">Enum</span>):</span><br><span class="line">    Sun = <span class="number">0</span> <span class="comment"># Sun的value被设定为0</span></span><br><span class="line">    Mon = <span class="number">1</span></span><br><span class="line">    Tue = <span class="number">2</span></span><br><span class="line">    Wed = <span class="number">3</span></span><br><span class="line">    Thu = <span class="number">4</span></span><br><span class="line">    Fri = <span class="number">5</span></span><br><span class="line">    Sat = <span class="number">6</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 获取方式</span></span><br><span class="line"><span class="built_in">print</span>(Weekday.Mon)   <span class="comment"># 输出: Weekday.Mon（通过名称访问）  </span></span><br><span class="line"><span class="built_in">print</span>(Weekday[<span class="string">&#x27;Mon&#x27;</span>])   <span class="comment"># 输出: Weekday.Mon（通过名称访问）  </span></span><br><span class="line"><span class="built_in">print</span>(Weekday(<span class="number">1</span>))     <span class="comment"># 输出: Weekday.Mon（通过值访问）</span></span><br><span class="line"><span class="built_in">print</span>(Weekday.Mon.value)   <span class="comment"># 输出: 1（通过名称访问）  </span></span><br><span class="line"><span class="built_in">print</span>(Weekday[<span class="string">&#x27;Mon&#x27;</span>].value)   <span class="comment"># 输出: 1（通过名称访问）  </span></span><br><span class="line"><span class="built_in">print</span>(Weekday(<span class="number">1</span>).value)     <span class="comment"># 输出: 1（通过值访问）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Sun =&gt; Weekday.Sun</span></span><br><span class="line"><span class="string">Mon =&gt; Weekday.Mon</span></span><br><span class="line"><span class="string">Tue =&gt; Weekday.Tue</span></span><br><span class="line"><span class="string">Wed =&gt; Weekday.Wed</span></span><br><span class="line"><span class="string">Thu =&gt; Weekday.Thu</span></span><br><span class="line"><span class="string">Fri =&gt; Weekday.Fri</span></span><br><span class="line"><span class="string">Sat =&gt; Weekday.Sat</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="面向对象-property"><a href="#面向对象-property" class="headerlink" title="面向对象 - @property"></a>面向对象 - @property</h2><p>当类中使用私有变量来限制访问，通过get和set方法来获取和设置，属性过多，就需要定义多的get和set方法；@property可以通过装饰器的方式解决这个问题</p><ul><li><p>@property</p><p>该装饰器，可以直接把一个get方法书写方式的返回值</p></li><li><p>@fn.setter</p></li><li><p>设置只读属性 - 只定义getter方法，不定义setter方法</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property    </span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">score</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._score</span><br><span class="line"></span><br><span class="line"><span class="meta">    @score.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">score</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(value, <span class="built_in">int</span>):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;score must be an integer!&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span> <span class="keyword">or</span> value &gt; <span class="number">100</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;score must between 0 ~ 100!&#x27;</span>)</span><br><span class="line">        self._score = value</span><br><span class="line">        </span><br><span class="line"><span class="meta">@property    </span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Student()</span><br><span class="line">s.score = <span class="number">60</span>  <span class="comment"># 这里调用的其实是  def score(self, value)</span></span><br><span class="line"><span class="built_in">print</span>(s.score)  <span class="comment"># 这里调用的其实是  def score(self)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">比正常的属性. 调用，这种写法可以不写属性，且可以在调用时进行逻辑判断</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="面相对象-元类-补充"><a href="#面相对象-元类-补充" class="headerlink" title="面相对象 - 元类 [补充]"></a>面相对象 - 元类 [补充]</h2><h3 id="元类是什么"><a href="#元类是什么" class="headerlink" title="元类是什么"></a>元类是什么</h3><p>​在面向对象（OOP）编程中，我们可以用不同的类来描述不同的实体及操作，可以通过父类来设计一些“默认”操作，也可以用<strong>MixIn类</strong>来组合扩展一些额外操作，也可以用<strong>抽象类</strong>及<strong>抽象方法</strong>来描述要实现的接口，面向接口编程。</p><p>​元类是一种<code>type</code>（type的子类）,是一种自定义类型，可以定制类的调用、对象创建、初始化、销毁等各种操作。</p><h3 id="元类的使用场景"><a href="#元类的使用场景" class="headerlink" title="元类的使用场景"></a>元类的使用场景</h3><p>多数情况下<strong>元类用来对普通类来加以限制和规范</strong>。使用元类（自定义类型）可以在类的创建(<code>__new__</code>)、初始化()比如限制类必须包含特定属性和实现特定方法、限制类只能有一个实例对象。</p><p>典型使用场景如下：</p><ul><li>不允许类实例化</li><li>单例模式：每个类只允许创建一个对象</li><li>根据属性缓存对象：当某一属性相同时返回同一对象</li><li>属性限制：类中必须包含某些属性或实现某些方法</li><li>ORM框架：用类及类属性来描述数据库表并转为数据库操作</li></ul><h3 id="元类使用示例"><a href="#元类使用示例" class="headerlink" title="元类使用示例"></a>元类使用示例</h3><h4 id="不允许类实例化"><a href="#不允许类实例化" class="headerlink" title="不允许类实例化"></a>不允许类实例化</h4><p>在某些情况下，假设我需要限制一些类不允许创建对象（只允许使用类名操作），可以使用元类加以限制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NoInstances</span>(<span class="title class_ inherited__">type</span>):  <span class="comment"># 定义元类-继承type</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):  <span class="comment"># 控制类调用（实例化）过程</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;类调用&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">&quot;不允许实例化&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(metaclass=NoInstances):  <span class="comment"># 声明使用元类（该类型）</span></span><br><span class="line">     <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">user = User()  <span class="comment"># ()即调用类的__call__操作，这里会抛出异常，因此无法直接实例化创建对象</span></span><br></pre></td></tr></table></figure><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><p>某些情况下仅允许类创建一个实例对象，也可以使用元类进行限制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>(<span class="title class_ inherited__">type</span>):   <span class="comment"># 单例类型-定制的元类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        self.__instance = <span class="literal">None</span>   <span class="comment"># 添加一个私有属性，用于保存唯一的实例对象</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):  <span class="comment"># 控制类调用</span></span><br><span class="line">        <span class="keyword">if</span> self.__instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.__instance = <span class="built_in">super</span>().__call__(*args, **kwargs)  <span class="comment"># 不存在则创建</span></span><br><span class="line">            <span class="keyword">return</span> self.__instance</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.__instance    <span class="comment"># 否则返回已创建的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(metaclass=Singleton):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;创建用户&#x27;</span>)</span><br><span class="line"></span><br><span class="line">user1 = User()  <span class="comment"># 创建对象</span></span><br><span class="line">user2 = User()  <span class="comment"># 创建对象</span></span><br><span class="line"><span class="built_in">print</span>(user1 <span class="keyword">is</span> user2)  <span class="comment"># 返回True，两者是同一对象</span></span><br></pre></td></tr></table></figure><h4 id="根据属性缓存对象"><a href="#根据属性缓存对象" class="headerlink" title="根据属性缓存对象"></a>根据属性缓存对象</h4><p>这是单例模式的扩展，针对特定属性，完全相同的属性组合创建同一对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> weakref</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cached</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">       <span class="built_in">super</span>().__init__(*args, **kwargs)</span><br><span class="line">       self.__cache = weakref.WeakValueDictionary()  <span class="comment"># 添加一个缓存字典</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args</span>):</span><br><span class="line">       <span class="keyword">if</span> args <span class="keyword">in</span> self.__cache:   <span class="comment"># 通过 参数组合查询缓存字典中有没有对应的对象</span></span><br><span class="line">           <span class="keyword">return</span> self.__cache[args]   </span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           obj = <span class="built_in">super</span>().__call__(*args)  <span class="comment"># 创建对象</span></span><br><span class="line">           self.__cache[args] = obj  <span class="comment"># 根据参数组合（元祖类型）到缓存字典</span></span><br><span class="line">           <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(metaclass=Cached):</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&#x27;创建用户(&#123;!r&#125;)&#x27;</span>.<span class="built_in">format</span>(name))</span><br><span class="line">       self.name = name</span><br><span class="line"></span><br><span class="line">a = User(<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line">b = User(<span class="string">&#x27;李四&#x27;</span>)</span><br><span class="line">c = User(<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b)  <span class="comment"># False 名字不同，不是同一对象</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> c)  <span class="comment"># True  名字相同，是同一对象</span></span><br></pre></td></tr></table></figure><h4 id="限制类必须包含特定属性"><a href="#限制类必须包含特定属性" class="headerlink" title="限制类必须包含特定属性"></a>限制类必须包含特定属性</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestCaseType</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, name, bases, attrs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;name&#x27;</span>, name)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;bases&#x27;</span>, bases)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;attrs&#x27;</span>, attrs)</span><br><span class="line">        <span class="keyword">if</span> &#123;<span class="string">&#x27;priority&#x27;</span>, <span class="string">&#x27;timeout&#x27;</span>, <span class="string">&#x27;owner&#x27;</span>, <span class="string">&#x27;status&#x27;</span>, <span class="string">&#x27;run_test&#x27;</span>&#125; - <span class="built_in">set</span>(attrs.keys()):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;测试用例类必须包含priority、status、owner、timeout属性并实现run_test方法&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().__new__(cls, name, bases, attrs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestA</span>(metaclass=TestCaseType):</span><br><span class="line">    <span class="comment"># priority = &#x27;P1&#x27;</span></span><br><span class="line">    timeout = <span class="number">10</span></span><br><span class="line">    owner = <span class="string">&#x27;kevin&#x27;</span></span><br><span class="line">    status = <span class="string">&#x27;ready&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run_test</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = TestA()  <span class="comment"># 这里注释了用例类的priority属性，实例化会报错</span></span><br></pre></td></tr></table></figure><h4 id="ORM框架"><a href="#ORM框架" class="headerlink" title="ORM框架"></a>ORM框架</h4><p>​ORM（Object-Relational Mapping）是一种将对象和关系数据库之间的映射的技术，它可以让我们使用面向对象的方式来操作数据库。</p><p>​Django中的ORM模型、以及SQLAlchemy都是基于元类实现的，将数据库操作映射为 类声明和对象操作，下面是一个基于元类的，简单的ORM框架的实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ModelMeta</span>(<span class="title class_ inherited__">type</span>):  <span class="comment"># 元类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, name, bases, attrs</span>):</span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">&#x27;Model&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>().__new__(cls, name, bases, attrs)</span><br><span class="line"></span><br><span class="line">        table_name = attrs.get(<span class="string">&#x27;__table__&#x27;</span>, name.lower())  <span class="comment"># 如果类中包含table_name属性，则以该属性作为表明</span></span><br><span class="line">        mappings = &#123;&#125;</span><br><span class="line">        fields = []</span><br><span class="line">        primary_key = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> attrs.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(v, Field):</span><br><span class="line">                mappings[k] = v</span><br><span class="line">                <span class="keyword">if</span> v.primary_key:</span><br><span class="line">                    <span class="keyword">if</span> primary_key:</span><br><span class="line">                        <span class="keyword">raise</span> RuntimeError(<span class="string">&#x27;Duplicate primary key for field: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(k))   <span class="comment"># 只允许一个Field声明为主键</span></span><br><span class="line">                    primary_key = k</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    fields.append(k)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> primary_key:</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">&#x27;Primary key not found for table: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(table_name))   <span class="comment"># 不允许没有主键</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> mappings.keys():</span><br><span class="line">            attrs.pop(k)</span><br><span class="line"></span><br><span class="line">        attrs[<span class="string">&#x27;__table__&#x27;</span>] = table_name</span><br><span class="line">        attrs[<span class="string">&#x27;__mappings__&#x27;</span>] = mappings</span><br><span class="line">        attrs[<span class="string">&#x27;__fields__&#x27;</span>] = fields</span><br><span class="line">        attrs[<span class="string">&#x27;__primary_key__&#x27;</span>] = primary_key</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().__new__(cls, name, bases, attrs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Model</span>(metaclass=ModelMeta):  <span class="comment"># 数据模型-对应一张数据库表</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, **kwargs</span>):</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> kwargs.items():</span><br><span class="line">            <span class="built_in">setattr</span>(self, k, v)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save</span>(<span class="params">self</span>):  <span class="comment"># 对象保存方法-对应数据库表插入数据</span></span><br><span class="line">        fields = []</span><br><span class="line">        params = []</span><br><span class="line">        args = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> self.__mappings__.items():</span><br><span class="line">            <span class="keyword">if</span> v.primary_key:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            fields.append(v.name)</span><br><span class="line">            params.append(<span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            args.append(<span class="built_in">getattr</span>(self, k, <span class="literal">None</span>))</span><br><span class="line"></span><br><span class="line">        sql = <span class="string">&#x27;INSERT INTO &#123;&#125; (&#123;&#125;) VALUES (&#123;&#125;)&#x27;</span>.<span class="built_in">format</span>(self.__table__, <span class="string">&#x27;,&#x27;</span>.join(fields), <span class="string">&#x27;,&#x27;</span>.join(params))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;SQL:&#x27;</span>, sql)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;ARGS:&#x27;</span>, args)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Field</span>:  <span class="comment"># 数据库字段</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, column_type, primary_key=<span class="literal">False</span></span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.column_type = column_type</span><br><span class="line">        self.primary_key = primary_key</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;&#123;&#125;:&#123;&#125;&gt;&#x27;</span>.<span class="built_in">format</span>(self.__class__.__name__, self.name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StringField</span>(<span class="title class_ inherited__">Field</span>):  <span class="comment"># 字符串类型字典-对应varchar</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, primary_key=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name, <span class="string">&#x27;varchar(100)&#x27;</span>, primary_key)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IntegerField</span>(<span class="title class_ inherited__">Field</span>):   <span class="comment"># 整型字典-对应bigint</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, primary_key=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name, <span class="string">&#x27;bigint&#x27;</span>, primary_key)</span><br></pre></td></tr></table></figure><p>使用这个ORM框架，我们可以定义一个继承自<code>Model</code>的类，并在其中定义字段。例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">Model</span>):</span><br><span class="line">    <span class="built_in">id</span> = IntegerField(<span class="string">&#x27;id&#x27;</span>, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = StringField(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    email = StringField(<span class="string">&#x27;email&#x27;</span>)</span><br><span class="line">    password = StringField(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 我们就可以创建一个User对象，并将其保存到数据库中</span></span><br><span class="line">user = User(<span class="built_in">id</span>=<span class="number">1</span>, name=<span class="string">&#x27;Alice&#x27;</span>, email=<span class="string">&#x27;alice@example.com&#x27;</span>, password=<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line">user.save()</span><br></pre></td></tr></table></figure><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式"></a>什么是正则表达式</h3><p>　　正则表达式是对字符串（包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为“元字符”））操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。正则表达式是一种文本模式，该模式描述在搜索文本时要匹配的一个或多个字符串。</p><h3 id="正则表达式可以干什么"><a href="#正则表达式可以干什么" class="headerlink" title="正则表达式可以干什么"></a>正则表达式可以干什么</h3><ul><li>快速高效的查找与分析字符串</li><li>进行有规律查找比对字符串，也叫：<a href="https://www.baidu.com/s?wd=%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">模式匹配</a></li><li>具有查找、比对、匹配、替换、插入、添加、删除等能力。</li></ul><h3 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h3><p>Python 自1.5版本起增加了re 模块，它提供 Perl 风格的正则表达式模式。re 模块使 Python 语言拥有全部的正则表达式功能。</p><p>由于Python的字符串本身也用<code>\</code>转义，所以要特别注意：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;ABC\\-001&#x27;</span> <span class="comment"># Python的字符串</span></span><br><span class="line"><span class="comment"># 对应的正则表达式字符串变成：</span></span><br><span class="line"><span class="comment"># &#x27;ABC\-001&#x27;</span></span><br></pre></td></tr></table></figure><p>因此建议使用Python的<code>r</code>前缀，就不用考虑转义的问题了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">r&#x27;ABC\-001&#x27;</span> <span class="comment"># Python的字符串</span></span><br><span class="line"><span class="comment"># 对应的正则表达式字符串不变：</span></span><br><span class="line"><span class="comment"># &#x27;ABC\-001&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="正则表达式模式"><a href="#正则表达式模式" class="headerlink" title="正则表达式模式"></a>正则表达式模式</h3><p><img src="https://i-blog.csdnimg.cn/blog_migrate/a99408c479af61afde137f3ae778afe2.png" alt="在这里插入图片描述"></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/c7ecf57c665cf086df0e137f9fdd0477.png" alt="在这里插入图片描述"></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/1cf83c53486642a902cff1145289cbdf.png" alt="在这里插入图片描述"></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/920768528b89daf9a864d4665e039ead.png" alt="在这里插入图片描述"></p><p>使用特殊符号表示字符：用<code>\d</code>可以匹配一个数字，<code>\w</code>可以匹配一个字母或数字，例如：</p><ul><li><code>&#39;00\d&#39;</code>可以匹配<code>&#39;007&#39;</code>，但无法匹配<code>&#39;00A&#39;</code>；</li><li><code>&#39;\d\d\d&#39;</code>可以匹配<code>&#39;010&#39;</code>；</li><li><code>&#39;\w\w\d&#39;</code>可以匹配<code>&#39;py3&#39;。</code></li></ul><p><code>&#39;.&#39;</code>可以匹配任意字符，所以：</p><ul><li><code>&#39;py.&#39;</code>可以匹配<code>&#39;pyc&#39;</code>、<code>&#39;py3&#39;</code>、<code>&#39;py!&#39;</code>等等。</li></ul><p>要匹配变长的字符，在正则表达式中，用<code>*</code>表示任意个字符（包括0个），用<code>+</code>表示至少一个字符，用<code>?</code>表示0个或1个字符，用<code>&#123;n&#125;</code>表示n个字符，用<code>&#123;n,m&#125;</code>表示n-m个字符。</p><p>来看一个复杂的例子：<code>\d&#123;3&#125;\s+\d&#123;3,8&#125;</code>。</p><p>我们来从左到右解读一下：</p><ol><li><code>\d&#123;3&#125;</code>表示匹配3个数字，例如<code>&#39;010&#39;</code>；</li><li><code>\s</code>可以匹配一个空格（也包括Tab等空白符），所以<code>\s+</code>表示至少有一个空格，例如匹配<code>&#39; &#39;</code>，<code>&#39; &#39;</code>等；</li><li><code>\d&#123;3,8&#125;</code>表示3-8个数字，例如<code>&#39;1234567&#39;</code>。</li></ol><p>综合起来，上面的正则表达式可以匹配以任意个空格隔开的带区号的电话号码。</p><p>如果要匹配<code>&#39;010-12345&#39;</code>这样的号码呢？由于<code>&#39;-&#39;</code>是特殊字符，在正则表达式中，要用<code>&#39;\&#39;</code>转义，所以，上面的正则是<code>\d&#123;3&#125;\-\d&#123;3,8&#125;</code>。</p><p>但是，仍然无法匹配<code>&#39;010 - 12345&#39;</code>，因为带有空格。所以我们需要更复杂的匹配方式。</p><p><strong>进阶</strong></p><p>要做更精确地匹配，可以用<code>[]</code>表示范围，比如：</p><ul><li><code>[0-9a-zA-Z\_]</code>可以匹配一个数字、字母或者下划线；</li><li><code>[0-9a-zA-Z\_]+</code>可以匹配至少由一个数字、字母或者下划线组成的字符串，比如<code>&#39;a100&#39;</code>，<code>&#39;0_Z&#39;</code>，<code>&#39;Py3000&#39;</code>等等；</li><li><code>[a-zA-Z\_][0-9a-zA-Z\_]*</code>可以匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串，也就是Python合法的变量；</li><li><code>[a-zA-Z\_][0-9a-zA-Z\_]&#123;0, 19&#125;</code>更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）。</li></ul><p><code>A|B</code>可以匹配A或B，所以<code>(P|p)ython</code>可以匹配<code>&#39;Python&#39;</code>或者<code>&#39;python&#39;</code>。</p><p><code>^</code>表示行的开头，<code>^\d</code>表示必须以数字开头。</p><p><code>$</code>表示行的结束，<code>\d$</code>表示必须以数字结束。</p><p><code>py</code>也可以匹配<code>&#39;python&#39;</code>，但是加上<code>^py$</code>就变成了整行匹配，就只能匹配<code>&#39;py&#39;</code>了。</p><h3 id="re模常用方法"><a href="#re模常用方法" class="headerlink" title="re模常用方法"></a>re模常用方法</h3><h4 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br></pre></td></tr></table></figure><h4 id="匹配多种可能"><a href="#匹配多种可能" class="headerlink" title="匹配多种可能 - []"></a>匹配多种可能 - []</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&#x27;run&#x27; or &#x27;ran&#x27;</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;r[au]n&#x27;</span>,<span class="string">&#x27;dog runs to cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">4</span>, <span class="number">7</span>), <span class="keyword">match</span>=<span class="string">&#x27;run&#x27;</span>&gt; </span><br><span class="line"></span><br><span class="line">res = re.search(<span class="string">r&#x27;r[au]n&#x27;</span>,<span class="string">&#x27;dog rans to cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">4</span>, <span class="number">7</span>), <span class="keyword">match</span>=<span class="string">&#x27;ran&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#continue 匹配更多种可能</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;r[A-Z]n&#x27;</span>,<span class="string">&#x27;dog rans to cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">None</span></span><br><span class="line"></span><br><span class="line">res = re.search(<span class="string">r&#x27;r[a-z]n&#x27;</span>,<span class="string">&#x27;dog rans to cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">4</span>, <span class="number">7</span>), <span class="keyword">match</span>=<span class="string">&#x27;ran&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line">res = re.search(<span class="string">r&#x27;r[0-9]n&#x27;</span>,<span class="string">&#x27;dog rans to cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line">&gt;&gt;&gt;<span class="literal">None</span></span><br><span class="line"></span><br><span class="line">res = re.search(<span class="string">r&#x27;r[0-9a-z]n&#x27;</span>,<span class="string">&#x27;dog rans to cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">4</span>, <span class="number">7</span>), <span class="keyword">match</span>=<span class="string">&#x27;ran&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="匹配数字-d-or-D"><a href="#匹配数字-d-or-D" class="headerlink" title="匹配数字 - \d or \D"></a>匹配数字 - \d or \D</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># \d : decimal digit 数字的</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;r\dn&#x27;</span>,<span class="string">&#x27;run r9n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">4</span>, <span class="number">7</span>), <span class="keyword">match</span>=<span class="string">&#x27;r9n&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># \D : any non-decimal digit 任何不是数字的</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;r\Dn&#x27;</span>,<span class="string">&#x27;run r9n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">0</span>, <span class="number">3</span>), <span class="keyword">match</span>=<span class="string">&#x27;run&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="匹配空白-s-or-S"><a href="#匹配空白-s-or-S" class="headerlink" title="匹配空白 - \s or \S"></a>匹配空白 - \s or \S</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># \s : any white space [\t \n \r \f \v]</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;r\sn&#x27;</span>,<span class="string">&#x27;r\nn r9n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">0</span>, <span class="number">3</span>), <span class="keyword">match</span>=<span class="string">&#x27;r\nn&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># \S : 和\s相反，any non-white space</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;r\Sn&#x27;</span>,<span class="string">&#x27;r\nn r9n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">4</span>, <span class="number">7</span>), <span class="keyword">match</span>=<span class="string">&#x27;r9n&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="匹配所有字母和数字以及-‘-’-w-or-W"><a href="#匹配所有字母和数字以及-‘-’-w-or-W" class="headerlink" title="匹配所有字母和数字以及 ‘_’ - \w or \W"></a>匹配所有字母和数字以及 ‘_’ - \w or \W</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># \w : [a-zA-Z0-9_]</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;r\wn&#x27;</span>,<span class="string">&#x27;r\nn r9n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">4</span>, <span class="number">7</span>), <span class="keyword">match</span>=<span class="string">&#x27;r9n&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># \W : opposite to \w 即与\w相反</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;r\Wn&#x27;</span>,<span class="string">&#x27;r\nn r9n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">0</span>, <span class="number">3</span>), <span class="keyword">match</span>=<span class="string">&#x27;r\nn&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="匹配空白字符串-b-or-B"><a href="#匹配空白字符串-b-or-B" class="headerlink" title="匹配空白字符串 - \b or \B"></a>匹配空白字符串 - \b or \B</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># \b : (only at the start or end of the word)</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;\bruns\b&#x27;</span>,<span class="string">&#x27;dog runs to cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">4</span>, <span class="number">8</span>), <span class="keyword">match</span>=<span class="string">&#x27;runs&#x27;</span>&gt;</span><br><span class="line">res = re.search(<span class="string">r&#x27;\bruns\b&#x27;</span>,<span class="string">&#x27;dogrunsto cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># \B : ( but not at the start or end of the word)</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;\Bruns\B&#x27;</span>,<span class="string">&#x27;dog runs to cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">None</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;\Bruns\B&#x27;</span>,<span class="string">&#x27;dogrunsto cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">5</span>, <span class="number">11</span>), <span class="keyword">match</span>=<span class="string">&#x27; runs &#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="匹配任意字符-特殊字符-or"><a href="#匹配任意字符-特殊字符-or" class="headerlink" title="匹配任意字符 特殊字符 - \ or ."></a>匹配任意字符 特殊字符 - \ or .</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># \\ : 匹配 \</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;runs\\&#x27;</span>,<span class="string">&#x27;dog runs\ to cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">4</span>, <span class="number">9</span>), <span class="keyword">match</span>=<span class="string">&#x27;runs\\&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># . : 匹配 anything （except \n）</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;r.ns&#x27;</span>,<span class="string">&#x27;dog r;ns to cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">4</span>, <span class="number">8</span>), <span class="keyword">match</span>=<span class="string">&#x27;r;ns&#x27;</span>&gt;</span><br><span class="line">&gt;res = re.search(<span class="string">r&#x27;r.ns&#x27;</span>,<span class="string">&#x27;dog r\nns to cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">None</span></span><br></pre></td></tr></table></figure><h4 id="匹配句首句尾-or"><a href="#匹配句首句尾-or" class="headerlink" title="匹配句首句尾 - $ or ^"></a>匹配句首句尾 - $ or ^</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ^ : 匹配line beginning</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;^runs&#x27;</span>,<span class="string">&#x27;dog runs to cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">None</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;^dog&#x27;</span>,<span class="string">&#x27;dog runs to cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">0</span>, <span class="number">3</span>), <span class="keyword">match</span>=<span class="string">&#x27;dog&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># $ : 匹配line ending</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;runs$&#x27;</span>,<span class="string">&#x27;dog runs to cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">None</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;cat$&#x27;</span>,<span class="string">&#x27;dog runs to cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">12</span>, <span class="number">15</span>), <span class="keyword">match</span>=<span class="string">&#x27;cat&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="是否匹配"><a href="#是否匹配" class="headerlink" title="是否匹配 - ?"></a>是否匹配 - ?</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ？ ： may or may nt occur</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;r(u)?ns&#x27;</span>,<span class="string">&#x27;dog runs to cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">4</span>, <span class="number">8</span>), <span class="keyword">match</span>=<span class="string">&#x27;runs&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line">res = re.search(<span class="string">r&#x27;r(u)?ns&#x27;</span>,<span class="string">&#x27;dog rns to cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line">&gt;&gt;&gt;&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">4</span>, <span class="number">7</span>), <span class="keyword">match</span>=<span class="string">&#x27;rns&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="多行匹配-re-M"><a href="#多行匹配-re-M" class="headerlink" title="多行匹配 - re.M"></a>多行匹配 - re.M</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配代码后面加上re.M</span></span><br><span class="line">string = <span class="string">&quot;&quot;&quot; 123.</span></span><br><span class="line"><span class="string">dog runs to cat.</span></span><br><span class="line"><span class="string">You run to dog.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;^You&#x27;</span>,string)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">None</span></span><br><span class="line"></span><br><span class="line">res = re.search(<span class="string">r&#x27;^You&#x27;</span>,string,re.M)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">10</span>, <span class="number">13</span>), <span class="keyword">match</span>=<span class="string">&#x27;run&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="匹配零次或多次"><a href="#匹配零次或多次" class="headerlink" title="匹配零次或多次 - *"></a>匹配零次或多次 - *</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># * ： occur 0 or more times</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;ab*&#x27;</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">0</span>, <span class="number">1</span>), <span class="keyword">match</span>=<span class="string">&#x27;a&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line">res = re.search(<span class="string">r&#x27;ab*&#x27;</span>,<span class="string">&#x27;abbbbbbbbbb&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">0</span>, <span class="number">11</span>), <span class="keyword">match</span>=<span class="string">&#x27;abbbbbbbbbb&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="匹配一次或多次"><a href="#匹配一次或多次" class="headerlink" title="匹配一次或多次 - +"></a>匹配一次或多次 - +</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># + ：occur 1 or more times</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;ab+&#x27;</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">None</span></span><br><span class="line"></span><br><span class="line">res = re.search(<span class="string">r&#x27;ab+&#x27;</span>,<span class="string">&#x27;abbbbbbbbbb&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">0</span>, <span class="number">11</span>), <span class="keyword">match</span>=<span class="string">&#x27;abbbbbbbbbb&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="可选匹配次数-n-m"><a href="#可选匹配次数-n-m" class="headerlink" title="可选匹配次数 - {n, m}"></a>可选匹配次数 - {n, m}</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &#123;n, m&#125; : occur n to m times</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;ab&#123;1,10&#125;&#x27;</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">None</span></span><br><span class="line"></span><br><span class="line">res = re.search(<span class="string">r&#x27;ab&#123;1,10&#125;&#x27;</span>,<span class="string">&#x27;abbbbbbbbbb&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">0</span>, <span class="number">11</span>), <span class="keyword">match</span>=<span class="string">&#x27;abbbbbbbbbb&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>匹配多个正则公式，利用group添加命名输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># group</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;ID: (\d+), Name: (.+)&#x27;</span>,<span class="string">&#x27;ID: 123456789, Name: a/b*c;d&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res.group())</span><br><span class="line"><span class="built_in">print</span>(res.group(<span class="number">1</span>)) <span class="comment"># 利用1, 2 标识顺序</span></span><br><span class="line"><span class="built_in">print</span>(res.group(<span class="number">2</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ID: <span class="number">123456789</span>, Name: a/b*c;d</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">123456789</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a/b*c;d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给group组命名  ?P&lt;name&gt;</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;ID: (?P&lt;id&gt;\d+), Name: (?P&lt;name&gt;.+)&#x27;</span>,<span class="string">&#x27;ID: 123456789, Name: a/b*c;d&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res.group(<span class="string">&#x27;id&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(res.group(<span class="string">&#x27;name&#x27;</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">123456789</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a/b*c;d</span><br></pre></td></tr></table></figure><h4 id="去除惰性，寻找所有匹配-findall"><a href="#去除惰性，寻找所有匹配-findall" class="headerlink" title="去除惰性，寻找所有匹配 - findall"></a>去除惰性，寻找所有匹配 - findall</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># re.findall()</span></span><br><span class="line">res = re.findall(<span class="string">r&#x27;r[ua]n&#x27;</span>,<span class="string">&#x27;run ran ren&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">&#x27;run&#x27;</span>, <span class="string">&#x27;ran&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 另一种写法</span></span><br><span class="line">res = re.findall(<span class="string">r&#x27;(run|ran)&#x27;</span>,<span class="string">&#x27;run ran ren&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">&#x27;run&#x27;</span>, <span class="string">&#x27;ran&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="替换匹配内容-sub"><a href="#替换匹配内容-sub" class="headerlink" title="替换匹配内容 - sub"></a>替换匹配内容 - sub</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># re.sub(   ,replace,   )</span></span><br><span class="line">res = re.sub(<span class="string">r&#x27;runs&#x27;</span>,<span class="string">&#x27;catches&#x27;</span>,<span class="string">&#x27;dog runs to cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dog catches to cat</span><br></pre></td></tr></table></figure><h4 id="分裂匹配内容-split"><a href="#分裂匹配内容-split" class="headerlink" title="分裂匹配内容 - split"></a>分裂匹配内容 - split</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># re.split()</span></span><br><span class="line">res = re.split(<span class="string">r&#x27;[,;\.\\]&#x27;</span>, <span class="string">&#x27;a,b;c.d\e&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="将正则匹配规则进行包装-compile"><a href="#将正则匹配规则进行包装-compile" class="headerlink" title="将正则匹配规则进行包装 - compile"></a>将正则匹配规则进行包装 - compile</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># re. compile()</span></span><br><span class="line">compile_re = re.<span class="built_in">compile</span>(<span class="string">r&#x27;r[ua]n&#x27;</span>)</span><br><span class="line">res = compile_re.findall(<span class="string">&#x27;run ran ren&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">&#x27;run&#x27;</span>, <span class="string">&#x27;ran&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="一些常见的正则表达式"><a href="#一些常见的正则表达式" class="headerlink" title="一些常见的正则表达式"></a>一些常见的正则表达式</h3><h4 id="校验数字"><a href="#校验数字" class="headerlink" title="校验数字"></a>校验数字</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1、数字：^[0-9]*$</span><br><span class="line">2、n位的数字：^\d&#123;n&#125;$</span><br><span class="line">3、至少n位的数字：^\d&#123;n,&#125;$</span><br><span class="line">4、m-n位的数字：^\d&#123;m,n&#125;$</span><br><span class="line">5、零和非零开头的数字：^(0|[1-9][0-9]*)$</span><br><span class="line">6、非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]&#123;1,2&#125;)?$</span><br><span class="line">7、带1-2位小数的正数或负数：^(\-)?\d+(\.\d&#123;1,2&#125;)?$</span><br><span class="line">8、正数、负数、和小数：^(\-|\+)?\d+(\.\d+)?$</span><br><span class="line">9、有两位小数的正实数：^[0-9]+(.[0-9]&#123;2&#125;)?$</span><br><span class="line">10、有1~3位小数的正实数：^[0-9]+(.[0-9]&#123;1,3&#125;)?$</span><br><span class="line">11、非零的正整数：^[1-9]\d*$ 或 ^([1-9][0-9]*)&#123;1,3&#125;$ 或 ^\+?[1-9][0-9]*$</span><br><span class="line">12、非零的负整数：^\-[1-9][]0-9&quot;*$ 或 ^-[1-9]\d*$</span><br><span class="line">13、非负整数：^\d+$ 或 ^[1-9]\d*|0$</span><br><span class="line">14、非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</span><br><span class="line">15、非负浮点数：^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$</span><br><span class="line">16、非正浮点数：^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$</span><br><span class="line">17、正浮点数：^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$</span><br><span class="line">18、负浮点数：^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</span><br><span class="line">19、浮点数：^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$</span><br></pre></td></tr></table></figure><h4 id="校验字符"><a href="#校验字符" class="headerlink" title="校验字符"></a>校验字符</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1、汉字：^[\u4e00-\u9fa5]&#123;0,&#125;$</span><br><span class="line">2、英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]&#123;4,40&#125;$</span><br><span class="line">3、长度为3-20的所有字符：^.&#123;3,20&#125;$</span><br><span class="line">3、由26个英文字母组成的字符串：^[A-Za-z]+$</span><br><span class="line">5、由26个大写英文字母组成的字符串：^[A-Z]+$</span><br><span class="line">6、由26个小写英文字母组成的字符串：^[a-z]+$</span><br><span class="line">7、由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$</span><br><span class="line">8、由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w&#123;3,20&#125;$</span><br><span class="line">9、中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$</span><br><span class="line">10、中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]&#123;2,20&#125;$</span><br><span class="line">11、可以输入含有^%&amp;&#x27;,;=?$\&quot;等字符：[^%&amp;&#x27;,;=?$\x22]+</span><br><span class="line">12、禁止输入含有~的字符：[^~\x22]+</span><br></pre></td></tr></table></figure><h4 id="特殊需求"><a href="#特殊需求" class="headerlink" title="特殊需求"></a>特殊需求</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">1、Email地址：^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</span><br><span class="line">2、域名：[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/.?</span><br><span class="line">3、 InternetURL：[a-zA-z]+://[^\s]* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$</span><br><span class="line">4、手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d&#123;8&#125;$</span><br><span class="line">5、电话号码(&quot;XXX-XXXXXXX&quot;、&quot;XXXX-XXXXXXXX&quot;、&quot;XXX-XXXXXXX&quot;、&quot;XXX-XXXXXXXX&quot;、&quot;XXXXXXX&quot;和&quot;XXXXXXXX)：^(\(\d&#123;3,4&#125;-)|\d&#123;3.4&#125;-)?\d&#123;7,8&#125;$</span><br><span class="line">6、国内电话号码(0511-4405222、021-87888822)：\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;</span><br><span class="line">7、身份证号(15位、18位数字)：^\d&#123;15&#125;|\d&#123;18&#125;$</span><br><span class="line">8、短身份证号码(数字、字母x结尾)：^([0-9])&#123;7,18&#125;(x|X)?$ 或 ^\d&#123;8,18&#125;|[0-9x]&#123;8,18&#125;|[0-9X]&#123;8,18&#125;?$</span><br><span class="line">9、帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$</span><br><span class="line">10、密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w&#123;5,17&#125;$</span><br><span class="line">11、强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,10&#125;$</span><br><span class="line">12、日期格式：^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;</span><br><span class="line">13、一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$</span><br><span class="line">14 、一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$</span><br><span class="line">15、钱的输入格式：</span><br><span class="line">* 有四种钱的表示形式我们可以接受:&quot;10000.00&quot; 和 &quot;10,000.00&quot;, 和没有 &quot;分&quot; 的 &quot;10000&quot; 和 &quot;10,000&quot;：^[1-9][0-9]*$</span><br><span class="line">* 这表示任意一个不以0开头的数字,但是,这也意味着一个字符&quot;0&quot;不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$</span><br><span class="line">* 一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$</span><br><span class="line">* 这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$</span><br><span class="line">* 5.必须说明的是,小数点后面至少应该有1位数,所以&quot;10.&quot;是不通过的,但是 &quot;10&quot; 和 &quot;10.2&quot; 是通过的：^[0-9]+(.[0-9]&#123;2&#125;)?$</span><br><span class="line">* 6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]&#123;1,2&#125;)?$</span><br><span class="line">* 这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*(.[0-9]&#123;1,2&#125;)?$</span><br><span class="line">* 1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*)(.[0-9]&#123;1,2&#125;)?$</span><br><span class="line">* 备注：这就是最终结果了,别忘了&quot;+&quot;可以用&quot;*&quot;替代如果你觉得空字符串也可</span><br><span class="line">* 以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</span><br><span class="line">16、xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$</span><br><span class="line">17、中文字符的正则表达式：[\u4e00-\u9fa5]</span><br><span class="line">18、双字节字符：[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</span><br><span class="line">19、空白行的正则表达式：\n\s*\r (可以用来删除空白行)</span><br><span class="line">20、HTML标记的正则表达式：&lt;(\S*?)[^&gt;]*&gt;.*?&lt;/\1&gt;|&lt;.*? /&gt; (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</span><br><span class="line">21、首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</span><br><span class="line">22、 腾讯QQ号：[1-9][0-9]&#123;4,&#125; (腾讯QQ号从10000开始)</span><br><span class="line">23、中国邮政编码：[1-9]\d&#123;5&#125;(?!\d) (中国邮政编码为6位数字)</span><br><span class="line">24、IP地址：\d+\.\d+\.\d+\.\d+ (提取IP地址时有用)</span><br><span class="line">25、 IP地址：((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))</span><br></pre></td></tr></table></figure><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><p>单核CPU操作系统轮流让各个任务交替执行，任务1执行0.01秒，切换到任务2，任务2执行0.01秒，再切换到任务3，执行0.01秒……这样反复执行下去。表面上看，每个任务都是交替执行的，但是，由于CPU的执行速度实在是太快了，我们感觉就像所有任务都在同时执行一样。</p><p>真正的并行执行多任务只能在多核CPU上实现，但是，由于任务数量远远多于CPU的核心数量，所以，操作系统也会自动把很多任务轮流调度到每个核心上执行</p><p>对于操作系统来说，一个任务就是一个进程（Process）</p><p>Python既支持多进程，又支持多线程。python实现多任务有3中模式：</p><ul><li>多进程模式；</li><li>多线程模式；</li><li>多进程+多线程模式。</li></ul><p>线程是最小的执行单元，而进程由至少一个线程组成。如何调度进程和线程，完全由操作系统决定，程序自己不能决定什么时候执行，执行多长时间。</p><p>多进程和多线程的程序涉及到同步、数据共享的问题，编写起来更复杂。</p><h3 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h3><p>Unix&#x2F;Linux操作系统提供了一个<code>fork()</code>系统调用，fork()系统调用在Unix&#x2F;Linux操作系统中非常特殊，它会创建一个新的进程（子进程），该子进程是父进程的副本。父进程和子进程在执行fork()系统调用之后会继续执行接下来的代码。父进程中，fork()函数返回子进程的PID（Process ID），而在子进程中，fork()函数返回0。</p><p><strong>调用fork - Unix&#x2F;Linux</strong></p><p><code>os</code>模块封装了常见的系统调用，其中<code>fork</code>可以在Python程序中轻松创建子进程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">child_process</span>():  </span><br><span class="line">    <span class="comment"># 子进程代码  </span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;I am child process (%s) and my parent is %s.&#x27;</span> % (os.getpid(), os.getppid()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parent_process</span>():  </span><br><span class="line">    <span class="comment"># 父进程代码  </span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;I (%s) just created a child process (%s).&#x27;</span> % (os.getpid(), pid))  </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Process (%s) start...&#x27;</span> % os.getpid())  </span><br><span class="line">pid = os.fork()  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> pid == <span class="number">0</span>:  </span><br><span class="line">    <span class="comment"># 子进程执行child_process函数  </span></span><br><span class="line">    child_process()  </span><br><span class="line"><span class="keyword">else</span>:  </span><br><span class="line">    <span class="comment"># 父进程执行parent_process函数  </span></span><br><span class="line">    parent_process()</span><br></pre></td></tr></table></figure><p><strong>multiprocessing</strong></p><p>由于Windows没有<code>fork</code>调用，上面的代码在Windows上无法运行。<br><code>multiprocessing</code>模块就是跨平台版本的多进程模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing  </span><br><span class="line"><span class="keyword">import</span> os  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">child_process</span>():  </span><br><span class="line">    <span class="comment"># 子进程代码  </span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;I am child process (%s) and my parent is %s.&#x27;</span> % (os.getpid(), os.getppid()))  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parent_process</span>():  </span><br><span class="line">    <span class="comment"># 父进程代码  </span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;I (%s) just created a child process.&#x27;</span> % os.getpid())  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    <span class="comment"># 主程序开始执行  </span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Process (%s) start...&#x27;</span> % os.getpid())  </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建子进程并指定执行的函数为child_process()  </span></span><br><span class="line">    p = multiprocessing.Process(target=child_process)  </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 启动子进程  </span></span><br><span class="line">    p.start()  </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 等待子进程结束，这样可以确保父进程在子进程完成后再继续执行。  </span></span><br><span class="line">    p.join()  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行parent_process()函数，此时已经是父进程了。  </span></span><br><span class="line">    parent_process()</span><br></pre></td></tr></table></figure><p><strong>Pool - 进程池</strong></p><p>如果要启动大量的子进程，可以用进程池的方式批量创建子进程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing  </span><br><span class="line"><span class="keyword">import</span> os  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">worker</span>(<span class="params">num</span>):  </span><br><span class="line">    <span class="comment"># 子进程代码  </span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Worker %s is running (pid=%s)...&#x27;</span> % (num, os.getpid()))  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    <span class="comment"># 主程序开始执行  </span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Parent process is running (pid=%s)...&#x27;</span> % os.getpid())  </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建一个包含4个进程的进程池  </span></span><br><span class="line">    pool = multiprocessing.Pool(processes=<span class="number">4</span>)  </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 使用进程池执行worker函数，参数为0~3  </span></span><br><span class="line">    pool.<span class="built_in">map</span>(worker, <span class="built_in">range</span>(<span class="number">4</span>))  </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 关闭进程池  </span></span><br><span class="line">    pool.close()  </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 等待所有子进程结束  </span></span><br><span class="line">    pool.join()  </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 所有子进程结束后，主进程继续执行  </span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;All workers done.&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>子进程 - 交互</strong></p><p>很多时候，子进程并不是自身，而是一个外部进程。我们创建了子进程后，还需要控制子进程的输入和输出。</p><p><code>subprocess</code>模块可以让我们非常方便地启动一个子进程，然后控制其输入和输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_command</span>(<span class="params">command</span>):</span><br><span class="line">    <span class="comment"># 运行外部命令并获取输出</span></span><br><span class="line">    result = subprocess.run(command, shell=<span class="literal">True</span>, capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查命令是否成功执行</span></span><br><span class="line">    <span class="keyword">if</span> result.returncode == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Command &#x27;<span class="subst">&#123;command&#125;</span>&#x27; executed successfully.&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Output:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(result.stdout)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error executing command &#x27;<span class="subst">&#123;command&#125;</span>&#x27;.&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error output:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(result.stderr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 主程序开始执行</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Parent process is running (pid=%s)...&#x27;</span> % os.getpid())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义要运行的命令，可以根据不同操作系统选择不同的命令</span></span><br><span class="line">    command = <span class="string">&quot;ls -l&quot;</span> <span class="keyword">if</span> os.name != <span class="string">&#x27;nt&#x27;</span> <span class="keyword">else</span> <span class="string">&quot;dir&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 运行命令</span></span><br><span class="line">    run_command(command)</span><br></pre></td></tr></table></figure><p>通过 communicate() 方法与进程交互</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_command</span>(<span class="params">command</span>):</span><br><span class="line">    <span class="comment"># 运行外部命令并获取输出</span></span><br><span class="line">    process = subprocess.Popen(command, shell=<span class="literal">True</span>, stdout=subprocess.PIPE, stderr=subprocess.PIPE,stdin=subprocess.PIPE, text=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 与进程交互，可以向进程输入数据</span></span><br><span class="line">    input_data = <span class="string">&quot;Input data to the process&quot;</span></span><br><span class="line">    process.stdin.write(input_data)</span><br><span class="line">    process.stdin.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取进程的输出和错误信息</span></span><br><span class="line">    output, error = process.communicate()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查命令是否成功执行</span></span><br><span class="line">    <span class="keyword">if</span> process.returncode == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Command &#x27;<span class="subst">&#123;command&#125;</span>&#x27; executed successfully.&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Output:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(output.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error executing command &#x27;<span class="subst">&#123;command&#125;</span>&#x27;.&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error output:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(error.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 主程序开始执行</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Parent process is running (pid=%s)...&#x27;</span> % os.getpid())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义要运行的命令，可以根据不同操作系统选择不同的命令</span></span><br><span class="line">    command = <span class="string">&quot;ls -l&quot;</span> <span class="keyword">if</span> os.name != <span class="string">&#x27;nt&#x27;</span> <span class="keyword">else</span> <span class="string">&quot;dir&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 运行命令</span></span><br><span class="line">    run_command(command)</span><br></pre></td></tr></table></figure><p><strong>进程间通信</strong></p><p>进程与进程之间肯定是需要通信的，操作系统提供了很多机制来实现进程间的通信</p><p>Python的<code>multiprocessing</code>模块包装了底层的机制，提供了<code>Queue</code>、<code>Pipes</code>等多种方式来交换数据。</p><ol><li>在使用 <code>multiprocessing</code> 模块进行进程间通信时，需要注意数据的序列化和反序列化问题。因为不同进程之间的内存空间是独立的，所以需要将数据序列化后再传输到另一个进程中进行反序列化。</li><li>在使用 <code>subprocess</code> 模块启动子进程并与其进行交互时，需要注意输入和输出的缓冲区问题。如果子进程的输出数据量很大，可能会导致缓冲区溢出，从而导致程序出现异常。可以使用 <code>communicate()</code> 方法来避免这个问题，该方法会等待子进程结束并获取其输出和错误信息。</li></ol><ul><li>Queue - 队列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">producer</span>(<span class="params">queue</span>):  </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):  </span><br><span class="line">        queue.put(i)  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Producer put <span class="subst">&#123;i&#125;</span> into queue.&quot;</span>)  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">consumer</span>(<span class="params">queue</span>):  </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:  </span><br><span class="line">        item = queue.get()  </span><br><span class="line">        <span class="keyword">if</span> item <span class="keyword">is</span> <span class="literal">None</span>:  </span><br><span class="line">            <span class="keyword">break</span>  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Consumer got <span class="subst">&#123;item&#125;</span> from queue.&quot;</span>)  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    <span class="comment"># 创建一个进程间通信的队列  </span></span><br><span class="line">    queue = multiprocessing.Queue()  </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建一个生产者进程和一个消费者进程  </span></span><br><span class="line">    producer_process = multiprocessing.Process(target=producer, args=(queue,))  </span><br><span class="line">    consumer_process = multiprocessing.Process(target=consumer, args=(queue,))  </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 启动进程  </span></span><br><span class="line">    producer_process.start()  </span><br><span class="line">    consumer_process.start()  </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 等待生产者进程结束并向队列中添加结束标志  </span></span><br><span class="line">    producer_process.join()  </span><br><span class="line">    queue.put(<span class="literal">None</span>)  </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 等待消费者进程结束  </span></span><br><span class="line">    consumer_process.join()</span><br></pre></td></tr></table></figure><ul><li>Pipe - 管道</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sender</span>(<span class="params">conn</span>):  </span><br><span class="line">    conn.send(<span class="string">&quot;Hello, receiver!&quot;</span>)  </span><br><span class="line">    conn.close()  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">receiver</span>(<span class="params">conn</span>):  </span><br><span class="line">    msg = conn.recv()  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Received message: <span class="subst">&#123;msg&#125;</span>&quot;</span>)  </span><br><span class="line">    conn.close()  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    <span class="comment"># 创建管道  </span></span><br><span class="line">    parent_conn, child_conn = multiprocessing.Pipe()  </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建发送者进程和接收者进程  </span></span><br><span class="line">    sender_process = multiprocessing.Process(target=sender, args=(parent_conn,))  </span><br><span class="line">    receiver_process = multiprocessing.Process(target=receiver, args=(child_conn,))  </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 启动进程  </span></span><br><span class="line">    sender_process.start()  </span><br><span class="line">    receiver_process.start()  </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 等待进程结束  </span></span><br><span class="line">    sender_process.join()  </span><br><span class="line">    receiver_process.join()</span><br></pre></td></tr></table></figure><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>多任务可以由多进程完成，也可以由一个进程内的多线程完成</p><p>进程是由若干线程组成的，一个进程至少有一个线程</p><p>由于线程是操作系统直接支持的执行单元，因此，高级语言通常都内置多线程的支持</p><p><strong>threading</strong></p><p>Python的标准库提供了两个模块：<code>_thread</code>和<code>threading</code>，<code>_thread</code>是低级模块，<code>threading</code>是高级模块，对<code>_thread</code>进行了封装。绝大多数情况下，我们只需要使用<code>threading</code>这个高级模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading  </span><br><span class="line"><span class="keyword">import</span> time  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数作为线程的执行体  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">thread_task</span>(<span class="params">name</span>):  </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;Thread <span class="subst">&#123;name&#125;</span>: <span class="subst">&#123;i&#125;</span>&#x27;</span>)  </span><br><span class="line">        time.sleep(<span class="number">1</span>)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建两个线程并启动它们  </span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:  </span><br><span class="line">    t1 = threading.Thread(target=thread_task, args=(<span class="string">&#x27;A&#x27;</span>,))  </span><br><span class="line">    t2 = threading.Thread(target=thread_task, args=(<span class="string">&#x27;B&#x27;</span>,))  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 启动线程  </span></span><br><span class="line">    t1.start()  </span><br><span class="line">    t2.start()  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等待两个线程结束  </span></span><br><span class="line">    t1.join()  </span><br><span class="line">    t2.join()</span><br></pre></td></tr></table></figure><p>注意项：</p><ul><li>全局变量共享问题：多个线程可以访问和修改相同的全局变量，因此需要确保对共享数据的访问是安全的。</li><li>线程同步：使用锁或者其他同步机制来避免多个线程同时修改共享资源。</li><li>GIL（全局解释器锁）：Python语言的GIL限制了同一时间只能有一个线程执行Python字节码。因此在CPU密集型任务中，并发性能可能无法得到提升。</li></ul><p><strong>Lock</strong></p><p>多线程和多进程最大的不同在于，多进程中，同一个变量，各自有一份拷贝存在于每个进程中，互不影响，而多线程中，所有变量都由所有线程共享，所以，任何一个变量都可以被任何一个线程修改，因此，线程之间共享数据最大的危险在于多个线程同时改一个变量，把内容给改乱了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time, threading</span><br><span class="line"></span><br><span class="line"><span class="comment"># 假定这是你的银行存款:  </span></span><br><span class="line">balance = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数用于改变账户余额（模拟存取款操作）  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_it</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">global</span> balance</span><br><span class="line">    <span class="comment"># 先存后取，结果应该为0:  </span></span><br><span class="line">    balance = balance + n</span><br><span class="line">    balance = balance - n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 线程执行体，对账户进行多次存取款操作  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_thread</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000000</span>):</span><br><span class="line">        change_it(n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并启动两个线程来同时对账户进行存取款操作，两个线程同时一存一取，就可能导致余额不对</span></span><br><span class="line">t1 = threading.Thread(target=run_thread, args=(<span class="number">5</span>,))</span><br><span class="line">t2 = threading.Thread(target=run_thread, args=(<span class="number">8</span>,))</span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(balance)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果我们要确保<code>balance</code>计算正确，就要给<code>change_it()</code>上一把锁，当某个线程开始执行<code>change_it()</code>时，该线程因为获得了锁，因此其他线程不能同时执行<code>change_it()</code>，只能等待，直到锁被释放后，获得该锁以后才能改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time, threading  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 假定这是你的银行存款:  </span></span><br><span class="line">balance = <span class="number">0</span>  </span><br><span class="line">lock = threading.Lock()  <span class="comment"># 创建一个锁对象  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_it</span>(<span class="params">n</span>):  </span><br><span class="line">    <span class="keyword">global</span> balance  </span><br><span class="line">    balance += n  </span><br><span class="line">    balance -= n  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_thread</span>(<span class="params">n</span>):  </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000000</span>):  </span><br><span class="line">        lock.acquire()  <span class="comment"># 获取锁  </span></span><br><span class="line">        <span class="keyword">try</span>:  </span><br><span class="line">            change_it(n)  </span><br><span class="line">        <span class="keyword">finally</span>:  </span><br><span class="line">            lock.release()  <span class="comment"># 释放锁  </span></span><br><span class="line"></span><br><span class="line">t1 = threading.Thread(target=run_thread, args=(<span class="number">5</span>,))  </span><br><span class="line">t2 = threading.Thread(target=run_thread, args=(<span class="number">8</span>,))  </span><br><span class="line">t1.start()  </span><br><span class="line">t2.start()  </span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(balance)</span><br></pre></td></tr></table></figure><h3 id="计算密集型-vs-IO密集型"><a href="#计算密集型-vs-IO密集型" class="headerlink" title="计算密集型 vs. IO密集型"></a>计算密集型 vs. IO密集型</h3><p>是否采用多任务的第二个考虑是任务的类型。我们可以把任务分为计算密集型和IO密集型。</p><ul><li><p>计算密集型</p><p>计算密集型任务的特点是要进行大量的计算，消耗CPU资源。这种计算密集型任务虽然也可以用多任务完成，但是任务越多，花在任务切换的时间就越多，CPU执行任务的效率就越低</p></li><li><p>IO密集型</p><p>IO密集型，涉及到网络、磁盘IO的任务都是IO密集型任务，这类任务的特点是CPU消耗很少，任务的大部分时间都在等待IO操作完成。对于IO密集型任务，任务越多，CPU效率越高</p></li></ul><h3 id="异步IO"><a href="#异步IO" class="headerlink" title="异步IO"></a>异步IO</h3><p>CPU和IO之间巨大的速度差异，一个任务在执行的过程中大部分时间都在等待IO操作，单进程单线程模型会导致别的任务无法并行执行，因此，我们才需要多进程模型或者多线程模型来支持多任务并发执行。</p><p>现代操作系统对IO操作就是支持异步IO。充分利用操作系统提供的异步IO支持，就可以用单进程单线程模型来执行多任务，这种全新的模型称为事件驱动模型</p><h3 id="分布式进程"><a href="#分布式进程" class="headerlink" title="分布式进程"></a>分布式进程</h3><p>Python的<code>multiprocessing</code>模块不但支持多进程，其中<code>managers</code>子模块还支持把多进程分布到多台机器上。一个服务进程可以作为调度者，将任务分布到其他多个进程中，依靠网络通信。</p><p>案例：假设我们有两台机器：Machine A 和 Machine B。原先的多进程程序在 Machine A 上运行，包括发送任务的进程和处理任务的进程。现在我们希望将发送任务的进程迁移到 Machine B 上，与处理任务的进程分开运行。</p><p><strong>重点难点</strong></p><ol><li><strong>通信机制更新</strong>：需要更新原先基于 Queue 的通信机制，以适应跨机器通信。</li><li><strong>网络配置</strong>：确保两台机器能够相互通信，可以考虑使用网络协议如TCP&#x2F;IP。</li><li><strong>错误处理</strong>：处理跨机器通信可能会引入新的错误类型，需要考虑如何处理这些错误情况。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 Machine A 上运行的发送任务的进程  </span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue  </span><br><span class="line"><span class="keyword">import</span> time  </span><br><span class="line"><span class="keyword">import</span> random  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_task</span>(<span class="params">queue</span>):  </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:  </span><br><span class="line">        <span class="comment"># 生成一个随机任务  </span></span><br><span class="line">        task = random.randint(<span class="number">1</span>, <span class="number">100</span>)  </span><br><span class="line">        <span class="comment"># 将任务放入队列  </span></span><br><span class="line">        queue.put(task)  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Sent task: <span class="subst">&#123;task&#125;</span>&quot;</span>)  </span><br><span class="line">        <span class="comment"># 等待一段时间再发送下一个任务  </span></span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>, <span class="number">5</span>))  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    <span class="comment"># 创建一个队列  </span></span><br><span class="line">    queue = Queue()  </span><br><span class="line">    <span class="comment"># 创建一个发送任务的进程  </span></span><br><span class="line">    send_process = Process(target=send_task, args=(queue,))  </span><br><span class="line">    <span class="comment"># 启动发送任务的进程  </span></span><br><span class="line">    send_process.start()  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 Machine B 上运行的处理任务的进程  </span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue  </span><br><span class="line"><span class="keyword">import</span> time  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_task</span>(<span class="params">queue</span>):  </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:  </span><br><span class="line">        <span class="comment"># 从队列中获取任务  </span></span><br><span class="line">        task = queue.get()  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Processing task: <span class="subst">&#123;task&#125;</span>&quot;</span>)  </span><br><span class="line">        <span class="comment"># 模拟处理任务的时间  </span></span><br><span class="line">        time.sleep(<span class="number">5</span>)  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    <span class="comment"># 创建一个队列  </span></span><br><span class="line">    queue = Queue()  </span><br><span class="line">    <span class="comment"># 创建一个处理任务的进程  </span></span><br><span class="line">    process_process = Process(target=process_task, args=(queue,))  </span><br><span class="line">    <span class="comment"># 启动处理任务的进程  </span></span><br><span class="line">    process_process.start()</span><br></pre></td></tr></table></figure><p>注意Queue的作用是用来传递任务和接收结果，每个任务的描述数据量要尽量小。比如发送一个处理日志文件的任务，就不要发送几百兆的日志文件本身，而是发送日志文件存放的完整路径，由Worker进程再去共享的磁盘上读取文件。</p><h2 id="异步IO-1"><a href="#异步IO-1" class="headerlink" title="异步IO"></a>异步IO</h2><h3 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h3><p>协程，又称微线程</p><p>协程是一种轻量级的并发编程方式，它可以在一个线程中实现多个任务的切换和调度。Python中的协程通过使用<code>asyncio</code>库来实现。</p><ol><li>异步IO操作：协程通常用于处理IO密集型任务，例如网络请求或文件读写。了解如何使用协程来执行异步IO操作，并通过<code>asyncio</code>库中提供的异步IO函数来实现非阻塞的IO操作。</li><li>协程的调度和并发：了解如何使用<code>asyncio</code>库来调度和并发执行多个协程任务。这包括使用<code>asyncio</code>提供的事件循环（event loop）来调度协程的执行顺序，以及使用<code>asyncio</code>中的<code>asyncio.gather()</code>函数来并发执行多个协程任务。</li><li>错误处理和异常处理：了解如何处理协程中可能出现的错误和异常情况。包括使用<code>try-except</code>语句来捕获和处理异常，以及使用<code>asyncio</code>库中提供的错误处理机制来处理协程中的异常情况。</li></ol><h3 id="asyncio"><a href="#asyncio" class="headerlink" title="asyncio"></a>asyncio</h3><p><code>asyncio</code>是Python 3.4版本引入的标准库，直接内置了对异步IO的支持。</p><p><code>asyncio</code>的编程模型就是一个消息循环。<code>asyncio</code>模块内部实现了<code>EventLoop</code>，把需要执行的协程扔到<code>EventLoop</code>中执行，就实现了异步IO。</p><p>用<code>asyncio</code>提供的<code>@asyncio.coroutine</code>可以把一个<code>generator</code>标记为<code>coroutine</code>类型，然后在<code>coroutine</code>内部用<code>yield from</code>调用另一个<code>coroutine</code>实现异步操作。</p><p>为了简化并更好地标识异步IO，从Python 3.5开始引入了新的语法<code>async</code>和<code>await</code>，可以让<code>coroutine</code>的代码更简洁易读。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">fetch_url</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> response:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">await</span> response.text()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    urls = [</span><br><span class="line">        <span class="string">&#x27;https://www.baidu.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https://www.taobao.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https://www.jd.com&#x27;</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    tasks = [fetch_url(url) <span class="keyword">for</span> url <span class="keyword">in</span> urls]</span><br><span class="line"></span><br><span class="line">    results = <span class="keyword">await</span> asyncio.gather(*tasks)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    loop.run_until_complete(main())</span><br></pre></td></tr></table></figure><h3 id="aiohttp"><a href="#aiohttp" class="headerlink" title="aiohttp"></a>aiohttp</h3><p>pass</p><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><h3 id="SQLite"><a href="#SQLite" class="headerlink" title="SQLite"></a>SQLite</h3><p>SQLite是一种嵌入式数据库，它的数据库就是一个文件。由于SQLite本身是C写的，而且体积很小，所以，经常被集成到各种应用程序中，甚至在iOS和Android的App中都可以集成。</p><p>Python就内置了SQLite3，所以，在Python中使用SQLite，不需要安装任何东西，直接使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SQLiteConnection</span>:  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):  </span><br><span class="line">        <span class="comment"># 连接到SQLite数据库  </span></span><br><span class="line">        <span class="comment"># 数据库文件是test.db  </span></span><br><span class="line">        <span class="comment"># 如果文件不存在，会自动在当前目录创建  </span></span><br><span class="line">        self.conn = sqlite3.connect(<span class="string">&#x27;test.db&#x27;</span>)  </span><br><span class="line">        <span class="comment"># 创建一个Cursor  </span></span><br><span class="line">        self.cursor = self.conn.cursor()  </span><br><span class="line">        <span class="keyword">return</span> self.cursor  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):  </span><br><span class="line">        <span class="comment"># 关闭Cursor  </span></span><br><span class="line">        <span class="keyword">if</span> self.cursor:  </span><br><span class="line">            self.cursor.close()  </span><br><span class="line">        <span class="comment"># 提交事务并关闭连接  </span></span><br><span class="line">        <span class="keyword">if</span> self.conn:  </span><br><span class="line">            self.conn.commit()  </span><br><span class="line">            self.conn.close()  </span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> SQLiteConnection() <span class="keyword">as</span> cursor:  </span><br><span class="line">    <span class="comment"># 插入一条记录  </span></span><br><span class="line">    cursor.execute(<span class="string">&#x27;insert into user (id, name) values (?, ?)&#x27;</span>, (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;Alice&#x27;</span>))  </span><br><span class="line">    <span class="built_in">print</span>(cursor.rowcount)  </span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> SQLiteConnection() <span class="keyword">as</span> cursor:  </span><br><span class="line">    <span class="comment"># 更新记录  </span></span><br><span class="line">    cursor.execute(<span class="string">&#x27;update user set name = ? where id = ?&#x27;</span>, (<span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;2&#x27;</span>))  </span><br><span class="line">    <span class="built_in">print</span>(cursor.rowcount)  </span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> SQLiteConnection() <span class="keyword">as</span> cursor:  </span><br><span class="line">    <span class="comment"># 删除记录  </span></span><br><span class="line">    cursor.execute(<span class="string">&#x27;delete from user where id = ?&#x27;</span>, (<span class="string">&#x27;2&#x27;</span>,))  </span><br><span class="line">    <span class="built_in">print</span>(cursor.rowcount)</span><br></pre></td></tr></table></figure><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><p><strong>安装mysql驱动</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mysql-connector-python </span><br></pre></td></tr></table></figure><p><strong>使用案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mysql.connector</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySQLConnection</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 建立数据库连接</span></span><br><span class="line">        self.conn = mysql.connector.connect(user=<span class="string">&#x27;root&#x27;</span>, password=<span class="string">&#x27;root&#x27;</span>, database=<span class="string">&#x27;blog&#x27;</span>)</span><br><span class="line">        <span class="comment"># 创建游标对象</span></span><br><span class="line">        self.cursor = self.conn.cursor()</span><br><span class="line">        <span class="keyword">return</span> self.cursor</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span><br><span class="line">        <span class="comment"># 关闭游标</span></span><br><span class="line">        <span class="keyword">if</span> self.cursor:</span><br><span class="line">            self.cursor.close()</span><br><span class="line">            <span class="comment"># 提交事务并关闭连接</span></span><br><span class="line">        <span class="keyword">if</span> self.conn:</span><br><span class="line">            self.conn.commit()</span><br><span class="line">            self.conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> MySQLConnection() <span class="keyword">as</span> cursor:</span><br><span class="line">    <span class="comment"># 创建user表</span></span><br><span class="line">    cursor.execute(<span class="string">&#x27;create table user (id varchar(20) primary key, name varchar(20))&#x27;</span>)</span><br><span class="line">    <span class="comment"># 插入一行记录</span></span><br><span class="line">    cursor.execute(<span class="string">&#x27;insert into user (id, name) values (%s, %s)&#x27;</span>, [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;Michael&#x27;</span>])</span><br><span class="line">    <span class="built_in">print</span>(cursor.rowcount)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> MySQLConnection() <span class="keyword">as</span> cursor:</span><br><span class="line">    <span class="comment"># 查询记录</span></span><br><span class="line">    cursor.execute(<span class="string">&#x27;select * from t_user where id = %s&#x27;</span>, (<span class="string">&#x27;1&#x27;</span>,))</span><br><span class="line">    row = cursor.fetchone()</span><br><span class="line">    columns = [col[<span class="number">0</span>] <span class="keyword">for</span> col <span class="keyword">in</span> cursor.description]  <span class="comment"># 获取列名</span></span><br><span class="line">    data = <span class="built_in">dict</span>(<span class="built_in">zip</span>(columns, row))  <span class="comment"># 将列名和数据对应转换成字典</span></span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="SQLAlchemy"><a href="#SQLAlchemy" class="headerlink" title="SQLAlchemy"></a>SQLAlchemy</h3><ul><li><p>连接已有数据库</p><p>连接mysql需要额外安装mysql驱动 mysql-connector-python , 才能成功连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mysql-connector-python  </span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, String, create_engine, DateTime, Integer</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> declarative_base</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建对象的基类:</span></span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义User对象:</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;t_user&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据库表结构  可以在mysql中DESCRIBE t_user; 查看表结构</span></span><br><span class="line">    <span class="built_in">id</span> = Column(String(<span class="number">20</span>), primary_key=<span class="literal">True</span>)</span><br><span class="line">    avatar = Column(String(<span class="number">255</span>))</span><br><span class="line">    create_time = Column(DateTime)</span><br><span class="line">    email = Column(String(<span class="number">255</span>))</span><br><span class="line">    nickname = Column(String(<span class="number">255</span>))</span><br><span class="line">    password = Column(String(<span class="number">255</span>))</span><br><span class="line">    <span class="built_in">type</span> = Column(Integer)</span><br><span class="line">    update_time = Column(DateTime)</span><br><span class="line">    username = Column(String(<span class="number">255</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化数据库连接:</span></span><br><span class="line">engine = create_engine(<span class="string">&#x27;mysql+mysqlconnector://root:root@localhost:3306/blog&#x27;</span>)</span><br><span class="line"><span class="comment"># 创建DBSession类型:</span></span><br><span class="line">DBSession = sessionmaker(bind=engine)</span><br></pre></td></tr></table></figure><ul><li><p>查找数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 所有查找 等同于 select * from t_user;</span></span><br><span class="line"><span class="comment"># 创建会话</span></span><br><span class="line">session = DBSession()</span><br><span class="line"><span class="comment"># 查询所有用户数据</span></span><br><span class="line">users = session.query(User).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment"># 打印用户数据</span></span><br><span class="line"><span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line">    <span class="built_in">print</span>(user.<span class="built_in">id</span>, user.username)  <span class="comment"># 根据实际列名打印相应的数据</span></span><br><span class="line"><span class="comment"># 关闭会话</span></span><br><span class="line">session.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">## 过滤查找 等同于 select * from t_user where id=&#x27;admin&#x27;;</span></span><br><span class="line"><span class="comment"># 创建会话  </span></span><br><span class="line">session = DBSession()  </span><br><span class="line"><span class="comment"># 查询用户名为 &quot;admin&quot; 的用户  </span></span><br><span class="line">user = session.query(User).filter_by(username=<span class="string">&quot;admin&quot;</span>).first()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">.first() 是 SQLAlchemy 查询的方法，用于获取查询结果中的第一个对象。如果查询返回多个结果，则只返回第一个匹配的对象；如果查询没有找到匹配项，则返回 None。</span></span><br><span class="line"><span class="string">如果要匹配多个结果，你可以使用 .all() 方法来获取查询返回的所有对象。</span></span><br><span class="line"><span class="string">users = session.query(User).filter_by(username=&quot;example_username&quot;).all()  </span></span><br><span class="line"><span class="string">for user in users:  </span></span><br><span class="line"><span class="string">    print(user.id, user.avatar, user.email)  </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> user:  </span><br><span class="line">    <span class="built_in">print</span>(user.<span class="built_in">id</span>, user.avatar, user.email)  </span><br><span class="line"><span class="comment"># 关闭会话  </span></span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure></li><li><p>更新数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建会话  </span></span><br><span class="line">session = DBSession()  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询需要更新的用户  </span></span><br><span class="line">user = session.query(User).filter_by(username=<span class="string">&quot;admin&quot;</span>).first()  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> user:  </span><br><span class="line">    user.nickname = <span class="string">&quot;admin123&quot;</span>  <span class="comment"># 更新昵称  </span></span><br><span class="line">    session.commit()  <span class="comment"># 提交更改  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭会话  </span></span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure></li><li><p>新增数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建会话</span></span><br><span class="line">session = DBSession()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个新用户对象并填充所有字段</span></span><br><span class="line">new_user = User(</span><br><span class="line">    avatar=<span class="string">&#x27;https://example.com/avatar.jpg&#x27;</span>,</span><br><span class="line">    create_time=datetime.utcnow(),</span><br><span class="line">    email=<span class="string">&#x27;new_email@example.com&#x27;</span>,</span><br><span class="line">    nickname=<span class="string">&#x27;New User&#x27;</span>,</span><br><span class="line">    password=<span class="string">&#x27;new_password123&#x27;</span>,</span><br><span class="line">    <span class="built_in">type</span>=<span class="number">2</span>,</span><br><span class="line">    update_time=datetime.utcnow(),</span><br><span class="line">    username=<span class="string">&#x27;new_username&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将新用户对象添加到会话中</span></span><br><span class="line">session.add(new_user)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交更改至数据库</span></span><br><span class="line">session.commit()</span><br></pre></td></tr></table></figure></li><li><p>删除数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建会话  </span></span><br><span class="line">session = DBSession()  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询需要删除的用户  </span></span><br><span class="line">user = session.query(User).filter_by(username=<span class="string">&quot;admin&quot;</span>).first()  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> user:  </span><br><span class="line">    session.delete(user)  <span class="comment"># 删除用户  </span></span><br><span class="line">    session.commit()  <span class="comment"># 提交更改  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭会话  </span></span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure></li><li><p>多表查询</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接 User, UserPost, 和 Post 表  </span></span><br><span class="line">query = session.query(User).join(User.posts).join(Post)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加查询条件  </span></span><br><span class="line">query = query.<span class="built_in">filter</span>(User.username == <span class="string">&#x27;admin&#x27;</span>)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取查询结果  </span></span><br><span class="line">results = query.<span class="built_in">all</span>()  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历结果并访问属性  </span></span><br><span class="line"><span class="keyword">for</span> user, post <span class="keyword">in</span> results:  </span><br><span class="line">    <span class="built_in">print</span>(user.username, post.title, post.content)</span><br></pre></td></tr></table></figure></li><li><p>匹配以特定字符串开头的值：</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">query <span class="operator">=</span> session.query(<span class="keyword">User</span>).<span class="keyword">filter</span>(User.username.like(<span class="string">&#x27;prefix%&#x27;</span>))  </span><br><span class="line"># 这将返回所有用户名以 &quot;prefix&quot; 开头的用户。</span><br></pre></td></tr></table></figure><ul><li>匹配以特定字符串结尾的值：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">query <span class="operator">=</span> session.query(<span class="keyword">User</span>).<span class="keyword">filter</span>(User.username.like(<span class="string">&#x27;%suffix&#x27;</span>)) </span><br><span class="line"># 这将返回所有用户名以 &quot;suffix&quot; 结尾的用户。</span><br></pre></td></tr></table></figure><ul><li>匹配包含特定字符串的值：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">query <span class="operator">=</span> session.query(<span class="keyword">User</span>).<span class="keyword">filter</span>(User.username.like(<span class="string">&#x27;%keyword%&#x27;</span>))  </span><br><span class="line"># 这将返回所有用户名中包含 &quot;keyword&quot; 的用户。</span><br></pre></td></tr></table></figure><ul><li>匹配特定长度的字符串：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">query <span class="operator">=</span> session.query(<span class="keyword">User</span>).<span class="keyword">filter</span>(User.username.like(<span class="string">&#x27;___&#x27;</span>))  </span><br><span class="line"># 这将返回用户名长度为 <span class="number">3</span> 的用户。</span><br></pre></td></tr></table></figure><ul><li>区间查询：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">query <span class="operator">=</span> session.query(<span class="keyword">User</span>).<span class="keyword">filter</span>(User.age.between(<span class="number">18</span>, <span class="number">30</span>))  </span><br><span class="line"># 这将返回所有年龄在 <span class="number">18</span> 到 <span class="number">30</span> 岁之间的用户。</span><br></pre></td></tr></table></figure><ul><li>区间排序：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">query <span class="operator">=</span> session.query(<span class="keyword">User</span>).order_by(User.age.asc())    </span><br><span class="line"># 这将返回按年龄升序排列的所有用户。</span><br><span class="line"></span><br><span class="line">query <span class="operator">=</span> session.query(<span class="keyword">User</span>).order_by(User.age.desc())</span><br><span class="line"># 这将返回按年龄降序排列的所有用户。</span><br></pre></td></tr></table></figure><ul><li>回滚操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 回滚操作示例  </span></span><br><span class="line"><span class="keyword">try</span>:  </span><br><span class="line">    <span class="comment"># 执行一些数据库操作  </span></span><br><span class="line">    session.commit()  </span><br><span class="line"><span class="keyword">except</span>:  </span><br><span class="line">    <span class="comment"># 如果出现异常，执行回滚操作  </span></span><br><span class="line">    session.rollback()  </span><br></pre></td></tr></table></figure><ul><li>函数操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 函数操作示例  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_user_by_id</span>(<span class="params">user_id</span>):  </span><br><span class="line">    <span class="keyword">return</span> session.query(User).<span class="built_in">filter</span>(User.<span class="built_in">id</span> == user_id).first()  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用函数获取用户对象  </span></span><br><span class="line">user = get_user_by_id(<span class="number">3</span>)  </span><br><span class="line"><span class="built_in">print</span>(user.username)</span><br></pre></td></tr></table></figure><ul><li><p>缓存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, String, create_engine, DateTime, Integer, Index  </span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker  </span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> declarative_base  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建对象的基类:  </span></span><br><span class="line">Base = declarative_base()  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义User对象:  </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">Base</span>):  </span><br><span class="line">    __tablename__ = <span class="string">&#x27;t_user&#x27;</span>  </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 数据库表结构  </span></span><br><span class="line">    <span class="built_in">id</span> = Column(String(<span class="number">20</span>), primary_key=<span class="literal">True</span>)  </span><br><span class="line">    avatar = Column(String(<span class="number">255</span>))  </span><br><span class="line">    create_time = Column(DateTime)  </span><br><span class="line">    email = Column(String(<span class="number">255</span>))  </span><br><span class="line">    nickname = Column(String(<span class="number">255</span>))  </span><br><span class="line">    password = Column(String(<span class="number">255</span>))  </span><br><span class="line">    <span class="built_in">type</span> = Column(Integer)  </span><br><span class="line">    update_time = Column(DateTime)  </span><br><span class="line">    username = Column(String(<span class="number">255</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化数据库连接:  </span></span><br><span class="line">engine = create_engine(<span class="string">&#x27;mysql+mysqlconnector://root:root@localhost:3306/blog&#x27;</span>)  </span><br><span class="line"><span class="comment"># 创建DBSession类型:  </span></span><br><span class="line">DBSession = sessionmaker(bind=engine)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 缓存操作示例（需要第三方库支持）：  </span></span><br><span class="line"><span class="keyword">from</span> flask_caching <span class="keyword">import</span> Cache  </span><br><span class="line"></span><br><span class="line">cache = Cache()  </span><br><span class="line"></span><br><span class="line"><span class="meta">@cache.memoize(<span class="params">timeout=<span class="number">60</span></span>)  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_user_by_id</span>(<span class="params">user_id</span>):  </span><br><span class="line">    <span class="keyword">return</span> DBSession().query(User).<span class="built_in">filter</span>(User.<span class="built_in">id</span> == user_id).first()  </span><br><span class="line"></span><br><span class="line">user1 = get_user_by_id(<span class="number">1</span>)  <span class="comment"># 第一次查询会被缓存  </span></span><br><span class="line">user2 = get_user_by_id(<span class="number">1</span>)  <span class="comment"># 第二次不会请求数据库，直接取缓存</span></span><br></pre></td></tr></table></figure></li><li><p>缓存更新策略</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 缓存更新策略示例：  </span></span><br><span class="line"><span class="comment"># 1. 缓存失效策略：在数据更新后使缓存失效  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_user</span>(<span class="params">user_id</span>):  </span><br><span class="line">    <span class="comment"># 更新用户信息的操作  </span></span><br><span class="line">    <span class="comment"># 在更新完成后，使缓存失效  </span></span><br><span class="line">    cache.delete_memoized(get_user_by_id, user_id)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 定时刷新策略：定期刷新缓存  </span></span><br><span class="line"><span class="keyword">from</span> apscheduler.schedulers.background <span class="keyword">import</span> BackgroundScheduler  </span><br><span class="line"></span><br><span class="line">scheduler = BackgroundScheduler()  </span><br><span class="line">scheduler.add_job(update_cache, <span class="string">&#x27;interval&#x27;</span>, minutes=<span class="number">30</span>)  <span class="comment"># 每30分钟刷新一次缓存  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 事件驱动更新：使用事件机制通知缓存更新  </span></span><br><span class="line"><span class="comment"># 假设有一个事件触发器在用户信息更新时触发事件  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_user_update</span>(<span class="params">user_id</span>):  </span><br><span class="line">    <span class="comment"># 更新用户信息后，触发事件通知缓存更新  </span></span><br><span class="line">    cache.delete_memoized(get_user_by_id, user_id)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象字面量代替Switch</title>
      <link href="/2023/06/08/%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F%E4%BB%A3%E6%9B%BFswitch/"/>
      <url>/2023/06/08/%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F%E4%BB%A3%E6%9B%BFswitch/</url>
      
        <content type="html"><![CDATA[<p>当我们需要根据一个变量的不同取值执行不同的逻辑时，通常会使用 <code>switch</code> 语句。但是在某些情况下，可以使用对象字面量（即普通的 JavaScript 对象）来代替 <code>switch</code> 语句，使代码更加简洁和易于维护。</p><p>以下是一个使用对象字面量代替 <code>switch</code> 的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 switch 语句  </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getFruitColor</span>(<span class="params">fruit</span>) &#123;  </span><br><span class="line">  <span class="keyword">let</span> color;  </span><br><span class="line">  <span class="keyword">switch</span> (fruit) &#123;  </span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;apple&#x27;</span>:  </span><br><span class="line">      color = <span class="string">&#x27;red&#x27;</span>;  </span><br><span class="line">      <span class="keyword">break</span>;  </span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;banana&#x27;</span>:  </span><br><span class="line">      color = <span class="string">&#x27;yellow&#x27;</span>;  </span><br><span class="line">      <span class="keyword">break</span>;  </span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;grape&#x27;</span>:  </span><br><span class="line">      color = <span class="string">&#x27;purple&#x27;</span>;  </span><br><span class="line">      <span class="keyword">break</span>;  </span><br><span class="line">    <span class="attr">default</span>:  </span><br><span class="line">      color = <span class="string">&#x27;unknown&#x27;</span>;  </span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="keyword">return</span> color;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用对象字面量代替 switch  </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getFruitColor</span>(<span class="params">fruit</span>) &#123;  </span><br><span class="line">  <span class="keyword">const</span> fruitColors = &#123;  </span><br><span class="line">    <span class="attr">apple</span>: <span class="string">&#x27;red&#x27;</span>,  </span><br><span class="line">    <span class="attr">banana</span>: <span class="string">&#x27;yellow&#x27;</span>,  </span><br><span class="line">    <span class="attr">grape</span>: <span class="string">&#x27;purple&#x27;</span>,  </span><br><span class="line">    <span class="attr">unknown</span>: <span class="string">&#x27;unknown&#x27;</span>  </span><br><span class="line">  &#125;;  </span><br><span class="line">  </span><br><span class="line">   <span class="keyword">return</span> fruitColors[fruit] || fruitColors[<span class="string">&#x27;unknown&#x27;</span>];  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getFruitColor</span>(<span class="string">&#x27;apple&#x27;</span>)); <span class="comment">// 输出：&quot;red&quot;  </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getFruitColor</span>(<span class="string">&#x27;watermelon&#x27;</span>)); <span class="comment">// 输出：&quot;unknown&quot;  </span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js继承</title>
      <link href="/2023/06/07/js%E7%BB%A7%E6%89%BF/"/>
      <url>/2023/06/07/js%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h4 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a><strong>原型链继承</strong></h4><p>​原型链继承是一种实现对象之间继承关系的方法，通过让一个对象的原型指向另一个对象，从而使得子对象可以继承父对象的属性和方法</p><p>​步骤：</p><ol><li><strong>创建父对象</strong>：首先创建一个父对象，可以是一个普通对象或者一个构造函数。</li><li><strong>创建子对象</strong>：然后创建一个子对象，通过将子对象的原型指向父对象来实现继承。</li><li><strong>继承属性和方法</strong>：子对象通过原型链继承了父对象的属性和方法，可以访问和使用它们</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建了一个父对象parent，其中包含一个sayHello方法。然后我们创建了一个子对象child，通过Object.create()方法将子对象的原型指向父对象</span></span><br><span class="line"><span class="keyword">let</span> parent = &#123;</span><br><span class="line">    <span class="attr">sayHello</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello from parent!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 创建一个子对象，并将其原型指向父对象</span></span><br><span class="line"><span class="keyword">let</span> child = <span class="title class_">Object</span>.<span class="title function_">create</span>(parent);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子对象继承父对象的方法</span></span><br><span class="line">child.<span class="title function_">sayHello</span>(); <span class="comment">// Output: Hello from parent!</span></span><br></pre></td></tr></table></figure><p>其他：</p><ol><li><strong>原型链继承的问题</strong>：原型链继承有一个问题，就是所有子对象共享父对象的属性和方法。这意味着<strong>如果一个子对象修改了继承的属性或方法，会影响到所有其他子对象。</strong>可以思考如何解决这个问题。</li><li><strong>多层继承</strong>：可以尝试创建多层继承关系，即子对象的原型指向另一个子对象，从而实现多层继承。</li><li><strong>构造函数和原型链结合</strong>：可以结合构造函数和原型链继承来实现更灵活的继承方式，即使用构造函数定义对象的特定属性，使用原型链继承共享的属性和方法</li></ol><h4 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a><strong>构造函数继承</strong></h4><p>​构造函数继承是一种实现对象之间继承关系的方法，通过在子构造函数中调用父构造函数来实现属性的继承。这种继承方式也被称为经典继承或伪经典继承。</p><p>​步骤：</p><ol><li><strong>定义父构造函数</strong>：首先定义一个父构造函数，该构造函数包含要被继承的属性和方法。</li><li><strong>定义子构造函数</strong>：然后定义一个子构造函数，通过在子构造函数中调用父构造函数来继承父构造函数的属性。</li><li><strong>继承属性</strong>：子对象通过构造函数继承父对象的属性，每个子对象都有自己的一份属性副本。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义了一个父构造函数Animal和一个子构造函数Dog。在子构造函数中，通过Animal.call(this, name)调用父构造函数来继承父对象的属性。这样子对象就可以拥有父对象的属性和方法。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在父构造函数的原型上添加方法</span></span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;My name is &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义子构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dog</span>(<span class="params">name, breed</span>) &#123;</span><br><span class="line">    <span class="comment">// 继承父构造函数的属性</span></span><br><span class="line">    <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">breed</span> = breed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个子对象</span></span><br><span class="line"><span class="keyword">let</span> myDog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;Buddy&#x27;</span>, <span class="string">&#x27;Labrador&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子对象继承父对象的方法</span></span><br><span class="line">myDog.<span class="title function_">sayName</span>(); <span class="comment">// Output: My name is Buddy</span></span><br></pre></td></tr></table></figure><p>其他：</p><ol><li><strong>原型链与构造函数继承结合</strong>：可以结合原型链和构造函数继承来实现更灵活的继承方式，即使用构造函数继承属性，使用原型链继承共享的方法。</li><li><strong>继承多个构造函数</strong>：可以尝试在子构造函数中调用多个父构造函数来继承多个对象的属性。</li><li><strong>继承方法</strong>：除了继承属性，还可以尝试在子构造函数中继承父对象的方法，而不仅仅是属性。</li></ol><h4 id="组合式继承"><a href="#组合式继承" class="headerlink" title="组合式继承"></a><strong>组合式继承</strong></h4><p>​组合式继承（Combination Inheritance）是一种结合了构造函数继承和原型链继承的继承方式，可以解决构造函数继承和原型链继承各自的缺点，实现属性和方法的有效继承</p><p>​步骤：</p><ol><li><strong>构造函数继承</strong>：通过在子构造函数中调用父构造函数来继承属性。</li><li><strong>原型链继承</strong>：通过将子构造函数的原型指向一个父构造函数的实例来继承方法。</li><li><strong>优点</strong>：组合式继承结合了构造函数继承和原型链继承的优点，避免了它们各自的缺点，实现了属性和方法的有效继承</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义了一个父构造函数Animal和一个子构造函数Dog。在子构造函数中，通过Animal.call(this, name)调用父构造函数来继承父对象的属性，然后通过Dog.prototype = Object.create(Animal.prototype)来继承父对象的方法。这样子对象就可以拥有父对象的属性和方法。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在父构造函数的原型上添加方法</span></span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;My name is &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义子构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dog</span>(<span class="params">name, breed</span>) &#123;</span><br><span class="line">    <span class="comment">// 继承父构造函数的属性</span></span><br><span class="line">    <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">breed</span> = breed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承父构造函数的方法</span></span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Dog</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个子对象</span></span><br><span class="line"><span class="keyword">let</span> myDog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;Buddy&#x27;</span>, <span class="string">&#x27;Labrador&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子对象继承父对象的属性和方法</span></span><br><span class="line">myDog.<span class="title function_">sayName</span>(); <span class="comment">// Output: My name is Buddy</span></span><br></pre></td></tr></table></figure><ol><li><strong>优化组合式继承</strong>：可以进一步优化组合式继承，避免调用两次父构造函数，以提高性能。</li><li><strong>ES6类继承</strong>：可以尝试使用ES6中的类继承语法来实现继承，更加简洁和易读。</li><li><strong>混合继承</strong>：可以结合多种继承方式，如构造函数继承、原型链继承、组合式继承等，来满足不同的继承需求。</li></ol><h4 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a><strong>寄生组合式继承</strong></h4><p>​寄生组合式继承（Parasitic Combination Inheritance）是对组合式继承的一种优化，通过使用寄生式继承来减少调用父构造函数的次数，提高性能。</p><p>​优缺点：</p><ol><li><strong>组合式继承的缺点</strong>：组合式继承会调用两次父构造函数，一次是在子构造函数中继承属性时，另一次是在设置子构造函数的原型时。这样会导致父构造函数被调用两次，影响性能。</li><li><strong>寄生组合式继承的优化</strong>：寄生组合式继承通过使用一个空函数作为中介，来减少对父构造函数的不必要调用，提高性能。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义了一个寄生函数inheritPrototype，它通过创建父构造函数原型的副本，并将其赋值给子构造函数的原型，来实现寄生组合式继承。这样就避免了多次调用父构造函数，提高了性能。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在父构造函数的原型上添加方法</span></span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;My name is &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义寄生函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">inheritPrototype</span>(<span class="params">subType, superType</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> prototype = <span class="title class_">Object</span>.<span class="title function_">create</span>(superType.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// 创建父构造函数原型的副本</span></span><br><span class="line">    prototype.<span class="property">constructor</span> = subType; <span class="comment">// 修正constructor属性</span></span><br><span class="line">    subType.<span class="property"><span class="keyword">prototype</span></span> = prototype; <span class="comment">// 设置子构造函数的原型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义子构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dog</span>(<span class="params">name, breed</span>) &#123;</span><br><span class="line">    <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name); <span class="comment">// 继承父构造函数的属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">breed</span> = breed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用寄生式继承</span></span><br><span class="line"><span class="title function_">inheritPrototype</span>(<span class="title class_">Dog</span>, <span class="title class_">Animal</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个子对象</span></span><br><span class="line"><span class="keyword">let</span> myDog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;Buddy&#x27;</span>, <span class="string">&#x27;Labrador&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子对象继承父对象的属性和方法</span></span><br><span class="line">myDog.<span class="title function_">sayName</span>(); <span class="comment">// Output: My name is Buddy</span></span><br></pre></td></tr></table></figure><p>其他：</p><ol><li><strong>继承多个父对象</strong>：可以尝试在寄生函数中实现继承多个父对象的属性和方法。</li><li><strong>优化寄生式继承</strong>：可以进一步优化寄生式继承的实现方式，提高代码的可读性和性能。</li><li><strong>使用工厂模式</strong>：可以结合工厂模式来改进继承的实现方式，实现更灵活的继承方式</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typeof和instanceof判断对象类型</title>
      <link href="/2023/05/29/typeof%E5%92%8Cinstanceof%E5%88%A4%E6%96%AD%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B/"/>
      <url>/2023/05/29/typeof%E5%92%8Cinstanceof%E5%88%A4%E6%96%AD%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="typeof-和-instanceof-判断类型对象"><a href="#typeof-和-instanceof-判断类型对象" class="headerlink" title="typeof 和 instanceof 判断类型对象"></a>typeof 和 instanceof 判断类型对象</h4><ul><li>typeof : 适用于判断基本类型、方法对象等。判断所有对象，都返回对象[Object, Object]</li><li>instanceof : 适用于判断对象(Object)。判断对象比较详细</li></ul><ol><li><code>typeof</code> 操作符：</li></ol><ul><li>优点：<ul><li><code>typeof</code> 可以用来判断基本数据类型和函数类型。</li><li>使用简单，对于基本数据类型和函数，都可以直接使用 <code>typeof</code> 进行判断。</li></ul></li><li>缺点：<ul><li>对于引用数据类型（如数组、对象等），使用 <code>typeof</code> 则无法准确区分其具体的子类型。</li><li>对于 null 类型，使用 typeof 返回的是 “object”，这可能会导致混淆。</li></ul></li></ul><p>示例使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">console.log(typeof 42); // 输出: &quot;number&quot;  </span><br><span class="line">console.log(typeof &quot;hello&quot;); // 输出: &quot;string&quot;  </span><br><span class="line">console.log(typeof true); // 输出: &quot;boolean&quot;  </span><br><span class="line">console.log(typeof undefined); // 输出: &quot;undefined&quot;  </span><br><span class="line">console.log(typeof null); // 注意：输出为&quot;object&quot;，这是 typeof 的一个缺陷  </span><br><span class="line">console.log(typeof &#123;&#125;); // 输出: &quot;object&quot;  </span><br><span class="line">console.log(typeof []); // 输出: &quot;object&quot;（数组也被判断为 object）  </span><br></pre></td></tr></table></figure><ol start="2"><li><code>instanceof</code> 操作符：</li></ol><ul><li>优点：<ul><li>可以准确地判断对象的具体子类型。</li><li>对自定义构造函数创建的实例进行检查时非常有用。</li></ul></li><li>缺点：<ul><li>如果在多个框架或窗口间传递对象，则可能出现问题。因为每个窗口&#x2F;框架都有自己独立的全局执行环境和相应的构造函数。</li></ul></li></ul><p>示例使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function Car(make, model) &#123;  </span><br><span class="line">  this.make = make;  </span><br><span class="line">  this.model = model;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">let car = new Car(&#x27;Toyota&#x27;, &#x27;Corolla&#x27;);  </span><br><span class="line">console.log(car instanceof Car) ;// true  </span><br><span class="line"></span><br><span class="line">let myString = new String(&#x27;Hello&#x27;);  </span><br><span class="line">console.log(myString instanceof String);// true  </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Js重点难点</title>
      <link href="/2023/05/17/js%E9%87%8D%E7%82%B9%E9%9A%BE%E7%82%B9/"/>
      <url>/2023/05/17/js%E9%87%8D%E7%82%B9%E9%9A%BE%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h4 id="const-let-var"><a href="#const-let-var" class="headerlink" title="const let var"></a>const let var</h4><p>var 存在声明提升，值为undefined；可以重复声明，声明后被覆盖</p><p>let 不存在声明提升，所以会存在暂时性死区；在同一个作用域内不能重复声明，声明的变量在所在的代码块内有效</p><p>const 定义常量，所以一旦声明就需要立即初始化,声明的变量在所在的代码块内有效，在同一个作用域内不能重复声明</p><h4 id="js数据类型"><a href="#js数据类型" class="headerlink" title="js数据类型"></a>js数据类型</h4><ul><li><p>基本数据类型</p><ol><li>Number</li><li>String</li><li>Boolean</li><li>Undefined</li><li>null</li><li>symbol</li></ol></li><li><p>引用类型（object）</p><p>复杂数据类型统称为Object  es6新添加有 Set  Map</p></li></ul><p>基本数据类型存储在栈中；引用类型的对象存储在堆中</p><p>当变量赋值，解析器首先要确认引用类型还是基本类型</p><ul><li>声明变量时不同的内存地址分配：<ul><li>简单类型的值存放在栈中，在栈中存放的是对应的值</li><li>引用类型对应的值存储在堆中，在栈中存放的是指向堆内存的地址</li></ul></li><li>不同的类型数据导致赋值变量时的不同：<ul><li>简单类型赋值，是生成相同的值，两个对象对应不同的地址</li><li>复杂类型赋值，是将保存对象的内存地址赋值给另一个变量。也就是两个变量指向堆内存中同一个对象</li></ul></li></ul><p>!!! es6新增基本数据类型Symbol</p><p>​因为对象属性的数据类型都是字符串，会导致属性名重复；symbol就是解决对象属性名重复，导致属性值被覆盖的问题</p><ul><li><p>唯一性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>() === <span class="title class_">Symbol</span>() )<span class="comment">//false</span></span><br><span class="line"><span class="comment">//类似于NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span>() === <span class="title class_">NaN</span>() )<span class="comment">//false</span></span><br></pre></td></tr></table></figure></li><li><p>不具备迭代器接口( !Symbo.iterator ) 不能用for in  或 for of 循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">12</span>,</span><br><span class="line">    [<span class="title class_">Symbol</span>(<span class="string">&#x27;level&#x27;</span>)]: <span class="string">&#x27;A&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//需要用Reflect.ownKeys() 才能获取到所有的key</span></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(person)</span><br></pre></td></tr></table></figure></li><li><p>Symbol.for()  与 Symbol.keyFor()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">s1 == s2 <span class="comment">//true   创建Symbol.for(&#x27;foo&#x27;)会全局寻找是否之前创建过Symbol.for(&#x27;foo&#x27;)，如果有则直接使用以创建的没有则创建</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="数组常用方法"><a href="#数组常用方法" class="headerlink" title="数组常用方法"></a>数组常用方法</h4><ul><li>增<ul><li>push() unshift()splice()concat()</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//push()  接收任意数量参数，并添加到末尾，返回数组最新长度</span></span><br><span class="line"><span class="keyword">let</span> colors = []</span><br><span class="line"><span class="keyword">let</span> count = colors.<span class="title function_">push</span>(<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count) <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//unshift()  在数组开头添加任意多个值，然后返回新的数组长度</span></span><br><span class="line"><span class="keyword">let</span> colors = <span class="keyword">new</span> <span class="title class_">Array</span></span><br><span class="line"><span class="keyword">let</span> count = colors.<span class="title function_">unshift</span>(<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count) <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// splice() 传入3个参数，分别是(开始位置, 要删除的元素数量, 插入的元素...) ， 返回空数组 </span></span><br><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> removed = colors.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;orange&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors)<span class="comment">// [&quot;red&quot;, &quot;yellow&quot;, &quot;orange&quot;, &quot;blue&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(removed)  <span class="comment">//  []</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//concat()  会先创建当前数组的副本， 然后把参数添加到副本末尾，最后返回新构建的数组，不会影响原始数组</span></span><br><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> removed = colors.<span class="title function_">concat</span>(<span class="string">&quot;yellow&quot;</span>, [<span class="string">&quot;orange&quot;</span>, <span class="string">&quot;blue&quot;</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors)<span class="comment">//  [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;] </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(removed)  <span class="comment">//  [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;orange&quot;, &quot;blue&quot;]</span></span><br></pre></td></tr></table></figure><ul><li>删<ul><li>pop()shift()splice()slice()</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//pop() 用于删除数组的最后一项，返回被删除项</span></span><br><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> item = colors.<span class="title function_">pop</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item)  <span class="comment">//&quot;green&quot;</span></span><br><span class="line"><span class="variable language_">console</span>,<span class="title function_">log</span>(colors, colors.<span class="property">length</span>) <span class="comment">// [&quot;red&quot;] 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//shift() 用于删除数组第一项，同时返回删除项</span></span><br><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> item = colors.<span class="title function_">shift</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item)  <span class="comment">//&quot;red&quot;</span></span><br><span class="line"><span class="variable language_">console</span>,<span class="title function_">log</span>(colors, colors.<span class="property">length</span>) <span class="comment">// [&quot;green&quot;] 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//spice() 传入两个参数，不传第三个参数，只删减不添加,返回空数组</span></span><br><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> removed = colors.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors)<span class="comment">// [&quot;red&quot;, &quot;blue&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(removed)  <span class="comment">//  []</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//slice()用于创建一个原数组中包含的数组，生成系数组，不影响原数组</span></span><br><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;purple&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> colors2 = colors.<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> colors3 = colors.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">let</span> colors4 = colors.<span class="title function_">slice</span>(-<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> colors5 = colors.<span class="title function_">slice</span>(-<span class="number">2</span>);</span><br><span class="line"><span class="keyword">let</span> colors6 = colors.<span class="title function_">slice</span>(<span class="number">1</span>，-<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors)   <span class="comment">// [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;purple&quot;]</span></span><br><span class="line">concole.<span class="title function_">log</span>(colors2); <span class="comment">// [&quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;purple&quot;]</span></span><br><span class="line">concole.<span class="title function_">log</span>(colors3); <span class="comment">// [&quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;]</span></span><br><span class="line">concole.<span class="title function_">log</span>(colors4); <span class="comment">// [&quot;purple&quot;]</span></span><br><span class="line">concole.<span class="title function_">log</span>(colors5); <span class="comment">// [&quot;yellow&quot;, &quot;purple&quot;]</span></span><br><span class="line">concole.<span class="title function_">log</span>(colors6); <span class="comment">// [&quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;]</span></span><br></pre></td></tr></table></figure><ul><li>改<ul><li>splice()删一个加一个，相当于改</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下标</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">10</span>; <span class="comment">// 将数组中索引为2的元素修改为10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [1, 2, 10, 4, 5]</span></span><br><span class="line"><span class="comment">// splice()</span></span><br><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> removed = colors.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;red&quot;</span>, <span class="string">&quot;purple&quot;</span>); <span class="comment">// 插入两个值，删除一个元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors); <span class="comment">// red,red,purple,blue</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(removed); <span class="comment">// green，只有一个元素的数组</span></span><br></pre></td></tr></table></figure><ul><li>查<ul><li>indexOf()includes()find()</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// indexOf() 返回查找元素位置，找到返回index，找不到返回 -1</span></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line">numbers.<span class="title function_">indexOf</span>(<span class="number">4</span>) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//includes() 返回查找元素位置，找到返回true， 找不到返回 false</span></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line">numbers.<span class="title function_">includes</span>(<span class="number">4</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">find(callback[, thisArg])</span></span><br><span class="line"><span class="comment">第一个参数是函数类似一个for循环 (item, index, array) =&gt; item &gt; 10</span></span><br><span class="line"><span class="comment">element:数组中当前正在处理的元素</span></span><br><span class="line"><span class="comment">index:正在处理的元素在数组中的索引</span></span><br><span class="line"><span class="comment">array: 调用该方法的数组</span></span><br><span class="line"><span class="comment">将在调用 callbackFn 时用作 this 值*/</span></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line">numbers.<span class="title function_">find</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item &gt; <span class="number">3</span>) <span class="comment">// 当callback返回true时,会返回当前元素item，后结束循环;如果提供 thisArg 參數予 find，其將會被當作 callback 每次被呼叫的 this。若是沒提供，則會使用 undefined (en-US)。</span></span><br><span class="line"><span class="keyword">var</span> inventory = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;apples&quot;</span>, <span class="attr">quantity</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;bananas&quot;</span>, <span class="attr">quantity</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;cherries&quot;</span>, <span class="attr">quantity</span>: <span class="number">5</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isCherries</span>(<span class="params">fruit</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> fruit.<span class="property">name</span> === <span class="string">&quot;cherries&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(inventory.<span class="title function_">find</span>(isCherries));</span><br><span class="line"><span class="comment">// &#123; name: &#x27;cherries&#x27;, quantity: 5 &#125;</span></span><br></pre></td></tr></table></figure><ul><li>排序<ul><li>reverse() 反转 sort() 传入一个比较函数</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">compare</span>(<span class="params">value1, value2</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value1 &lt; value2) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;   <span class="comment">// value1 在前</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value1 &gt; value2) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//value2 在前</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//保持不变</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> values = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>];</span><br><span class="line">values.<span class="title function_">sort</span>(compare);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(values.<span class="title function_">sort</span>())<span class="comment">//[0,1,10,15,5]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(values); <span class="comment">// [0,1,5,10,15]</span></span><br></pre></td></tr></table></figure><ul><li><p>转换方法</p><ul><li>join() 方法接收一个参数，即字符串分隔符，返回包含所有项的字符串</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">12</span>,<span class="number">23</span>,<span class="number">34</span>]</span><br><span class="line"><span class="keyword">let</span> arr = array.<span class="title function_">join</span>(<span class="string">&quot;+&quot;</span>) <span class="comment">// &quot;12+23+34&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>迭代方法</p><ul><li>some()[ES6]every()[ES6]forEach()filter()map()</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//some()对数组每一项都运行传入的测试函数，如果至少有1个元素返回 true ，则这个方法返回 true</span></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> someResult = numbers.<span class="title function_">some</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item &gt; <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(someResult) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//every()对数组每一项都运行传入的测试函数，如果所有元素都返回 true ，则这个方法返回 true</span></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> everyResult = numbers.<span class="title function_">every</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item &gt; <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(everyResult) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//forEach()对数组每一项都运行传入的函数，没有返回值</span></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line">numbers.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 执行某些操作</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//filter()对数组每一项都运行传入的函数，函数返回 true 的项会组成数组之后返回</span></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> filterResult = numbers.<span class="title function_">filter</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item &gt; <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filterResult); <span class="comment">// [3,4,5,4,3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//map() 对数组每一项都运行传入的函数，返回由每次函数调用的结果构成的数组</span></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> mapResult = numbers.<span class="title function_">map</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item * <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mapResult) <span class="comment">// [2,4,6,8,10,8,6,4,2]</span></span><br></pre></td></tr></table></figure><ul><li><p>ES6新增数组方法 </p><ul><li>Array构造函数新增方法：扩展运算符Array.from()Array.of()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//扩展运算符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])<span class="comment">// 1 2 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>, ...[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>)<span class="comment">// 1 2 3 4 5</span></span><br><span class="line">[...<span class="string">&#x27;hello&#x27;</span>]<span class="comment">// [ &quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot; ]</span></span><br><span class="line">[...<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>)]<span class="comment">// [&lt;div&gt;, &lt;div&gt;, &lt;div&gt;]   伪数组转成真数组</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">伪数组：伪数组没有Array.prototype，它只是一个对象；伪数组的索引，就是那些键值对的key，没有真正的顺序可言；长度是手动设置的</span></span><br><span class="line"><span class="comment">数组：数组有Array.prototype，他是对象的同时，也是数组；数组的索引和长度是内置属性</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Array.from()将两类对象转为真正的数组：类似数组的对象和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）</span></span><br><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="attr">length</span>: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="title class_">Array</span>.<span class="title function_">from</span>(arrayLike); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br><span class="line"><span class="comment">//还可以接受第二个参数，用来对每个元素进行处理</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function">(<span class="params">x</span>) =&gt;</span> x * x)<span class="comment">// [1, 4, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Array.of()</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">没有参数的时候，返回一个空数组;</span></span><br><span class="line"><span class="comment">将一组值，转换为数组*/</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">of</span>()         <span class="comment">// []</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">3</span>)<span class="comment">// [3]</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">3</span>, <span class="number">11</span>, <span class="number">8</span>) <span class="comment">// [3,11,8]</span></span><br></pre></td></tr></table></figure><ul><li>实例对象新增方法：copyWithin()    find()、findIndex()      fill()        entries()，keys()，values()          includes()         flat()，flatMap()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fill() 使用给定值，填充一个数组</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">3</span>).<span class="title function_">fill</span>(<span class="number">7</span>)<span class="comment">// [7, 7, 7]</span></span><br><span class="line"><span class="comment">//还可以带上参数，填充到指定位置</span></span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>].<span class="title function_">fill</span>(<span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>)<span class="comment">// [&#x27;a&#x27;, 7, &#x27;c&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//entries()，keys()，values()</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">entries()是对键值对的遍历</span></span><br><span class="line"><span class="comment">keys()是对键名的遍历</span></span><br><span class="line"><span class="comment">values()是对键值的遍历*/</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [index, item] <span class="keyword">of</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].<span class="title function_">entries</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(index, item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0 &quot;a&quot;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].<span class="title function_">keys</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].<span class="title function_">values</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#x27;a&#x27;</span></span><br><span class="line"><span class="comment">// &#x27;b&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//flat()数组扁平化处理</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]].<span class="title function_">flat</span>(<span class="number">2</span>)<span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="comment">// flatMap()相当于 [[2, 4], [3, 6], [4, 8]].flat()  </span></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].<span class="title function_">flatMap</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> [x, x * <span class="number">2</span>]) <span class="comment">//[2, 4, 3, 6, 4, 8]</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="数组incloudes方法"><a href="#数组incloudes方法" class="headerlink" title="数组incloudes方法"></a>数组incloudes方法</h4><p>可以简便实现同一个属性的多种判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正常判断用法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printAnimals</span>(<span class="params">animal</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(animal === <span class="string">&#x27;dog&#x27;</span> || animal === <span class="string">&#x27;cat&#x27;</span> || animal === <span class="string">&#x27;hamster&#x27;</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`has a animal <span class="subst">$&#123;anomal&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用incloudes方法,也能实现上面的功能</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printAnimals</span>(<span class="params">animal</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> animals = [<span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;hamster&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span>(animals.<span class="title function_">includes</span>(animal))&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(animal)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">printAnimals</span>(<span class="string">&#x27;dog&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="字符串常用方法"><a href="#字符串常用方法" class="headerlink" title="字符串常用方法"></a>字符串常用方法</h4><ul><li>增concat</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//concat 用于将一个或多个字符串拼接成新字符串,不会改变原字符串</span></span><br><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello &quot;</span></span><br><span class="line"><span class="keyword">let</span> result = stringValue.<span class="title function_">concat</span>(<span class="string">&quot;work&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">//&quot;hello work&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue)  <span class="comment">//&quot;hello &quot;</span></span><br></pre></td></tr></table></figure><ul><li>删slice()substr()substring()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello word&quot;</span></span><br><span class="line"><span class="comment">//slice() 传入一个参数，或两个参数；开始截取位置，与结束位置</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">slice</span>(<span class="number">3</span>)); <span class="comment">// &quot;lo world&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">slice</span>(<span class="number">3</span>, <span class="number">7</span>)); <span class="comment">// &quot;lo w&quot;</span></span><br><span class="line"><span class="comment">//substring()传入一个参数，或两个参数；开始截取位置，与结束位置</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">substring</span>(<span class="number">3</span>)); <span class="comment">// &quot;lo world&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">substring</span>(<span class="number">3</span>,<span class="number">7</span>)); <span class="comment">// &quot;lo w&quot;</span></span><br><span class="line"><span class="comment">//substr() 传入一个参数，或两个参数；开始截取位置，与切取数量</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">substr</span>(<span class="number">3</span>)); <span class="comment">// &quot;lo world&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">substr</span>(<span class="number">3</span>, <span class="number">7</span>)); <span class="comment">// &quot;lo worl&quot;</span></span><br></pre></td></tr></table></figure><ul><li><p>改</p><ul><li>trim()trimLeft()trimRight()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;  hello world  &quot;</span></span><br><span class="line"><span class="comment">//trim()删除前后打头的所有空格符，返回新字符串</span></span><br><span class="line"><span class="keyword">let</span> trimStringValue = stringValue.<span class="title function_">trim</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(trimStringValue)   <span class="comment">// &quot;hello word&quot;</span></span><br><span class="line"><span class="comment">//trimLeft()删除前面打头所有空格，返回新字符串</span></span><br><span class="line"><span class="keyword">let</span> trimLeftStringValue = stringValue.<span class="title function_">trimLeft</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(trimLeftStringValue)<span class="comment">//“hello word  ”</span></span><br><span class="line"><span class="comment">//trimRight()删除后面打头所有空格，返回新字符串</span></span><br><span class="line"><span class="keyword">let</span> trimRightStringValue = stringValue.<span class="title function_">trimRight</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(trimRightStringValue)<span class="comment">//&quot;  hello word&quot;</span></span><br></pre></td></tr></table></figure><ul><li>repeat()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//repeat()接收一个整数参数，表示要将字符串复制多少，然后返回拼接所有副本后的结果</span></span><br><span class="line"><span class="keyword">let</span> strintValue = <span class="string">&quot;nana &quot;</span></span><br><span class="line"><span class="keyword">let</span> copyResult = stringValue.<span class="title function_">repeat</span>(<span class="number">2</span>) <span class="comment">//&quot;nana nana &quot;</span></span><br></pre></td></tr></table></figure><ul><li>padStart()    podEnd()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;foo&quot;</span></span><br><span class="line"><span class="comment">//padStart()复制字符串，如果小于指定长度，则在前面填充字符，直到长度满足,默认填充空格</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">padStart</span>(<span class="number">6</span>))<span class="comment">// &quot;   foo&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">padStart</span>(<span class="number">6</span>，<span class="string">&quot;a&quot;</span>))<span class="comment">// &quot;aaafoo&quot;</span></span><br><span class="line"><span class="comment">//padEnd()复制字符串，如果小于指定长度，则在后面填充字符，直到长度满足,默认填充空格</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">padEnd</span>(<span class="number">6</span>))<span class="comment">// &quot;foo   &quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">padEnd</span>(<span class="number">6</span>，<span class="string">&quot;a&quot;</span>))<span class="comment">// &quot;fooaaa&quot;</span></span><br></pre></td></tr></table></figure><ul><li>toLowerCase()      toUpperCase()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello word&quot;</span></span><br><span class="line"><span class="comment">// toLowerCase()  将字符串转成小写</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">toUpperCase</span>())<span class="comment">//&quot;&quot;hello word&quot;&quot;</span></span><br><span class="line"><span class="comment">// toUpperCase()  将字符串转成大写</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">toLowerCase</span>())<span class="comment">//&quot;HELLO WORD&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>查</p><ul><li>chatAt()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//chatAt()返回给定索引位置的字符</span></span><br><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello word&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">charAt</span>(<span class="number">2</span>))<span class="comment">//&quot;l&quot;</span></span><br></pre></td></tr></table></figure><ul><li>indexOf()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//indexOf()从字符串开头去搜索传入的字符串，并返回索引位置（没有找到，则返回-1）</span></span><br><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello word&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">indexOf</span>(<span class="string">&quot;o&quot;</span>))<span class="comment">//4</span></span><br></pre></td></tr></table></figure><ul><li>startsWith()includes()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从字符串中搜索传入字符串，并返回一个表示是否包含的返回布尔值</span></span><br><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello word&quot;</span></span><br><span class="line"><span class="comment">//startWith()</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">startsWith</span>(llo))<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">startsWith</span>(oll))<span class="comment">//false</span></span><br><span class="line"><span class="comment">//includes()</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">includes</span>(oll))<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">includes</span>(llo))<span class="comment">//true</span></span><br></pre></td></tr></table></figure></li><li><p>转换成数组</p><ul><li>splic() <a href="#%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95">跟 数组方法 join() 相反</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;12+13+14&quot;</span></span><br><span class="line"><span class="keyword">let</span> arr = str.<span class="title function_">split</span>(<span class="string">&quot;+&quot;</span>)<span class="comment">//[12, 23, 34]</span></span><br></pre></td></tr></table></figure></li><li><p>模板匹配</p><ul><li>match()search()replace()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;cat, bat, sat, fat&quot;</span></span><br><span class="line"><span class="comment">//match()接收一个参数，可以是正则表达式，也可以是RexExp对象，返回数组</span></span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/.at/</span>;</span><br><span class="line"><span class="keyword">let</span> matches = text.<span class="title function_">match</span>(pattern)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(matches[<span class="number">0</span>])<span class="comment">//&quot;cat&quot;只要遇到匹配的后续不会再进行匹配</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//search()接收一个参数，可以是一个正则表达式字符串，也可以是一个RegExp对象，找到则返回匹配索引，否则返回 -1</span></span><br><span class="line"><span class="keyword">let</span> pos = text.<span class="title function_">search</span>(<span class="regexp">/at/</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pos)<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//replace()接收两个参数，第一个参数为匹配的内容，第二个参数为替换的元素(可用函数),返回替换后的字符串，只会更换第一个匹配的字符串</span></span><br><span class="line"><span class="keyword">let</span> result = text.<span class="title function_">replace</span>(<span class="string">&quot;at&quot;</span>, <span class="string">&quot;omd&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)<span class="comment">//&quot;comd, bat, sat, fat&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>字符串反转（应用）</p></li></ul><ol><li>利用扩展运算符变成数组(或字符串的split() 方法)，对数组进行反转，在合并成字符串</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;123456&quot;</span></span><br><span class="line"><span class="keyword">let</span> unstr = [...str].<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);<span class="comment">//&quot;654321&quot;</span></span><br><span class="line"><span class="keyword">let</span> unstr = str.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);<span class="comment">//&quot;654321&quot;</span></span><br><span class="line"><span class="keyword">let</span> unstr = <span class="title class_">Array</span>.<span class="title function_">from</span>(str).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);<span class="comment">//&quot;654321&quot;</span></span><br><span class="line"><span class="comment">//附加什么样的数据结构能够使用扩展运算符</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>利用循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> res = [];</span><br><span class="line"><span class="keyword">for</span>(i = str.<span class="property">length</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">    res.<span class="title function_">push</span>(i+<span class="number">1</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> unstr = res.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>) <span class="comment">//&quot;654321&quot;;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><h5 id="对象便利-对象不具备迭代器数据结构，不能使用for-of-遍历"><a href="#对象便利-对象不具备迭代器数据结构，不能使用for-of-遍历" class="headerlink" title="对象便利 (对象不具备迭代器数据结构，不能使用for of 遍历)"></a>对象便利 (对象不具备迭代器数据结构，不能使用for of 遍历)</h5><ul><li>对象 for in 遍历</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">UID</span>: <span class="string">&#x27;561525&#x27;</span>,</span><br><span class="line">    <span class="attr">nickName</span>: <span class="string">&#x27;昵称&#x27;</span>,</span><br><span class="line">    <span class="attr">acatar</span>: <span class="string">&#x27;https://a.jpg&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历key</span></span><br><span class="line"><span class="keyword">for</span>(key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key)</span><br><span class="line">&#125;<span class="comment">//UIDnickNameacatat</span></span><br><span class="line"><span class="comment">//通过key遍历value</span></span><br><span class="line"><span class="keyword">for</span>(key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[key])</span><br><span class="line">&#125;<span class="comment">//561525昵称https://a.jpg</span></span><br></pre></td></tr></table></figure><ul><li>对象keys遍历</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">UID</span>: <span class="string">&#x27;561525&#x27;</span>,</span><br><span class="line">    <span class="attr">nickName</span>: <span class="string">&#x27;昵称&#x27;</span>,</span><br><span class="line">    <span class="attr">acatar</span>: <span class="string">&#x27;https://a.jpg&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)</span><br><span class="line"><span class="comment">//返回的是一个数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(keys)<span class="comment">//[&quot;UID&quot;, &quot;nickName&quot;, &quot;acatat&quot;]</span></span><br><span class="line"><span class="comment">//获取对象值,通过forEach()</span></span><br><span class="line">keys.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;item&#125;</span>:<span class="subst">$&#123;obj[item]&#125;</span>`</span>)</span><br><span class="line">&#125;)<span class="comment">//UID:561525nickName:昵称acatat:https://a.jpg</span></span><br></pre></td></tr></table></figure><ul><li>对象value遍历</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">UID</span>: <span class="string">&#x27;561525&#x27;</span>,</span><br><span class="line">    <span class="attr">nickName</span>: <span class="string">&#x27;昵称&#x27;</span>,</span><br><span class="line">    <span class="attr">acatar</span>: <span class="string">&#x27;https://a.jpg&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">values</span>(obj).<span class="title function_">forEach</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;)<span class="comment">//561525昵称https://a.jpg</span></span><br></pre></td></tr></table></figure><ul><li>对象getOwnPropertyNames 遍历</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">UID</span>: <span class="string">&#x27;561525&#x27;</span>,</span><br><span class="line">    <span class="attr">nickName</span>: <span class="string">&#x27;昵称&#x27;</span>,</span><br><span class="line">    <span class="attr">acatar</span>: <span class="string">&#x27;https://a.jpg&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(obj).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key)</span><br><span class="line">&#125;)<span class="comment">//UIDnickNameacatat</span></span><br></pre></td></tr></table></figure><ul><li>使用Reflect.ownKeys(obj) 遍历</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">UID</span>: <span class="string">&#x27;561525&#x27;</span>,</span><br><span class="line">    <span class="attr">nickName</span>: <span class="string">&#x27;昵称&#x27;</span>,</span><br><span class="line">    <span class="attr">acatar</span>: <span class="string">&#x27;https://a.jpg&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key)</span><br><span class="line">&#125;)<span class="comment">//UIDnickNameacatat</span></span><br></pre></td></tr></table></figure><ul><li>属性简写</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> onj = &#123;</span><br><span class="line">    foo,<span class="comment">//value跟key一致时可以简写</span></span><br><span class="line">    <span class="title function_">method</span>(<span class="params"></span>) &#123;<span class="comment">// 方法也可以省略 function()</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello!&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//简写的对象方法不能用作构造函数，否则会报错</span></span><br><span class="line"><span class="keyword">new</span> obj.<span class="title function_">method</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以通过函数return &#123;&#125; 返回一个对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getPoint</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> x = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> y = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;x, y&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>属性名表达式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sysbol  ES6 允许字面量定义对象时，将表达式放在括号内</span></span><br><span class="line"><span class="comment">//属性名表达式与简洁表示法，不能同时使用，会报错</span></span><br><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">  <span class="string">&#x27;first word&#x27;</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">  [lastWord]: <span class="string">&#x27;world&#x27;</span>,</span><br><span class="line">  [<span class="string">&#x27;h&#x27;</span> + <span class="string">&#x27;ello&#x27;</span>]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hi&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">a[<span class="string">&#x27;first word&#x27;</span>] <span class="comment">// &quot;hello&quot;</span></span><br><span class="line">a[lastWord] <span class="comment">// &quot;world&quot;</span></span><br><span class="line">a.<span class="title function_">hello</span>() <span class="comment">// hi</span></span><br></pre></td></tr></table></figure><ul><li>super关键字</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//this关键字总是指向函数所在的当前对象，ES6 又新增了另一个类似的关键字super，指向当前对象的原型对象</span></span><br><span class="line"><span class="keyword">const</span> proto = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="string">&#x27;world&#x27;</span>,</span><br><span class="line">  <span class="title function_">find</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="property">foo</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(obj, proto); <span class="comment">// 为obj设置原型对象</span></span><br><span class="line">obj.<span class="title function_">find</span>() <span class="comment">// &quot;hello&quot;</span></span><br></pre></td></tr></table></figure><ul><li>扩展运算符的应用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; x, y, ...z &#125; = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> &#125;;</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 2</span></span><br><span class="line">z <span class="comment">// &#123; a: 3, b: 4 &#125;</span></span><br><span class="line"><span class="comment">//解构赋值是浅拷贝</span></span><br><span class="line"><span class="comment">//对象的扩展运算符等同于使用Object.assign()方法</span></span><br></pre></td></tr></table></figure><ul><li>ES6对象新增的方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>() <span class="comment">//严格判断两个值是否相等，与 === 行为基本一致。</span></span><br><span class="line"><span class="comment">//不同点1. +0不等于-02.NaN等于自身 (这两点与 === 相反)</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>()</span><br><span class="line"><span class="comment">//Object.assign()方法用于对象的合并，将源对象source的所有可枚举属性，复制到目标对象target</span></span><br><span class="line"><span class="keyword">const</span> target = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> source1 = &#123; <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(target, source1);</span><br><span class="line">target <span class="comment">// &#123;a:1, b:2, c:3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptors</span>()<span class="comment">//返回指定对象所有自身属性（非继承属性）的描述对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Object.setPrototypeOf方法用来设置一个对象的原型对象</span></span><br><span class="line"><span class="comment">//Object.getPrototypeOf用于读取一个对象的原型对象</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>()，<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>()，<span class="title class_">Object</span>.<span class="title function_">values</span>()，<span class="title class_">Object</span>.<span class="title function_">entries</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于将一个键值对数组转为对象</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">fromEntries</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象解构</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;fafafa&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">23</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;name, age, play&#125; = person</span><br><span class="line"><span class="comment">// name = &#x27;fafafa&#x27;   age = 23  play = undefined</span></span><br></pre></td></tr></table></figure><h4 id="map数据类型使用实例"><a href="#map数据类型使用实例" class="headerlink" title="map数据类型使用实例"></a>map数据类型使用实例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj3 = &#123;</span><br><span class="line">    [obj1]: <span class="string">&#x27;11&#x27;</span>,</span><br><span class="line">    [obj2]: <span class="string">&#x27;22&#x27;</span></span><br><span class="line">    <span class="comment">// 对象key默认为字符串，如果传入的不是字符串而是对象，会将对象隐式转换为toString方法值也就是字符串，值为[Object Object] ,所以[obj2]: &#x27;22&#x27; 会覆盖[obj1]: &#x27;11&#x27; ，obj3打印只会打印&#123;[Object Object]: &#x27;22&#x27;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//而Map 数据类型就能够解决这个问题</span></span><br><span class="line"><span class="keyword">var</span> b =<span class="keyword">new</span> <span class="title class_">Map</span>().<span class="title function_">set</span>(obj1, <span class="string">&#x27;123&#x27;</span>).<span class="title function_">set</span>(obj2, <span class="string">&#x27;456&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Map(2) &#123;</span></span><br><span class="line"><span class="comment">  &#123; name: &#x27;张三&#x27; &#125; =&gt; &#x27;123&#x27;,</span></span><br><span class="line"><span class="comment">  &#123; name: &#x27;李四&#x27; &#125; =&gt; &#x27;456&#x27;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="对象解构赋值"><a href="#对象解构赋值" class="headerlink" title="对象解构赋值"></a>对象解构赋值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//解构后的变量为解构后的变量名</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">name</span>: name1, <span class="attr">age</span>: age1, hobby : hobby1&#125; = person</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">name</span>: name2, age : age2, hobby : hobby2 = <span class="string">&#x27;刷剧&#x27;</span>&#125; = person</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name1, age1, hobby1)<span class="comment">//张三 20 undefined</span></span><br><span class="line"><span class="comment">//当属性值为undefined， 我们就可以用 = 给默认值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name2, age2, hobby2) <span class="comment">//张三 20 刷剧</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象解构当遇到&#123;&#125;打头的参数前面已经声明过了需要加()或者开头打;</span></span><br><span class="line"><span class="keyword">let</span> x;</span><br><span class="line">(&#123;x&#125; = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;)</span><br><span class="line">;&#123;x&#125; = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="comment">//盲区   需要加;</span></span><br><span class="line">(&#123;&#125; = &#123;<span class="literal">true</span>， <span class="literal">false</span>&#125;);</span><br><span class="line">(&#123;&#125; = <span class="number">123</span>)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">拓展</span></span><br><span class="line"><span class="comment">JavaScript什么时候必须加分号;</span></span><br><span class="line"><span class="comment">①当一行代码是以 ( 开头的时候，则在前面补上一个分号用以避免一些语法解析错误。</span></span><br><span class="line"><span class="comment">②当一行代码是以 [ 开头的时候，则在前面补上一个分号用以避免一些语法解析错误</span></span><br><span class="line"><span class="comment">③当一行代码是以 ` 开头的时候，则在前面补上一个分号用以避免一些语法解析错误</span></span><br><span class="line"><span class="comment">JavaScript结尾时候必须加分号;</span></span><br><span class="line"><span class="comment">var name = 3</span></span><br><span class="line"><span class="comment">(function () &#123;&#125;)()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// 由于没有分号，上面的会被解析为下面的语句，导致出现报错</span></span><br><span class="line"><span class="comment">var name = 3(function () &#123;&#125;)()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><h5 id="ES6新增方法"><a href="#ES6新增方法" class="headerlink" title="ES6新增方法"></a>ES6新增方法</h5><ul><li>默认参数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">&#123;x, y = <span class="number">5</span>&#125; = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// undefined 5</span></span><br></pre></td></tr></table></figure><ul><li>函数的length属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.length将返回没有指定默认值的参数个数</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params">a</span>) &#123;&#125;).<span class="property">length</span> <span class="comment">// 1</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params">a = <span class="number">5</span></span>) &#123;&#125;).<span class="property">length</span> <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.rest 参数也不会计入length属性</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params">...args</span>) &#123;&#125;).<span class="property">length</span> <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.设置了默认值的参数不是尾参数，那么length属性也不再计入后面的参数了(只数默认参数前的参数数量)</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params">a = <span class="number">0</span>, b, c</span>) &#123;&#125;).<span class="property">length</span> <span class="comment">// 0</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params">a, b = <span class="number">1</span>, c</span>) &#123;&#125;).<span class="property">length</span> <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><ul><li>name属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回该函数的函数名</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line">f.<span class="property">name</span> <span class="comment">// &quot;&quot;</span></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line">f.<span class="property">name</span> <span class="comment">// &quot;f&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将一个具名函数赋值给一个变量，则 name属性都返回这个具名函数原本的名字</span></span><br><span class="line"><span class="keyword">const</span> bar = <span class="keyword">function</span> <span class="title function_">baz</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line">bar.<span class="property">name</span> <span class="comment">// &quot;baz&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Function构造函数返回的函数实例，name属性的值为anonymous</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">Function</span>).<span class="property">name</span> <span class="comment">// &quot;anonymous&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//bind返回的函数，name属性值会加上bound前缀</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line">foo.<span class="title function_">bind</span>(&#123;&#125;).<span class="property">name</span> <span class="comment">// &quot;bound foo&quot;</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;).<span class="title function_">bind</span>(&#123;&#125;).<span class="property">name</span> <span class="comment">// &quot;bound &quot;</span></span><br></pre></td></tr></table></figure><h4 id="ES6新增"><a href="#ES6新增" class="headerlink" title="ES6新增"></a>ES6新增</h4><h5 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h5><p>Set是es6新增的数据结构，类似于数组，但是成员的值都是唯一的，没有重复的值，我们一般称为集合  </p><ul><li>增添加某个值，返回 <code>Set</code> 结构本身</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"><span class="comment">//add()</span></span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">1</span>).<span class="title function_">add</span>(<span class="number">2</span>).<span class="title function_">add</span>(<span class="number">2</span>); <span class="comment">// 2只被添加了一次</span></span><br></pre></td></tr></table></figure><ul><li>删删除某个值，返回一个布尔值，表示删除是否成功</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"><span class="comment">//delete()</span></span><br><span class="line">s.<span class="title function_">delete</span>(<span class="number">1</span>) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><ul><li>查          判断值是否存在</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">s.<span class="title function_">has</span>(<span class="number">2</span>) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><ul><li>clear()  清除所有成员，没有返回值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">s.<span class="title function_">clear</span>()</span><br></pre></td></tr></table></figure><ul><li>遍历</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]);</span><br><span class="line"><span class="comment">//keys()：返回键名的遍历器</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.<span class="title function_">keys</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//values()：返回键值的遍历器</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.<span class="title function_">values</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//entries()：返回键值对的遍历器</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//forEach()：使用回调函数遍历每个成员</span></span><br><span class="line">set.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, key</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&#x27; : &#x27;</span> + value))</span><br></pre></td></tr></table></figure><h5 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h5><p><code>Map</code>类型是键值对的有序列表，而键和值都可以是任意类型</p><ul><li>增设置键名<code>key</code>对应的键值为<code>value</code>，然后返回整个 Map 结构;可采用链式写法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">m.<span class="title function_">set</span>(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>).<span class="title function_">set</span>(<span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>).<span class="title function_">set</span>(<span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>) <span class="comment">// 链式操作</span></span><br></pre></td></tr></table></figure><ul><li>删delete<code>方法删除某个键，返回</code>true<code>。如果删除失败，返回</code>false</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">m.<span class="title function_">delete</span>(<span class="literal">undefined</span>)</span><br></pre></td></tr></table></figure><ul><li>改<code>key</code>已经有值，则键值会被更新，否则就新生成该键</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">m.<span class="title function_">set</span>(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">m.<span class="title function_">set</span>(<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">m.<span class="title function_">get</span>(<span class="number">1</span>) <span class="comment">// &#x27;b&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>查<code>has</code>方法返回一个布尔值，表示某个键是否在当前 Map 对象之中</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;edition&#x27;</span>, <span class="number">6</span>);</span><br><span class="line">m.<span class="title function_">has</span>(<span class="string">&#x27;edition&#x27;</span>)     <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>getget<code>方法读取</code>key<code>对应的键值，如果找不到</code>key<code>，返回</code>undefined</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">m.<span class="title function_">set</span>(hello, <span class="string">&#x27;Hello ES6!&#x27;</span>) <span class="comment">// 键是函数</span></span><br><span class="line">m.<span class="title function_">get</span>(hello)  <span class="comment">// Hello ES6!</span></span><br></pre></td></tr></table></figure><ul><li>size属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;bar&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">map.<span class="property">size</span> <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><ul><li>clear <code>clear</code>方法清除所有成员，没有返回值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;bar&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line">map.<span class="title function_">clear</span>()</span><br><span class="line">map.<span class="property">size</span> <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><ul><li>遍历</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;no&#x27;</span>],[<span class="string">&#x27;T&#x27;</span>,  <span class="string">&#x27;yes&#x27;</span>]]);</span><br><span class="line"><span class="comment">//keys()：返回键名的遍历器</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> map.<span class="title function_">keys</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;F&quot;</span></span><br><span class="line"><span class="comment">// &quot;T&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//values()：返回键值的遍历器</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> map.<span class="title function_">values</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;no&quot;</span></span><br><span class="line"><span class="comment">// &quot;yes&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//entries()：返回所有成员的遍历器</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> map.<span class="title function_">entries</span>()) &#123; </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item[<span class="number">0</span>], item[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;F&quot; &quot;no&quot;</span></span><br><span class="line"><span class="comment">// &quot;T&quot; &quot;yes&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//forEach()：遍历 Map 的所有成员</span></span><br><span class="line">map.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">value, key, map</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Key: %s, Value: %s&quot;</span>, key, value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>ES6 之前， 如果对象属性是对象，则后面会覆盖前面的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;aa&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;bb&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj3 = &#123;</span><br><span class="line">    [obj1]: <span class="string">&#x27;11&#x27;</span>,</span><br><span class="line">    [obj2]: <span class="string">&#x27;22&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当属性用key存储时，如果key不是str,则会调用toString()方法把他变成str,就会变成[object Object]，两个[object Object]一样就会覆盖前面的属性</span></span><br><span class="line"><span class="comment">// 可以用Map代替对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj3) <span class="comment">// &#123;[object Object]:22&#125;</span></span><br></pre></td></tr></table></figure><h5 id="WeakSet-和-WeakMap"><a href="#WeakSet-和-WeakMap" class="headerlink" title="WeakSet 和 WeakMap"></a>WeakSet 和 WeakMap</h5><ul><li><p>WeakSet</p><ul><li><p><code>WeakSet</code>可以接受一个具有 <code>Iterable</code>接口的对象作为参数</p></li><li><p>没有遍历操作的<code>API</code></p></li><li><p>没有<code>size</code>属性</p></li><li><p><code>WeakSet</code>只能成员只能是引用类型，而不能是其他类型的值；<code>WeakSet</code>里面的引用只要在外部消失，它在 <code>WeakSet</code>里面的引用就会自动消失</p></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ws=<span class="keyword">new</span> <span class="title class_">WeakSet</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 成员不是引用类型</span></span><br><span class="line"><span class="keyword">let</span> weakSet=<span class="keyword">new</span> <span class="title class_">WeakSet</span>([<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(weakSet) <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 成员为引用类型</span></span><br><span class="line"><span class="keyword">let</span> obj1=&#123;<span class="attr">name</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">let</span> obj2=&#123;<span class="attr">name</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">let</span> ws=<span class="keyword">new</span> <span class="title class_">WeakSet</span>([obj1,obj2]); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ws) <span class="comment">//WeakSet &#123;&#123;…&#125;, &#123;…&#125;&#125;</span></span><br></pre></td></tr></table></figure><ul><li><p>WeakMap</p><ul><li><code>WeakMap</code>结构与<code>Map</code>结构类似，也是用于生成键值对的集合；在<code>API</code>中<code>WeakMap</code>与<code>Map</code>有两个区别:<ul><li>没有遍历操作的<code>API</code></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// WeakMap 可以使用 set 方法添加成员</span></span><br><span class="line"><span class="keyword">const</span> wm1 = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line"><span class="keyword">const</span> key = &#123;<span class="attr">foo</span>: <span class="number">1</span>&#125;;</span><br><span class="line">wm1.<span class="title function_">set</span>(key, <span class="number">2</span>);</span><br><span class="line">wm1.<span class="title function_">get</span>(key) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// WeakMap 也可以接受一个数组，</span></span><br><span class="line"><span class="comment">// 作为构造函数的参数</span></span><br><span class="line"><span class="keyword">const</span> k1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> k2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> wm2 = <span class="keyword">new</span> <span class="title class_">WeakMap</span>([[k1, <span class="string">&#x27;foo&#x27;</span>], [k2, <span class="string">&#x27;bar&#x27;</span>]]);</span><br><span class="line">wm2.<span class="title function_">get</span>(k2) <span class="comment">// &quot;bar&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>WeakMap</code>只接受对象作为键名（<code>null</code>除外），不接受其他类型的值作为键名；<code>WeakMap</code>的键名所指向的对象，一旦不再需要，里面的键名对象和所对应的键值对会自动消失</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// TypeError: 1 is not an object!</span></span><br><span class="line">map.<span class="title function_">set</span>(<span class="title class_">Symbol</span>(), <span class="number">2</span>)</span><br><span class="line"><span class="comment">// TypeError: Invalid value used as weak map key</span></span><br><span class="line">map.<span class="title function_">set</span>(<span class="literal">null</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// TypeError: Invalid value used as weak map key</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><ul><li><p>箭头函数this指向</p></li><li><p>箭头函数不能当做构造函数</p></li><li><p>箭头函数不可以当做迭代器</p></li></ul><h4 id="this指向-谁调用我我指向谁"><a href="#this指向-谁调用我我指向谁" class="headerlink" title="this指向(谁调用我我指向谁)"></a>this指向(谁调用我我指向谁)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">content</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(content)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//两种调用是一样，get()可以看作get.call()语法糖</span></span><br><span class="line"><span class="title function_">get</span>(<span class="string">&#x27;调用函数get&#x27;</span>)</span><br><span class="line">get.<span class="title function_">call</span>(<span class="variable language_">window</span>, <span class="string">&#x27;调用函数get&#x27;</span>)  <span class="comment">// 浏览器为window，node环境中为global</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">run</span>: <span class="keyword">function</span>(<span class="params">time</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>+“在跑步，”+time+“分钟了”)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="title function_">run</span>(<span class="number">30</span>)</span><br><span class="line">person.<span class="property">run</span>.<span class="title function_">call</span>(person, <span class="number">30</span> )</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="number">222</span>;</span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="number">111</span>,</span><br><span class="line">    <span class="attr">say</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fun = a.<span class="property">say</span> <span class="comment">//赋值了a.say的方法地址给fun</span></span><br><span class="line"><span class="title function_">fun</span>()   <span class="comment">//可以看作fun.call(window) window是全局作用域 所以时222  在node运行环境下，值为undefined</span></span><br><span class="line">a.<span class="title function_">say</span>()   <span class="comment">//a.say.call(a)   所以时111</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vat b = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="number">333</span>,</span><br><span class="line">    <span class="attr">say</span>: <span class="keyword">function</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">        <span class="title function_">fn</span>()  <span class="comment">//调用可以看作 fn.call(window)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">b.<span class="title function_">say</span>(a.<span class="property">say</span>)  <span class="comment">//222  在node运行环境下，值为undefined</span></span><br><span class="line">b.<span class="property">say</span> = a.<span class="property">say</span>  <span class="comment">//将a的say方法指向地址覆盖到b的say方法</span></span><br><span class="line">b.<span class="title function_">say</span>()  <span class="comment">//b.say.call(b) //333</span></span><br></pre></td></tr></table></figure><h4 id="改变this指向"><a href="#改变this指向" class="headerlink" title="改变this指向"></a>改变this指向</h4><p>箭头函数没有自己的this，this是外层代码块的this，this是在定义函数时绑定的。不能够使用做构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="number">11</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="number">22</span>,</span><br><span class="line">    <span class="attr">say</span>: <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">say</span>()  <span class="comment">//不适用obj.say.call(obj),箭头函数this将指向它的外层     //11  //如果外层没有name，则为undefined</span></span><br></pre></td></tr></table></figure><p>手写call、apply</p><p>作用：改变this指向 </p><p>场景:  js的继承(原型链继承；构造函数继承(使用call实现) )</p><ul><li><p>call</p><p>可以用作</p><ol><li>继承</li><li>判断复杂数据类型</li></ol><p><img src="/2023/05/17/js%E9%87%8D%E7%82%B9%E9%9A%BE%E7%82%B9/call%E5%87%BD%E6%95%B0.png" alt="image-20231115000045019"></p><ol start="3"><li><p>伪数组转换成数组</p><p><img src="/2023/05/17/js%E9%87%8D%E7%82%B9%E9%9A%BE%E7%82%B9/%E4%BC%AA%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2.png" alt="image-20231115000349050"></p></li><li><p>手写call方法</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">getName</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//以函数的形式调用对象方法则指向window(浏览器环境)|global(nodejs环境)，以方法的形式调用时，this指向调用方法的对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: ”张三“</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为call方法是对象直接调用，有点类似是类的静态变量，每个对象方法都能调用，实现方法是直接挂在到Function构造函数的原型上。</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span>(<span class="params">context</span>) &#123;</span><br><span class="line">    <span class="comment">//这里面的this是调用该myCall方法的对象方法function</span></span><br><span class="line">    <span class="comment">//所以传入的参数第一个参数必须是function类型,不是function返回错误</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果参数为空则直接this指向window</span></span><br><span class="line">    context = context || <span class="variable language_">window</span></span><br><span class="line">    <span class="comment">//获取除第一个参数的其余参数</span></span><br><span class="line">    <span class="keyword">var</span> args = [...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">//这里直接使用this，则直接指向getName,以函数的方式调用，所以getName的this指向window，获取到的name是全局变量。但是我们可以用context传入的参数来改变getName的this</span></span><br><span class="line">    <span class="comment">//首先是确定context传入的参数对象有getName方法，直接赋予getName方法</span></span><br><span class="line">    context.<span class="property">fn</span> = <span class="variable language_">this</span></span><br><span class="line">    <span class="comment">//最后返回传入对象参数context.fn,也就是context.getName</span></span><br><span class="line">    <span class="keyword">let</span> result = contest.<span class="title function_">fn</span>(...args)<span class="comment">//对数组args解构  </span></span><br><span class="line">    <span class="keyword">delete</span> context.<span class="property">fn</span></span><br><span class="line">    <span class="keyword">return</span> result </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实际实现方法就是将传入的对象赋予该对象调用的函数，然后再用传入进去的对象调用该函数，从而达到改变this指向</span></span><br><span class="line">person.<span class="property">getName</span>.<span class="title function_">myCall</span>(person1, <span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure></li><li><p>apply</p></li></ul><p>​手写apply(其实与call方法一致，只是传入参数方式不同)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">getName</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//以函数的形式调用对象方法则指向window(浏览器环境)|global(nodejs环境)，以方法的形式调用时，this指向调用方法的对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: ”张三“</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为call方法是对象直接调用，有点类似是类的静态变量，每个对象方法都能调用，实现方法是直接挂在到Function构造函数的原型上。</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span>(<span class="params">context</span>) &#123;</span><br><span class="line">    <span class="comment">//这里面的this是调用该myCall方法的对象方法function</span></span><br><span class="line">    <span class="comment">//所以传入的参数第一个参数必须是function类型,不是function返回错误</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果参数为空则直接this指向window</span></span><br><span class="line">    context = context || <span class="variable language_">window</span></span><br><span class="line">    <span class="comment">//这里直接使用this，则直接指向getName,以函数的方式调用，所以getName的this指向window，获取到的name是全局变量。但是我们可以用context传入的参数来改变getName的this</span></span><br><span class="line">    <span class="comment">//首先是确定context传入的参数对象有getName方法，直接赋予getName方法</span></span><br><span class="line">    context.<span class="property">fn</span> = <span class="variable language_">this</span></span><br><span class="line">    <span class="comment">//判断是否传入了数组</span></span><br><span class="line">    <span class="keyword">let</span> result</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">arguments</span>[<span class="number">1</span>])&#123;</span><br><span class="line">        result = contest.<span class="title function_">fn</span>(...<span class="variable language_">arguments</span>[<span class="number">1</span>])</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        result = contest.<span class="title function_">fn</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> context.<span class="property">fn</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实际实现方法就是将传入的对象赋予该对象调用的函数，然后再用传入进去的对象调用该函数，从而达到改变this指向</span></span><br><span class="line">person.<span class="property">getName</span>.<span class="title function_">myApply</span>(person1, [<span class="number">1</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure><h4 id="js事件循环机制；宏任务与微任务-事件队列"><a href="#js事件循环机制；宏任务与微任务-事件队列" class="headerlink" title="js事件循环机制；宏任务与微任务 事件队列"></a>js事件循环机制；宏任务与微任务 事件队列</h4><ul><li><p>js语言特点 </p><ul><li>单线程</li><li>解释性语言(解释一行执行一行)</li></ul></li><li><p>event-loop - 事件循环机制</p><ul><li><p>事件循环机制 是基于事件驱动的，主要涉及执行栈、事件队列、宏任务和微任务。</p><ul><li><strong>执行栈（Call Stack）：</strong> 用于存储执行上下文（函数调用）的栈结构。当函数被调用时，会被推入执行栈，执行完毕后会被弹出。如果执行栈为空，则表示当前代码执行完毕。</li><li><strong>事件队列（Event Queue）：</strong> 用于存储待执行的任务，分为宏任务队列和微任务队列。宏任务和微任务会被按顺序放入对应的队列中等待执行。</li><li><strong>事件队列 - 宏任务（Macrotask）：</strong> 包括由浏览器或Node.js提供的异步API，如setTimeout、setInterval、I&#x2F;O操作等。宏任务会被放入宏任务队列中等待执行。</li><li><strong>事件队列 - 微任务（Microtask）：</strong> 包括由JavaScript引擎自身提供的异步API，如Promise、process.nextTick等。微任务会被放入微任务队列中等待执行。</li></ul></li><li><p>工作流程</p><ul><li>当代码开始执行时，首先会执行同步任务，将同步任务按顺序推入执行栈。</li><li>遇到异步任务时，会将其放入对应的事件队列中。</li><li>当执行栈为空时，事件循环会从微任务队列中取出所有微任务依次执行，直到微任务队列为空。</li><li>如果在执行微任务的过程中，又产生了新的微任务，会继续执行微任务队列中的任务，直到微任务队列为空。</li><li>当微任务队列为空时，事件循环会从宏任务队列中取出一个宏任务执行。</li><li>执行完当前宏任务后，再次检查微任务队列，重复上述步骤。</li><li>这个过程会一直循环执行，直到执行栈和事件队列中都没有任务。</li></ul></li></ul></li></ul><blockquote><p>微任务的执行优先级高于宏任务，也就是说，当宏任务队列和微任务队列中都有任务时，JS引擎会先执行微任务队列中的所有任务，再去执行宏任务队列中的任务。</p></blockquote><p><img src="/2023/05/17/js%E9%87%8D%E7%82%B9%E9%9A%BE%E7%82%B9/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6.png" alt="事件循环机制"></p><h4 id="回调地狱优化"><a href="#回调地狱优化" class="headerlink" title="回调地狱优化"></a>回调地狱优化</h4><ul><li>利用es11 的可选链式操作符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">Animal</span> = (<span class="params">&#123;type, name, gender&#125;</span>)=&gt;&#123;</span><br><span class="line">    <span class="comment">//!animal 判断animal是否为假值（包括undefined、null、false、0、&#x27;&#x27;等），如果是，则返回&#x27;no animal&#x27;。</span></span><br><span class="line">    <span class="comment">//: !type ? &#x27;type&#x27; 如果animal存在，判断type是否为假值，如果是，则返回&#x27;type&#x27;。</span></span><br><span class="line">    <span class="comment">//: !name ? &#x27;name&#x27; 如果type存在，判断name是否为假值，如果是，则返回&#x27;name&#x27;。</span></span><br><span class="line">    <span class="keyword">return</span> !animal ? <span class="string">&#x27;no animal&#x27;</span> : !type ? <span class="string">&#x27;type&#x27;</span> : !name ? <span class="string">&#x27;name&#x27;</span> : gerder ?  <span class="string">`<span class="subst">$&#123;name&#125;</span>is  a<span class="subst">$&#123;gender&#125;</span>-<span class="subst">$&#123;type&#125;</span>`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>利用提前退出和提前返回</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">Animal</span> = (<span class="params">&#123;type, name, gender&#125;</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(!type) <span class="keyword">return</span> <span class="string">&#x27;no type&#x27;</span></span><br><span class="line">    <span class="keyword">if</span>(!name) <span class="keyword">return</span> <span class="string">&#x27;no name&#x27;</span></span><br><span class="line">    <span class="keyword">if</span>(!gender) <span class="keyword">return</span> <span class="string">&#x27;no gender&#x27;</span></span><br><span class="line">    <span class="comment">//因为js解释性语言, 能往下执行便是没有报错,当上面条件都通过时返回数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span>is  a<span class="subst">$&#123;gender&#125;</span>-<span class="subst">$&#123;type&#125;</span>`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>* </p><h4 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h4><ul><li><p>[…arr]</p></li><li><p>支持展开运算符是要有Symbol.iterator</p><p>arr[Symbol.iterator]</p></li></ul><p>面试题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我们能否以某种方式为下面的语句使用展开运算而不导致类型错误 ？</span></span><br><span class="line"><span class="comment">//错误代码示例</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">z</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...obj])<span class="comment">//报错 根本原因是因为对象是不具备迭代器属性的数据结构</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//正确代码</span></span><br><span class="line">obj[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">next</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> objArr = <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj)</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">index</span> &lt; objArr.<span class="property">length</span> -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">let</span> key = objArr[<span class="variable language_">this</span>.<span class="property">index</span>]</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">index</span>++</span><br><span class="line">                <span class="keyword">return</span>&#123;</span><br><span class="line">                    <span class="attr">value</span>: obj[key]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="attr">done</span>: <span class="literal">true</span>&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">index</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...obj])  <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以在Object 构造函数的原型上添加，为所有对象提供迭代器</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES7 也提出了新的写法</span></span><br><span class="line"><span class="comment">//console.log(&#123;...objj&#125;) 会涉及到对象的拷贝操作,相当于对obj进行了浅拷贝</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;...obj&#125;) <span class="comment">// &#123;x: 1, y: 2, z: 3&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>对象转数组案例</li></ul><ol><li>使用 Object.keys() 方法获取对象的所有键，然后使用 map() 方法将每个键对应的值存入新数组中。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="title function_">map</span>(<span class="function"><span class="params">key</span> =&gt;</span> obj[key]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用 Object.values() 方法获取对象的所有值，直接将值存入新数组中。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Object</span>.<span class="title function_">values</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><ol start="3"><li>使用 Object.entries() 方法获取对象的键值对数组，然后对每个键值对进行处理。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Object</span>.<span class="title function_">entries</span>(obj).<span class="title function_">map</span>(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> value);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">#### 高效运算符  &#x27;?.&#x27; 和 &#x27;??&#x27; 和 &#x27;??=&#x27;  的区别</span><br><span class="line"></span><br><span class="line">* 可选链运算符(?.)</span><br><span class="line"></span><br><span class="line">可选链运算符, 允许读取位于连接对象深处的属性值，而不必明确验证链式中的每个引用是否有效。</span><br><span class="line"></span><br><span class="line">使用场景：当我们不确定一个对象是否存在时，调用对象属性，可以使用该操作符</span><br><span class="line"></span><br><span class="line">* 空值合并运算符(??)</span><br><span class="line"></span><br><span class="line">空值合并运算符，是一个逻辑运算符，当左侧的操作为null或undefined时，返回其右侧操作数，否则返回左侧操作数</span><br><span class="line"></span><br><span class="line">有点类似于 ||(逻辑或) ，与 || 区别在于 ??. 对0和 &quot; 会判断为真</span><br><span class="line"></span><br><span class="line">* 逻辑空赋值(??=)</span><br><span class="line"></span><br><span class="line">逻辑空赋值运算符(X ?? = Y) 仅在X是空值(null 或undefined) 时对其赋值。</span><br><span class="line"></span><br><span class="line">使用场景：当你需要通过if判断某个变量不存在时，才需要为该变量赋值时使用</span><br><span class="line"></span><br><span class="line">#### 原型和原型链</span><br><span class="line"></span><br><span class="line">1. **原型（Prototype）**：每个对象都有一个原型对象，可以通过`__proto__`属性来访问。原型对象可以包含共享的属性和方法，可以被对象实例共享。</span><br><span class="line">2. **原型链（Prototype Chain）**：当访问对象的属性或方法时，如果对象本身没有该属性或方法，JavaScript引擎会顺着原型链向上查找，直到找到对应的属性或方法或者到达原型链的顶端。</span><br><span class="line"></span><br><span class="line">~~~ js</span><br><span class="line">// 定义了一个构造函数Person，并在其原型对象上定义了一个方法greet。创建了一个Person对象实例person1，并演示了访问属性和方法以及原型链的关系</span><br><span class="line">function Person(name, age) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 在Person的原型对象上定义一个方法</span><br><span class="line">Person.prototype.greet = function() &#123;</span><br><span class="line">    console.log(`Hello, my name is $&#123;this.name&#125; and I am $&#123;this.age&#125; years old.`);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 创建一个Person对象实例</span><br><span class="line">let person1 = new Person(&#x27;Alice&#x27;, 30);</span><br><span class="line"></span><br><span class="line">// 访问实例对象的属性和方法</span><br><span class="line">console.log(person1.name); // Output: Alice</span><br><span class="line">person1.greet(); // Output: Hello, my name is Alice and I am 30 years old.</span><br><span class="line"></span><br><span class="line">// 演示原型链 实例的__proto__ === 其构造函数的prototype</span><br><span class="line">console.log(person1.__proto__ === Person.prototype); // Output: true</span><br><span class="line">// 构造函数的原型Object</span><br><span class="line">console.log(Person.prototype.__proto__ === Object.prototype); // Output: true</span><br><span class="line">// Object的原型为null</span><br><span class="line">console.log(Object.prototype.__proto__); // Output: null</span><br></pre></td></tr></table></figure><ul><li><p>其他</p><ul><li><strong>继承</strong>：通过原型链，我们可以实现对象之间的继承关系，子对象可以继承父对象的属性和方法。可以尝试创建一个新的构造函数，让它继承自<code>Person</code>构造函数，并添加新的属性或方法。</li><li><strong>原型修改</strong>：可以尝试修改<code>Person</code>构造函数的原型对象上的方法，然后看看实例对象是否能够访问到修改后的方法。</li><li><strong>原型链终止</strong>：在原型链的顶端是<code>Object.prototype</code>，它的原型是<code>null</code>。可以思考一下为什么原型链的顶端是<code>Object.prototype</code>，而不是其他对象。</li></ul></li></ul><h3 id="ES6-ES11"><a href="#ES6-ES11" class="headerlink" title="ES6 - ES11"></a>ES6 - ES11</h3><h4 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h4><h5 id="怎么理解ES6-中的Promise；使用场景"><a href="#怎么理解ES6-中的Promise；使用场景" class="headerlink" title="怎么理解ES6 中的Promise；使用场景"></a><strong>怎么理解ES6 中的Promise；使用场景</strong></h5><ul><li>介绍</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">promise解决异步操作的优点：</span></span><br><span class="line"><span class="comment">1.链式操作减低了编码难度</span></span><br><span class="line"><span class="comment">2.代码可读性明显增强   */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//未使用promise</span></span><br><span class="line"><span class="title function_">doSomething</span>(<span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line">  <span class="title function_">doSomethingElse</span>(result, <span class="keyword">function</span>(<span class="params">newResult</span>) &#123;</span><br><span class="line">    <span class="title function_">doThirdThing</span>(newResult, <span class="keyword">function</span>(<span class="params">finalResult</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;得到最终结果: &#x27;</span> + finalResult);</span><br><span class="line">    &#125;, failureCallback);</span><br><span class="line">  &#125;, failureCallback);</span><br><span class="line">&#125;, failureCallback);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用promise</span></span><br><span class="line"><span class="title function_">doSomething</span>()</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">doSomethingElse</span>(result);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">newResult</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">doThirdThing</span>(newResult);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">finalResult</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;得到最终结果: &#x27;</span> + finalResult);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(failureCallback);</span><br></pre></td></tr></table></figure><ul><li>状态</li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">promise 有3种状态</span><br><span class="line">1.pending (进行中)</span><br><span class="line">2.fulfilled (已成功)</span><br><span class="line">3.rejected(已失败)</span><br></pre></td></tr></table></figure><ul><li>特点</li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.对象的状态不受外界影响，只有异步操作的结果，可以决定当前是哪一种状态</span><br><span class="line">2.一旦状态改变（从pending变为fulfilled和从pending变为rejected），就不会再变，任何时候都可以得到这个结果</span><br></pre></td></tr></table></figure><ul><li>流程</li></ul><p><img src="/2023/05/17/js%E9%87%8D%E7%82%B9%E9%9A%BE%E7%82%B9/promise%E6%B5%81%E7%A8%8B.png" alt="image-20231126211227519"></p><ul><li>用法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject</span></span><br><span class="line"><span class="comment">resolve函数的作用是，将Promise对象的状态从“未完成”变为“成功”</span></span><br><span class="line"><span class="comment">reject函数的作用是，将Promise对象的状态从“未完成”变为“失败” */</span></span><br></pre></td></tr></table></figure><ul><li><p>实例方法</p><ul><li><p><code>Promise</code>构建出来的实例存在以下方法：</p><ul><li>then()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">then()是实例状态发生改变时的回调函数，第一个参数是resolved状态的回调函数，第二个参数是rejected状态的回调函数</span></span><br><span class="line"><span class="comment">then方法返回的是一个新的Promise实例，也就是promise能链式书写的原因*/</span></span><br><span class="line"><span class="title function_">getJSON</span>(<span class="string">&quot;/posts.json&quot;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">json</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> json.<span class="property">post</span>;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">post</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>catch()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">catch()方法是.then(null, rejection)或.then(undefined, rejection)的别名，用于指定发生错误时的回调函数*/</span></span><br><span class="line"><span class="title function_">getJSON</span>(<span class="string">&#x27;/posts.json&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">posts</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// 处理 getJSON 和 前一个回调函数运行时发生的错误</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发生错误！&#x27;</span>, error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Promise对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止</span></span><br><span class="line"><span class="title function_">getJSON</span>(<span class="string">&#x27;/post/1.json&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">post</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">getJSON</span>(post.<span class="property">commentURL</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">comments</span>) &#123;</span><br><span class="line">  <span class="comment">// some code</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// 处理前面三个Promise产生的错误</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">一般来说，使用catch方法代替then()第二个参数</span></span><br><span class="line"><span class="comment">Promise对象抛出的错误不会传递到外层代码，即不会有任何反应*/</span></span><br></pre></td></tr></table></figure><ul><li>finally()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//finally()方法用于指定不管 Promise 对象最后状态如何，都会执行的操作</span></span><br><span class="line">promise</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;···&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;···&#125;)</span><br><span class="line">.<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;···&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>构造函数方法</p><ul><li>all()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Promise.all()方法用于将多个 Promise实例，包装成一个新的 Promise实例</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> result)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> e);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;报错了&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> result)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> e);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2])</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e));</span><br><span class="line"><span class="comment">//如果p2没有自己的catch方法，就会调用Promise.all()的catch方法</span></span><br></pre></td></tr></table></figure><ul><li>race()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将多个 Promise 实例，包装成一个新的 Promise 实例;只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">race</span>([</span><br><span class="line">  <span class="title function_">fetch</span>(<span class="string">&#x27;/resource-that-may-take-a-while&#x27;</span>),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;request timeout&#x27;</span>)), <span class="number">5000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">p</span><br><span class="line">.<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="variable language_">console</span>.<span class="property">error</span>);</span><br></pre></td></tr></table></figure><ul><li>allSettled()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Promise.allSettled()方法接受一组 Promise 实例作为参数，包装成一个新的 Promise 实例</span></span><br><span class="line"><span class="comment">//只有等到所有这些参数实例都返回结果，不管是fulfilled还是rejected，包装实例才会结束</span></span><br></pre></td></tr></table></figure><ul><li>resolve()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将现有对象转为 Promise对象</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&#x27;foo&#x27;</span>))</span><br></pre></td></tr></table></figure><ul><li>reject()</li><li>try()</li></ul></li><li><p>使用场景</p><ol><li>将图片的加载写成一个<code>Promise</code>，一旦加载完成，<code>Promise</code>的状态就发生变化</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> preloadImage = <span class="keyword">function</span> (<span class="params">path</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> image = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">    image.<span class="property">onload</span>  = resolve;</span><br><span class="line">    image.<span class="property">onerror</span> = reject;</span><br><span class="line">    image.<span class="property">src</span> = path;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>通过链式操作，将多个渲染数据分别给个<code>then</code>，让其各司其职。或当下个异步请求依赖上个请求结果的时候，我们也能够通过链式操作友好解决问题</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/ 各司其职</span><br><span class="line"><span class="title function_">getInfo</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; bannerList &#125; = res</span><br><span class="line">    <span class="comment">//渲染轮播图</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(bannerList)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> &#123; storeList &#125; = res</span><br><span class="line">    <span class="comment">//渲染店铺列表</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(storeList)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; categoryList &#125; = res</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(categoryList)</span><br><span class="line">    <span class="comment">//渲染分类列表</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li>通过<code>all()</code>实现多个请求合并在一起，汇总所有请求结果，只需设置一个<code>loading</code>即可</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">initLoad</span>(<span class="params"></span>)&#123;</span><br><span class="line">    loading.<span class="title function_">show</span>() <span class="comment">//加载loading</span></span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title function_">getBannerList</span>(),<span class="title function_">getStoreList</span>(),<span class="title function_">getCategoryList</span>()]).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">        loading.<span class="title function_">hide</span>() <span class="comment">//关闭loading</span></span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">        loading.<span class="title function_">hide</span>()<span class="comment">//关闭loading</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//数据初始化    </span></span><br><span class="line"><span class="title function_">initLoad</span>()</span><br></pre></td></tr></table></figure><ol start="4"><li>通过<code>race</code>可以设置图片请求超时</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//请求某个图片资源</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">requestImg</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">        img.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">           <span class="title function_">resolve</span>(img);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//img.src = &quot;https://b-gold-cdn.xitu.io/v3/static/img/logo.a7995ad.svg&quot;; 正确的</span></span><br><span class="line">        img.<span class="property">src</span> = <span class="string">&quot;https://b-gold-cdn.xitu.io/v3/static/img/logo.a7995ad.svg1&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//延时函数，用于给请求计时</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">timeout</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&#x27;图片请求超时&#x27;</span>);</span><br><span class="line">        &#125;, <span class="number">5000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span></span><br><span class="line">.<span class="title function_">race</span>([<span class="title function_">requestImg</span>(), <span class="title function_">timeout</span>()])</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">results</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h5 id="如何理解ES6中的Porxy-使用场景"><a href="#如何理解ES6中的Porxy-使用场景" class="headerlink" title="如何理解ES6中的Porxy; 使用场景"></a>如何理解ES6中的Porxy; 使用场景</h5><ul><li>介绍</li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Proxy 亦是如此，用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）</span><br></pre></td></tr></table></figure><ul><li><p>用法</p><ol><li><code>Proxy</code>为 构造函数，用来生成 <code>Proxy</code>实例</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">参数</span></span><br><span class="line"><span class="comment">target表示所要拦截的目标对象（任何类型的对象，包括原生数组，函数，甚至另一个代理））</span></span><br><span class="line"><span class="comment">handler通常以函数作为属性的对象，各属性中的函数分别定义了在执行各种操作时代理 p 的行为</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ol start="2"><li>参数 handler 解析</li></ol><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">关于handler拦截属性，有如下：</span><br><span class="line"></span><br><span class="line">get(target,propKey,receiver)：拦截对象属性的读取</span><br><span class="line">set(target,propKey,value,receiver)：拦截对象属性的设置</span><br><span class="line">has(target,propKey)：拦截propKey in proxy的操作，返回一个布尔值</span><br><span class="line">deleteProperty(target,propKey)：拦截delete proxy[propKey]的操作，返回一个布尔值</span><br><span class="line">ownKeys(target)：拦截Object.keys(proxy)、for...in等循环，返回一个数组</span><br><span class="line">getOwnPropertyDescriptor(target, propKey)：拦截Object.getOwnPropertyDescriptor(proxy, propKey)，返回属性的描述对象</span><br><span class="line">defineProperty(target, propKey, propDesc)：拦截Object.defineProperty(proxy, propKey, propDesc），返回一个布尔值</span><br><span class="line">preventExtensions(target)：拦截Object.preventExtensions(proxy)，返回一个布尔值</span><br><span class="line">getPrototypeOf(target)：拦截Object.getPrototypeOf(proxy)，返回一个对象</span><br><span class="line">isExtensible(target)：拦截Object.isExtensible(proxy)，返回一个布尔值</span><br><span class="line">setPrototypeOf(target, proto)：拦截Object.setPrototypeOf(proxy, proto)，返回一个布尔值</span><br><span class="line">apply(target, object, args)：拦截 Proxy 实例作为函数调用的操作</span><br><span class="line">construct(target, args)：拦截 Proxy 实例作为构造函数调用的操作</span><br></pre></td></tr></table></figure><ol start="3"><li>Reflect</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">若需要在<span class="title class_">Proxy</span>内部调用对象的默认行为，建议使用<span class="title class_">Reflect</span>，其是<span class="title class_">ES6</span>中操作对象而提供的新 <span class="variable constant_">API</span></span><br><span class="line"></span><br><span class="line">基本特点：</span><br><span class="line">只要<span class="title class_">Proxy</span>对象具有的代理方法，<span class="title class_">Reflect</span>对象全部具有，以静态方法的形式存在</span><br><span class="line">修改某些<span class="title class_">Object</span>方法的返回结果，让其变得更合理（定义不存在属性行为的时候不报错而是返回<span class="literal">false</span>）</span><br><span class="line">让<span class="title class_">Object</span>操作都变成函数行为</span><br></pre></td></tr></table></figure><ol start="4"><li><p>一些参数用法</p><ul><li>get()get接受三个参数，依次为目标对象、属性名和 proxy 实例本身，最后一个参数可选</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(person, &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params">target, propKey</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target,propKey)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">proxy.<span class="property">name</span> <span class="comment">// &quot;张三&quot;</span></span><br><span class="line"><span class="comment">//get能够对数组增删改查进行拦截，下面是试下你数组读取负数的索引</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createArray</span>(<span class="params">...elements</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> handler = &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, propKey, receiver</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> index = <span class="title class_">Number</span>(propKey);</span><br><span class="line">      <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        propKey = <span class="title class_">String</span>(target.<span class="property">length</span> + index);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, propKey, receiver);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> target = [];</span><br><span class="line">  target.<span class="title function_">push</span>(...elements);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = <span class="title function_">createArray</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">arr[-<span class="number">1</span>] <span class="comment">// c</span></span><br><span class="line"><span class="comment">//如果一个属性不可配置（configurable）且不可写（writable），则 Proxy 不能修改该属性，否则会报错</span></span><br><span class="line"><span class="keyword">const</span> target = <span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(&#123;&#125;, &#123;</span><br><span class="line">  <span class="attr">foo</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">123</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">target, propKey</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler);</span><br><span class="line"></span><br><span class="line">proxy.<span class="property">foo</span></span><br><span class="line"><span class="comment">// TypeError: Invariant check failed</span></span><br></pre></td></tr></table></figure><ul><li>set()拦截某个属性的赋值操作，可以接受四个参数，依次为目标对象、属性名、属性值和 <code>Proxy</code> 实例本身</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> validator = &#123;</span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">obj, prop, value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (prop === <span class="string">&#x27;age&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="title class_">Number</span>.<span class="title function_">isInteger</span>(value)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;The age is not an integer&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (value &gt; <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RangeError</span>(<span class="string">&#x27;The age seems invalid&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对于满足条件的 age 属性以及其他属性，直接保存</span></span><br><span class="line">    obj[prop] = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, validator);</span><br><span class="line">person.<span class="property">age</span> = <span class="number">100</span>;</span><br><span class="line">person.<span class="property">age</span> <span class="comment">// 100</span></span><br><span class="line">person.<span class="property">age</span> = <span class="string">&#x27;young&#x27;</span> <span class="comment">// 报错</span></span><br><span class="line">person.<span class="property">age</span> = <span class="number">300</span> <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果目标对象自身的某个属性，不可写且不可配置，那么set方法将不起作用</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;foo&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">obj, prop, value, receiver</span>) &#123;</span><br><span class="line">    obj[prop] = <span class="string">&#x27;baz&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, handler);</span><br><span class="line">proxy.<span class="property">foo</span> = <span class="string">&#x27;baz&#x27;</span>;</span><br><span class="line">proxy.<span class="property">foo</span> <span class="comment">// &quot;bar&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//严格模式下，set代理如果没有返回true，就会报错</span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">obj, prop, value, receiver</span>) &#123;</span><br><span class="line">    obj[prop] = receiver;</span><br><span class="line">    <span class="comment">// 无论有没有下面这一行，都会报错</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, handler);</span><br><span class="line">proxy.<span class="property">foo</span> = <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"><span class="comment">// TypeError: &#x27;set&#x27; on proxy: trap returned falsish for property &#x27;foo&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>deleteProperty()<code>deleteProperty</code>方法用于拦截<code>delete</code>操作，如果这个方法抛出错误或者返回<code>false</code>，当前属性就无法被<code>delete</code>命令删除</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  deleteProperty (target, key) &#123;</span><br><span class="line">    <span class="title function_">invariant</span>(key, <span class="string">&#x27;delete&#x27;</span>);</span><br><span class="line">    <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target,key)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">invariant</span> (key, action) &#123;</span><br><span class="line">  <span class="keyword">if</span> (key[<span class="number">0</span>] === <span class="string">&#x27;_&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`无法删除私有属性`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> target = &#123; <span class="attr">_prop</span>: <span class="string">&#x27;foo&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler);</span><br><span class="line"><span class="keyword">delete</span> proxy.<span class="property">_prop</span></span><br><span class="line"><span class="comment">// Error: 无法删除私有属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//目标对象自身的不可配置（configurable）的属性，不能被deleteProperty方法删除，否则报错</span></span><br></pre></td></tr></table></figure><ul><li>取消代理</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Proxy</span>.<span class="title function_">revocable</span>(target, handler);</span><br></pre></td></tr></table></figure></li></ol></li><li><p>使用场景</p><p><code>Proxy</code>其功能非常类似于设计模式中的代理模式，常用功能如下：</p><ul><li>拦截和监视外部对对象的访问</li><li>降低函数或类的复杂度</li><li>在复杂操作前对操作进行校验或对所需资源进行管理</li></ul><ol><li>使用 <code>Proxy</code> 保障数据类型的准确性</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numericDataStore = &#123; <span class="attr">count</span>: <span class="number">0</span>, <span class="attr">amount</span>: <span class="number">1234</span>, <span class="attr">total</span>: <span class="number">14</span> &#125;;</span><br><span class="line">numericDataStore = <span class="keyword">new</span> <span class="title class_">Proxy</span>(numericDataStore, &#123;</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, key, value, proxy</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> value !== <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">&quot;属性只能是number类型&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value, proxy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">numericDataStore.<span class="property">count</span> = <span class="string">&quot;foo&quot;</span></span><br><span class="line"><span class="comment">// Error: 属性只能是number类型</span></span><br><span class="line"></span><br><span class="line">numericDataStore.<span class="property">count</span> = <span class="number">333</span></span><br><span class="line"><span class="comment">// 赋值成功</span></span><br></pre></td></tr></table></figure><ol start="2"><li>声明了一个私有的 <code>apiKey</code>，便于 <code>api</code> 这个对象内部的方法调用，但不希望从外部也能够访问 <code>api._apiKey</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> api = &#123;</span><br><span class="line">    <span class="attr">_apiKey</span>: <span class="string">&#x27;123abc456def&#x27;</span>,</span><br><span class="line">    <span class="attr">getUsers</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123; &#125;,</span><br><span class="line">    <span class="attr">getUser</span>: <span class="keyword">function</span>(<span class="params">userId</span>)&#123; &#125;,</span><br><span class="line">    <span class="attr">setUser</span>: <span class="keyword">function</span>(<span class="params">userId, config</span>)&#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">RESTRICTED</span> = [<span class="string">&#x27;_apiKey&#x27;</span>];</span><br><span class="line">api = <span class="keyword">new</span> <span class="title class_">Proxy</span>(api, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, key, proxy</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable constant_">RESTRICTED</span>.<span class="title function_">indexOf</span>(key) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span> 不可访问.`</span>);</span><br><span class="line">        &#125; <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, proxy);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, key, value, proxy</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable constant_">RESTRICTED</span>.<span class="title function_">indexOf</span>(key) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span> 不可修改`</span>);</span><br><span class="line">        &#125; <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, value, proxy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(api.<span class="property">_apiKey</span>)</span><br><span class="line">api.<span class="property">_apiKey</span> = <span class="string">&#x27;987654321&#x27;</span></span><br><span class="line"><span class="comment">// 上述都抛出错误</span></span><br></pre></td></tr></table></figure><ol start="3"><li>观察者模式（Observer mode）指的是函数自动观察数据对象，一旦对象有变化，函数就会自动执行； observable函数返回一个原始对象的 Proxy 代理，拦截赋值操作，触发充当观察者的各个函数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> queuedObservers = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">observe</span> = fn =&gt; queuedObservers.<span class="title function_">add</span>(fn);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">observable</span> = obj =&gt; <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;set&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">set</span>(<span class="params">target, key, value, receiver</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value, receiver);</span><br><span class="line">  queuedObservers.<span class="title function_">forEach</span>(<span class="function"><span class="params">observer</span> =&gt;</span> <span class="title function_">observer</span>());</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//观察者函数都放进Set集合，当修改obj的值，在会set函数中拦截，自动执行Set所有的观察者</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="怎么理解ES6中Generator；使用场景"><a href="#怎么理解ES6中Generator；使用场景" class="headerlink" title="怎么理解ES6中Generator；使用场景"></a><strong>怎么理解ES6中Generator；使用场景</strong></h5><ul><li><p>介绍</p><ul><li><p>执行 <code>Generator</code> 函数会返回一个遍历器对象，可以依次遍历 <code>Generator</code> 函数内部的每一个状态</p><p>形式上，<code>Generator</code>函数是一个普通函数，但是有两个特征：</p><ul><li><code>function</code>关键字与函数名之间有一个星号</li><li>函数体内部使用<code>yield</code>表达式，定义不同的内部状态</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">helloWorldGenerator</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;ending&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用</p><ul><li><code>Generator</code> 函数会返回一个遍历器对象，即具有<code>Symbol.iterator</code>属性，并且返回给自己</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// some code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = <span class="title function_">gen</span>();</span><br><span class="line"></span><br><span class="line">g[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() === g</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>通过<code>yield</code>关键字可以暂停<code>generator</code>函数返回的遍历器对象的状态</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">helloWorldGenerator</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;ending&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> hw = <span class="title function_">helloWorldGenerator</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">上述存在三个状态：hello、world、return</span></span><br><span class="line"><span class="comment">通过next方法才会遍历到下一个内部状态，其运行逻辑如下：</span></span><br><span class="line"><span class="comment">1.遇到yield表达式，就暂停执行后面的操作，并将紧跟在yield后面的那个表达式的值，作为返回的对象的value属性值。</span></span><br><span class="line"><span class="comment">2.下一次调用next方法时，再继续往下执行，直到遇到下一个yield表达式</span></span><br><span class="line"><span class="comment">3.如果没有再遇到新的yield表达式，就一直运行到函数结束，直到return语句为止，并将return语句后面的表达式的值，作为返回的对象的value属性值。</span></span><br><span class="line"><span class="comment">4.如果该函数没有return语句，则返回的对象的value属性值为undefined</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">hw.<span class="title function_">next</span>()</span><br><span class="line"><span class="comment">// &#123; value: &#x27;hello&#x27;, done: false &#125;</span></span><br><span class="line">hw.<span class="title function_">next</span>()</span><br><span class="line"><span class="comment">// &#123; value: &#x27;world&#x27;, done: false &#125;</span></span><br><span class="line">hw.<span class="title function_">next</span>()</span><br><span class="line"><span class="comment">// &#123; value: &#x27;ending&#x27;, done: true &#125;</span></span><br><span class="line">hw.<span class="title function_">next</span>()</span><br><span class="line"><span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">done用来判断是否存在下个状态，value对应状态值</span></span><br><span class="line"><span class="comment">yield表达式本身没有返回值，或者说总是返回undefined</span></span><br><span class="line"><span class="comment">通过调用next方法可以带一个参数，该参数就会被当作上一个yield表达式的返回值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> y = <span class="number">2</span> * (<span class="keyword">yield</span> (x + <span class="number">1</span>));</span><br><span class="line">  <span class="keyword">var</span> z = <span class="keyword">yield</span> (y / <span class="number">3</span>);</span><br><span class="line">  <span class="keyword">return</span> (x + y + z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="title function_">foo</span>(<span class="number">5</span>);</span><br><span class="line">a.<span class="title function_">next</span>() <span class="comment">// Object&#123;value:6, done:false&#125;</span></span><br><span class="line">a.<span class="title function_">next</span>() <span class="comment">// Object&#123;value:NaN, done:false&#125;</span></span><br><span class="line">a.<span class="title function_">next</span>() <span class="comment">// Object&#123;value:NaN, done:true&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="title function_">foo</span>(<span class="number">5</span>);</span><br><span class="line">b.<span class="title function_">next</span>() <span class="comment">// &#123; value:6, done:false &#125;</span></span><br><span class="line">b.<span class="title function_">next</span>(<span class="number">12</span>) <span class="comment">// &#123; value:8, done:false &#125;</span></span><br><span class="line">b.<span class="title function_">next</span>(<span class="number">13</span>) <span class="comment">// &#123; value:42, done:true &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//正因为Generator函数返回Iterator对象，因此我们还可以通过for...of进行遍历</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> <span class="title function_">foo</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 2 3 4 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//原生对象没有遍历接口，通过Generator函数为它加上这个接口，就能使用for...of进行遍历了</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">objectEntries</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> propKeys = <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> propKey <span class="keyword">of</span> propKeys) &#123;</span><br><span class="line">    <span class="keyword">yield</span> [propKey, obj[propKey]];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jane = &#123; <span class="attr">first</span>: <span class="string">&#x27;Jane&#x27;</span>, <span class="attr">last</span>: <span class="string">&#x27;Doe&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> <span class="title function_">objectEntries</span>(jane)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// first: Jane</span></span><br><span class="line"><span class="comment">// last: Doe</span></span><br></pre></td></tr></table></figure></li><li><p>异步解决方案</p><ul><li>回调函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//回调函数，就是把任务的第二段单独写在一个函数里面，等到重新执行这个任务的时候，再调用这个函数</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;/etc/fstab&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  fs.<span class="title function_">readFile</span>(<span class="string">&#x27;/etc/shells&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//readFile函数的第三个参数，就是回调函数，等到操作系统返回了/etc/passwd这个文件以后，回调函数才会执行</span></span><br></pre></td></tr></table></figure><ul><li>Promise 对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Promise就是为了解决回调地狱而产生的，将回调函数的嵌套，改成链式调用</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readFile = <span class="keyword">function</span> (<span class="params">fileName</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(fileName, <span class="keyword">function</span>(<span class="params">error, data</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (error) <span class="keyword">return</span> <span class="title function_">reject</span>(error);</span><br><span class="line">      <span class="title function_">resolve</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">readFile</span>(<span class="string">&#x27;/etc/fstab&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">readFile</span>(<span class="string">&#x27;/etc/shells&#x27;</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//这种链式操作形式，使异步任务的两段执行更清楚了，但是也存在了很明显的问题，代码变得冗杂了，语义化并不强</span></span><br></pre></td></tr></table></figure><ul><li>generator 函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//yield表达式可以暂停函数执行，next方法用于恢复函数执行，这使得Generator函数非常适合将异步任务同步化</span></span><br><span class="line"><span class="keyword">const</span> gen = <span class="keyword">function</span>* () &#123;</span><br><span class="line">  <span class="keyword">const</span> f1 = <span class="keyword">yield</span> <span class="title function_">readFile</span>(<span class="string">&#x27;/etc/fstab&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> f2 = <span class="keyword">yield</span> <span class="title function_">readFile</span>(<span class="string">&#x27;/etc/shells&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(f1.<span class="title function_">toString</span>());</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(f2.<span class="title function_">toString</span>());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>async&#x2F;await</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将上面Generator函数改成async/await形式，更为简洁，语义化更强了</span></span><br><span class="line"><span class="keyword">const</span> asyncReadFile = <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> f1 = <span class="keyword">await</span> <span class="title function_">readFile</span>(<span class="string">&#x27;/etc/fstab&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> f2 = <span class="keyword">await</span> <span class="title function_">readFile</span>(<span class="string">&#x27;/etc/shells&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(f1.<span class="title function_">toString</span>());</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(f2.<span class="title function_">toString</span>());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>区别：</p></li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">通过上述代码进行分析，将promise、Generator、async/await进行比较：</span><br><span class="line">1.promise和async/await是专门用于处理异步操作的</span><br><span class="line">2.Generator并不是为异步而设计出来的，它还有其他功能（对象迭代、控制输出、部署Interator接口...）</span><br><span class="line">3.promise编写代码相比Generator、async更为复杂化，且可读性也稍差</span><br><span class="line">4.Generator、async需要与promise对象搭配处理异步情况</span><br><span class="line">5.async实质是Generator的语法糖，相当于会自动执行Generator函数</span><br><span class="line">6.async使用上更为简洁，将异步代码以同步的形式进行编写，是处理异步编程的最终方案</span><br></pre></td></tr></table></figure><ul><li><p>使用场景</p><ol><li><code>Generator</code>是异步解决的一种方案，最大特点则是将异步操作同步化表达出来</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">loadUI</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">showLoadingScreen</span>();</span><br><span class="line">  <span class="keyword">yield</span> <span class="title function_">loadUIDataAsynchronously</span>();</span><br><span class="line">  <span class="title function_">hideLoadingScreen</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> loader = <span class="title function_">loadUI</span>();</span><br><span class="line"><span class="comment">// 加载UI</span></span><br><span class="line">loader.<span class="title function_">next</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 卸载UI</span></span><br><span class="line">loader.<span class="title function_">next</span>()</span><br></pre></td></tr></table></figure><ol start="2"><li>包括<code>redux-saga</code>中间件也充分利用了<code>Generator</code>特性</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; call, put, takeEvery, takeLatest &#125; <span class="keyword">from</span> <span class="string">&#x27;redux-saga/effects&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Api</span> <span class="keyword">from</span> <span class="string">&#x27;...&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">fetchUser</span>(<span class="params">action</span>) &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> user = <span class="keyword">yield</span> <span class="title function_">call</span>(<span class="title class_">Api</span>.<span class="property">fetchUser</span>, action.<span class="property">payload</span>.<span class="property">userId</span>);</span><br><span class="line">      <span class="keyword">yield</span> <span class="title function_">put</span>(&#123;<span class="attr">type</span>: <span class="string">&quot;USER_FETCH_SUCCEEDED&quot;</span>, <span class="attr">user</span>: user&#125;);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">yield</span> <span class="title function_">put</span>(&#123;<span class="attr">type</span>: <span class="string">&quot;USER_FETCH_FAILED&quot;</span>, <span class="attr">message</span>: e.<span class="property">message</span>&#125;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">mySaga</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="title function_">takeEvery</span>(<span class="string">&quot;USER_FETCH_REQUESTED&quot;</span>, fetchUser);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">mySaga</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="title function_">takeLatest</span>(<span class="string">&quot;USER_FETCH_REQUESTED&quot;</span>, fetchUser);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> mySaga;</span><br></pre></td></tr></table></figure><ol start="3"><li>还能利用<code>Generator</code>函数，在对象上实现<code>Iterator</code>接口</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">iterEntries</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i &lt; keys.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> key = keys[i];</span><br><span class="line">    <span class="keyword">yield</span> [key, obj[key]];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myObj = &#123; <span class="attr">foo</span>: <span class="number">3</span>, <span class="attr">bar</span>: <span class="number">7</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> <span class="title function_">iterEntries</span>(myObj)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// foo 3</span></span><br><span class="line"><span class="comment">// bar 7</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="怎么理解ES6中Module-使用场景"><a href="#怎么理解ES6中Module-使用场景" class="headerlink" title="怎么理解ES6中Module; 使用场景"></a>怎么理解ES6中Module; 使用场景</h5><ul><li><p>介绍</p><p>模块，（Module），是能够单独命名并独立地完成一定功能的程序语句的<strong>集合（即程序代码和数据结构的集合体）</strong>。</p><p>两个基本的特征：外部特征和内部特征</p><ul><li>外部特征是指模块跟外部环境联系的接口（即其他模块或程序调用该模块的方式，包括有输入输出参数、引用的全局变量）和模块的功能</li><li>内部特征是指模块的内部环境具有的特点（即该模块的局部数据和程序代码</li></ul><p><strong>为什么需要模块化</strong></p><ul><li>代码抽象</li><li>代码封装</li><li>代码复用</li><li>依赖管理</li></ul></li><li><p>使用</p><p><code>ES6</code>模块内部自动采用了严格模式，这里就不展开严格模式的限制，毕竟这是<code>ES5</code>之前就已经规定好</p><p>模块功能主要由两个命令构成：</p><ul><li><code>export</code>：用于规定模块的对外接口</li><li><code>import</code>：用于输入其他模块提供的功能</li></ul><ol><li>export</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// profile.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> firstName = <span class="string">&#x27;Michael&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> lastName = <span class="string">&#x27;Jackson&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> year = <span class="number">1958</span>;</span><br><span class="line"><span class="comment">//或 </span></span><br><span class="line"><span class="comment">// 建议使用下面写法，这样能瞬间确定输出了哪些变量</span></span><br><span class="line"><span class="keyword">var</span> firstName = <span class="string">&#x27;Michael&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> lastName = <span class="string">&#x27;Jackson&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> year = <span class="number">1958</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; firstName, lastName, year &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出函数或类</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过as可以进行输出变量的重命名</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">v1</span>(<span class="params"></span>) &#123; ... &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">v2</span>(<span class="params"></span>) &#123; ... &#125;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  v1 <span class="keyword">as</span> streamV1,</span><br><span class="line">  v2 <span class="keyword">as</span> streamV2,</span><br><span class="line">  v2 <span class="keyword">as</span> streamLatestVersion</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>import</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用export命令定义了模块的对外接口以后，其他 JS 文件就可以通过import命令加载这个模块</span></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; firstName, lastName, year &#125; <span class="keyword">from</span> <span class="string">&#x27;./profile.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setName</span>(<span class="params">element</span>) &#123;</span><br><span class="line">  element.<span class="property">textContent</span> = firstName + <span class="string">&#x27; &#x27;</span> + lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//同样如果想要输入变量起别名，通过as关键字</span></span><br><span class="line"><span class="keyword">import</span> &#123; lastName <span class="keyword">as</span> surname &#125; <span class="keyword">from</span> <span class="string">&#x27;./profile.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//当加载整个模块的时候，需要用到星号*</span></span><br><span class="line"><span class="comment">// circle.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">area</span>(<span class="params">radius</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">PI</span> * radius * radius;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">circumference</span>(<span class="params">radius</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span> * radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> circle <span class="keyword">from</span> <span class="string">&#x27;./circle&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(circle)   <span class="comment">// &#123;area:area,circumference:circumference&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输入的变量都是只读的，不允许修改，但是如果是对象，允许修改属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果不需要知道变量名或函数就完成加载，就要用到export default命令，为模块指定默认输出</span></span><br><span class="line"><span class="comment">//加载该模块的时候，import命令可以为该函数指定任意名字</span></span><br><span class="line"><span class="comment">// export-default.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// import-default.js</span></span><br><span class="line"><span class="keyword">import</span> customName <span class="keyword">from</span> <span class="string">&#x27;./export-default&#x27;</span>;</span><br><span class="line"><span class="title function_">customName</span>(); <span class="comment">// &#x27;foo&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>动态加载</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">允许您仅在需要时动态加载模块，而不必预先加载所有模块，这存在明显的性能优势</span></span><br><span class="line"><span class="comment">这个新功能允许您将import()作为函数调用，将其作为参数传递给模块的路径。 它返回一个 promise，它用一个模块对象来实现，让你可以访问该对象的导出</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span>(<span class="string">&#x27;/modules/myModule.mjs&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params"><span class="variable language_">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Do something with the module.</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//复合写法</span></span><br><span class="line"><span class="comment">//如果在一个模块之中，先输入后输出同一个模块，import语句可以与export语句写在一起</span></span><br><span class="line"><span class="keyword">export</span> &#123; foo, bar &#125; <span class="keyword">from</span> <span class="string">&#x27;my_module&#x27;</span>;</span><br><span class="line"><span class="comment">// 可以简单理解为</span></span><br><span class="line"><span class="keyword">import</span> &#123; foo, bar &#125; <span class="keyword">from</span> <span class="string">&#x27;my_module&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; foo, bar &#125;;</span><br></pre></td></tr></table></figure><h5 id="怎么理解Decorator-装饰器-；-使用场景"><a href="#怎么理解Decorator-装饰器-；-使用场景" class="headerlink" title="怎么理解Decorator (装饰器)； 使用场景"></a><strong>怎么理解Decorator (装饰器)； 使用场景</strong></h5><ul><li><p>介绍</p><p>即装饰器，在不改变原类和使用继承的情况下，动态地扩展对象功能</p><p>优点：</p><ol><li>代码可读性变强了，装饰器命名相当于一个注释</li><li>在不改变原有代码情况下，对原来功能进行扩展</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个类，什么属性值，方法也没有</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">soldier</span>&#123; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个方法，作为装饰器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">strong</span>(<span class="params">target</span>)&#123;</span><br><span class="line">    target.<span class="property">AK</span> = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将装饰器装饰在类上</span></span><br><span class="line">@strong</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">soldier</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用类的AK属性</span></span><br><span class="line">soldier.<span class="property">AK</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>用法</p><p><code>Docorator</code>修饰对象为下面两种：</p><ul><li>类的装饰</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">类的装饰</span></span><br><span class="line"><span class="comment">当对类本身进行装饰的时候，能够接受一个参数，即类本身</span></span><br><span class="line"><span class="comment">将装饰器行为进行分解，大家能够有个更深入的了解</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">@decorator</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line">A = <span class="title function_">decorator</span>(A) || A;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//下面@testable就是一个装饰器，target就是传入的类，即MyTestableClass，实现了为类添加静态属性</span></span><br><span class="line">@testable</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyTestableClass</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">testable</span>(<span class="params">target</span>) &#123;</span><br><span class="line">  target.<span class="property">isTestable</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">MyTestableClass</span>.<span class="property">isTestable</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果想要传递参数，可以在装饰器外层再封装一层函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">testable</span>(<span class="params">isTestable</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">target</span>) &#123;</span><br><span class="line">    target.<span class="property">isTestable</span> = isTestable;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="title function_">testable</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyTestableClass</span> &#123;&#125;</span><br><span class="line"><span class="title class_">MyTestableClass</span>.<span class="property">isTestable</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">@<span class="title function_">testable</span>(<span class="literal">false</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;&#125;</span><br><span class="line"><span class="title class_">MyClass</span>.<span class="property">isTestable</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li>类属性的装饰</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">类属性的装饰</span></span><br><span class="line"><span class="comment">当对类属性进行装饰的时候，能够接受三个参数：</span></span><br><span class="line"><span class="comment">1.类的原型对象</span></span><br><span class="line"><span class="comment">2.需要装饰的属性名</span></span><br><span class="line"><span class="comment">3.装饰属性名的描述对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//首先定义一个readonly装饰器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readonly</span>(<span class="params">target, name, descriptor</span>)&#123;</span><br><span class="line">  descriptor.<span class="property">writable</span> = <span class="literal">false</span>; <span class="comment">// 将可写属性设为false</span></span><br><span class="line">  <span class="keyword">return</span> descriptor;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用readonly装饰类的name方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  @readonly</span><br><span class="line">  <span class="title function_">name</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.first&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.last&#125;</span>`</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//相当于以下调用</span></span><br><span class="line"><span class="title function_">readonly</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">&#x27;name&#x27;</span>, descriptor);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果一个方法有多个装饰器，就像洋葱一样，先从外到内进入，再由内到外执行</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dec</span>(<span class="params">id</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;evaluated&#x27;</span>, id);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">target, property, descriptor</span>) =&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;executed&#x27;</span>, id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">    @<span class="title function_">dec</span>(<span class="number">1</span>)</span><br><span class="line">    @<span class="title function_">dec</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="title function_">method</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// evaluated 1</span></span><br><span class="line"><span class="comment">// evaluated 2</span></span><br><span class="line"><span class="comment">// executed 2</span></span><br><span class="line"><span class="comment">// executed 1</span></span><br><span class="line"><span class="comment">//外层装饰器@dec(1)先进入，但是内层装饰器@dec(2)先执行</span></span><br></pre></td></tr></table></figure></li><li><p>注意项</p><p>装饰器不能用于修饰函数，因为函数存在变量声明情况</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> add = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  counter++;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">@add</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编译阶段，变成下面</span></span><br><span class="line"><span class="keyword">var</span> counter;</span><br><span class="line"><span class="keyword">var</span> add;</span><br><span class="line"></span><br><span class="line">@add</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">add = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  counter++;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//意图是执行后counter等于 1，但是实际上结果是counter等于 0</span></span><br></pre></td></tr></table></figure></li><li><p>使用场景</p><p>基于<code>Decorator</code>强大的作用，我们能够完成各种场景的需求，下面简单列举几种：</p><ol><li>使用<code>react-redux</code>的时候，如果写成下面这种形式，既不雅观也很麻烦</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyReactComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(mapStateToProps, mapDispatchToProps)(<span class="title class_">MyReactComponent</span>);</span><br><span class="line"><span class="comment">//通过装饰器就变得简洁多了</span></span><br><span class="line">@<span class="title function_">connect</span>(mapStateToProps, mapDispatchToProps)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">MyReactComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>将<code>mixins</code>，也可以写成装饰器，让使用更为简洁了</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mixins</span>(<span class="params">...list</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">target</span>) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">assign</span>(target.<span class="property"><span class="keyword">prototype</span></span>, ...list);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="title function_">foo</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo&#x27;</span>) &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">@<span class="title function_">mixins</span>(<span class="title class_">Foo</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">obj.<span class="title function_">foo</span>() <span class="comment">// &quot;foo&quot;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>讲讲<code>core-decorators.js</code>几个常见的装饰器</li></ol></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@antobind</span></span><br><span class="line"><span class="comment">//autobind装饰器使得方法中的this对象，绑定原始对象</span></span><br><span class="line"><span class="keyword">import</span> &#123; autobind &#125; <span class="keyword">from</span> <span class="string">&#x27;core-decorators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  @autobind</span><br><span class="line">  <span class="title function_">getPerson</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="keyword">let</span> getPerson = person.<span class="property">getPerson</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getPerson</span>() === person;</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//@readonly</span></span><br><span class="line"><span class="comment">//readonly装饰器使得属性或方法不可写</span></span><br><span class="line"><span class="keyword">import</span> &#123; readonly &#125; <span class="keyword">from</span> <span class="string">&#x27;core-decorators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Meal</span> &#123;</span><br><span class="line">  @readonly</span><br><span class="line">  entree = <span class="string">&#x27;steak&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dinner = <span class="keyword">new</span> <span class="title class_">Meal</span>();</span><br><span class="line">dinner.<span class="property">entree</span> = <span class="string">&#x27;salmon&#x27;</span>;</span><br><span class="line"><span class="comment">// Cannot assign to read only property &#x27;entree&#x27; of [object Object]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//@deprecate</span></span><br><span class="line"><span class="comment">//deprecate或deprecated装饰器在控制台显示一条警告，表示该方法将废除</span></span><br><span class="line"><span class="keyword">import</span> &#123; deprecate &#125; <span class="keyword">from</span> <span class="string">&#x27;core-decorators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  @deprecate</span><br><span class="line">  <span class="title function_">facepalm</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  @<span class="title function_">deprecate</span>(<span class="string">&#x27;功能废除了&#x27;</span>)</span><br><span class="line">  <span class="title function_">facepalmHard</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line">person.<span class="title function_">facepalm</span>();</span><br><span class="line"><span class="comment">// DEPRECATION Person#facepalm: This function will be removed in future versions.</span></span><br><span class="line"></span><br><span class="line">person.<span class="title function_">facepalmHard</span>();</span><br><span class="line"><span class="comment">// DEPRECATION Person#facepalmHard: 功能废除了</span></span><br></pre></td></tr></table></figure><h5 id="ES6-class"><a href="#ES6-class" class="headerlink" title="ES6 class"></a>ES6 class</h5><p>​class 没有声明提升</p><h6 id="类方法-constructor"><a href="#类方法-constructor" class="headerlink" title="类方法 constructor"></a>类方法 constructor</h6><p>​这个方法类似于其他语言，类的init方法，每次new实例时都会调用</p><h6 id="关键字-extends-继承"><a href="#关键字-extends-继承" class="headerlink" title="关键字 extends (继承)"></a>关键字 extends (继承)</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Son_of_Bullshit</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Bullshit</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h6 id="关键字-super"><a href="#关键字-super" class="headerlink" title="关键字 super"></a>关键字 super</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当我们获取父类属性时，需要用到super进行获取</span></span><br><span class="line"><span class="comment">// 例如子类写了constructor ， 父类的属性就需要super进行获取</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bullshit</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span> (text, color)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">text</span> = text;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son_of_Bullshit</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Bullshit</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span> (text, color, fontSize) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(text, color)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">fontSize</span> = fontSize</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="关键字-static"><a href="#关键字-static" class="headerlink" title="关键字 static"></a>关键字 static</h6><p>​在类里，静态属性、方法是属于类自身的，当调用时直接使用类调用即可</p><p>​静态方法里的this是类而非实例对象，所以静态方法里面可以调用另外一个静态方法</p><h5 id="关键字setter-getter-设置属性和获取属性"><a href="#关键字setter-getter-设置属性和获取属性" class="headerlink" title="关键字setter getter (设置属性和获取属性)"></a>关键字setter getter (设置属性和获取属性)</h5><h5 id="class实现单例模式"><a href="#class实现单例模式" class="headerlink" title="class实现单例模式"></a>class实现单例模式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingletonApple</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, creator, products</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">creator</span> = creator;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">products</span> = prodcts;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">getInstance</span>(<span class="params">name, creator, products</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">instance</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">instance</span> = <span class="keyword">new</span> <span class="title class_">SingletonApple</span>(name, creator,products);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">instance</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> appleComany = <span class="title class_">SingletonApple</span>()</span><br><span class="line"><span class="keyword">let</span> copyApple = <span class="title class_">SingletonApple</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(appleComany === copyApple)  <span class="comment">//true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3</title>
      <link href="/2023/04/11/vue3/"/>
      <url>/2023/04/11/vue3/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h2><h3 id="渐进式框架"><a href="#渐进式框架" class="headerlink" title="渐进式框架"></a>渐进式框架</h3><ul><li>无需构建步骤，渐进式增强静态HTML</li><li>在任何页面中作为 Web Components 嵌入</li><li>单页面应用(SPA)</li><li>全栈&#x2F;服务器端渲染(SSR)</li><li>jamstack&#x2F; 静态站点生成(SSG)</li><li>开发桌面端，移动端，WebGL，甚至是命令行终端界面</li></ul><blockquote><p>目前，在开发中，Vue有两大版本Vue2和Vue3，<strong>Vue 2 已于 2023 年 12 月 31 日达到终止支持时间。它不再会有新增功能、更新或问题修复。不过，它依然可以从所有现有的分发渠道 (CDN、包管理器、GitHub 等) 上获得。</strong></p></blockquote><h3 id="Vue-API-风格"><a href="#Vue-API-风格" class="headerlink" title="Vue API 风格"></a>Vue API 风格</h3><blockquote><p>Vue的组件可以按两种不同风格书写：<br>选项式API (Options API)<br>组合式API</p></blockquote><h4 id="选项式API-Options-API"><a href="#选项式API-Options-API" class="headerlink" title="选项式API (Options API)"></a>选项式API (Options API)</h4><p>在选项式 API 中，组件的配置通过多个选项对象来定义，比如 <code>data</code>、<code>methods</code>、<code>computed</code>、<code>watch</code> 等。选项式定义的属性都会暴露在函数内部的this上，他会指向当前的组件实例，vue2使用便是这种写法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;templates&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &#123;&#123;count&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/templates&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">    name:&quot;App&quot;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            count: 0</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        addCount()&#123;</span><br><span class="line">            this.count++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted()&#123;</span><br><span class="line">        console.log(this.count)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>优点</strong></p><ul><li><strong>易于理解</strong>：对初学者友好，层次明确，更易于阅读。</li><li><strong>结构清晰</strong>：同类功能集中在一起，便于管理。</li></ul><p><strong>缺点</strong></p><ul><li><strong>逻辑复用困难</strong>：如果组件比较复杂，逻辑往往会分散到不同的选项中，导致复用和维护变得困难。</li><li><strong>类型推导 weaker</strong>：在 TypeScript 中，类型推导可能比组合式 API 差。</li></ul><h4 id="组合式API-Composition-API"><a href="#组合式API-Composition-API" class="headerlink" title="组合式API (Composition API)"></a>组合式API (Composition API)</h4><p>组合式 API 使用 <code>setup</code> 函数来构建组件状态和行为，将相关逻辑组合在一起，适合更复杂的组件。<em>vue3官方推荐使用组合式API</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;templates&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &#123;&#123;count&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/templates&gt;</span><br><span class="line">&lt;script setup&gt; // 这里的setup 是语法糖的写法</span><br><span class="line">import &#123;ref,onMounted&#125; from &#x27;vue&#x27;</span><br><span class="line">const count = ref(0)</span><br><span class="line">function addCount()&#123;</span><br><span class="line">    count.value++</span><br><span class="line">&#125;</span><br><span class="line">onMounted(()=&gt;&#123;</span><br><span class="line">    console.log(count.value)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>优点</strong></p><ul><li><strong>逻辑复用</strong>：可以通过组合函数轻松复用多个组件之间的逻辑。</li><li><strong>更好的类型推导</strong>：在使用 TypeScript 时，可以更好地支持类型推导。</li><li><strong>灵活性高</strong>：开发者可以随意组织代码结构，响应式状态管理更加自由。</li></ul><p><strong>缺点</strong></p><ul><li><strong>学习曲线</strong>：对于初学者来说，理解 <code>ref</code>、<code>reactive</code>、<code>computed</code> 等组合式 API 可能会稍显复杂。</li><li><strong>过度组合</strong>：可能导致逻辑分散，需要开发者自行管理代码结构。</li></ul><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h4><blockquote><p>Vue 3 的官方推荐环境要求 Node.js 版本为 15 以上。尽管 Vue 3 最低支持 Node.js 版本是 12，但为了获得更好的性能和支持，建议使用更高版本，特别是 LTS（长期支持）版本。</p></blockquote><p>Vue.js 需要 Node.js 环境。因此，首先需要安装 Node.js。你可以从 <a href="https://nodejs.org/">Node.js 官方网站</a> 下载并安装适合你操作系统的版本。建议使用 LTS（长期支持版）版本。</p><h4 id="创建-Vue3项目"><a href="#创建-Vue3项目" class="headerlink" title="创建 Vue3项目"></a>创建 Vue3项目</h4><div class="tabs" id="unique-name"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="unique-name-1">npm</button><button type="button" class="tab " data-href="unique-name-2">cnpm</button><button type="button" class="tab " data-href="unique-name-3">yarn</button><button type="button" class="tab " data-href="unique-name-4">bun</button></ul><div class="tab-contents"><div class="tab-item-content active" id="unique-name-1"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm init vue@latest</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="unique-name-2"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pnpm create vue@latest</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="unique-name-3"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn create vue@latest</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="unique-name-4"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bun create vue@latest</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h4 id="启动开发服务器"><a href="#启动开发服务器" class="headerlink" title="启动开发服务器"></a>启动开发服务器</h4><p>使用以下命令启动开发服务器：</p><div class="tabs" id="unique-name"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="unique-name-1">npm</button><button type="button" class="tab " data-href="unique-name-2">cnpm</button><button type="button" class="tab " data-href="unique-name-3">yarn</button><button type="button" class="tab " data-href="unique-name-4">bun</button></ul><div class="tab-contents"><div class="tab-item-content active" id="unique-name-1"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &lt;your-project-name&gt;</span><br><span class="line">$ npm install</span><br><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="unique-name-2"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &lt;your-project-name&gt;</span><br><span class="line">$ pnpm install</span><br><span class="line">$ pnpm run dev</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="unique-name-3"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &lt;your-project-name&gt;</span><br><span class="line">$ yarn</span><br><span class="line">$ yarn dev</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="unique-name-4"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &lt;your-project-name&gt;</span><br><span class="line">$ bun install</span><br><span class="line">$ bun run dev</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="插播-npm-pnpm-cnpm-区别"><a href="#插播-npm-pnpm-cnpm-区别" class="headerlink" title="插播 - npm &#x2F;pnpm&#x2F; cnpm 区别"></a>插播 - npm &#x2F;pnpm&#x2F; cnpm 区别</h3><blockquote><p><code>npm</code>、<code>pnpm</code> 和 <code>cnpm</code> 是用于 JavaScript 和 Node.js 项目的包管理工具。它们之间的主要区别在于性能、存储方式和使用场景。下面将详细讲解这三者的区别及使用方法。</p></blockquote><div class="tabs" id="unique-name"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="unique-name-1">npm</button><button type="button" class="tab " data-href="unique-name-2">pnpm</button><button type="button" class="tab " data-href="unique-name-3">cnpm</button></ul><div class="tab-contents"><div class="tab-item-content active" id="unique-name-1"><p><strong>npm（Node Package Manager）</strong></p><p><strong>概述</strong>：</p><ul><li><code>npm</code> 是 Node.js 的默认包管理工具，用于安装和管理 JavaScript 依赖包。</li><li>npm 会将所有依赖包安装到项目的 <code>node_modules</code> 文件夹中。</li></ul><p><strong>特点</strong>：</p><ul><li>兼容性好，几乎所有 Node.js 项目都支持。</li><li>缓存机制，减少重复下载的时间，但还是每次安装时会将所有依赖包下载到本地。</li></ul><p><strong>基本使用</strong>：</p><ul><li><p>安装包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install package-name  </span><br></pre></td></tr></table></figure></li><li><p>卸载包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm uninstall package-name  </span><br></pre></td></tr></table></figure></li><li><p>全局安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g package-name  </span><br></pre></td></tr></table></figure></li><li><p>查看已安装包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm list  </span><br></pre></td></tr></table></figure></li></ul></div><div class="tab-item-content" id="unique-name-2"><p><strong>pnpm（Performant NPM）</strong></p><blockquote><p>pnpm 安装的依赖会在一个中央位置存储，并通过硬链接的方式在项目中引用。这种机制使得多个项目可以共享相同的依赖版本，从而节省磁盘空间和提高安装速度。然而，这种方式也可能引发一些依赖问题，</p></blockquote><p><strong>概述</strong>：</p><ul><li><code>pnpm</code> 是一个高效的包管理工具，旨在解决 <code>npm</code> 的性能问题。</li><li><code>pnpm</code> 通过使用硬链接（Hard Links）来共享依赖包，减少磁盘使用并加快安装速度。</li></ul><p><strong>特点</strong>：</p><ul><li>更快的安装速度，尤其是在有多个项目共享同一依赖时。</li><li>节省磁盘空间，多个项目可以共享同一版本的依赖包。</li></ul><p><strong>基本使用</strong>：</p><ul><li><p>安装包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pnpm add package-name  </span><br></pre></td></tr></table></figure></li><li><p>卸载包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pnpm remove package-name  </span><br></pre></td></tr></table></figure></li><li><p>全局安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pnpm add -g package-name  </span><br></pre></td></tr></table></figure></li><li><p>查看已安装包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pnpm list  </span><br></pre></td></tr></table></figure></li></ul></div><div class="tab-item-content" id="unique-name-3"><p><strong>cnpm（Chinese NPM）</strong></p><p><strong>概述</strong>：</p><ul><li><code>cnpm</code> 是 npm 的一个镜像，主要为了在中国境内加速 npm 包的下载。</li><li>由于 npm 官方服务器在国内访问速度较慢，因此 <code>cnpm</code> 通过来自淘宝的镜像源提供更快的包下载体验。</li></ul><p><strong>特点</strong>：</p><ul><li>加速 npm 包的下载速度，使用较高的稳定性。</li><li>兼容 <code>npm</code> 的命令，可以无缝替换。</li></ul><p><strong>基本使用</strong>：</p><ul><li><p>安装包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install package-name  </span><br></pre></td></tr></table></figure></li><li><p>卸载包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm uninstall package-name  </span><br></pre></td></tr></table></figure></li><li><p>全局安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install -g package-name  </span><br></pre></td></tr></table></figure></li><li><p>查看已安装包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm list  </span><br></pre></td></tr></table></figure></li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h4 id="npm和pnpm区别"><a href="#npm和pnpm区别" class="headerlink" title="npm和pnpm区别"></a>npm和pnpm区别</h4><p><code>npm</code> 和 <code>pnpm</code> 在依赖管理和安装方式上有一些显著的区别，尤其是在全局与局部安装、依赖管理和存储结构方面。</p><h5 id="全局与局部安装"><a href="#全局与局部安装" class="headerlink" title="全局与局部安装"></a>全局与局部安装</h5><div class="tabs" id="unique-name"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="unique-name-1">npm</button><button type="button" class="tab " data-href="unique-name-2">pnpm</button></ul><div class="tab-contents"><div class="tab-item-content active" id="unique-name-1"><p><strong>npm</strong>：</p><ul><li>使用 <code>npm install -g package-name</code> 命令可以全局安装包，这会将包安装在全局的 <code>node_modules</code> 目录中，通常位于系统的某个特定路径下（如 <code>/usr/local/lib/node_modules</code>）。</li><li>局部安装通过 <code>npm install package-name</code> 命令，这会将包安装在当前项目的 <code>node_modules</code> 目录中。</li></ul></div><div class="tab-item-content" id="unique-name-2"><p><strong>pnpm</strong>：</p><ul><li><code>pnpm</code> 也支持全局和局部安装，命令与 <code>npm</code> 相同，即通过 <code>pnpm add -g package-name</code> 安装全局包。</li><li>局部安装时，<code>pnpm</code> 会将依赖包安装在当前项目的 <code>node_modules</code> 中，但它采用了硬链接的机制来引用存储在一个集中位置的依赖。</li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h5 id="依赖管理和存储结构"><a href="#依赖管理和存储结构" class="headerlink" title="依赖管理和存储结构"></a>依赖管理和存储结构</h5><div class="tabs" id="unique-name"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="unique-name-1">npm</button><button type="button" class="tab " data-href="unique-name-2">pnpm</button></ul><div class="tab-contents"><div class="tab-item-content active" id="unique-name-1"><p><strong>npm</strong>：</p><ul><li><code>npm</code> 会将每个项目的所有依赖都下载到项目的 <code>node_modules</code> 目录中，通常会出现嵌套的目录结构（即深层次嵌套），这可能导致很多重复的依赖，尤其是当不同项目依赖于同一库的不同版本时。</li><li>每个项目的依赖是相互独立的，依赖冲突可能会导致不同版本在不同项目中共存，但这也增加了磁盘占用。</li></ul></div><div class="tab-item-content" id="unique-name-2"><p><strong>pnpm</strong>：</p><ul><li><code>pnpm</code> 将所有的依赖存储在一个全局的集中位置（通常位于 <code>.pnpm-store</code>），并通过硬链接的方式引用这些依赖到各个项目的 <code>node_modules</code> 中。</li><li>这种方法让 <code>pnpm</code> 节省了磁盘空间，并且提高了安装速度，因为相同的依赖不需要被重复下载。</li><li><code>pnpm</code> 也会保持一定的项目隔离，确保每个项目都能使用其声明的依赖版本，避免全局共享的潜在冲突。</li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h5 id="性能与效率"><a href="#性能与效率" class="headerlink" title="性能与效率"></a>性能与效率</h5><div class="tabs" id="unique-name"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="unique-name-1">npm</button><button type="button" class="tab " data-href="unique-name-2">pnpm</button></ul><div class="tab-contents"><div class="tab-item-content active" id="unique-name-1"><p><strong>npm</strong>：</p><ul><li>虽然 <code>npm</code> 在使用上非常简单，但在处理大型项目和复杂依赖时，可能会变得较慢，并且占用较多的磁盘空间。</li></ul></div><div class="tab-item-content" id="unique-name-2"><p><strong>pnpm</strong>：</p><ul><li><code>pnpm</code> 的硬链接机制使得安装速度更快，尤其在处理多个项目时，依赖的重用大大减少了下载和安装时间。</li><li>由于避免了重复文件，<code>pnpm</code> 在磁盘空间上的使用效率也优于 <code>npm</code>。</li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h5 id="锁定文件和版本冲突"><a href="#锁定文件和版本冲突" class="headerlink" title="锁定文件和版本冲突"></a>锁定文件和版本冲突</h5><div class="tabs" id="unique-name"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="unique-name-1">npm</button><button type="button" class="tab " data-href="unique-name-2">pnpm</button></ul><div class="tab-contents"><div class="tab-item-content active" id="unique-name-1"><p><strong>npm</strong>：</p><ul><li>使用 <code>package-lock.json</code> 文件来锁定依赖版本，确保每次安装时依赖版本的一致性。</li></ul></div><div class="tab-item-content" id="unique-name-2"><p><strong>pnpm</strong>：</p><ul><li>使用 <code>pnpm-lock.yaml</code> 文件来锁定依赖版本，类似于 <code>npm</code> 的方式，但由于硬链接的特性，<code>pnpm</code> 在处理矛盾依赖时会更加智能。</li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h5 id="npm-pnpm总结"><a href="#npm-pnpm总结" class="headerlink" title="npm&#x2F;pnpm总结"></a>npm&#x2F;pnpm总结</h5><ul><li><code>npm</code> 是一个相对简单和直接的包管理工具，适合快速的开发需求和较小的项目。</li><li><code>pnpm</code> 则是一种更为高效和节省空间的选择，特别适合需要管理大量依赖的项目或多个项目之间共享依赖的场景。</li></ul><h4 id="npm-pnpm-cnpm总结"><a href="#npm-pnpm-cnpm总结" class="headerlink" title="npm &#x2F;pnpm&#x2F; cnpm总结"></a>npm &#x2F;pnpm&#x2F; cnpm总结</h4><ul><li><strong>npm</strong>：默认的包管理工具，使用广泛，但在网络较差的地方可能会慢。</li><li><strong>pnpm</strong>：注重性能和磁盘空间，适合大型项目和多个项目共享的场景。</li><li><strong>cnpm</strong>：是 npm 的镜像，专为中国用户加速 npm 包下载，适合网络环境较差的用户。</li></ul><h4 id="选择建议"><a href="#选择建议" class="headerlink" title="选择建议"></a>选择建议</h4><ul><li>如果你在中国，尤其是网络环境较差，建议使用 <code>cnpm</code> 来加速下载。</li><li>如果你更加关注性能和磁盘使用，可以考虑使用 <code>pnpm</code>。</li><li>若只需基本的包管理，使用 <code>npm</code> 即可。</li></ul><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p><img src="/2023/04/11/vue3/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%841.png"></p><p><img src="/2023/04/11/vue3/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%842.png"></p><h3 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h3><h4 id="setup概述"><a href="#setup概述" class="headerlink" title="setup概述"></a>setup概述</h4><blockquote><p>在 Vue 3 中，<code>setup</code> 是一个新的组件选项，是 Composition API 的核心部分。它在组件实例创建之前调用，并用于初始化组件的响应式状态、计算属性和方法</p><p>setup函数中的this是undefind</p><p>setup函数在所有生命周期之前执行，甚至在optionsAPI中data()更早执行，所以data能够获取setup定义的数据</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;  </span><br><span class="line">  &lt;div&gt;  </span><br><span class="line">    &lt;h1&gt;&#123;&#123; message &#125;&#125;&lt;/h1&gt;  </span><br><span class="line">    &lt;button @click=&quot;increment&quot;&gt;Increment&lt;/button&gt;  </span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/template&gt;  </span><br><span class="line"></span><br><span class="line">&lt;script&gt;  </span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;  </span><br><span class="line"></span><br><span class="line">export default &#123;  </span><br><span class="line">  setup() &#123;  </span><br><span class="line">    // 响应式状态  </span><br><span class="line">    const message = ref(&#x27;Hello, Vue 3!&#x27;);  </span><br><span class="line">    const count = ref(0);  </span><br><span class="line"></span><br><span class="line">    // 方法  </span><br><span class="line">    const increment = () =&gt; &#123;  </span><br><span class="line">      count.value++;  </span><br><span class="line">      message.value = `Count: $&#123;count.value&#125;`;  </span><br><span class="line">    &#125;;  </span><br><span class="line"></span><br><span class="line">    // 返回值，供模板使用  </span><br><span class="line">    return &#123;  </span><br><span class="line">      message,  </span><br><span class="line">      increment,  </span><br><span class="line">      count,  </span><br><span class="line">    &#125;;  </span><br><span class="line">  &#125;,  </span><br><span class="line">&#125;;  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol><li><strong>响应式引用</strong>：使用 <code>ref</code> 创建基本类型的响应式引用，使用 <code>reactive</code> 创建对象的响应式状态。</li><li><strong>方法和计算属性</strong>：可以在 <code>setup</code> 中定义方法，直接在模板中调用。同时，可以使用 <code>computed</code> 来创建计算属性。</li><li><strong>Props 和 Context</strong>：<code>setup</code> 接收两个参数：<code>props</code> 和 <code>context</code>。<code>props</code> 是组件的属性，而 <code>context</code> 包含了一些组件上下文的信息，例如 <code>attrs</code>, <code>slots</code> 和 <code>emit</code>。</li></ol><h4 id="setup函数中使用-Props-和-Context"><a href="#setup函数中使用-Props-和-Context" class="headerlink" title="setup函数中使用 Props 和 Context"></a>setup函数中使用 Props 和 Context</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;  </span><br><span class="line">  &lt;div&gt;  </span><br><span class="line">    &lt;h1&gt;&#123;&#123; props.message &#125;&#125;&lt;/h1&gt;  </span><br><span class="line">    &lt;button @click=&quot;emit(&#x27;customEvent&#x27;)&quot;&gt;Emit Custom Event&lt;/button&gt;  </span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/template&gt;  </span><br><span class="line"></span><br><span class="line">&lt;script&gt;  </span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;  </span><br><span class="line"></span><br><span class="line">export default &#123;  </span><br><span class="line">  props: &#123;  </span><br><span class="line">    message: String,  </span><br><span class="line">  &#125;,  </span><br><span class="line">  setup(props, &#123; emit &#125;) &#123;  </span><br><span class="line">    return &#123;  </span><br><span class="line">      props,  </span><br><span class="line">      emit,  </span><br><span class="line">    &#125;;  </span><br><span class="line">  &#125;,  </span><br><span class="line">&#125;;  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="setup语法糖"><a href="#setup语法糖" class="headerlink" title="setup语法糖"></a>setup语法糖</h4><p>在script 中加 setup属性</p><ul><li>setup语法糖可以不再 export</li><li>setup语法糖可以不再 手动return</li></ul><p><code>setup(props)</code> 和 <code>&lt;script setup&gt;</code> 都是 Vue 3 中用于定义组件逻辑的方式，但它们在使用方式和特性上有一些区别。</p><p><strong>setup()</strong></p><ul><li><code>setup(props)</code> 是 Vue 3 Composition API 的一部分，用于定义组件的逻辑部分。它是在 Vue 组件内部使用的一个函数，接收一个参数 <code>props</code>，用于访问组件接收到的属性。</li><li>可以在 <code>setup</code> 函数内部使用 Vue 3 的响应式 API，如 <code>ref</code>、<code>reactive</code> 等，来创建和管理组件的状态。</li><li>可以定义组件的方法和计算属性。</li><li>可以通过 <code>context</code> 参数访问组件实例、插槽、注入等。</li><li>通常需要配合 <code>defineComponent</code> 或 <code>defineProps</code> 等函数使用，以声明组件的类型和 <code>props</code>。</li></ul><p><strong><code>&lt;script setup&gt;</code></strong></p><ul><li><code>&lt;script setup&gt;</code> 是 Vue 3 的语法糖，可以更简洁地定义组件的逻辑。它省略了传统的 <code>&lt;script&gt;</code> 区块中的一些冗长的代码，特别是在使用 Composition API 时。</li><li><code>&lt;script setup&gt;</code> 自动处理 <code>props</code> 的声明和接收，不需要显式使用 <code>setup(props)</code> 函数来定义。</li><li>可以直接使用 Vue 3 的响应式 API（如 <code>ref</code>、<code>reactive</code>）来创建组件的响应式数据和方法，无需返回一个对象。</li><li>不需要显式导出组件的选项和方法，提高了代码的可读性和编写效率。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;  </span><br><span class="line">  &lt;div&gt;  </span><br><span class="line">    &lt;h1&gt;&#123;&#123; title &#125;&#125;&lt;/h1&gt;  </span><br><span class="line">    &lt;p&gt;&#123;&#123; description &#125;&#125;&lt;/p&gt;  </span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/template&gt;  </span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;  </span><br><span class="line">import &#123; defineProps &#125; from &#x27;vue&#x27;;  </span><br><span class="line"></span><br><span class="line">// 定义 props  </span><br><span class="line">const props = defineProps(&#123;  </span><br><span class="line">  title: &#123;  </span><br><span class="line">    type: String,  </span><br><span class="line">    required: true  </span><br><span class="line">  &#125;,  </span><br><span class="line">  description: &#123;  </span><br><span class="line">    type: String,  </span><br><span class="line">    default: &#x27;This is a default description.&#x27;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;);  </span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure><p><strong>区别</strong></p><ul><li>**传统的 <code>setup(props)</code>**：<ul><li>需要显式地定义 <code>setup</code> 函数来处理组件的逻辑和 <code>props</code>。</li><li>可以更灵活地控制组件的导出内容。</li><li>需要手动处理 <code>props</code> 的声明和类型检查。</li></ul></li><li>**<code>&lt;script setup&gt;</code>**：<ul><li>是一种更简洁、更直观的方式来定义组件逻辑和处理 <code>props</code>。</li><li>自动处理 <code>props</code> 的声明和接收，不需要手动设置 <code>setup</code> 函数的参数。</li><li>不需要显式导出组件的选项和方法，减少了重复代码。</li></ul></li></ul><h3 id="ref-基本类型响应式数据"><a href="#ref-基本类型响应式数据" class="headerlink" title="ref - 基本类型响应式数据"></a>ref - 基本类型响应式数据</h3><ol><li><p><strong>创建响应式值</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const count = ref(0);  </span><br></pre></td></tr></table></figure><p>使用 <code>ref</code> 创建一个响应式引用，<code>count</code> 就是一个包含原始值的响应式对象。</p></li><li><p><strong>访问和修改值</strong>：</p><ul><li><p>访问值时使用.value属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(count.value); // 输出当前值  </span><br></pre></td></tr></table></figure></li><li><p>修改值时也使用.value属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">count.value = 10; // 更新 count 的值  </span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>在模版中使用</strong>：<br>在 Vue 模版中，无需使用 <code>.value</code>，可以直接使用变量名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;&#123;&#123; count &#125;&#125;&lt;/p&gt; &lt;!-- 直接使用 count --&gt;  </span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;  </span><br><span class="line">  &lt;div&gt;  </span><br><span class="line">    &lt;h1&gt;&#123;&#123; message &#125;&#125;&lt;/h1&gt;  </span><br><span class="line">    &lt;input v-model=&quot;message&quot; placeholder=&quot;Type something...&quot; /&gt;  </span><br><span class="line">    &lt;button @click=&quot;increaseCounter&quot;&gt;Increase Counter&lt;/button&gt;  </span><br><span class="line">    &lt;p&gt;Counter: &#123;&#123; counter &#125;&#125;&lt;/p&gt;  </span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/template&gt;  </span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;  </span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;  </span><br><span class="line"></span><br><span class="line">// 使用 ref 创建响应式数据  </span><br><span class="line">const message = ref(&#x27;Hello, Vue 3!&#x27;);  </span><br><span class="line">const counter = ref(0);  </span><br><span class="line"></span><br><span class="line">// 修改引用值的函数  </span><br><span class="line">const increaseCounter = () =&gt; &#123;  </span><br><span class="line">  counter.value++;  </span><br><span class="line">&#125;;  </span><br><span class="line">&lt;/script&gt;  </span><br></pre></td></tr></table></figure><h3 id="reactive-Object类型响应式数据"><a href="#reactive-Object类型响应式数据" class="headerlink" title="reactive - Object类型响应式数据"></a>reactive - Object类型响应式数据</h3><p><code>reactive</code> 是另一个用于创建响应式对象的重要工具。与 <code>ref</code> 专注于单个基本类型或引用类型的响应式数据不同，<code>reactive</code> 主要用于创建一个响应式的对象或数组。</p><ol><li><p><strong>创建响应式对象</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const state = reactive(&#123;  </span><br><span class="line">  message: &#x27;Hello, Vue 3!&#x27;,  </span><br><span class="line">  counter: 0,  </span><br><span class="line">&#125;);  </span><br></pre></td></tr></table></figure><p>使用 <code>reactive</code> 创建的 <code>state</code> 是一个包含多个属性的响应式对象。</p></li><li><p><strong>访问和修改属性</strong>：</p><ul><li><p>可以通过state.message和state.counter直接访问和修改对象的属性，而不需要使用.value：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(state.message); // 访问 message  </span><br><span class="line">state.counter++; // 修改 counter  </span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>在模板中使用</strong>：<br>在 Vue 模板中，可以直接使用对象的属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;&#123;&#123; state.message &#125;&#125;&lt;/h1&gt;  </span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;  </span><br><span class="line">  &lt;div&gt;  </span><br><span class="line">    &lt;h1&gt;&#123;&#123; state.message &#125;&#125;&lt;/h1&gt;  </span><br><span class="line">    &lt;input v-model=&quot;state.message&quot; placeholder=&quot;Type something...&quot; /&gt;  </span><br><span class="line">    &lt;button @click=&quot;incrementCounter&quot;&gt;Increase Counter&lt;/button&gt;  </span><br><span class="line">    &lt;p&gt;Counter: &#123;&#123; state.counter &#125;&#125;&lt;/p&gt;  </span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/template&gt;  </span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;  </span><br><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;;  </span><br><span class="line"></span><br><span class="line">// 使用 reactive 创建响应式对象  </span><br><span class="line">const state = reactive(&#123;  </span><br><span class="line">  message: &#x27;Hello, Vue 3!&#x27;,  </span><br><span class="line">  counter: 0,  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line">// 修改对象属性的函数  </span><br><span class="line">const incrementCounter = () =&gt; &#123;  </span><br><span class="line">  state.counter++;  </span><br><span class="line">&#125;;  </span><br><span class="line">&lt;/script&gt;  </span><br></pre></td></tr></table></figure><h3 id="ref-Object类型响应式数据"><a href="#ref-Object类型响应式数据" class="headerlink" title="ref - Object类型响应式数据"></a>ref - Object类型响应式数据</h3><p><code>ref</code> 也可以用来定义响应式对象类型的数据。虽然 <code>reactive</code> 更常用来处理对象和数组，但某些特定情况下使用 <code>ref</code> 也是合适的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;  </span><br><span class="line">  &lt;div&gt;  </span><br><span class="line">    &lt;h1&gt;&#123;&#123; user.name &#125;&#125;&lt;/h1&gt;  </span><br><span class="line">    &lt;p&gt;Age: &#123;&#123; user.age &#125;&#125;&lt;/p&gt;  </span><br><span class="line">    &lt;input v-model=&quot;user.name&quot; placeholder=&quot;Enter name&quot; /&gt;  </span><br><span class="line">    &lt;input v-model.number=&quot;user.age&quot; type=&quot;number&quot; placeholder=&quot;Enter age&quot; /&gt;  </span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/template&gt;  </span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;  </span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;  </span><br><span class="line"></span><br><span class="line">// 使用 ref 创建响应式对象  </span><br><span class="line">const user = ref(&#123;  </span><br><span class="line">  name: &#x27;Alice&#x27;,  </span><br><span class="line">  age: 25,  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line">// 注意：修改对象的属性可以直接访问 .value  </span><br><span class="line">// 例如，user.value.name = &quot;New Name&quot; 需要在逻辑中使用  </span><br><span class="line">// 直接把值赋给引用的对象形式也同样有效。  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>操作 <code>ref</code> 中的对象</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">// 访问属性  </span><br><span class="line">console.log(user.value.name); // &#x27;Alice&#x27;  </span><br><span class="line"></span><br><span class="line">// 修改属性  </span><br><span class="line">user.value.name = &#x27;Bob&#x27;;  </span><br><span class="line">user.value.age = 30;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 结合watch实现</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref, watch &#125; from &#x27;vue&#x27;;  </span><br><span class="line"></span><br><span class="line">const user = ref(&#123;  </span><br><span class="line">  name: &#x27;Alice&#x27;,  </span><br><span class="line">  age: 25,  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line">// 监视对象属性变化  </span><br><span class="line">watch(  </span><br><span class="line">  () =&gt; user.value,  </span><br><span class="line">  (newValue, oldValue) =&gt; &#123;  </span><br><span class="line">    console.log(&#x27;User changed:&#x27;, newValue);  </span><br><span class="line">  &#125;,  </span><br><span class="line">  &#123; deep: true &#125; // 观察深层变化  </span><br><span class="line">);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>使用 <code>ref</code> 定义对象类型的响应式数据是可行的，但在处理多层结构时，<code>reactive</code> 通常更为直观。</p></blockquote><h3 id="ref-和-reactive"><a href="#ref-和-reactive" class="headerlink" title="ref 和 reactive"></a>ref 和 reactive</h3><blockquote><p>在 Vue 3 中，<code>ref</code> 和 <code>reactive</code> 是两个用于创建响应式数据的方法，适用于不同的情况和数据结构-</p></blockquote><ol><li><p><code>ref</code></p><ul><li><p><strong>用途</strong>：<code>ref</code> 用于创建一个响应式的基本数据类型（如字符串、数字、布尔值等）或者包裹单个对象&#x2F;数组。</p></li><li><p><strong>特点</strong>：</p><ul><li>返回一个包含 <code>.value</code> 属性的对象，访问和赋值时需要使用 <code>.value</code>。</li><li>对于基本数据类型，使用 <code>ref</code> 可以将它们变成响应式的数据。</li><li>支持深度响应，即如果你将一个对象传递给 <code>ref</code>，并且在这个对象中更改某个属性，视图会自动更新。</li></ul></li></ul></li></ol><ul><li><strong>示例</strong>：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;  </span><br><span class="line"></span><br><span class="line">const count = ref(0); // 基本数据类型的响应式引用  </span><br><span class="line">const user = ref(&#123; name: &#x27;Alice&#x27;, age: 25 &#125;); // 也可以用于对象  </span><br><span class="line"></span><br><span class="line">// 访问和修改  </span><br><span class="line">count.value++;  </span><br><span class="line">user.value.name = &#x27;Bob&#x27;;  </span><br></pre></td></tr></table></figure><ol start="2"><li><code>reactive</code></li></ol><ul><li><strong>用途</strong>：<code>reactive</code> 用于创建一个响应式的对象或数组，直接操作该对象的属性。</li><li><strong>特点</strong>：<ul><li>返回一个代理对象，访问和修改属性时，不需要使用 <code>.value</code>。</li><li>常用于创建包含多个属性的复杂对象或数组。</li><li>适用于结构较复杂的状态管理。</li></ul></li><li><strong>示例</strong>：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;;  </span><br><span class="line"></span><br><span class="line">const state = reactive(&#123;  </span><br><span class="line">  count: 0,  </span><br><span class="line">  user: &#123;  </span><br><span class="line">    name: &#x27;Alice&#x27;,  </span><br><span class="line">    age: 25,  </span><br><span class="line">  &#125;,  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line">// 访问和修改  </span><br><span class="line">state.count++;  </span><br><span class="line">state.user.name = &#x27;Bob&#x27;;  </span><br></pre></td></tr></table></figure><ol start="3"><li>总结对比</li></ol><table><thead><tr><th>特性</th><th><code>ref</code></th><th><code>reactive</code></th></tr></thead><tbody><tr><td>用途</td><td>基本数据类型和单个对象的响应式处理</td><td>复杂对象和数组的响应式处理</td></tr><tr><td>访问方式</td><td>使用 <code>.value</code></td><td>直接访问属性</td></tr><tr><td>深度响应性</td><td>支持</td><td>支持</td></tr><tr><td>适用场景</td><td>简单状态或需要引用的单一对象</td><td>复杂对象或需要操作多个属性的状态</td></tr></tbody></table><ol start="4"><li>使用</li></ol><ul><li>使用 <code>ref</code>：<ul><li>当需要处理基本数据类型或者单个对象，并希望明确访问路径时。</li><li>对于需要动态更新的单一值（如表单输入等）。</li></ul></li><li>使用 <code>reactive</code>：<ul><li>当需要管理一个包含多个相关属性的对象时。</li><li>reactive 重新分配一个新对象，会失去响应式。(Object.assign())</li><li>当需要对复杂状态进行操作和管理时，比如全局状态或大型组件的内部状态。</li></ul></li></ul><ol start="5"><li><p>底层原理</p><blockquote><p>Vue 3 的响应式系统的底层原理主要依赖于代理（Proxy）和依赖收集机制来实现反应式数据。</p><p>这些机制允许 Vue 追踪数据变化，并在数据变化时自动更新 DOM。</p></blockquote><ul><li>Proxy</li></ul><p>Vue 3 使用 JavaScript 的 <code>Proxy</code> 对象来创建响应式数据。与 Vue 2 的 <code>Object.defineProperty</code> 方法相比，Proxy 提供了更强大的功能，比如可以监听对整个对象的操作，包括属性的增加、删除等。这让 Vue 3 的响应式系统更加灵活和高效。</p><ul><li>响应式转换</li></ul><p>当你使用 <code>reactive</code> 或 <code>ref</code> 创建响应式数据时，Vue 会将原始对象包装在一个 Proxy 对象中。Proxy 拦截对对象的访问和修改操作（如 <code>get</code> 和 <code>set</code>）：</p><p><strong><code>get</code> 拦截</strong>：访问对象属性时，Vue 会记录这个属性的依赖关系。这样，当该属性发生变化时，Vue 能够知道哪些组件需要重新渲染。</p><p><strong><code>set</code> 拦截</strong>：修改对象属性时，Vue 会触发更新逻辑，通知依赖于该属性的组件。</p><ul><li>依赖收集</li></ul><p>依赖收集是 Vue 响应式系统的一个重要概念。每当访问一个响应式属性时，Vue 会将当前活动的副作用（通常就是组件的渲染过程）记录为依赖。该依赖会被存储在一个“依赖列表”中。这样，当属性值发生变化时，Vue 会自动调用这些依赖，触发组件的重新渲染。</p><blockquote><p>依赖收集的实现是通过存储一个“依赖集合”，并在 <code>get</code> 拦截中为当前组件注册这个依赖。</p></blockquote><ul><li>触发更新</li></ul><p>当响应式数据的值改变时，<code>set</code> 拦截会触发更新机制，标记相关的依赖为“需要更新状态”。然后，Vue 会通过调度机制将相关的组件重新渲染以反映最新的数据变化。</p></li></ol><h3 id="toRef-和toRefs"><a href="#toRef-和toRefs" class="headerlink" title="toRef 和toRefs"></a>toRef 和toRefs</h3><p><code>toRef</code> 和 <code>toRefs</code> 是 Vue 3 中用于处理响应式对象的两个非常实用的 API。它们主要用于在组合 API 中方便地转换响应式对象的属性，使其保持响应性。</p><p><strong><code>toRef</code></strong></p><p><code>toRef</code> 用于将一个响应式对象中的单个属性转换为一个响应式引用（ref）。这允许你在组件中单独使用对象的某个属性，同时保持它的响应性。</p><p><strong>用法示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; reactive, toRef &#125; from &#x27;vue&#x27;;  </span><br><span class="line"></span><br><span class="line">const state = reactive(&#123;  </span><br><span class="line">    count: 0,  </span><br><span class="line">    name: &#x27;Vue&#x27;  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line">// 将 state.count 转换为一个响应式的 ref  </span><br><span class="line">const countRef = toRef(state, &#x27;count&#x27;);  </span><br><span class="line"></span><br><span class="line">// 现在你可以使用 countRef 作为一个响应式引用  </span><br><span class="line">countRef.value++; // 修改 count 的值  </span><br><span class="line">console.log(state.count); // 输出 1  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong><code>toRefs</code></strong></p><p><code>toRefs</code> 用于将响应式对象的所有属性转换为响应式引用（ref）。这通常在需要将响应式对象的多个属性解构出来时非常有用，确保解构后仍然保持响应性。</p><p><strong>用法示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; reactive, toRefs &#125; from &#x27;vue&#x27;;  </span><br><span class="line"></span><br><span class="line">const state = reactive(&#123;  </span><br><span class="line">    count: 0,  </span><br><span class="line">    name: &#x27;Vue&#x27;,  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line">// 将整个 state 对象的所有属性转换为响应式的 refs</span><br><span class="line">/*</span><br><span class="line">const &#123; count, name &#125; = state; </span><br><span class="line">相当于</span><br><span class="line">let name = state.name</span><br><span class="line">let count = state.count</span><br><span class="line">这样的name,count 并不是响应式的，加上toRefs就能够解决</span><br><span class="line">*/</span><br><span class="line">const &#123; count, name &#125; = toRefs(state);  </span><br><span class="line"></span><br><span class="line">// 现在你可以使用 count 和 name，作为响应式属性  </span><br><span class="line">count.value++; // 修改 count 的值  </span><br><span class="line">name.value = &#x27;Vue 3&#x27;; // 修改 name 的值  </span><br><span class="line"></span><br><span class="line">console.log(state.count); // 输出 1  </span><br><span class="line">console.log(state.name); // 输出 &#x27;Vue 3&#x27; </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><ul><li><code>toRef</code> 用于将一个响应式对象中的单个属性转换为响应式引用（ref）。</li><li><code>toRefs</code> 用于将一个响应式对象的所有属性转换为响应式引用（ref），便于解构使用。</li></ul><h3 id="html标签中的ref属性"><a href="#html标签中的ref属性" class="headerlink" title="html标签中的ref属性"></a>html标签中的ref属性</h3><blockquote><p>作用：用于注册模版引用<br>用在普通标签上，获取的是DOM节点<br>用在组件标签上，获取的是组件实例对象</p></blockquote><p><strong>Vue2</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;  </span><br><span class="line">  &lt;div&gt;  </span><br><span class="line">    &lt;input type=&quot;text&quot; ref=&quot;textInput&quot;&gt;  </span><br><span class="line">    &lt;button @click=&quot;focusTextInput&quot;&gt;Focus Input&lt;/button&gt;  </span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/template&gt;   </span><br><span class="line"></span><br><span class="line">&lt;script&gt;  </span><br><span class="line">export default &#123;  </span><br><span class="line">  methods: &#123;  </span><br><span class="line">    focusTextInput() &#123;  </span><br><span class="line">      // 在方法中通过 this.$refs 访问 ref 属性  </span><br><span class="line">      this.$refs.textInput.focus();  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>Vue3</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;  </span><br><span class="line">  &lt;div&gt;  </span><br><span class="line">    &lt;input type=&quot;text&quot; ref=&quot;textInput&quot;&gt;  </span><br><span class="line">    &lt;button @click=&quot;focusTextInput&quot;&gt;Focus Input&lt;/button&gt;  </span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/template&gt;  </span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;  </span><br><span class="line">import &#123; ref, onMounted &#125; from &#x27;vue&#x27;;  </span><br><span class="line"> </span><br><span class="line">// 使用 ref 创建响应式引用  </span><br><span class="line">const textInput = ref(null);  </span><br><span class="line"></span><br><span class="line">// 在 onMounted 钩子中获取 DOM 引用  </span><br><span class="line">onMounted(() =&gt; &#123;  </span><br><span class="line">textInput.value.focus();  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line">// 方法部分  </span><br><span class="line">const focusTextInput = () =&gt; &#123;  </span><br><span class="line">textInput.value.focus();  </span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="computed-计算属性"><a href="#computed-计算属性" class="headerlink" title="computed - 计算属性"></a>computed - 计算属性</h3><p>主要用于创建计算属性。计算属性的值基于其他响应式数据的变化动态计算，并在依赖的响应式数据改变时自动更新。<code>computed</code> 提供了一种高效的方式来处理复杂的逻辑，而不需要在模板中写复杂的表达式。</p><blockquote><p>计算属性可以被定义为函数，其返回值会被 Vue 所缓存，直到它所依赖的响应式数据发生变化。</p></blockquote><ol><li><strong>使用</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &#123;&#123;doubleCount&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, computed &#125; from &#x27;vue&#x27;;  </span><br><span class="line"></span><br><span class="line">const count = ref(1);  </span><br><span class="line"></span><br><span class="line">const doubleCount = computed(() =&gt; &#123;  </span><br><span class="line">    return count.value * 2;  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line">// 使用  </span><br><span class="line">console.log(doubleCount.value); // 输出 2  </span><br><span class="line">count.value++; // count 的值变为 2  </span><br><span class="line">console.log(doubleCount.value); // 输出 4</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>计算属性的特性</strong></li></ol><ul><li><strong>缓存</strong>：计算属性的结果会根据其依赖进行缓存，只有当依赖的响应式数据发生变化时，计算结果才会被重新计算。这使得计算属性在性能上更优异，尤其是在依赖多个响应式数据源时。</li><li><strong>只读计算属性</strong>：默认情况下，计算属性是只读的，只能被访问，不能被直接修改。你可以通过提供一个 getter 函数来定义计算值。</li><li><strong>计算属性的 setter</strong>：如果需要，你可以为计算属性定义一个 setter，这样可以在相关的响应式数据发生变化时更新它。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &#123;&#123;fullName&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, computed &#125; from &#x27;vue&#x27;;  </span><br><span class="line"></span><br><span class="line">const firstName = ref(&#x27;John&#x27;);  </span><br><span class="line">const lastName = ref(&#x27;Doe&#x27;);  </span><br><span class="line"></span><br><span class="line">const fullName = computed(&#123;  </span><br><span class="line">    get: () =&gt; &#123;  </span><br><span class="line">        return `$&#123;firstName.value&#125; $&#123;lastName.value&#125;`;  </span><br><span class="line">    &#125;,  </span><br><span class="line">    set: (newValue) =&gt; &#123;  </span><br><span class="line">        // 逻辑操作</span><br><span class="line">        const _names = newValue.split(&#x27; &#x27;);  </span><br><span class="line">        firstName.value = _names[0];  </span><br><span class="line">        lastName.value = _names[1];  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line">// 使用  </span><br><span class="line">console.log(fullName.value); // 输出 &#x27;John Doe&#x27;  </span><br><span class="line">fullName.value = &#x27;Jane Smith&#x27;; // 通过 setter 更新值  </span><br><span class="line">console.log(firstName.value); // 输出 &#x27;Jane&#x27;  </span><br><span class="line">console.log(lastName.value); // 输出 &#x27;Smith&#x27;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>使用场景</strong></li></ol><ul><li><strong>数据格式化</strong>：当需要对原始数据进行格式化或处理时，计算属性是一个很好的选择。</li><li><strong>复杂逻辑</strong>：在模板中避免使用复杂的逻辑，可以将其移入计算属性中，使模板更简洁可读。</li><li><strong>依赖组合</strong>：当某个值依赖于多个响应式变量时，可以利用计算属性将它们组合起来。</li></ul><ol start="4"><li><strong>与普通方法的区别</strong></li></ol><p><strong>计算属性是基于其依赖的缓存的</strong>，只有当依赖发生变化时才会重新计算。而方法每次调用都会执行计算。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">sum</span> = (<span class="params">a, b</span>) =&gt; a + b;  </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">resultMethod</span> = (<span class="params"></span>) =&gt; <span class="title function_">sum</span>(count.<span class="property">value</span>, <span class="number">10</span>); <span class="comment">// 每次调用都会重新计算  </span></span><br><span class="line"><span class="keyword">const</span> resultComputed = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> <span class="title function_">sum</span>(count.<span class="property">value</span>, <span class="number">10</span>)); <span class="comment">// 缓存结果</span></span><br></pre></td></tr></table></figure><h3 id="watch-监听属性"><a href="#watch-监听属性" class="headerlink" title="watch - 监听属性"></a>watch - 监听属性</h3><p><code>watch</code> 选项允许你监听组件实例上的数据变化，并在数据变化时执行自定义的逻辑。这对于需要在特定数据变化时执行异步操作或者执行复杂逻辑的场景非常有用。</p><p><strong>特点</strong>：</p><ul><li><code>watch</code> 是一个更灵活的 API，可以精确地指定要监听的数据和在数据变化时执行的回调函数。</li><li>可以监听单个响应式数据、多个响应式数据、甚至是一个 getter 函数返回的值或者一个数组中的多个数据。</li></ul><ol><li><strong>监听单个响应式数据：</strong></li></ol><p>我们使用 <code>ref</code> 创建了一个名为 <code>userInfo</code> 的响应式变量，它是一个包含用户信息的对象。然后，我们使用 <code>watch</code> 函数来监听 <code>userInfo</code> 变量的变化。每当 <code>userInfo</code> 对象发生变化时，传入的回调函数就会被触发，可以在回调函数中进行相应的处理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, watch &#125; from &#x27;vue&#x27;;  </span><br><span class="line">// 使用 ref 创建一个响应式变量  </span><br><span class="line">const userInfo = ref(&#123;  </span><br><span class="line">    name: &#x27;John Doe&#x27;,  </span><br><span class="line">    age: 30,  </span><br><span class="line">    email: &#x27;john.doe@example.com&#x27;  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line">// 使用 watch 监听单个响应式数据 userInfo 的变化  </span><br><span class="line">watch(userInfo, (newValue, oldValue) =&gt; &#123;  </span><br><span class="line">    console.log(&#x27;用户信息发生变化：&#x27;, newValue);  </span><br><span class="line">    // 可以在这里执行相应的逻辑，比如更新页面内容等  </span><br><span class="line">&#125;);   </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>监听多个响应式数据</strong></li></ol><p>使用 <code>ref</code> 创建了两个响应式变量 <code>userName</code> 和 <code>userAge</code>，分别表示用户的姓名和年龄。然后，我们使用 <code>watch</code> 函数来同时监听这两个变量的变化。传入的回调函数接收的是一个数组，包含了新旧值的对应项，我们可以根据需要处理这些数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, watch &#125; from &#x27;vue&#x27;;  </span><br><span class="line">// 使用 ref 创建多个响应式变量  </span><br><span class="line">const userName = ref(&#x27;John Doe&#x27;);  </span><br><span class="line">const userAge = ref(30);  </span><br><span class="line"></span><br><span class="line">// 使用 watch 监听多个响应式数据的变化  </span><br><span class="line">watch([userName, userAge], ([newName, newAge], [oldName, oldAge]) =&gt; &#123;  </span><br><span class="line">console.log(&#x27;用户信息发生变化：&#x27;);  </span><br><span class="line">console.log(`姓名从 $&#123;oldName&#125; 变为 $&#123;newName&#125;`);  </span><br><span class="line">console.log(`年龄从 $&#123;oldAge&#125; 变为 $&#123;newAge&#125;`);  </span><br><span class="line">// 可以在这里执行相应的逻辑，比如更新页面内容等  </span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>Vue3中watch只能监视以下四种数据：<ul><li>ref定义的数据</li><li>reactive定义的数据</li><li>函数返回的一个值(getter函数)</li><li>一个包含了上述内容的数组</li></ul></li></ol><ul><li>监听ref数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, watch &#125; from &#x27;vue&#x27;;  </span><br><span class="line"></span><br><span class="line">    // 使用 ref 创建响应式数据  </span><br><span class="line">const count = ref(0);  </span><br><span class="line"></span><br><span class="line">    // 监听 count 的变化  </span><br><span class="line">watch(count, (newValue, oldValue) =&gt; &#123;  </span><br><span class="line">console.log(`计数器从 $&#123;oldValue&#125; 变为 $&#123;newValue&#125;`);  </span><br><span class="line">&#125;);  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>监听reactuve数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; reactive, watch &#125; from &#x27;vue&#x27;;  </span><br><span class="line">// 使用 reactive 创建响应式对象  </span><br><span class="line">const state = reactive(&#123;  </span><br><span class="line">message: &#x27;Hello&#x27;,  </span><br><span class="line">count: 0  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line">// 监听 state.count 的变化  </span><br><span class="line">watch(() =&gt; state.count, (newValue, oldValue) =&gt; &#123;  </span><br><span class="line">console.log(`计数器从 $&#123;oldValue&#125; 变为 $&#123;newValue&#125;`);  </span><br><span class="line">&#125;);  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>监听一个函数返回值</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, watch &#125; from &#x27;vue&#x27;;  </span><br><span class="line"></span><br><span class="line">    // 使用 ref 创建响应式数据  </span><br><span class="line">const count = ref(0);  </span><br><span class="line"></span><br><span class="line">    // 监听一个函数返回的值  </span><br><span class="line">watch(() =&gt; &#123;  </span><br><span class="line">      // 模拟一个异步操作  </span><br><span class="line">return new Promise((resolve) =&gt; &#123;  </span><br><span class="line">setTimeout(() =&gt; &#123;  </span><br><span class="line">resolve(count.value);  </span><br><span class="line">&#125;, 1000);  </span><br><span class="line">    &#125;);  </span><br><span class="line">    &#125;, (newValue, oldValue) =&gt; &#123;  </span><br><span class="line">      console.log(`count 的异步值从 $&#123;oldValue&#125; 变为 $&#123;newValue&#125;`);  </span><br><span class="line">    &#125;</span><br><span class="line">)  </span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>监听数组</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, watch &#125; from &#x27;vue&#x27;;  </span><br><span class="line"></span><br><span class="line">    // 使用 ref 创建响应式数据  </span><br><span class="line">const count = ref(0);  </span><br><span class="line">const message = ref(&#x27;Hello&#x27;);  </span><br><span class="line"></span><br><span class="line">    // 监听一个数组，包含 count 和 message 的变化  </span><br><span class="line">watch([count, message], ([newCount, newMessage], [oldCount, oldMessage]) =&gt; &#123;  </span><br><span class="line">console.log(`count 从 $&#123;oldCount&#125; 变为 $&#123;newCount&#125;`);  </span><br><span class="line">console.log(`message 从 &quot;$&#123;oldMessage&#125;&quot; 变为 &quot;$&#123;newMessage&#125;&quot;`);  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a>watchEffect</h3><ul><li><strong>特点</strong>：<ul><li><code>watchEffect</code> 是一个立即执行的函数，并且在其内部访问的任何响应式数据发生变化时都会重新运行。</li><li>它不需要显式地指定要监听的数据，而是根据函数内部访问的响应式数据自动进行依赖追踪。</li></ul></li><li><strong>适用场景</strong>：<ul><li>当需要立即执行一段代码，并且自动追踪其中使用的响应式数据变化时，适合使用 <code>watchEffect</code>。</li><li>通常用于处理副作用，比如基于响应式数据进行 DOM 操作、发起网络请求等</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Vue 3 中使用 watchEffect 来监听响应式数据的变化，并执行相应的副作用。这个示例展示了一个简单的计数器应用，每次点击按钮增加计数值，并且自动计算其两倍值。</span><br><span class="line">&lt;template&gt;  </span><br><span class="line">  &lt;div&gt;  </span><br><span class="line">    &lt;p&gt;Count: &#123;&#123; state.count &#125;&#125;&lt;/p&gt;  </span><br><span class="line">    &lt;p&gt;Double: &#123;&#123; state.double &#125;&#125;&lt;/p&gt;  </span><br><span class="line">    &lt;button @click=&quot;increment&quot;&gt;Increment Count&lt;/button&gt;  </span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/template&gt;  </span><br><span class="line"></span><br><span class="line">&lt;script&gt;  </span><br><span class="line">import &#123; reactive, watchEffect &#125; from &#x27;vue&#x27;;  </span><br><span class="line"></span><br><span class="line">export default &#123;  </span><br><span class="line">  name: &#x27;WatchEffectExample&#x27;,  </span><br><span class="line">  setup() &#123;  </span><br><span class="line">    // 使用 reactive 创建响应式数据  </span><br><span class="line">    const state = reactive(&#123;  </span><br><span class="line">      count: 0,  </span><br><span class="line">      double: 0  </span><br><span class="line">    &#125;);  </span><br><span class="line"></span><br><span class="line">    // 使用 watchEffect 监听 count 的变化，计算 double  </span><br><span class="line">    watchEffect(() =&gt; &#123;  </span><br><span class="line">      state.double = state.count * 2;  </span><br><span class="line">    &#125;);  </span><br><span class="line"></span><br><span class="line">    // 增加计数的方法  </span><br><span class="line">    const increment = () =&gt; &#123;  </span><br><span class="line">      state.count++;  </span><br><span class="line">    &#125;;  </span><br><span class="line"></span><br><span class="line">    return &#123;  </span><br><span class="line">      state,  </span><br><span class="line">      increment  </span><br><span class="line">    &#125;;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>watch和watchEffect区别总结</strong></p><ul><li><code>watchEffect</code> 适合于那些无需精确控制依赖和副作用的情况，它简化了自动追踪和触发副作用的流程。</li><li><code>watch</code> 更适合于需要精细控制的场景，可以精确指定依赖和在数据变化时执行的操作。</li></ul><h3 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h3><p><code>props</code>（属性）允许你向一个组件传递数据。<code>props</code>是组件间通信的重要桥梁，它使得组件可以封装和复用，同时保持了组件间数据的独立性和清晰的数据流动方向。通过合理地使用<code>props</code>，可以有效地组织和管理Vue应用程序的各个组件，提高代码的可维护性和可扩展性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--父组件--&gt;</span><br><span class="line">&lt;template&gt;  </span><br><span class="line">  &lt;ChildComponent title=&quot;Vue 3 Props Example&quot; :initial-count=&quot;5&quot; /&gt;  </span><br><span class="line">&lt;/template&gt;  </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用setupAPI--&gt;</span><br><span class="line">&lt;!--子组件ChildComponent--&gt;</span><br><span class="line">&lt;template&gt;  </span><br><span class="line">  &lt;div&gt;  </span><br><span class="line">    &lt;h2&gt;&#123;&#123; title &#125;&#125;&lt;/h2&gt;  </span><br><span class="line">    &lt;p&gt;Message: &#123;&#123; message &#125;&#125;&lt;/p&gt;  </span><br><span class="line">    &lt;button @click=&quot;increment&quot;&gt;Increment&lt;/button&gt;  </span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/template&gt;  </span><br><span class="line"></span><br><span class="line">&lt;script&gt;  </span><br><span class="line">import &#123; defineComponent, ref &#125; from &#x27;vue&#x27;;  </span><br><span class="line">/*</span><br><span class="line">defineComponent 是一个用来定义组件的工具函数，它允许开发者使用对象形式来声明和配置一个 Vue 组件。主要用途是为了提供类型推断支持，以便 Vue 能够正确地推断组件的 props 类型和方法。</span><br><span class="line">*/</span><br><span class="line">export default defineComponent(&#123;  </span><br><span class="line">  props: &#123;  </span><br><span class="line">    title: String,  </span><br><span class="line">    initialCount: &#123;  </span><br><span class="line">      type: Number,  </span><br><span class="line">      default: 0  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;,  </span><br><span class="line">  setup(props) &#123;  </span><br><span class="line">    // 使用 ref 创建响应式状态  </span><br><span class="line">    const count = ref(props.initialCount);  </span><br><span class="line">    const message = ref(&#x27;Hello from Vue 3!&#x27;);  </span><br><span class="line"></span><br><span class="line">    // 定义组件方法  </span><br><span class="line">    const increment = () =&gt; &#123;  </span><br><span class="line">      count.value++;  </span><br><span class="line">    &#125;;  </span><br><span class="line"></span><br><span class="line">    return &#123;  </span><br><span class="line">      count,  </span><br><span class="line">      message,  </span><br><span class="line">      increment  </span><br><span class="line">    &#125;;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;);  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--使用setup语法糖--&gt;</span><br><span class="line">&lt;!--子组件ChildComponent--&gt;</span><br><span class="line">&lt;template&gt;  </span><br><span class="line">  &lt;div&gt;  </span><br><span class="line">    &lt;h2&gt;&#123;&#123; title &#125;&#125;&lt;/h2&gt;  </span><br><span class="line">    &lt;p&gt;Message: &#123;&#123; message &#125;&#125;&lt;/p&gt;  </span><br><span class="line">    &lt;button @click=&quot;increment&quot;&gt;Increment&lt;/button&gt;  </span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/template&gt;  </span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;  </span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;  </span><br><span class="line"></span><br><span class="line">// props 的声明  </span><br><span class="line">const props = defineProps(&#123;  </span><br><span class="line">  title: String,  </span><br><span class="line">  initialCount: &#123;  </span><br><span class="line">    type: Number,  </span><br><span class="line">    default: 0  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line">// 响应式状态的声明  </span><br><span class="line">const count = ref(props.initialCount);  </span><br><span class="line">const message = ref(&#x27;Hello from Vue 3!&#x27;);  </span><br><span class="line"></span><br><span class="line">// 组件方法的定义  </span><br><span class="line">const increment = () =&gt; &#123;  </span><br><span class="line">  count.value++;  </span><br><span class="line">&#125;;  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><blockquote><p>在Vue 3中，组件的生命周期钩子函数与Vue 2中的基本相同，但有一些细微的变化和改进。以下是Vue 3中常用的生命周期钩子函数及其详细讲解：</p></blockquote><p>Vue生命周期总共可以分为8个阶段：创建前后, 载入前后,更新前后,销毁前销毁后</p><table><thead><tr><th align="left">生命周期</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">beforeCreate</td><td align="left">组件实例被创建之初</td></tr><tr><td align="left">created</td><td align="left">组件实例已经完全创建</td></tr><tr><td align="left">beforeMount</td><td align="left">组件挂载之前</td></tr><tr><td align="left">mounted</td><td align="left">组件挂载到实例上去之后</td></tr><tr><td align="left">beforeUpdate</td><td align="left">组件数据发生变化，更新之前</td></tr><tr><td align="left">updated</td><td align="left">组件数据更新之后</td></tr><tr><td align="left">beforeDestroy    更改为beforeunmount</td><td align="left">组件实例销毁之前</td></tr><tr><td align="left">destroyed           更改为unmount</td><td align="left">组件实例销毁之后</td></tr><tr><td align="left">activated           更改为activated</td><td align="left">keep-alive 缓存的组件激活时</td></tr><tr><td align="left">deactivated        更改为deactivated</td><td align="left">keep-alive 缓存的组件停用时调用</td></tr><tr><td align="left">errorCaptured</td><td align="left">捕获一个来自子孙组件的错误时被调用</td></tr></tbody></table><p><img src="/2023/04/11/vue3/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="image-20240730164037481"></p><ol><li><p>onBeforeCreate和onCreated </p><ul><li><p><strong>触发时机</strong>：在实例初始化之后，数据观测 (<code>data</code> 和 <code>props</code>) 和事件配置之前被调用。</p></li><li><p><strong>作用</strong>：在这个阶段，Vue 实例的初始化工作尚未开始，因此实例上的数据、计算属性等都尚未初始化。</p></li><li><p><strong>触发时机</strong>：实例已经创建完成之后被调用。在这个阶段，实例已完成了数据观测和事件配置，但尚未挂载到DOM上。</p></li><li><p><strong>作用</strong>：通常用于进行数据请求、异步操作、事件订阅等初始化操作。</p></li></ul></li><li><p>setup</p><p><code>setup()</code> 函数与传统的 Options API（如 <code>beforeCreate</code> 和 <code>created</code> 生命周期钩子）是互斥的，不能直接在 <code>setup()</code> 函数中调用 <code>beforeCreate</code> 和 <code>created</code>。</p></li><li><p><strong>onBeforeMount</strong></p><ul><li><strong>触发时机</strong>：在挂载开始之前被调用，即在<code>render</code>函数首次调用之前。</li><li><strong>作用</strong>：在这个阶段，Vue 实例的模板编译已完成，但尚未将生成的 DOM 渲染到页面上。</li></ul></li><li><p><strong>onMounted</strong></p></li></ol><ul><li><strong>触发时机</strong>：在挂载完成之后被调用，此时组件已经被渲染到页面中。</li><li><strong>作用</strong>：通常用于进行DOM操作、初始化第三方库、添加事件监听器等操作。</li></ul><ol start="5"><li><p><strong>onBeforeUpdate</strong></p><ul><li><strong>触发时机</strong>：数据更新之前被调用，发生在虚拟 DOM 重新渲染和打补丁之前。</li><li><strong>作用</strong>：可以在这个钩子中对更新之前的状态做一些处理，例如获取更新前的DOM状态。</li></ul></li><li><p><strong>onUpdated</strong></p><ul><li><strong>触发时机</strong>：数据更新完成之后被调用，组件的 DOM 已经更新。</li><li><strong>作用</strong>：通常用于重新计算一些状态，或执行一些需要基于更新后的 DOM 的操作。</li></ul></li><li><p><strong>onBeforeUnmount</strong></p><ul><li><strong>触发时机</strong>：在实例解绑之前被调用，通常是在 <code>unmount</code> 方法被调用时。</li><li><strong>作用</strong>：可以用于清理定时器、取消事件订阅等操作，准备组件实例被销毁。</li></ul></li><li><p><strong>onUnmounted</strong></p><ul><li><strong>触发时机</strong>：在实例解绑之后被调用，组件实例被销毁。</li><li><strong>作用</strong>：用于清理组件实例相关的内容，确保不会造成内存泄漏或其他意外情况。</li></ul></li><li><p><strong>onActivated</strong></p><ul><li><strong>触发时机</strong>：当包含该组件的 <code>&lt;keep-alive&gt;</code> 缓存组件被激活时调用。</li><li><strong>作用</strong>：通常用于执行一些在组件被激活时需要执行的操作，例如重新请求数据、重新初始化状态等。</li></ul></li><li><p><strong>onDeactivated</strong></p><ul><li><strong>触发时机</strong>：当包含该组件的 <code>&lt;keep-alive&gt;</code> 缓存组件被停用时调用。</li><li><strong>作用</strong>：通常用于执行一些在组件被停用时需要执行的操作，例如清理定时器、取消订阅等。</li></ul></li><li><p><strong>errorCaptured</strong></p><ul><li><strong>触发时机</strong>：捕获子孙组件生命周期钩子以及事件处理函数中的错误时被调用。</li><li><strong>作用</strong>：可以用于处理子组件的错误，防止错误影响到父组件和整个应用。</li></ul></li></ol><h3 id="自定义hooks"><a href="#自定义hooks" class="headerlink" title="自定义hooks"></a>自定义hooks</h3><blockquote><p>通过 Composition API，你可以创建自定义的逻辑复用函数，通常被称为自定义 Hooks（自定义钩子）。这些自定义 Hooks 可以帮助你封装和复用逻辑代码，使得组件更加模块化和可维护。</p></blockquote><h4 id="创建自定义-Hook"><a href="#创建自定义-Hook" class="headerlink" title="创建自定义 Hook"></a>创建自定义 Hook</h4><p><strong>编写自定义 Hook 函数</strong>：自定义 Hook 是一个普通的 JavaScript 函数，它可以使用 Composition API 中的任何功能，如 <code>ref</code>、<code>reactive</code>、<code>watch</code> 等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// useCounter.js  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个名为 useCounter 的自定义 Hook  </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useCounter</span>(<span class="params">initialValue = <span class="number">0</span></span>) &#123;  </span><br><span class="line">  <span class="keyword">const</span> count = <span class="title function_">ref</span>(initialValue); <span class="comment">// 使用 ref 创建一个响应式数据  </span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义两个操作 count 的函数  </span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    count.<span class="property">value</span>++;  </span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">decrement</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    count.<span class="property">value</span>--;  </span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回响应式数据和操作函数  </span></span><br><span class="line">  <span class="keyword">return</span> &#123;  </span><br><span class="line">    count,  </span><br><span class="line">    increment,  </span><br><span class="line">    decrement  </span><br><span class="line">  &#125;;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用自定义-Hook"><a href="#使用自定义-Hook" class="headerlink" title="使用自定义 Hook"></a>使用自定义 Hook</h4><p><strong>在组件中使用自定义 Hook</strong>：在需要使用自定义 Hook 的组件中，通过调用自定义 Hook 函数来获取其中定义的响应式状态和方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;  </span><br><span class="line">  &lt;div&gt;  </span><br><span class="line">    &lt;p&gt;Count: &#123;&#123; counter.count &#125;&#125;&lt;/p&gt;  </span><br><span class="line">    &lt;button @click=&quot;counter.increment&quot;&gt;Increment&lt;/button&gt;  </span><br><span class="line">    &lt;button @click=&quot;counter.decrement&quot;&gt;Decrement&lt;/button&gt;  </span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/template&gt;  </span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;  </span><br><span class="line">import &#123; useCounter &#125; from &#x27;./useCounter&#x27;; // 引入自定义 Hook  </span><br><span class="line"></span><br><span class="line">const counter = useCounter(); // 调用自定义 Hook 获取响应式数据和操作函数  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="自定义-Hook-的优势"><a href="#自定义-Hook-的优势" class="headerlink" title="自定义 Hook 的优势"></a>自定义 Hook 的优势</h4><ul><li><strong>逻辑复用</strong>：将复杂的逻辑抽取到自定义 Hook 中，提高代码的复用性和可维护性。</li><li><strong>解耦逻辑</strong>：使组件更专注于界面的呈现，而将业务逻辑与状态管理分离。</li><li><strong>可测试性</strong>：自定义 Hook 是纯函数，易于进行单元测试，增强代码的可靠性和可测试性。</li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li><strong>命名约定</strong>：Vue 社区通常将自定义 Hook 命名为 <code>useSomething</code>，以便于识别和遵循习惯。</li><li><strong>响应式数据</strong>：确保自定义 Hook 返回的数据是响应式的，以便 Vue 可以正确地追踪和更新视图。</li><li><strong>参数传递</strong>：自定义 Hook 可以接受参数，从而增加灵活性和通用性。</li></ul><h4 id="案例-使用自定义hook处理表单逻辑"><a href="#案例-使用自定义hook处理表单逻辑" class="headerlink" title="案例 - 使用自定义hook处理表单逻辑"></a>案例 - 使用自定义hook处理表单逻辑</h4><p>假设我们有一个表单，需要处理表单的输入状态、验证和提交。我们可以创建一个自定义hook来处理这些逻辑，使得多个组件可以共享相同的表单逻辑。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// useForm.js  </span></span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 useForm 自定义hook  </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useForm</span>(<span class="params">initialValues = &#123;&#125;</span>) &#123;  </span><br><span class="line">  <span class="keyword">const</span> values = <span class="title function_">ref</span>(initialValues); <span class="comment">// 使用 ref 来创建响应式数据  </span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleChange</span>(<span class="params">event</span>) &#123;  </span><br><span class="line">    values.<span class="property">value</span>[event.<span class="property">target</span>.<span class="property">name</span>] = event.<span class="property">target</span>.<span class="property">value</span>; <span class="comment">// 处理输入变化  </span></span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleSubmit</span>(<span class="params">callback</span>) &#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">event</span>) &#123;  </span><br><span class="line">      event.<span class="title function_">preventDefault</span>(); <span class="comment">// 阻止表单默认提交行为  </span></span><br><span class="line">      <span class="title function_">callback</span>(values.<span class="property">value</span>); <span class="comment">// 调用传入的回调函数处理表单数据  </span></span><br><span class="line">    &#125;;  </span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;  </span><br><span class="line">    values, <span class="comment">// 当前表单数据的引用  </span></span><br><span class="line">    handleChange, <span class="comment">// 处理输入变化的函数  </span></span><br><span class="line">    handleSubmit, <span class="comment">// 处理表单提交的函数  </span></span><br><span class="line">  &#125;;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们创建了一个名为<code>useForm</code>的自定义hook。它返回了一个包含表单数据、处理输入变化的函数和处理表单提交的函数。，这样我们可以在多个组件中使用<code>useFetchData</code>来管理异步数据获取，而不需要重复编写相同的逻辑。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;  </span><br><span class="line">  &lt;form @submit=&quot;submitForm&quot;&gt;  </span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;name&quot; v-model=&quot;form.values.name&quot; /&gt;  </span><br><span class="line">    &lt;input type=&quot;email&quot; name=&quot;email&quot; v-model=&quot;form.values.email&quot; /&gt;  </span><br><span class="line">    &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;  </span><br><span class="line">  &lt;/form&gt;  </span><br><span class="line">&lt;/template&gt;  </span><br><span class="line"></span><br><span class="line">&lt;script&gt;  </span><br><span class="line">import &#123; useForm &#125; from &#x27;./useForm&#x27;; // 导入自定义hook  </span><br><span class="line"></span><br><span class="line">export default &#123;  </span><br><span class="line">  setup() &#123;  </span><br><span class="line">    const form = useForm(&#123; // 使用 useForm hook 初始化表单  </span><br><span class="line">      name: &#x27;&#x27;,  </span><br><span class="line">      email: &#x27;&#x27;,  </span><br><span class="line">    &#125;);  </span><br><span class="line"></span><br><span class="line">    function submitForm(formData) &#123;  </span><br><span class="line">      console.log(&#x27;Form submitted with:&#x27;, formData); // 处理表单提交逻辑，可以发送到服务器或者其他处理  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    return &#123;  </span><br><span class="line">      form, // 将 form 对象暴露给模板  </span><br><span class="line">      submitForm, // 将 submitForm 函数暴露给模板  </span><br><span class="line">    &#125;;  </span><br><span class="line">  &#125;,  </span><br><span class="line">&#125;;  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="案例-使用自定义hook管理异步数据获取"><a href="#案例-使用自定义hook管理异步数据获取" class="headerlink" title="案例 - 使用自定义hook管理异步数据获取"></a>案例 - 使用自定义hook管理异步数据获取</h4><p>使用自定义hook来管理异步数据的获取，例如从API获取数据并处理加载状态和错误处理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// useFetchData.js  </span></span><br><span class="line"><span class="keyword">import</span> &#123; ref, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 useFetchData 自定义hook  </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useFetchData</span>(<span class="params">url</span>) &#123;  </span><br><span class="line">  <span class="keyword">const</span> data = <span class="title function_">ref</span>(<span class="literal">null</span>); <span class="comment">// 用于存放获取的数据  </span></span><br><span class="line">  <span class="keyword">const</span> isLoading = <span class="title function_">ref</span>(<span class="literal">false</span>); <span class="comment">// 加载状态  </span></span><br><span class="line">  <span class="keyword">const</span> error = <span class="title function_">ref</span>(<span class="literal">null</span>); <span class="comment">// 错误状态  </span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    isLoading.<span class="property">value</span> = <span class="literal">true</span>; <span class="comment">// 开始加载，设置isLoading为true  </span></span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(url); <span class="comment">// 发起请求  </span></span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> response.<span class="title function_">json</span>(); <span class="comment">// 解析 JSON 响应  </span></span><br><span class="line">      data.<span class="property">value</span> = result; <span class="comment">// 更新数据  </span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;  </span><br><span class="line">      error.<span class="property">value</span> = err; <span class="comment">// 处理错误  </span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;  </span><br><span class="line">      isLoading.<span class="property">value</span> = <span class="literal">false</span>; <span class="comment">// 不论成功或失败，加载结束，设置isLoading为false  </span></span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line">  <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123; <span class="comment">// 在组件挂载时执行 fetchData  </span></span><br><span class="line">    <span class="title function_">fetchData</span>();  </span><br><span class="line">  &#125;);  </span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;  </span><br><span class="line">    data, <span class="comment">// 当前获取的数据  </span></span><br><span class="line">    isLoading, <span class="comment">// 加载状态  </span></span><br><span class="line">    error, <span class="comment">// 错误信息  </span></span><br><span class="line">    <span class="attr">refetchData</span>: fetchData, <span class="comment">// 重新获取数据的方法  </span></span><br><span class="line">  &#125;;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们创建了一个名为 <code>useFetchData</code> 的hook来处理从API获取数据的逻辑，它返回了数据、加载状态、错误状态和重新获取数据的方法。可以在多个组件中使用 <code>useFetchData</code> 来管理异步数据获取，而不需要重复编写相同</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;  </span><br><span class="line">  &lt;div&gt;  </span><br><span class="line">    &lt;div v-if=&quot;isLoading&quot;&gt;Loading...&lt;/div&gt; &lt;!-- 加载中的提示 --&gt;  </span><br><span class="line">    &lt;div v-else-if=&quot;error&quot;&gt;Error: &#123;&#123; error.message &#125;&#125;&lt;/div&gt; &lt;!-- 错误信息展示 --&gt;  </span><br><span class="line">    &lt;ul v-else-if=&quot;data&quot;&gt;  </span><br><span class="line">      &lt;li v-for=&quot;item in data&quot; :key=&quot;item.id&quot;&gt;&#123;&#123; item.name &#125;&#125;&lt;/li&gt; &lt;!-- 显示数据列表 --&gt;  </span><br><span class="line">    &lt;/ul&gt;  </span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/template&gt;  </span><br><span class="line"></span><br><span class="line">&lt;script&gt;  </span><br><span class="line">import &#123; useFetchData &#125; from &#x27;./useFetchData&#x27;; // 导入自定义hook  </span><br><span class="line"></span><br><span class="line">export default &#123;  </span><br><span class="line">  setup() &#123;  </span><br><span class="line">    const &#123; data, isLoading, error, refetchData &#125; = useFetchData(&#x27;https://api.example.com/data&#x27;); // 使用 useFetchData hook 获取数据  </span><br><span class="line"></span><br><span class="line">    return &#123;  </span><br><span class="line">      data,  </span><br><span class="line">      isLoading,  </span><br><span class="line">      error,  </span><br><span class="line">      refetchData,  </span><br><span class="line">    &#125;;  </span><br><span class="line">  &#125;,  </span><br><span class="line">&#125;;  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="vue3路由"><a href="#vue3路由" class="headerlink" title="vue3路由"></a>vue3路由</h2><h3 id="路由理解"><a href="#路由理解" class="headerlink" title="路由理解"></a>路由理解</h3><p>它与 Vue.js 核心深度集成，允许开发者构建单页面应用（SPA）中的客户端路由。通过路由，用户可以在不同的URL之间进行导航，同时在不同的视图（组件）之间进行切换，而不需要重新加载页面。</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li><strong>路由（Route）</strong>: 路由是指定义应用程序不同状态下的URL地址。例如，<code>/home</code>、<code>/about</code>、<code>/products</code>等都可以是应用中的路由。在Vue Router中，每个路由对应一个组件。</li><li><strong>路由器（Router）</strong>: 路由器是 Vue Router 的实例，用于管理应用程序的路由。在创建Vue应用时，需要将路由器安装到应用中。</li><li><strong>路由视图（Router View）</strong>: 路由视图是 Vue Router 中用来显示匹配到的路由组件的地方。通常在应用的主模板中使用 <code>&lt;router-view&gt;&lt;/router-view&gt;</code> 标签来指定。</li><li><strong>路由链接（Router Link）</strong>: 路由链接用来在不同的路由之间进行导航。它会自动设置 <code>href</code> 属性，并且在当前路由与目标路由匹配时添加一个 <code>router-link-active</code> 类。</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><div class="tabs" id="unique-name"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="unique-name-1">npm</button><button type="button" class="tab " data-href="unique-name-2">yarn</button><button type="button" class="tab " data-href="unique-name-3">pnpm</button></ul><div class="tab-contents"><div class="tab-item-content active" id="unique-name-1"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router@next  </span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="unique-name-2"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add vue-router@4</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="unique-name-3"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm add vue-router@4</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;  </span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./views/Home.vue&#x27;</span>;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [  </span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;  </span><br><span class="line">  <span class="comment">// 其他路由配置  </span></span><br><span class="line">];  </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;  </span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),  </span><br><span class="line">  routes  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><h3 id="路由工作模式-Hash-模式和History-模式"><a href="#路由工作模式-Hash-模式和History-模式" class="headerlink" title="路由工作模式 - Hash 模式和History 模式"></a>路由工作模式 - Hash 模式和History 模式</h3><p><strong>Hash 模式</strong></p><p>在 Hash 模式下，URL 中的 hash 值（即 <code>#</code> 后面的部分）用来表示当前页面的状态，而不会触发浏览器向服务器发送请求。例如，URL 可能看起来像是这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://example.com/#/about  </span><br></pre></td></tr></table></figure><ul><li><strong>特点</strong>：<ul><li>Hash 模式在不同浏览器中具有良好的兼容性。</li><li>可以在不需要服务器支持的情况下运行，即使服务器只返回一个静态页面也可以。</li></ul></li><li><strong>工作原理</strong>：<ul><li>当 hash 值发生变化时，浏览器会触发 <code>hashchange</code> 事件，框架根据新的 hash 值加载对应的组件或页面内容。</li></ul></li><li><strong>示例</strong>：<ul><li>Vue Router 中默认使用 Hash 模式，可以通过 <code>createWebHashHistory()</code> 创建基于 Hash 的路由实例。</li></ul></li></ul><p><strong>History 模式</strong></p><p>History 模式使用 HTML5 提供的 History API 来管理 URL，通过修改浏览器的历史记录栈来实现 URL 的变化，不再依赖于 hash。例如，URL 可能看起来像是这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://example.com/about  </span><br></pre></td></tr></table></figure><ul><li><strong>特点</strong>：<ul><li>URL 更加美观，不会有 <code>#</code> 符号。</li><li>可以通过服务器配置来支持刷新页面时的路由。</li></ul></li><li><strong>工作原理</strong>：<ul><li>当 URL 发生变化时，浏览器不会重新加载页面，而是会通过 History API 替换当前历史记录，然后由前端路由接管对 URL 的解析和页面展示。</li></ul></li><li><strong>示例</strong>：<ul><li>Vue Router 可以通过 <code>createWebHistory()</code> 创建基于 History API 的路由实例，但需要服务器支持。</li></ul></li></ul><p><strong>Hash 模式的注意点和问题：</strong></p><ol><li><strong>兼容性和 SEO</strong>：<ul><li><strong>SEO</strong>：搜索引擎对于 Hash 模式的页面索引效果不如 History 模式好，因为它们不会像标准 URL 那样被搜索引擎直接索引。</li><li><strong>兼容性</strong>：Hash 模式在老旧浏览器中具有很好的兼容性，但可能在某些情况下影响用户体验，例如 URL 中会带有 <code>#</code> 符号。</li></ul></li><li><strong>路由导航和刷新问题</strong>：<ul><li><strong>刷新页面</strong>：刷新页面时，Hash 模式可以保持页面状态，因为 hash 值不会发送给服务器。但是，如果用户手动更改了 URL 中的 hash 值，可能会导致路由找不到对应的页面或组件。</li><li><strong>HashChange 事件</strong>：Hash 模式依赖于浏览器的 <code>hashchange</code> 事件来监听 URL 的变化，有时候这个事件的兼容性和触发时机可能会带来一些问题。</li></ul></li><li><strong>URL 的可读性</strong>：<ul><li>Hash 模式的 URL 看起来不够直观和美观，因为会包含 <code>#</code> 符号和一串 hash 值。</li></ul></li></ol><p><strong>History 模式的注意点和问题：</strong></p><ol><li><strong>服务器配置</strong>：<ul><li><strong>服务端重定向</strong>：在使用 History 模式时，服务器需要配置以支持单页面应用的路由。例如，当用户刷新页面或直接访问某个 URL 时，服务器需要返回同一个 HTML 页面而不是 404 错误。</li></ul></li><li><strong>兼容性问题</strong>：<ul><li><strong>旧版浏览器</strong>：不支持 HTML5 的 History API 的旧版浏览器可能无法完全支持 History 模式，需要进行兼容性处理。</li></ul></li><li><strong>基础路径问题</strong>：<ul><li><strong>base 配置</strong>：在使用 Vue Router 等前端路由库时，需要配置 <code>base</code> 选项来指定应用的基础 URL，以确保在不同的环境中都能正确解析路由。</li></ul></li><li><strong>部署时的问题</strong>：<ul><li><strong>服务器端配置</strong>：在部署到不同的服务器上时，需要确保服务器能正确处理所有的路由请求，否则会导致页面的错误或无法访问。</li></ul></li></ol><h3 id="router-link的两种写法"><a href="#router-link的两种写法" class="headerlink" title="router-link的两种写法"></a>router-link的两种写法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--第一种字符串写法--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;router-link active-class=&quot;active&quot; to=&quot;/home&quot;&gt;主页&lt;/router-link&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!--第二种对象写法--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;router-link active-class=&quot;active&quot; to=&quot;&#123;path:&#x27;/home&#x27;&#125;&quot;&gt;主页&lt;/router-link&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h3><p>通过<code>name</code> 属性为路由定义命名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;  </span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Home.vue&#x27;</span>;  </span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;./components/About.vue&#x27;</span>;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [  </span><br><span class="line">  &#123;  </span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,  </span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>, <span class="comment">// 定义命名路由为 &#x27;home&#x27;  </span></span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Home</span>  </span><br><span class="line">  &#125;,  </span><br><span class="line">  &#123;  </span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,  </span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;about&#x27;</span>, <span class="comment">// 定义命名路由为 &#x27;about&#x27;  </span></span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">About</span>  </span><br><span class="line">  &#125;  </span><br><span class="line">];  </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;  </span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),  </span><br><span class="line">  routes  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><p>在模板中使用命名路由：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;  </span><br><span class="line">  &lt;router-link :to=&quot;&#123; name: &#x27;home&#x27; &#125;&quot;&gt;Home&lt;/router-link&gt;  </span><br><span class="line">  &lt;router-link :to=&quot;&#123; name: &#x27;about&#x27; &#125;&quot;&gt;About&lt;/router-link&gt;  </span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>在js代码中使用命名路由：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    // 在组件或者页面中使用  </span><br><span class="line">import &#123; useRoute &#125; from &#x27;vue-router&#x27;;  </span><br><span class="line"></span><br><span class="line">const route = useRoute();  </span><br><span class="line"></span><br><span class="line">    // 获取当前路由的名称  </span><br><span class="line">console.log(route.name); // 输出当前路由的名称  </span><br><span class="line"></span><br><span class="line">    // 通过命名路由进行编程式导航  </span><br><span class="line">const navigateToHome = () =&gt; &#123;  </span><br><span class="line">router.push(&#123; name: &#x27;home&#x27; &#125;);  </span><br><span class="line">&#125;;  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><p>嵌套路由（Nested Routes）允许您在一个父路由内部定义子路由，这样可以更好地组织和管理复杂的页面结构。</p><h4 id="定义嵌套路由"><a href="#定义嵌套路由" class="headerlink" title="定义嵌套路由"></a>定义嵌套路由</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [  </span><br><span class="line">  &#123;  </span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,  </span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./components/Home.vue&#x27;</span>);  </span><br><span class="line">  &#125;,  </span><br><span class="line">  &#123;  </span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,  </span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./components/About.vue&#x27;</span>); </span><br><span class="line">  &#125;,  </span><br><span class="line">  &#123;  </span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/contact&#x27;</span>,  </span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./components/Contact.vue&#x27;</span>); </span><br><span class="line">  &#125;,  </span><br><span class="line">  &#123;  </span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>,  </span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./components/UserProfile.vue&#x27;</span>); ,  </span><br><span class="line">    <span class="attr">children</span>: [  </span><br><span class="line">      &#123;  </span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;posts&#x27;</span>,  </span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./components/UserPosts.vue&#x27;</span>);   </span><br><span class="line">      &#125;  </span><br><span class="line">    ]  </span><br><span class="line">  &#125;  </span><br><span class="line">];  </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;  </span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),  </span><br><span class="line">  routes  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><h4 id="模板语法中使用"><a href="#模板语法中使用" class="headerlink" title="模板语法中使用"></a>模板语法中使用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- App.vue --&gt;  </span><br><span class="line">&lt;template&gt;  </span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;  </span><br><span class="line">    &lt;router-link to=&quot;/&quot;&gt;Home&lt;/router-link&gt; |  </span><br><span class="line">    &lt;router-link to=&quot;/about&quot;&gt;About&lt;/router-link&gt; |  </span><br><span class="line">    &lt;router-link to=&quot;/contact&quot;&gt;Contact&lt;/router-link&gt; |  </span><br><span class="line">    &lt;router-link :to=&quot;&#123; name: &#x27;user&#x27;, params: &#123; id: 123 &#125;&#125;&quot;&gt;User Profile&lt;/router-link&gt;  </span><br><span class="line">    &lt;!-- 显示一级路由 --&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;  </span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/template&gt;  </span><br><span class="line"></span><br><span class="line">&lt;script&gt;  </span><br><span class="line">export default &#123;  </span><br><span class="line">  name: &#x27;App&#x27;  </span><br><span class="line">&#125;;  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- UserProfile.vue --&gt;  </span><br><span class="line">&lt;template&gt;  </span><br><span class="line">  &lt;div&gt;  </span><br><span class="line">    &lt;h2&gt;User Profile&lt;/h2&gt;  </span><br><span class="line">    &lt;router-link :to=&quot;&#123; name: &#x27;userPosts&#x27;, params: &#123; id: $route.params.id &#125;&#125;&quot;&gt;Posts&lt;/router-link&gt;  </span><br><span class="line">&lt;!--显示二级路由--&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;  </span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/template&gt;  </span><br><span class="line"></span><br><span class="line">&lt;script&gt;  </span><br><span class="line">export default &#123;  </span><br><span class="line">  name: &#x27;UserProfile&#x27;  </span><br><span class="line">&#125;;  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="useRouter-和-useRoute"><a href="#useRouter-和-useRoute" class="headerlink" title="useRouter 和 useRoute"></a><code>useRouter</code> 和 <code>useRoute</code></h3><ul><li>**<code>useRouter</code>**：用于获取 Vue Router 的全局 <code>router</code> 实例，通过这个实例可以进行路由的各种操作，包括导航、路由信息获取等。</li><li>**<code>useRoute</code>**：用于在组件中获取当前路由的信息对象 ，包括路径、参数、查询参数等。通常用于在组件内部获取当前路由信息的情况下使用。</li></ul><h3 id="query路由传参"><a href="#query路由传参" class="headerlink" title="query路由传参"></a>query路由传参</h3><h4 id="定义路由"><a href="#定义路由" class="headerlink" title="定义路由"></a>定义路由</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;  </span><br><span class="line"><span class="keyword">import</span> <span class="title class_">UserProfile</span> <span class="keyword">from</span> <span class="string">&#x27;../views/UserProfile.vue&#x27;</span>;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [  </span><br><span class="line">  &#123;  </span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/profile&#x27;</span>,  </span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;UserProfile&#x27;</span>,  </span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">UserProfile</span>,  </span><br><span class="line">    <span class="attr">props</span>: <span class="function">(<span class="params">route</span>) =&gt;</span> (&#123; <span class="attr">userId</span>: route.<span class="property">query</span>.<span class="property">userId</span> &#125;) <span class="comment">// 通过 props 传递 userId  </span></span><br><span class="line">  &#125;  </span><br><span class="line">];  </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;  </span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),  </span><br><span class="line">  routes  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><h4 id="使用-router-link-组件"><a href="#使用-router-link-组件" class="headerlink" title="使用 router-link 组件"></a>使用 <code>router-link</code> 组件</h4><p><code>&lt;router-link&gt;</code> 组件的 <code>to</code> 属性中通过对象形式传递 <code>query</code> 参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;  </span><br><span class="line">&lt;!--to 对象中的 query 属性可以是一个对象，用来表示你想要传递的 query 参数--&gt;</span><br><span class="line"> &lt;router-link :to=&quot;&#123; path: &#x27;/profile&#x27;, query: &#123; userId: 123 &#125;&#125;&quot;&gt;User Profile&lt;/router-link&gt;  </span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h4 id="使用编程式导航-使用-useRouter-进行导航操作"><a href="#使用编程式导航-使用-useRouter-进行导航操作" class="headerlink" title="使用编程式导航 - 使用 useRouter 进行导航操作"></a>使用编程式导航 - 使用 <code>useRouter</code> 进行导航操作</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useRouter &#125; from &#x27;vue-router&#x27;; </span><br><span class="line">const router = useRouter(); </span><br><span class="line">router.push(&#123; path: &#x27;/profile&#x27;, query: &#123; userId: 123 &#125;&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="获取路由信息"><a href="#获取路由信息" class="headerlink" title="获取路由信息"></a>获取路由信息</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;  </span><br><span class="line">  &lt;div&gt;  </span><br><span class="line">    &lt;h2&gt;User Profile&lt;/h2&gt;  </span><br><span class="line">    &lt;p&gt;User ID: &#123;&#123; route.query.userId &#125;&#125;&lt;/p&gt;  </span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/template&gt;  </span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;  </span><br><span class="line">import &#123; useRoute &#125; from &#x27;vue-router&#x27;;  </span><br><span class="line">const route = useRoute();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- props 接收--&gt;</span><br><span class="line">&lt;template&gt;  </span><br><span class="line">  &lt;div&gt;  </span><br><span class="line">    &lt;h2&gt;User Profile&lt;/h2&gt;  </span><br><span class="line">    &lt;p&gt;User ID: &#123;&#123; userId &#125;&#125;&lt;/p&gt;  </span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/template&gt;  </span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;  </span><br><span class="line">import &#123; ref, onMounted &#125; from &#x27;vue&#x27;;  </span><br><span class="line"></span><br><span class="line">const props = defineProps([&#x27;userId&#x27;]); // 定义并接收 userId props  </span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;  </span><br><span class="line">  console.log(`User ID is $&#123;props.userId&#125;`);  </span><br><span class="line">&#125;);  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="params路由传参"><a href="#params路由传参" class="headerlink" title="params路由传参"></a>params路由传参</h3><p>与 <code>query</code> 不同，<code>params</code> 是通过路由路径来传递的，通常用于表示资源标识或者唯一标识符等信息。</p><h4 id="定义路由-1"><a href="#定义路由-1" class="headerlink" title="定义路由"></a>定义路由</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;  </span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),  </span><br><span class="line">  <span class="attr">routes</span>: [  </span><br><span class="line">    &#123;  </span><br><span class="line"><span class="attr">path</span>: <span class="string">&#x27;/user/:userId&#x27;</span>,  <span class="comment">//:userId 是一个动态的路由参数占位符，它表示路由的一部分，并且可以用来传递不同的用户 ID。</span></span><br><span class="line"><span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./components/UserProfile.vue&#x27;</span>),</span><br><span class="line"><span class="attr">props</span>: ture, <span class="comment">// 允许将路由参数作为 props 传递给 UserProfile 组件  </span></span><br><span class="line">    &#125;  </span><br><span class="line">  ]  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><h4 id="使用-router-link-组件-1"><a href="#使用-router-link-组件-1" class="headerlink" title="使用 router-link 组件"></a>使用 <code>router-link</code> 组件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;  </span><br><span class="line">  &lt;router-link :to=&quot;&#x27;/user/&#x27; + userId&quot;&gt;User Profile&lt;/router-link&gt;  </span><br><span class="line">&lt;/template&gt;  </span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;  </span><br><span class="line">const userId = ref(123);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="使用编程式导航-使用-useRouter-进行导航操作-1"><a href="#使用编程式导航-使用-useRouter-进行导航操作-1" class="headerlink" title="使用编程式导航 - 使用 useRouter 进行导航操作"></a>使用编程式导航 - 使用 <code>useRouter</code> 进行导航操作</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useRouter &#125; from &#x27;vue-router&#x27;; </span><br><span class="line">const router = useRouter(); </span><br><span class="line">router.push(&#x27;/user/&#x27; + userId);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="获取和使用-params-参数"><a href="#获取和使用-params-参数" class="headerlink" title="获取和使用 params 参数"></a>获取和使用 params 参数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;  </span><br><span class="line">  &lt;div&gt;  </span><br><span class="line">    &lt;h2&gt;User Profile&lt;/h2&gt;  </span><br><span class="line">    &lt;p&gt;User ID: &#123;&#123; userId &#125;&#125;&lt;/p&gt;  </span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/template&gt;  </span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;  </span><br><span class="line">import &#123; ref, onMounted &#125; from &#x27;vue&#x27;;  </span><br><span class="line">import &#123; route &#125; from &#x27;vue-router&#x27;;  </span><br><span class="line"></span><br><span class="line">const userId = ref(route.params.userId);  </span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;  </span><br><span class="line">  console.log(`User ID is $&#123;userId.value&#125;`);  </span><br><span class="line">&#125;);  </span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;!-- props 接收--&gt;</span><br><span class="line">&lt;template&gt;  </span><br><span class="line">  &lt;div&gt;  </span><br><span class="line">    &lt;h2&gt;User Profile&lt;/h2&gt;  </span><br><span class="line">    &lt;p&gt;User ID: &#123;&#123; userId &#125;&#125;&lt;/p&gt;  </span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/template&gt;  </span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;  </span><br><span class="line">import &#123; ref, onMounted &#125; from &#x27;vue&#x27;;  </span><br><span class="line"></span><br><span class="line">const props = defineProps([&#x27;userId&#x27;]); // 定义并接收 userId props  </span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;  </span><br><span class="line">  console.log(`User ID is $&#123;props.userId&#125;`);  </span><br><span class="line">&#125;);  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h3><p>路由重定向（Redirect）通常是指在某些条件下，自动将用户导航到另一个指定的路由路径。</p><h4 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [  </span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span> &#125;, <span class="comment">// 默认重定向到 /home  </span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;,  </span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>, <span class="attr">component</span>: <span class="title class_">About</span> &#125;  </span><br><span class="line">];  </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;  </span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),  </span><br><span class="line">  routes  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><h4 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useRouter &#125; from &#x27;vue-router&#x27;;  </span><br><span class="line"> </span><br><span class="line">const router = useRouter();  </span><br><span class="line"></span><br><span class="line">// 在某个条件下执行重定向  </span><br><span class="line">const redirectToAbout = () =&gt; &#123;  </span><br><span class="line">router.replace(&#x27;/about&#x27;);  </span><br><span class="line">&#125;;  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="使用-和路由导航守卫"><a href="#使用-和路由导航守卫" class="headerlink" title="使用 &lt;router-view&gt; 和路由导航守卫"></a>使用 <code>&lt;router-view&gt;</code> 和路由导航守卫</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;  </span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),  </span><br><span class="line">  <span class="attr">routes</span>: [  </span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;,  </span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>, <span class="attr">component</span>: <span class="title class_">About</span> &#125;  </span><br><span class="line">  ]  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;  </span><br><span class="line">  <span class="comment">// 某些条件下重定向到其他路由  </span></span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">&#x27;/admin&#x27;</span> &amp;&amp; !<span class="title function_">isLoggedIn</span>()) &#123;  </span><br><span class="line">    <span class="title function_">next</span>(<span class="string">&#x27;/login&#x27;</span>); <span class="comment">// 未登录时重定向到登录页  </span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">    <span class="title function_">next</span>(); <span class="comment">// 继续正常导航  </span></span><br><span class="line">  &#125;  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><h3 id="vue3组件通信方式"><a href="#vue3组件通信方式" class="headerlink" title="vue3组件通信方式"></a>vue3组件通信方式</h3><h4 id="Props-1"><a href="#Props-1" class="headerlink" title="Props"></a>Props</h4><ol><li>父组件向子组件传递 props</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- ParentComponent.vue --&gt;  </span><br><span class="line">&lt;template&gt;  </span><br><span class="line">  &lt;ChildComponent :message=&quot;dynamicMessage&quot; /&gt;  </span><br><span class="line">&lt;/template&gt;  </span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;  </span><br><span class="line">import ChildComponent from &#x27;./ChildComponent.vue&#x27;;  </span><br><span class="line"></span><br><span class="line">const dynamicMessage = &#x27;Hello dynamically!&#x27;;  </span><br><span class="line">&lt;/script&gt;  </span><br></pre></td></tr></table></figure><ol start="2"><li>子组件接收 props</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- ChildComponent.vue --&gt;  </span><br><span class="line">&lt;template&gt;  </span><br><span class="line">  &lt;div&gt;  </span><br><span class="line">    &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;  </span><br><span class="line">    &lt;p&gt;Count: &#123;&#123; count &#125;&#125;&lt;/p&gt;  </span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/template&gt;  </span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;  </span><br><span class="line">props: &#123;  </span><br><span class="line">  message: &#123;  </span><br><span class="line">    type: String,  </span><br><span class="line">    required: true  </span><br><span class="line">  &#125;,  </span><br><span class="line">  count: &#123;  </span><br><span class="line">    type: Number,  </span><br><span class="line">    default: 0  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line">&lt;/script&gt;  </span><br></pre></td></tr></table></figure><h4 id="自定义事件-emit"><a href="#自定义事件-emit" class="headerlink" title="自定义事件 - emit"></a>自定义事件 - <code>emit</code></h4><p>通过自定义事件（Custom Events）实现组件之间的通信</p><ol><li>父组件向子组件传递事件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- ParentComponent.vue --&gt;  </span><br><span class="line">&lt;template&gt;  </span><br><span class="line">  &lt;div&gt;  </span><br><span class="line">    &lt;ChildComponent @custom-event=&quot;handleCustomEvent&quot; /&gt;  </span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/template&gt;  </span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;  </span><br><span class="line">import ChildComponent from &#x27;./ChildComponent.vue&#x27;;  </span><br><span class="line"></span><br><span class="line">const handleCustomEvent = (payload) =&gt; &#123;  </span><br><span class="line">  console.log(&#x27;Received payload from child:&#x27;, payload);  </span><br><span class="line">&#125;;  </span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure><ol start="2"><li>子组件触发父组件自定义事件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- ChildComponent.vue --&gt;  </span><br><span class="line">&lt;template&gt;  </span><br><span class="line">  &lt;button @click=&quot;emitCustomEvent&quot;&gt;Click me to emit custom event&lt;/button&gt;  </span><br><span class="line">&lt;/template&gt;  </span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;  </span><br><span class="line">import &#123; defineEmits &#125; from &#x27;vue&#x27;;  </span><br><span class="line"></span><br><span class="line">const emitCustomEvent = defineEmits([&#x27;custom-event&#x27;]);  </span><br><span class="line"></span><br><span class="line">const emitCustomEvent = () =&gt; &#123;  </span><br><span class="line">  emit(&#x27;custom-event&#x27;, &#123; message: &#x27;Hello from child!&#x27; &#125;);  </span><br><span class="line">&#125;;  </span><br><span class="line">&lt;/script&gt;  </span><br></pre></td></tr></table></figure><h4 id="mitt库-事件总线工具"><a href="#mitt库-事件总线工具" class="headerlink" title="mitt库 - 事件总线工具"></a>mitt库 - 事件总线工具</h4><p>mitt 库（或类似的事件总线工具）来处理 Vue 3 组件之间的通信时，可以通过引入 mitt 库并在 <code>&lt;script setup&gt;</code> 中使用它来实现自定义事件的传递和响应。</p><ol><li>安装mitt库</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install mitt</span><br></pre></td></tr></table></figure><ol start="2"><li>父组件向子组件传递事件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- ParentComponent.vue --&gt;  </span><br><span class="line">&lt;template&gt;  </span><br><span class="line">  &lt;div&gt;  </span><br><span class="line">    &lt;ChildComponent :emitter=&quot;emitter&quot; /&gt;  </span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/template&gt;  </span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;  </span><br><span class="line">//通过 mitt 创建一个事件总线 emitter。</span><br><span class="line">import mitt from &#x27;mitt&#x27;;  </span><br><span class="line">const emitter = mitt();  </span><br><span class="line"></span><br><span class="line">// 使用 emitter.on(&#x27;event-name&#x27;, handler) 方法监听来自子组件的事件，并定义处理函数来处理传递的数据 payload。</span><br><span class="line">emitter.on(&#x27;custom-event&#x27;, (payload) =&gt; &#123;  </span><br><span class="line">  console.log(&#x27;Received payload from child:&#x27;, payload);  </span><br><span class="line">&#125;);  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>子组件触发自定义事件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- ChildComponent.vue --&gt;  </span><br><span class="line">&lt;template&gt;  </span><br><span class="line">  &lt;button @click=&quot;emitCustomEvent&quot;&gt;Click me to emit custom event&lt;/button&gt;  </span><br><span class="line">&lt;/template&gt;  </span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;  </span><br><span class="line">// 引入 mitt 并创建一个事件总线 emitter</span><br><span class="line">import mitt from &#x27;mitt&#x27;;  </span><br><span class="line">const emitter = mitt();  </span><br><span class="line">// 使用 emitter.emit(&#x27;event-name&#x27;, payload) 方法来触发自定义事件，并传递需要的数据。</span><br><span class="line">const emitCustomEvent = () =&gt; &#123;  </span><br><span class="line">  emitter.emit(&#x27;custom-event&#x27;, &#123; message: &#x27;Hello from child!&#x27; &#125;);  </span><br><span class="line">&#125;;  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="v-model-组件通信"><a href="#v-model-组件通信" class="headerlink" title="v-model 组件通信"></a>v-model 组件通信</h4><p><strong>v-model</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// 在input时使用v-mode，vue2,vue3一致</span><br><span class="line">&lt;inpuy v-model=&quot;a&quot; /&gt;</span><br><span class="line">// 等价于</span><br><span class="line">&lt;input :value=&quot;a&quot; @input=&quot;(e)=&gt;&#123;a=e.target.value&#125;&quot;/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 当v-model 用于自定义组件键上时,vue2跟vue3会有相应区别</span><br><span class="line">// vue2</span><br><span class="line">&lt;son v-model=&quot;a&quot;/&gt;</span><br><span class="line">//等价写法</span><br><span class="line">&lt;son :value=&quot;a&quot; @input=&quot;(a)=&gt;&#123;a=e&#125;&quot;/&gt;</span><br><span class="line">/*</span><br><span class="line">解释：</span><br><span class="line">v-model=&quot;a&quot;：在自定义组件 son 上使用 v-model，会将父组件的 a 值传递给子组件，并监听子组件的 input 事件更新 a 值。</span><br><span class="line">:value=&quot;a&quot;：将父组件的 a 值传递给自定义组件的 value prop。</span><br><span class="line">@input=&quot;(value) =&gt; &#123; a = value &#125;&quot;：监听自定义组件 son 的 input 事件，将子组件传递的新值 value 更新到父组件的 a 变量。</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">// vue3</span><br><span class="line">&lt;son v-model=&quot;a&quot;/&gt;</span><br><span class="line">//等价于</span><br><span class="line">&lt;son :modelValue=&quot;a&quot; @update:modelValue=&quot;(e)=&gt;&#123;a=e&#125;&quot;/&gt;</span><br><span class="line">/*</span><br><span class="line">解释：</span><br><span class="line">v-model=&quot;a&quot;：在自定义组件 son 上使用 v-model，将父组件的 a 值双向绑定到子组件的 modelValue。</span><br><span class="line">:modelValue=&quot;a&quot;：将父组件的 a 值传递给自定义组件的 modelValue prop。</span><br><span class="line">@update:modelValue=&quot;(value) =&gt; &#123; a = value &#125;&quot;：监听自定义组件 son 的 update:modelValue 事件，将子组件传递的新值 value 更新到父组件的 a 变量。</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>v-model 是用于实现双向数据绑定的语法糖，它能够简化父子组件之间数据传递和响应的过程。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;  </span><br><span class="line">  &lt;!-- 父组件 --&gt;  </span><br><span class="line">  &lt;div&gt;  </span><br><span class="line">    &lt;h2&gt;Parent Component&lt;/h2&gt;  </span><br><span class="line">    &lt;CustomInput v-model=&quot;message&quot; /&gt;  </span><br><span class="line">    &lt;p&gt;Parent message: &#123;&#123; message &#125;&#125;&lt;/p&gt;  </span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/template&gt;  </span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;  </span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;  </span><br><span class="line">import CustomInput from &#x27;./CustomInput.vue&#x27;;  </span><br><span class="line"></span><br><span class="line">// 使用 ref 创建响应式变量  </span><br><span class="line">const message = ref(&#x27;&#x27;);  </span><br><span class="line"></span><br><span class="line">&lt;/script&gt;  </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- CustomInput.vue --&gt;  </span><br><span class="line">&lt;template&gt;  </span><br><span class="line">  &lt;!-- 输入框绑定到父组件传递的 modelValue --&gt;  </span><br><span class="line">  &lt;input type=&quot;text&quot; :value=&quot;modelValue&quot; @input=&quot;handleInput($event)&quot;&gt;  </span><br><span class="line">&lt;/template&gt;  </span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;  </span><br><span class="line">import &#123; defineProps, defineEmits &#125; from &#x27;vue&#x27;;  </span><br><span class="line"></span><br><span class="line">// 定义接收的 props  </span><br><span class="line">const props = defineProps(&#123;  </span><br><span class="line">  modelValue: String, // 父组件传递的值  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line">// 定义可以触发的事件  </span><br><span class="line">const emits = defineEmits([&#x27;update:modelValue&#x27;]); // 更新 modelValue 事件  </span><br><span class="line"></span><br><span class="line">// 处理输入事件，更新父组件的 modelValue  </span><br><span class="line">const handleInput = (event) =&gt; &#123;  </span><br><span class="line">  emits(&#x27;update:modelValue&#x27;, event.target.value); // 触发更新事件  </span><br><span class="line">&#125;;  </span><br><span class="line">&lt;/script&gt;  </span><br></pre></td></tr></table></figure><h4 id="透传-Attributes-attrs-祖孙组件传值"><a href="#透传-Attributes-attrs-祖孙组件传值" class="headerlink" title="透传(Attributes) $attrs - 祖孙组件传值"></a>透传(Attributes) $attrs - 祖孙组件传值</h4><p><strong>父组件：直接传属性</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ChildComponent name=&quot;John Doe&quot; age=&quot;25&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import ChildComponent from &#x27;./ChildComponent.vue&#x27;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>子组件：使用 $attrs 或 useAttrs() 接收属性</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; $attrs.age &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;!-- 在模板的表达式中直接用 $attrs 访问到 --&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; attrs.age &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">  // 在js里 使用 useAttrs() API 来访问到</span><br><span class="line">  import &#123; useAttrs &#125; from &#x27;vue&#x27;</span><br><span class="line"> </span><br><span class="line">  defineProps(&#123;</span><br><span class="line">    name: String</span><br><span class="line">  &#125;)</span><br><span class="line"> </span><br><span class="line">  const attrs = useAttrs()</span><br><span class="line">  console.log(attrs)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong></p><ol><li><p>保留属性与非保留属性</p><ul><li><p>Vue 会自动将接收到的非明确声明为 <code>props</code> 的属性（即非保留属性）传递给子组件的 <code>$attrs</code> 对象。这包括了父组件没有显式声明为 <code>props</code> 的所有属性。保留属性例如 <code>class</code>、<code>style</code> 和 <code>key</code> 不会被包含在 <code>$attrs</code> 中，而是直接应用在子组件根元素上。</p></li><li><p><strong>注意：</strong> 如果子组件没有显式地声明这些属性名，Vue 可能会将其视为非预期行为。确保子组件可以接收和处理所有可能被传递的属性是很重要的。</p></li></ul></li><li><p>属性合并：</p><ul><li>如果子组件也声明了相同的 prop 名称，Vue 会优先使用 prop 覆盖 <code>$attrs</code> 中的相同名称的属性。这意味着如果一个属性同时出现在 <code>props</code> 中和 <code>$attrs</code> 中，Vue 将会使用 <code>props</code> 中的定义。</li></ul></li><li><p>冲突和重写：</p><ul><li>在使用 <code>$attrs</code> 时，要特别注意不要在子组件中声明与 <code>$attrs</code> 中相同名称的 prop，以避免潜在的混淆和冲突。如果确实需要使用相同名称，确保他们的含义和用途是一致的，并在文档中清晰地说明。</li></ul></li><li><p>动态绑定和响应性：</p><ul><li><code>$attrs</code> 是响应式的，如果父组件的属性值发生变化，子组件也会随之更新。这使得动态绑定和传递属性变得更加方便和灵活</li></ul></li></ol><h4 id="refs与-parent"><a href="#refs与-parent" class="headerlink" title="$refs与$parent"></a>$refs与$parent</h4><blockquote><p>$refs 用于: 父 - 子<br>$parent 用于: 子 - 父</p></blockquote><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>$refs</td><td>值为对象，包含所有被ref属性表示的DOM元素或组件实例</td></tr><tr><td>$parent</td><td>值为对象，当前组件的父组件实例对象</td></tr></tbody></table><p><strong>$refs</strong></p><ul><li><strong>用途</strong>：<ul><li><code>$refs</code> 是一个对象，允许你访问在组件中使用 <code>ref</code> 属性标记的子组件或 DOM 元素。</li><li>通过 <code>$refs</code>，你可以直接访问子组件的属性和方法，或者操作 DOM 元素，而无需通过 props 和 events 的显式传递。</li></ul></li><li><strong>注意事项</strong>：<ul><li>使用 <code>$refs</code> 需要在组件渲染后才能访问，因此在组件的 <code>mounted</code> 生命周期钩子或之后使用 <code>$nextTick</code> 方法访问 <code>$refs</code> 是一个良好的实践。</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- 使用子组件child-component --&gt;</span><br><span class="line">  &lt;child-component ref=&quot;childRef&quot;&gt;&lt;/child-component&gt;  </span><br><span class="line">  &lt;button @click=&quot;handleButtonClick1&quot;&gt;调用子组件方法&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;handleButtonClick2($refs)&quot;&gt;调用所有子组件方法&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;  </span><br><span class="line"></span><br><span class="line">&lt;script&gt;  </span><br><span class="line">import ChildComponent from &#x27;./ChildComponent.vue&#x27;;  </span><br><span class="line">import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line">// 获取dom节点</span><br><span class="line">const childRef = ref()</span><br><span class="line">// 触发子组件数据++</span><br><span class="line">const handleButtonClick1 = ()=&gt;childRef.count++</span><br><span class="line">// 触发多个子组件数据++</span><br><span class="line">const handleButtonClick2 = (refs)=&gt;&#123;</span><br><span class="line">    Object.entries(refs).forEach(([key, value]) =&gt; &#123;  </span><br><span class="line">    refs[key].count += 10  </span><br><span class="line">    &#125;);  </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 子组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123; count &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;  </span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;  </span><br><span class="line">import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line">const count = ref(10)</span><br><span class="line">// 把数据暴露出去</span><br><span class="line">defineExpose(&#123;count&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>$parent</strong></p><ul><li><strong>用途</strong>：<ul><li><code>$parent</code> 是一个属性，允许你访问当前组件的直接父组件实例。</li><li>通过 <code>$parent</code>，你可以直接访问父组件的属性和方法，从而在一定程度上实现组件间的数据传递和通信。</li></ul></li><li><strong>注意事项</strong>：<ul><li>使用 <code>$parent</code> 可能会使代码耦合度增加，并且在组件层次结构变化时可能导致调试和维护困难。推荐的替代方案是通过 props 和 events 显式传递数据。</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--父组件--&gt;</span><br><span class="line">&lt;template&gt;  </span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &#123;&#123;count&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;child-component ref=&quot;childRef&quot;&gt;&lt;/child-component&gt;</span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/template&gt;  </span><br><span class="line"></span><br><span class="line">&lt;script&gt;  </span><br><span class="line">import ChildComponent from &#x27;./ChildComponent.vue&#x27;;  </span><br><span class="line">import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const count = ref(100)</span><br><span class="line"></span><br><span class="line">// 把数据暴露出去</span><br><span class="line">defineExpose(&#123;count&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--子组件--&gt;</span><br><span class="line">&lt;template&gt;  </span><br><span class="line">  &lt;div&gt;子组件&lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;clickPnum($parent)&quot;&gt;修改父组件值&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;  </span><br><span class="line"></span><br><span class="line">&lt;script&gt;  </span><br><span class="line">import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const clickPnum = (parent)=&gt;&#123;</span><br><span class="line">    parent.count += 10</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><ul><li><strong><code>$refs</code></strong> 主要用于访问子组件或 DOM 元素，适合直接操作子组件或元素的场景。</li><li><strong><code>$parent</code></strong> 用于访问直接父组件实例，以便在必要时进行数据传递和通信。</li></ul><h4 id="provide、inject"><a href="#provide、inject" class="headerlink" title="provide、inject"></a>provide、inject</h4><blockquote><p><code>provide</code> 和 <code>inject</code> 是一对用于在父组件和子组件之间进行依赖注入的 API。它们允许你跨越多层次的组件层级向下传递数据或功能，而无需手动通过 props 一层层传递。</p></blockquote><p><strong>provide</strong></p><p><code>provide</code> 是在父组件中声明的一个方法，用于提供数据或方法，使其可以被子孙组件访问到。它通常结合 <code>ref</code> 或 <code>reactive</code> 等 Vue 3 提供的响应式 API 使用，确保数据的响应式传递。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &#123;&#123;money&#125;&#125;￥</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import Child from &#x27;./Child.vue&#x27;</span><br><span class="line">import &#123;ref, reactive, provide&#125; from &#x27;vue&#x27;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">const money = ref(100)</span><br><span class="line"></span><br><span class="line">// 向后代组件提供数据</span><br><span class="line">provide(&#x27;money&#x27;, money)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>inject</strong></p><p><code>inject</code> 是在子组件中声明的一个方法，用于接收 <code>provide</code> 提供的数据或方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 后代组件 --&gt;</span><br><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;^_^&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;inject&#125; from &#x27;vue&#x27;</span><br><span class="line">// 获取到父代组件使用provide传过来的值</span><br><span class="line">const money = inject(&#x27;money&#x27;,&#x27;default&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>特性和注意事项：</strong></p><ol><li><strong>响应式数据传递</strong>：通过 <code>provide</code> 提供的数据，如果使用了 <code>ref</code> 或 <code>reactive</code>，在子组件中使用 <code>inject</code> 获取的数据也将是响应式的。</li><li><strong>跨越多层级</strong>：<code>provide</code> 和 <code>inject</code> 不限于直接父子关系，可以在多层级的组件中进行数据传递。</li><li><strong>非响应式数据</strong>：如果提供的数据不是响应式的（比如普通 JavaScript 对象或数组），在子组件中使用 <code>inject</code> 获取的也是普通的数据副本，而非响应式引用。</li><li><strong>类型推断和注入安全</strong>：可以通过 TypeScript 或 Flow 等类型系统来确保 <code>inject</code> 获取到的数据类型是正确的，提高代码的安全性和可维护性。</li><li><strong>依赖关系解耦</strong>：使用 <code>provide</code> 和 <code>inject</code> 可以帮助解耦组件之间的依赖关系，特别是在跨组件通信和状态管理方面，有利于组件的可复用性和测试性。</li></ol><h4 id="pinia-Vuex"><a href="#pinia-Vuex" class="headerlink" title="pinia&#x2F;Vuex"></a>pinia&#x2F;Vuex</h4><p>pass</p><h4 id="slot-插槽"><a href="#slot-插槽" class="headerlink" title="slot - 插槽"></a>slot - 插槽</h4><blockquote><p>插槽（slot）是一种非常强大和灵活的机制，用于在父组件中定义可插入内容的位置，以便子组件可以填充这些位置。</p></blockquote><h5 id="默认插槽-slot"><a href="#默认插槽-slot" class="headerlink" title="默认插槽 - slot"></a>默认插槽 - slot</h5><p>可以通过 <code>&lt;slot&gt;</code> 元素在父组件模板中创建一个插槽，以指定一个或多个位置，子组件可以向这些位置插入内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- ParentComponent.vue --&gt;  </span><br><span class="line">&lt;template&gt;  </span><br><span class="line">  &lt;div&gt;  </span><br><span class="line">    &lt;h1&gt;Parent Component&lt;/h1&gt;  </span><br><span class="line">    &lt;Child&gt;</span><br><span class="line">        &lt;!-- 在子组件内部的内容将会插入到子组件的&lt;slot&gt;中 --&gt;</span><br><span class="line">    &lt;p&gt;Child 插槽&lt;/p&gt;</span><br><span class="line">    &lt;/Child&gt; </span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup-&gt;</span><br><span class="line">import Child from &#x27;./ChildComponent.vue&#x27;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- ChildComponent.vue --&gt;  </span><br><span class="line">&lt;template&gt;  </span><br><span class="line">  &lt;div&gt;  </span><br><span class="line">    &lt;h2&gt;Child Component&lt;/h2&gt;  </span><br><span class="line">    &lt;slot&gt; </span><br><span class="line">        &lt;!-- 不带内容时，显示默认内容 --&gt;</span><br><span class="line">      &lt;p&gt;This content will be displayed if no other content is provided.&lt;/p&gt;  </span><br><span class="line">    &lt;/slot&gt;  </span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h5 id="具名插槽-Named-Slots"><a href="#具名插槽-Named-Slots" class="headerlink" title="具名插槽 - Named Slots"></a>具名插槽 - Named Slots</h5><blockquote><p>默认插槽的命名为default</p></blockquote><p>可以在父组件调用子组件时，传入多个插槽内容，并按位置渲染</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- ParentComponent.vue --&gt;  </span><br><span class="line">&lt;template&gt;  </span><br><span class="line">  &lt;div&gt;  </span><br><span class="line">    &lt;ChildComponent&gt;  </span><br><span class="line">      &lt;!-- 默认插槽内容 --&gt;  </span><br><span class="line">      &lt;p&gt;This is some default content.&lt;/p&gt;  </span><br><span class="line">      </span><br><span class="line">      &lt;!-- 具名插槽内容header --&gt;  </span><br><span class="line">      &lt;template v-slot:header&gt;  </span><br><span class="line">        &lt;h1&gt;Header Content&lt;/h1&gt;  </span><br><span class="line">      &lt;/template&gt;  </span><br><span class="line"></span><br><span class="line">      &lt;!-- 具名插槽内容header(# 缩写) --&gt;</span><br><span class="line">      &lt;template #footer&gt;  </span><br><span class="line">        &lt;footer&gt;Footer Content&lt;/footer&gt;  </span><br><span class="line">      &lt;/template&gt;  </span><br><span class="line">    &lt;/ChildComponent&gt;  </span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/template&gt;  </span><br><span class="line"></span><br><span class="line">&lt;script&gt;  </span><br><span class="line">import ChildComponent from &#x27;./ChildComponent.vue&#x27;;  </span><br><span class="line"></span><br><span class="line">export default &#123;  </span><br><span class="line">  components: &#123;  </span><br><span class="line">    ChildComponent,  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- ChildComponent.vue --&gt;  </span><br><span class="line">&lt;template&gt;  </span><br><span class="line">  &lt;div&gt;  </span><br><span class="line">    &lt;!-- 默认插槽 name=&quot;default&quot;--&gt;  </span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;  </span><br><span class="line">    </span><br><span class="line">    &lt;!-- 具名插槽header --&gt;  </span><br><span class="line">    &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;  </span><br><span class="line">    </span><br><span class="line">    &lt;!-- 具名插槽footer --&gt;  </span><br><span class="line">    &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;  </span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/template&gt; </span><br></pre></td></tr></table></figure><h5 id="作用域插槽-Scoped-Slots"><a href="#作用域插槽-Scoped-Slots" class="headerlink" title="作用域插槽 - Scoped Slots"></a>作用域插槽 - Scoped Slots</h5><blockquote><p>具名插槽数据在父组件<br>作用域插槽数据在子组件</p></blockquote><p>作用域插槽允许子组件向父组件传递数据，同时保持对数据的作用域控制。作用域插槽可以让子组件将数据传递到父组件中，父组件则可以在其模板中使用这些数据来渲染内容。</p><p><strong>作用域插槽的灵活性</strong>：</p><ul><li><strong>动态作用域插槽名</strong>：可以根据父组件的数据动态地决定插槽的名称。</li><li><strong>传递多个参数</strong>：可以通过作用域插槽传递多个参数或对象，以便父组件可以更复杂地处理数据。</li><li><strong>默认插槽内容</strong>：如果父组件没有提供对应的插槽内容，子组件可以定义默认的内容，确保模板的合理渲染。</li></ul><p><strong>定义作用域插槽</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- ChildComponent.vue --&gt;  </span><br><span class="line">&lt;template&gt;  </span><br><span class="line">  &lt;div&gt;  </span><br><span class="line">      &lt;!-- 子组件使用v-bing指令给slot元素添加user数据，提供给插槽使用者使用--&gt;</span><br><span class="line">    &lt;slot :user=&quot;user&quot;&gt;&lt;/slot&gt;  </span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/template&gt;  </span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;reactive&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">const user = reactive(&#123; name: &#x27;John Doe&#x27;, age: 30 &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>使用作用域插槽</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- ParentComponent.vue --&gt;  </span><br><span class="line">&lt;template&gt;  </span><br><span class="line">  &lt;div&gt;  </span><br><span class="line">    &lt;ChildComponent&gt;  </span><br><span class="line">      &lt;template #default=&quot;slotProps&quot;&gt;  </span><br><span class="line">        &lt;p&gt;User name: &#123;&#123; slotProps.user.name &#125;&#125;&lt;/p&gt;  </span><br><span class="line">        &lt;p&gt;User age: &#123;&#123; slotProps.user.age &#125;&#125;&lt;/p&gt;  </span><br><span class="line">      &lt;/template&gt;  </span><br><span class="line">    &lt;/ChildComponent&gt;  </span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/template&gt;  </span><br><span class="line"></span><br><span class="line">&lt;script&gt;  </span><br><span class="line">import ChildComponent from &#x27;./ChildComponent.vue&#x27;;  </span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="shallowRef-和-shallowReactive"><a href="#shallowRef-和-shallowReactive" class="headerlink" title="shallowRef 和 shallowReactive"></a>shallowRef 和 shallowReactive</h3><h4 id="shallowRef"><a href="#shallowRef" class="headerlink" title="shallowRef"></a><code>shallowRef</code></h4><p><code>shallowRef</code> 是用来创建一个具有单个属性的响应式引用（ref），但只对顶层属性进行响应式处理。这意味着它主要用于创建包装普通 JavaScript 值的响应式引用。当你想要在组件中使用一个单一的可变值时，通常会使用 <code>shallowRef</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123;count&#125;&#125;&lt;/span&gt;|&lt;span&gt;&#123;&#123;cat.brand - cat.color&#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; shallowRef &#125; from &#x27;vue&#x27;;  </span><br><span class="line"></span><br><span class="line">const count = shallowRef(0);  </span><br><span class="line">const cat = shallowRef(); </span><br><span class="line">// 在组件中使用,只对顶层属性进行响应式处理,所以只能修改 xxx.value</span><br><span class="line">console.log(count.value); // 输出: 0  能够修改</span><br><span class="line">count.value++; // 自增 count 的值</span><br><span class="line">cat.value.brand = &#x27;03&#x27; // 不能被修改</span><br><span class="line">cat.value = &#123;brand:&#x27;01&#x27;,color:&#x27;02&#x27;&#125;  // 可以被修改</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="shallowReactive"><a href="#shallowReactive" class="headerlink" title="shallowReactive"></a><code>shallowReactive</code></h4><p><code>shallowReactive</code> 则是用来创建一个浅层响应式对象。与 <code>reactive</code> 类似，但 <code>shallowReactive</code> 只为对象的第一层属性创建响应式代理，而不会递归地转换内部的所有嵌套对象和数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; shallowReactive &#125; from &#x27;vue&#x27;;  </span><br><span class="line"></span><br><span class="line">const state = shallowReactive(&#123;  </span><br><span class="line">  nested: &#123;  </span><br><span class="line">    count: 0  </span><br><span class="line">  &#125;,  </span><br><span class="line">  message: &#x27;Hello!&#x27;  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line">// 在组件中使用： 只能对第一层进行修改 </span><br><span class="line">console.log(state.message); // 输出: &#x27;Hello!&#x27;  </span><br><span class="line">state.message = &#x27;Hi!&#x27;; // 修改 message 的值  </span><br><span class="line"></span><br><span class="line">console.log(state.nested.count); // 输出: 0  </span><br><span class="line">state.nested.count++; // 自增 nested.count 的值</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>通过使用shallowRef() 和 shallowReactive() 来绕开深度响应。浅层式API创建的装填只能在其顶层时响应式的。对所有深层的对象不会做任何处理，避免了对每一个内部属性做响应式所带来的性能成本，这使得属性的访问变得更快，提高性能</p><h3 id="readonly-和-shallowReadonly"><a href="#readonly-和-shallowReadonly" class="headerlink" title="readonly 和 shallowReadonly"></a>readonly 和 shallowReadonly</h3><h4 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h4><p><code>readonly</code> 用于创建一个深层次的只读响应式代理对象。这意味着无论是对象的属性还是嵌套对象内部的属性，都是只读的，不能被修改。它适用于那些需要完全保持不可变性的数据结构。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; reactive, readonly &#125; from &#x27;vue&#x27;;  </span><br><span class="line"></span><br><span class="line">const original = reactive(&#123;  </span><br><span class="line">  nested: &#123;  </span><br><span class="line">    count: 0  </span><br><span class="line">  &#125;,  </span><br><span class="line">  message: &#x27;Hello!&#x27;  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line">const readOnlyProxy = readonly(original);  </span><br><span class="line"></span><br><span class="line">// 试图修改只读代理会报错  </span><br><span class="line">readOnlyProxy.message = &#x27;Hi!&#x27;; // Error: Cannot assign to read only property &#x27;message&#x27; of object &#x27;#&lt;Object&gt;&#x27;  </span><br><span class="line"></span><br><span class="line">// 对象的深层次属性也是只读的  </span><br><span class="line">readOnlyProxy.nested.count++; // Error: Cannot assign to read only property &#x27;count&#x27; of object &#x27;#&lt;Object&gt;&#x27;</span><br><span class="line">    </span><br><span class="line">// 修改original时,readOnlyProxy也会跟着改变</span><br><span class="line">origina.message = &#x27;Hi!&#x27;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="shallowReadonly"><a href="#shallowReadonly" class="headerlink" title="shallowReadonly"></a>shallowReadonly</h4><p><code>shallowReadonly</code> 与 <code>readonly</code> 类似，但是它只创建对象的浅层次只读响应式代理。这意味着只有对象的第一层属性是只读的，而不会递归地将内部的嵌套对象和数组转换为只读代理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; shallowReactive, shallowReadonly &#125; from &#x27;vue&#x27;;  </span><br><span class="line"></span><br><span class="line">const original = shallowReactive(&#123;  </span><br><span class="line">  nested: &#123;  </span><br><span class="line">    count: 0  </span><br><span class="line">  &#125;,  </span><br><span class="line">  message: &#x27;Hello!&#x27;  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line">const shallowReadOnlyProxy = shallowReadonly(original);  </span><br><span class="line"></span><br><span class="line">// 浅层次只读响应式代理，不可以修改第一层属性  </span><br><span class="line">shallowReadOnlyProxy.message = &#x27;Hi!&#x27;; // Error: Cannot assign to read only property &#x27;message&#x27; of object &#x27;#&lt;Object&gt;&#x27;  </span><br><span class="line"></span><br><span class="line">// 但是对象的内部嵌套属性可以被修改  </span><br><span class="line">shallowReadOnlyProxy.nested.count++; // Allowed</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="区别和适用场景"><a href="#区别和适用场景" class="headerlink" title="区别和适用场景"></a>区别和适用场景</h4><ul><li><strong>readonly</strong> 适合需要完全不可变性的数据结构，无论是对象的属性还是嵌套对象内部的属性，都是只读的。</li><li><strong>shallowReadonly</strong> 则适合于只需要对象的第一层属性具有只读特性的场景。内部的嵌套对象和数组仍然可以被修改，这可以提供更灵活的数据管理。</li></ul><h3 id="toRaw-和-markRaw"><a href="#toRaw-和-markRaw" class="headerlink" title="toRaw 和 markRaw"></a>toRaw 和 markRaw</h3><h4 id="toRaw"><a href="#toRaw" class="headerlink" title="toRaw"></a>toRaw</h4><p><code>toRaw</code> 函数用于获取一个响应式对象的原始未代理的对象。在 Vue 3 中，通过 <code>reactive</code>、<code>readonly</code>、<code>shallowReactive</code>、<code>shallowReadonly</code> 等函数创建的对象都会被 Vue 3 的响应式系统代理。使用 <code>toRaw</code> 可以获取到这些对象的原始版本，即未被 Vue 代理的普通 JavaScript 对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; reactive, toRaw &#125; from &#x27;vue&#x27;;  </span><br><span class="line"></span><br><span class="line">const original = &#123; count: 0 &#125;;  </span><br><span class="line">const state = reactive(original);  </span><br><span class="line"></span><br><span class="line">console.log(state.count); // 输出: 0  </span><br><span class="line"></span><br><span class="line">const rawObject = toRaw(state);  </span><br><span class="line"></span><br><span class="line">console.log(rawObject === original); // 输出: true，原始对象和 toRaw 返回的对象是同一个引用</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="markRaw"><a href="#markRaw" class="headerlink" title="markRaw"></a>markRaw</h4><p><code>markRaw</code> 函数用于标记一个对象，使其在不会自动变成响应式的对象。通常情况下，Vue 会自动将传入组件的数据对象转换为响应式对象，但有时我们希望某些对象保持不变，以避免不必要的响应式追踪和性能开销。这时可以使用 <code>markRaw</code> 来标记这些对象，确保它们不会被 Vue 自动转换为响应式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; reactive, markRaw &#125; from &#x27;vue&#x27;;  </span><br><span class="line"></span><br><span class="line">const original = &#123; count: 0 &#125;;  </span><br><span class="line">const state = reactive(&#123;  </span><br><span class="line">  normal: markRaw(original),  </span><br><span class="line">  reactive: original  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line">console.log(state.normal.count); // 输出: 0，normal 对象被标记为非响应式  </span><br><span class="line">console.log(state.reactive.count); // 输出: 0，reactive 对象是响应式的  </span><br><span class="line"></span><br><span class="line">state.normal.count++; // Error: Cannot assign to read only property &#x27;count&#x27; of object &#x27;#&lt;Object&gt;&#x27;  </span><br><span class="line">state.reactive.count++; // 响应式更新，count 值加一</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="区别和适用场景-1"><a href="#区别和适用场景-1" class="headerlink" title="区别和适用场景"></a>区别和适用场景</h4><ul><li><strong>toRaw</strong> 用于获取已经被 Vue 代理的响应式对象的原始版本，便于在需要时操作原始的非代理对象。</li><li><strong>markRaw</strong> 用于标记一个对象，防止它被 Vue 自动转换为响应式对象。这在一些特定情况下非常有用，比如某些对象本身就不需要响应式特性，或者为了优化性能而避免不必要的响应式追踪。</li></ul><h3 id="customRef-自定义ref"><a href="#customRef-自定义ref" class="headerlink" title="customRef - 自定义ref"></a>customRef - 自定义ref</h3><p><code>customRef</code> 是一个函数，用于创建一个自定义的 ref。在 Vue 中，ref 是用于包装基本数据类型的响应式引用。通常，ref 可以包装原始值，使其具有响应式特性。而 <code>customRef</code> 则允许开发者定义一个自己的 ref，可以控制其读取和写入时的行为。</p><h4 id="使用场景和示例"><a href="#使用场景和示例" class="headerlink" title="使用场景和示例"></a>使用场景和示例</h4><p><code>customRef</code> 可以用于一些高级的响应式数据操作，比如延迟计算、自定义依赖追踪等。下面是一个简单的示例，展示了如何使用 <code>customRef</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; customRef &#125; from &#x27;vue&#x27;;  </span><br><span class="line">// 自定义useCustomRef 响应式数据</span><br><span class="line">function useCustomRef(initialValue) &#123;  </span><br><span class="line">  let value = initialValue;  </span><br><span class="line">  return customRef((track, trigger) =&gt; (&#123;  </span><br><span class="line">    get() &#123;  </span><br><span class="line">      track(); // 追踪依赖数据，一旦变化进行更新</span><br><span class="line">      return value;  </span><br><span class="line">    &#125;,  </span><br><span class="line">    set(newValue) &#123;  </span><br><span class="line">      value = newValue;  </span><br><span class="line">      trigger(); // 触发更新</span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;));  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">// 使用自定义 ref  </span><br><span class="line">const customRefValue = useCustomRef(0);  </span><br><span class="line"></span><br><span class="line">console.log(customRefValue.value); // 输出: 0  </span><br><span class="line"></span><br><span class="line">customRefValue.value = 10; // 触发更新  </span><br><span class="line"></span><br><span class="line">console.log(customRefValue.value); // 输出: 10</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="参数和回调函数"><a href="#参数和回调函数" class="headerlink" title="参数和回调函数"></a>参数和回调函数</h4><p><code>customRef</code> 接受一个工厂函数作为参数，这个工厂函数会在创建 ref 时调用，并且它接受 <code>track</code> 和 <code>trigger</code> 两个函数作为参数：</p><ul><li><strong>track</strong>: 这个函数被调用时，表示依赖于这个 ref 的数据被访问了，Vue 会追踪这些依赖。</li><li><strong>trigger</strong>: 这个函数被调用时，表示 ref 的值发生了变化，需要触发相关的更新。</li></ul><p>工厂函数应该返回一个对象，该对象有 <code>get</code> 和 <code>set</code> 方法：</p><ul><li><strong>get</strong>: 当 ref 被读取时调用，用于获取当前值，并且应该调用 <code>track</code> 函数来追踪依赖。</li><li><strong>set</strong>: 当 ref 被写入时调用，用于设置新值，并且应该调用 <code>trigger</code> 函数来触发更新。</li></ul><h4 id="自定义-ref-的应用"><a href="#自定义-ref-的应用" class="headerlink" title="自定义 ref 的应用"></a>自定义 ref 的应用</h4><p>自定义 ref 可以用于处理一些复杂的响应式数据场景，例如：</p><ul><li><strong>延迟初始化</strong>：可以在 <code>get</code> 方法中进行懒加载，只有在真正访问时才初始化数据。</li><li><strong>自定义依赖追踪</strong>：可以根据需要手动管理依赖追踪的精度，优化性能。</li><li><strong>特殊数据处理</strong>：处理一些不符合 Vue 响应式规则的数据结构。</li></ul><h3 id="Teleport-DOM传送"><a href="#Teleport-DOM传送" class="headerlink" title="Teleport - DOM传送"></a>Teleport - DOM传送</h3><p><code>Teleport</code> 是一个非常有用的特性，用于将组件的内容在 DOM 中的任意位置进行传送（即传送到另一个位置），而不需要重新渲染整个组件。这在处理如模态框、弹出菜单等需要在 DOM 中移动位置的情况下非常实用。</p><p>用 Teleport 需要使用 <code>&lt;Teleport&gt;</code> 组件，并且需要设置 <code>to</code> 属性来指定目标挂载点。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;  </span><br><span class="line">&lt;!--</span><br><span class="line">&lt;Teleport&gt; 将包裹的内容（这里是一个模态框）传送到 #modal-root 所指定的目标挂载点。这样做的好处是，即使 &lt;Teleport&gt; 所在的组件重新渲染，模态框的内容仍然可以在 DOM 中保持在 #modal-root 处，而不需要重新创建或销毁模态框的内容，从而提高了性能和用户体验。</span><br><span class="line">--&gt;</span><br><span class="line">  &lt;Teleport to=&quot;#modal-root&quot;&gt;  </span><br><span class="line">    &lt;div class=&quot;modal&quot;&gt;  </span><br><span class="line">      &lt;h2&gt;Modal Content&lt;/h2&gt;  </span><br><span class="line">      &lt;button @click=&quot;closeModal&quot;&gt;Close Modal&lt;/button&gt;  </span><br><span class="line">    &lt;/div&gt;  </span><br><span class="line">  &lt;/Teleport&gt;  </span><br><span class="line">&lt;/template&gt;  </span><br><span class="line"></span><br><span class="line">&lt;script&gt;  </span><br><span class="line">import &#123; Teleport &#125; from &#x27;vue&#x27;;  </span><br><span class="line"></span><br><span class="line">const closeModal = ()=&gt;&#123;  </span><br><span class="line">      // 关闭模态框的逻辑  </span><br><span class="line">&#125; </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="Teleport-的使用场景"><a href="#Teleport-的使用场景" class="headerlink" title="Teleport 的使用场景"></a>Teleport 的使用场景</h4><p>Teleport 在以下情况下特别有用：</p><ul><li><strong>模态框和弹出框</strong>：将模态框的内容传送到 <code>&lt;body&gt;</code> 中或其他顶层节点，确保不受组件树结构影响。</li><li><strong>菜单和下拉列表</strong>：在使用动态位置或需要显示在特定位置的情况下，可以使用 Teleport 将其传送到需要的位置。</li><li><strong>移动端应用</strong>：在移动端开发中，处理全屏或浮动组件的布局更加灵活方便。</li></ul><h4 id="Teleport-的注意事项"><a href="#Teleport-的注意事项" class="headerlink" title="Teleport 的注意事项"></a>Teleport 的注意事项</h4><ul><li><strong>目标挂载点</strong>：确保目标挂载点存在于 DOM 中，否则 Teleport 将无法正常工作。</li><li><strong>性能优化</strong>：Teleport 可以避免大量 DOM 操作和重新渲染，但仍然需要谨慎使用以避免过度复杂的 DOM 结构。</li></ul><h3 id="Suspense-异步组件"><a href="#Suspense-异步组件" class="headerlink" title="Suspense - 异步组件"></a>Suspense - 异步组件</h3><p>用于优化异步组件加载时的用户体验。它允许我们在等待异步组件加载时展示备用内容（例如加载指示器或占位符），从而提高页面的交互感和视觉效果。</p><p>通常情况下，异步组件加载需要一定时间，为了优化用户体验，可以使用 <code>Suspense</code> 组件来处理加载过程中的状态。下面是一个简单的示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;  </span><br><span class="line">  &lt;Suspense&gt;  </span><br><span class="line">    &lt;template #default&gt;  </span><br><span class="line">      &lt;AsyncComponent /&gt;  </span><br><span class="line">    &lt;/template&gt;  </span><br><span class="line">    &lt;template #fallback&gt;  </span><br><span class="line">      &lt;div&gt;Loading...&lt;/div&gt;  </span><br><span class="line">    &lt;/template&gt;  </span><br><span class="line">  &lt;/Suspense&gt;  </span><br><span class="line">&lt;/template&gt;  </span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;  </span><br><span class="line">import &#123; Suspense, defineAsyncComponent &#125; from &#x27;vue&#x27;;  </span><br><span class="line"></span><br><span class="line">const AsyncComponent = defineAsyncComponent(() =&gt;  </span><br><span class="line">  import(&#x27;./AsyncComponent.vue&#x27;)  </span><br><span class="line">);  </span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">&lt;Suspense&gt; 组件包裹了一个异步组件 &lt;AsyncComponent&gt;。</span><br><span class="line">#default 插槽用于展示异步组件加载完成后的内容。</span><br><span class="line">#fallback 插槽用于展示在加载过程中的备用内容，例如显示 &quot;Loading...&quot; 的文本或加载动画。</span><br><span class="line">*/</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="主要用途"><a href="#主要用途" class="headerlink" title="主要用途"></a>主要用途</h4><p><code>Suspense</code> 的主要用途包括：</p><ul><li><strong>优化异步组件加载</strong>：在等待异步组件加载时，显示加载状态或占位符，提高用户体验。</li><li><strong>数据获取和处理</strong>：可以与 <code>fetch</code> 或其他异步数据获取逻辑一起使用，显示数据加载状态。</li></ul><h4 id="额外注意事项"><a href="#额外注意事项" class="headerlink" title="额外注意事项"></a>额外注意事项</h4><ul><li><strong>多个 Suspense 嵌套</strong>：可以在组件中嵌套使用多个 <code>Suspense</code>，以处理不同部分的异步加载状态。</li><li><strong>自定义加载指示器</strong>：可以根据具体需求自定义加载状态的显示内容和样式。</li><li><strong>错误处理</strong>：可以使用 <code>errorCaptured</code> 生命周期钩子来捕获异步加载过程中可能出现的错误，以便提供用户友好的错误处理。</li></ul><h4 id="性能考虑"><a href="#性能考虑" class="headerlink" title="性能考虑"></a>性能考虑</h4><p>使用 <code>Suspense</code> 可以显著减少不必要的渲染和用户界面闪烁，特别是在处理复杂的页面或需要大量异步加载的情况下。它利用了 Vue 3 中新的渲染机制，有效地管理组件的加载状态，从而提高了页面的整体性能和用户体验。</p><h3 id="全局属性添加"><a href="#全局属性添加" class="headerlink" title="全局属性添加"></a>全局属性添加</h3><h4 id="在-Vue-2-中添加全局属性"><a href="#在-Vue-2-中添加全局属性" class="headerlink" title="在 Vue 2 中添加全局属性"></a>在 Vue 2 中添加全局属性</h4><blockquote><p>在Vue 2中，全局属性包括全局组件、全局指令、全局混入以及全局方法或属性。这些全局属性通过Vue的构造函数和其原型链来实现全局的注册和访问。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在 Vue 2 中，创建一个 Vue 应用或组件的实例通常是通过 Vue 构造函数进行的</span></span><br><span class="line"><span class="comment">Vue 2 中使用全局的 Vue 构造函数来管理应用实例。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;  </span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;  </span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>) </span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局注册一个组件，可以在任何Vue组件的模板中使用  </span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;global-component&#x27;</span>, &#123;  </span><br><span class="line">  <span class="comment">// 组件的选项  </span></span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局注册一个指令，可以在任何Vue组件的模板中使用  </span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;global-directive&#x27;</span>, &#123;  </span><br><span class="line">  <span class="comment">// 指令的定义  </span></span><br><span class="line">&#125;);  </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">当我们调用 Vue.component(&#x27;name&#x27;, &#123;&#125;) 或 Vue.directive(&#x27;name&#x27;, &#123;&#125;) 创建全局组件和自定义指令时，实际上是将组件或指令的定义注册到 Vue.options.components 或 Vue.options.directives 中。</span></span><br><span class="line"><span class="comment">Vue内部会将组件的定义对象存储在 Vue.options.components 或 Vue.options.directives 中。这个 components和directives 属性是一个对象，用于存放所有已注册的全局组件。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局注册一个混入对象，影响所有Vue组件  </span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;  </span><br><span class="line">  <span class="comment">// 混入对象的选项  </span></span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一个全局方法或属性 ;全局方法可以在所有组件内部通过 this.$globalMethod() 进行调用</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$globalMethod</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;  </span><br><span class="line">  <span class="comment">// 方法的实现  </span></span><br><span class="line">&#125;;  </span><br></pre></td></tr></table></figure><h4 id="在-Vue-3-中添加全局属性"><a href="#在-Vue-3-中添加全局属性" class="headerlink" title="在 Vue 3 中添加全局属性"></a>在 Vue 3 中添加全局属性</h4><blockquote><p>Vue 3在全局属性的处理上与Vue 2有所不同，主要是为了更好地支持现代的ES模块化和Tree-shaking优化。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Vue 3 中则通过 createApp() 返回的应用实例对象来管理，这个对象是对整个应用的抽象,包含了应用的配置和方法，可以通过链式调用进行配置和扩展。</span></span><br><span class="line"><span class="comment">这种方式使得注册的组件和指令只在使用到它们的地方被打包，有利于减小项目的打包体积。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;  </span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册全局组件  </span></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;global-component&#x27;</span>, &#123;  </span><br><span class="line">  <span class="comment">// 组件的选项  </span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用 app.component(&#x27;name&#x27;, &#123;&#125;) 方法将组件注册到应用实例上。这种注册方式不再直接操作 Vue 的构造函数，而是通过 createApp 返回的应用实例进行。</span></span><br><span class="line"><span class="comment">在内部，Vue 3 会将组件选项对象存储在应用实例的注册表中，用于后续的组件渲染和实例化。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册全局指令  </span></span><br><span class="line">app.<span class="title function_">directive</span>(<span class="string">&#x27;global-directive&#x27;</span>, &#123;  </span><br><span class="line">  <span class="comment">// 指令的定义  </span></span><br><span class="line">&#125;);  </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用 app.directive(&#x27;name&#x27;, &#123;&#125;) 方法将指令注册到应用实例上。</span></span><br><span class="line"><span class="comment">内部会将指令定义对象存储在应用实例的注册表中，以便在模板中使用全局指令。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册全局混入  </span></span><br><span class="line">app.<span class="title function_">mixin</span>(&#123;  </span><br><span class="line">  <span class="comment">// 混入对象的选项  </span></span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加全局方法或属性  </span></span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$globalMethod</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;  </span><br><span class="line">  <span class="comment">// 方法的实现  </span></span><br><span class="line">&#125;;  </span><br><span class="line"></span><br><span class="line">app.<span class="title function_">provide</span>(<span class="string">&#x27;myStore&#x27;</span>, <span class="title function_">createStore</span>()); <span class="comment">// 使用 provide/inject 提供全局状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将应用实例挂载到DOM元素上  </span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);  </span><br></pre></td></tr></table></figure><h4 id="主要区别和注意事项"><a href="#主要区别和注意事项" class="headerlink" title="主要区别和注意事项"></a>主要区别和注意事项</h4><ol><li><strong>全局属性的注册方式</strong>：<ul><li>Vue 2 中直接通过 Vue 对象来注册全局属性。</li><li>Vue 3 中通过应用实例 <code>app</code> 的方法来注册全局属性。</li></ul></li><li><strong>全局方法或属性的挂载</strong>：<ul><li>Vue 2 中通过 <code>Vue.prototype</code> 来挂载全局方法或属性。</li><li>Vue 3 中通过 <code>app.config.globalProperties</code> 来挂载全局方法或属性。</li></ul></li><li><strong>组件、指令和混入的注册方式</strong>：<ul><li>在Vue 2和Vue 3中，全局组件、指令和混入的注册方式基本类似，但在Vue 3中更加推荐使用应用实例 <code>app</code> 的方法进行注册，以符合新的组合式API和更好的模块化特性。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
          <category> Vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2</title>
      <link href="/2022/12/07/vue2/"/>
      <url>/2022/12/07/vue2/</url>
      
        <content type="html"><![CDATA[<h3 id="Vue2"><a href="#Vue2" class="headerlink" title="Vue2"></a>Vue2</h3><h4 id="脚手架安装和使用-VueCli"><a href="#脚手架安装和使用-VueCli" class="headerlink" title="脚手架安装和使用 - VueCli"></a>脚手架安装和使用 - VueCli</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/vli</span><br><span class="line"><span class="comment"># or </span></span><br><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></table></figure><h4 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vue create &lt;my-project&gt;</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">vue ui</span><br></pre></td></tr></table></figure><h4 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h4><p><img src="/2022/12/07/vue2/%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%841.png"></p><p><img src="/2022/12/07/vue2/%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%841.png"></p><p><img src="/2022/12/07/vue2/%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%842.png"></p><p><img src="/2022/12/07/vue2/%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%843.png"></p><h4 id="vue-MVVM架构模式"><a href="#vue-MVVM架构模式" class="headerlink" title="vue MVVM架构模式"></a>vue MVVM架构模式</h4><ul><li>M ： model  数据模型  模型代表应用程序的数据层。在 Vue 中，模型通常是通过 Vue 实例的数据属性（data）来表示。</li><li>V： view   视图   视图是用户界面的结构和外观。在 Vue 中，视图是由模板（template）编写的</li><li>VM： viewModel    视图模型     视图模型是连接视图和模型的桥梁，负责处理视图的逻辑和状态。在 Vue 中，视图模型主要由 Vue 实例的选项和方法组成，包括计算属性、监听属性变化、方法等。</li></ul><p>​在 Vue 中，数据流动的方向是单向的</p><ul><li><strong>视图 -&gt; 模型</strong>：用户通过视图操作，例如输入框输入文字，会更新模型中的数据。</li><li><strong>模型 -&gt; 视图</strong>：模型中的数据变化会自动更新到视图中，实现了响应式的视图更新。</li></ul><p>​Vue 的 MVVM 架构模式使得前端开发者可以更加高效地管理和维护应用程序的状态和逻辑，同时提升了代码的可读性和可维护性。</p><h4 id="vue-config-js-配置"><a href="#vue-config-js-配置" class="headerlink" title="vue.config.js 配置"></a>vue.config.js 配置</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;defineConfig&#125; = <span class="built_in">require</span>(<span class="string">&#x27;@vue/cli-service&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    <span class="attr">transpileDependencies</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">lineOnSave</span>: <span class="literal">false</span>, <span class="comment">// 关闭ESlint校验</span></span><br><span class="line">    <span class="comment">// 打包的静态资源路径加上 /dist/ 作为根目录</span></span><br><span class="line">    <span class="attr">publicPath</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;/dist/&#x27;</span> : <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="comment">// 配置开发服务器</span></span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">// 自动打开浏览器</span></span><br><span class="line">        <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">        <span class="attr">port</span>: <span class="number">3000</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="vue-组件-的-scoped和template-标签"><a href="#vue-组件-的-scoped和template-标签" class="headerlink" title="vue 组件 &lt;style&gt;的 scoped和template 标签"></a>vue 组件 <code>&lt;style&gt;</code>的 scoped和template 标签</h4><p>​在vue单文件里面可以给样式添加scoped，可以将选择器<img src="/2022/12/07/vue2/scoped%E6%A0%87%E7%AD%BE.png">变成属性选择器，解决css样式冲突问题，保证唯一性。</p><p>​vue2 <code>&lt;template&gt; </code>标签只能允许存在一个根节点</p><h4 id="vue-插值表达式"><a href="#vue-插值表达式" class="headerlink" title="vue 插值表达式"></a>vue 插值表达式</h4><ul><li><code>&#123;&#123; number + 1 &#125;&#125;</code></li><li><code>&#123;&#123; number > 10 ? '数值大于10' : '数值小于10' &#125;&#125;</code></li></ul><p>​使用双花括号，这些表达式会在所属的vue实例的数据作用下作为javascript被解析</p><h4 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h4><ul><li><p>v-bind       简写为 :</p><p>v-bing 可以灵活的给标签属性通过vue变量去定义，可以动态地绑定多个 attribute</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;img v-bing:src=&quot;imgSrc&quot;&gt;</span><br><span class="line">&lt;img :src=&quot;imgSrc&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">        name: &#x27;App&#x27;,</span><br><span class="line">        data()&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                imgSrc: require(&#x27;../images/logo.png&#x27;),</span><br><span class="line">                /*</span><br><span class="line">                !!! 在require使用变量赋值图片时需要注意事项</span><br><span class="line">                当直接在src属性使用路径，webpack会将小图片处理成base64格式，以减少http请求</span><br><span class="line">                当使用变量赋值时，会导致图片存放在public，并不是base64格式，导致图片渲染失败，可以使用require语法可以避免</span><br><span class="line">                如果大图片webpack打包就不会经过base64编码，会打包编码成后缀名带8位哈希值的图片路径，放在img/根目录下</span><br><span class="line">                如果不用require，则根目录是在public/ 静态资源下</span><br><span class="line">                */</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;!-- 缩写 --&gt;</span><br><span class="line">&lt;img :src=&quot;imageSrc&quot;&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!-- 动态attribute 名缩写 --&gt;</span><br><span class="line">&lt;img :[key]=&quot;imageSrc&quot;&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!-- 字符串拼接 --&gt;</span><br><span class="line">&lt;img :src=&quot;&#x27;/path/image&#x27;+fileName&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- class绑定 --&gt;</span><br><span class="line">    &lt;img :class=&quot;&#123;classA: isA &#125;&quot;&gt;</span><br><span class="line">    &lt;img :class=&quot;[classA, classB]&quot;&gt;</span><br><span class="line">&lt;img :class=&quot;[classA, &#123;classB: isB, classC: isC&#125;]&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- style绑定 --&gt;</span><br><span class="line">&lt;img :style=&quot;&#123;color: red, fontSize: size + &#x27;px&#x27;&#125;&quot;&gt;</span><br><span class="line">&lt;img :style=&quot;[styleA， styleB]&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li><p>v-on   简写 @</p><ul><li><p>点击事件    @click</p><ul><li>参数event</li><li>修饰符<ul><li>.stop     调用 event.stopPropagation()      阻止事件冒泡</li><li>.prevent     调用event.preventDefault()     阻止事件默认行为</li><li>.capture      添加事件侦听器时使用capture模式</li><li>.self        只当事件是从侦听器绑定的元素本身触发时才触发回调</li><li>.{keyCode| keyAlias}    只当事件是从特定键触发时才触发回调</li><li>.native   监听组件根元素的原生事件</li><li>.once     只触发一次回调</li><li>.left        (2.2.0) 只点击鼠标左键时触发</li><li>.right      (2.2.0) 只点击鼠标右键时触发</li><li>.middle     (2.2.0) 只点击鼠标中键时触发</li><li>.passive    (2.3.0) 以 {passive: true} 模式添加侦听器</li></ul></li></ul></li><li><p>鼠标事件     @</p></li><li><p>键盘事件    @keyup</p><ul><li>.enter</li><li>.tab</li><li>.delete    ( 删除和退格)</li><li>.esc</li><li>.space</li><li>.up</li><li>.down</li><li>.left</li><li>right</li></ul></li><li><p>页面滚动</p></li><li><p>动态事件绑定    (2.6.0+)</p><ul><li><p>v-on:[event] &#x3D; “fn”</p><p>通过vue变量event ，绑定事件；可以通过切换event，从而切换不同事件类型</p></li></ul></li></ul></li><li><p>v-model       双向数据绑定</p><ul><li>修饰符<ul><li>.lazy     v-model 是在每次input 事件触发后将值与数据进行同步，lazy则是在change事件之后进行同步(失焦)</li><li>.unmber      将用户输入的值转为数值类型</li><li>.trim           过滤首尾空白字符串</li></ul></li></ul></li><li><p>v-show    元素显示隐藏</p></li><li><p>v-text </p></li><li><p>v-html</p></li><li><p>v-if  &amp; v-else &amp; v-else-if</p></li><li><p>v-for     建议绑定的key为数据的id而不是数组下标index，数组下标为key会导致插入新数据，数据对不上的问题；原理：就地更新-默认原地址修改元素内容而不是移动它们，</p></li></ul><h4 id="数组的更新检测"><a href="#数组的更新检测" class="headerlink" title="数组的更新检测"></a>数组的更新检测</h4><ul><li><p>变更方法   -  会改变原数组  ( 会触发页面更新)</p><ul><li>push()</li><li>pop()</li><li>shift()</li><li>unshift()</li><li>splice()</li><li>sort()</li><li>reverse()</li></ul></li><li><p>非变更方法   -  不会改变原数组,返回新数组 ( 不会触发页面更新)</p><ul><li><p>filter()</p></li><li><p>concat()</p></li><li><p>slice()</p></li><li><p>修改数组数据  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">update</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 解决方法使用this.$set()</span></span><br><span class="line">    <span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">list</span>, <span class="number">0</span>, <span class="string">&#x27;新数据&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><p>​可用于一些常见的文本格式化</p><ul><li><p>双花括号形式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; message | filterFn &#125;</span><br></pre></td></tr></table></figure></li><li><p>在v-bind中绑定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-bind:id=&quot;message | filterFn&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>定义过滤器</p><ul><li>vue单文件组件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export defalut &#123;</span><br><span class="line">        name: &#x27;filterModel&#x27;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        filters: &#123;</span><br><span class="line">            filterFn: function(value)&#123;</span><br><span class="line">                if(!value) return &#x27;&#x27;;</span><br><span class="line">                value = value,toString();</span><br><span class="line">                return value.charAt(0).tiUpperCase()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>全局中定义</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTop</span> = <span class="literal">false</span></span><br><span class="line"><span class="comment">// 定义全局过滤器</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">filter</span>( <span class="string">&#x27;filterFn&#x27;</span>, <span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!value) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    value = value,<span class="title function_">toString</span>();</span><br><span class="line">    <span class="keyword">return</span> value.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">tiUpperCase</span>()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 初始化Vue实例</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="comment">// 在id为app的div盒子上渲染App.vue组件</span></span><br><span class="line">    <span class="attr">render</span>:<span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">    </span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>) <span class="comment">// 挂载容器，将vue实例插入到id为app的div盒子</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h4><p>​一个数据需要依赖另外一些数据计算得到的结果;</p><ul><li><p>定义计算属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &#123;&#123; reversedMessage &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export defalut &#123;</span><br><span class="line">        name: &#x27;filterModel&#x27;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                message: &quot;Hello&quot;,</span><br><span class="line">                mes: &quot;word&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line">            reversedMessage: function ()&#123;</span><br><span class="line">                return this.message + &#x27; &#x27; + this.mes</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>计算属性 &amp; 方法</p><p>计算属性是有缓存的；基于它们的响应式依赖进行缓存</p></li><li><p>计算属性细节</p><p>计算属性默认只有getter， 不过在需要时也可以提供setter</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &#123;&#123; reversedMessage &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export defalut &#123;</span><br><span class="line">        name: &#x27;filterModel&#x27;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                message: &quot;Hello&quot;,</span><br><span class="line">                mes: &quot;word&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line">            reversedMessage: &#123;</span><br><span class="line">                get: function()&#123;</span><br><span class="line">                    return this.message + &#x27; &#x27; + this.mes</span><br><span class="line">                &#125;</span><br><span class="line">                set: function(value)&#123;</span><br><span class="line">                    let _names = value.split(&#x27; &#x27;)</span><br><span class="line">                    this.mes = _names[names.length - 1]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h4><p>​vue通过watch来响应数据变化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &#123;&#123; reversedMessage &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export defalut &#123;</span><br><span class="line">        name: &#x27;filterModel&#x27;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                user:&#123;</span><br><span class="line">                    name:&#x27;&#x27;,</span><br><span class="line">                    age: &#x27;&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        watch: &#123;</span><br><span class="line">            uesr: &#123;</span><br><span class="line">                handler (newVal, oldVal)&#123;</span><br><span class="line">                    console.log(newVal, oldVal)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            // 引用类型需要开启深度监听    </span><br><span class="line">            deep:true,</span><br><span class="line">            // 立刻监听，初始化也会被获取到</span><br><span class="line">            immediate: true</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h4><p>​一个页面可以拆分成多个组件组成一个完整页面，将组件封装可以实现组件的复用，代码冗余问题，易维护</p><ul><li><p>组件&amp; 模块化；</p><ul><li><p>模块化</p><p>模块化封装的是js功能</p></li><li><p>组件</p><p>组件除了js功能外还含有页面结构，样式，交互</p></li></ul></li><li><p>组件使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// son.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &#123;&#123;Son组件&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"> export default &#123;</span><br><span class="line">     name : &#x27;Son&#x27;，</span><br><span class="line">     data() &#123;</span><br><span class="line">     return</span><br><span class="line"> &#125;,</span><br><span class="line"> &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// parent.vue</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &#123;&#123;parent&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;Son&gt;&lt;/Son&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 引入组件</span><br><span class="line">    import Son from &#x27;./Son.vue&#x27;</span><br><span class="line">    </span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &#x27;Parent&#x27;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        // 组件使用</span><br><span class="line">        components:&#123;</span><br><span class="line">            // Son : Son 简写</span><br><span class="line">            Son</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>全局注册组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Son</span> <span class="keyword">from</span> <span class="string">&#x27;./Son.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">Config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局注册组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;Son&#x27;</span>, <span class="title class_">Son</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span>=&gt;</span><span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="props-传值-单向数据流"><a href="#props-传值-单向数据流" class="headerlink" title="props 传值 ( 单向数据流)"></a>props 传值 ( 单向数据流)</h4><p>​props可以将数据从父组件传递给子组件</p><p>​在子组件，props的数据是只读的不能修改的；如果要修改可以使用emit 通知父组件去修改，或者用计算属性来中转</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// parent.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;Son :title=&quot;Son title&quot; :showActive=&quot;false&quot;&gt;&lt;/Son&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Son from &#x27;./Son.vue&#x27;</span><br><span class="line">    </span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;parent&#x27;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Son,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// Son.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div v-show=&#x27;showActive&#x27;&gt;</span><br><span class="line">        &#123;&#123;title&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;Son&#x27;,</span><br><span class="line">    // 子组件通过props接收</span><br><span class="line">    props: [&#x27;title&#x27;, &#x27;showActive&#x27;]</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>props 定义 默认值，数据类型，是否一定要传该属性</p><p><img src="/2022/12/07/vue2/porp%E4%BC%A0%E5%80%BC%E5%B1%9E%E6%80%A7.png"></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// Son.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div v-show=&#x27;showActive&#x27;&gt;</span><br><span class="line">        &#123;&#123;title&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;Son&#x27;,</span><br><span class="line">    // 子组件接受props可以使用对象的形式</span><br><span class="line">    // props: [&#x27;title&#x27;, &#x27;showActive&#x27;]</span><br><span class="line">    props: &#123;</span><br><span class="line">        title:&#123;</span><br><span class="line">            type: String,</span><br><span class="line">            defalut: &#x27;首页&#x27;,</span><br><span class="line">            required: true</span><br><span class="line">        &#125;，</span><br><span class="line">        showActive: &#123;</span><br><span class="line">            type: Boolean,</span><br><span class="line">            defalut: false,</span><br><span class="line">            required: false</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="emit"><a href="#emit" class="headerlink" title="$emit()"></a>$emit()</h4><p>​在子组件中触发自定义事件，将参数回传给父组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// parent.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&#123;&#123; number &#125;&#125;</span><br><span class="line">&lt;Son @handelEmit=&#x27;emitFn(value)&#x27;&gt;&lt;/Son&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Son from &#x27;./Son.vue&#x27;</span><br><span class="line">    </span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;parent&#x27;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            number: 1000</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Son,</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        emitFn(value)&#123;</span><br><span class="line">            this.number -= value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// Son.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;button @click=&quot;changeNumber&quot;&gt;</span><br><span class="line">        -100</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;Son&#x27;,</span><br><span class="line">    // 子组件通过props接收</span><br><span class="line">    props: [&#x27;title&#x27;, &#x27;showActive&#x27;]</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        // 点击子组件button触发事件</span><br><span class="line">        changeNumber()&#123;</span><br><span class="line">            // 通过$emit 触发父组件事件</span><br><span class="line">            this.$emit(&#x27;changeNumber&#x27;,100)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="发布订阅者模式-on-emit"><a href="#发布订阅者模式-on-emit" class="headerlink" title="发布订阅者模式- $on $emit"></a>发布订阅者模式- $on $emit<img src="/2022/12/07/vue2/%E5%8F%91%E5%B8%83%E8%80%85%E8%AE%A2%E9%98%85%E8%80%85%E6%A8%A1%E5%BC%8F.png"></h4><ul><li>在Vue实例对象中，prototype原型对象中，存在$emit (发布者[ 触发 ]) 和 $on (订阅者[ 监听 ]) 方法 ( Vue 3弃用了$emit  和 $on 方法，引入了Composition API ，使用<code>provide</code>和<code>inject</code>来实现基于组合的发布订阅模式。)</li></ul><h4 id="eventBus-事件总线-兄弟组件通信"><a href="#eventBus-事件总线-兄弟组件通信" class="headerlink" title="eventBus 事件总线( 兄弟组件通信)"></a>eventBus 事件总线( 兄弟组件通信)</h4><p>​通过订阅发布者模式，通过同一个vue实例的$emit 和$on 就可以获取到信息；兄弟两个组件分别为两个不同的vue实例；为了保证实例的一致性。需要额外新建一个文件 eventBus 创建vue实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./EventBus/index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>; </span><br><span class="line"><span class="comment">// 导出创建的vue实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vue</span>();</span><br></pre></td></tr></table></figure><ul><li><p>全局引入 (或局部引入)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">EventBus</span> <span class="keyword">from</span> <span class="string">&#x27;./EventBus/index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 全局引入eventBus-事件总线</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$eventBus</span> = <span class="title class_">EventBus</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span>=&gt;</span><span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>brother1 组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;templage&gt;&lt;/templage&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;brother1&#x27;,</span><br><span class="line">    // 在created生命周期钩子函数中监听(订阅),监听到后执行回调</span><br><span class="line">    created()&#123;</span><br><span class="line">        this.$eventBus.$on(&#x27;send&#x27;,(value)=&gt;&#123;</span><br><span class="line">            console.log(&#x27;$on-send:&#x27;+value)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>brother2 组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;templage&gt;&lt;/templage&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;brother2&#x27;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        subFn()&#123;</span><br><span class="line">            // 触发(发布)</span><br><span class="line">            this.$eventBus.$emit(&#x27;send&#x27;,&#x27;触发事件&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="vue-生命周期"><a href="#vue-生命周期" class="headerlink" title="vue 生命周期"></a>vue 生命周期</h4><h5 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h5><ul><li>beforeCreate<ul><li>访问不到实例数据，还没有被创建出来data和methods中的数据还没有初始化</li></ul></li><li>created<ul><li>数据初始化完成，可以访问实例数据；</li><li>发起请求，或者准备数据等  — <code>created</code>是在组件实例一旦创建完成的时候立刻调用，这时候页面<code>dom</code>节点并未生成；<code>mounted</code>是在页面<code>dom</code>节点渲染完毕之后就立刻执行的;  <code>mounted</code>中的请求有可能导致页面闪动; 因为页面<code>dom</code>结构已经生成，所以放在created中更合适</li></ul></li></ul><h5 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h5><ul><li>beforeMount<ul><li>在 Vue 实例挂载开始之前被调用的生命周期钩子函数。</li><li>获取不到真实Dom；在 <code>beforeMount</code> 钩子函数中，可以访问到 Vue 实例的 <code>$el</code> 属性，它是虚拟 DOM 的根节点。此时，虚拟 DOM 已经被 Vue 编译器处理过，但尚未挂载到真实的 DOM 上</li><li>该钩子函数中执行一些需要在挂载前操作的任务，例如访问和修改虚拟 DOM 的结构</li></ul></li><li>mounted<ul><li>可以获取到真实Dom，在 <code>mounted</code> 钩子函数中，Vue 实例已经被挂载到 DOM 上，此时可以访问和操作真实的 DOM 元素。</li><li>需要依赖于已渲染的真实 DOM 元素进行操作，通常建议在 <code>mounted</code> 钩子函数中进行</li></ul></li></ul><h5 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h5><p>​不要更新钩子函数中修改数据，会触发死循环</p><ul><li>beforeUpdate<ul><li>获取的值还是旧的值 — 数据已经更新，但还没有渲染</li></ul></li><li>updated<ul><li>能够获取到更新后的值</li></ul></li></ul><h5 id="Keepalive"><a href="#Keepalive" class="headerlink" title="Keepalive"></a>Keepalive</h5><ul><li>activated</li><li>deactivated</li></ul><h5 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h5><ul><li>beforeDestroy<ul><li>实例销毁前调用，实例还完全可用</li></ul></li><li>destoryed<ul><li>实例已经被销毁，所有指令被解绑，所有事件监听器被移除，子实例也被移除</li></ul></li></ul><h5 id="组件异常捕获"><a href="#组件异常捕获" class="headerlink" title="组件异常捕获"></a>组件异常捕获</h5><ul><li>errorCaptured<ul><li>捕获后代组件的错误</li><li>钩子会接受3各参数；错误对象，发生错误的组件实例，包含错误来源信息的祖父穿；可以return 一个boolean来是否将该错误向上传递</li></ul></li></ul><h4 id="嵌套组件生命周期"><a href="#嵌套组件生命周期" class="headerlink" title="嵌套组件生命周期"></a>嵌套组件生命周期</h4><ul><li>初始化 — 创建 挂载阶段</li></ul><p>​父组件 beforeCreated  — 父组件 created — 父组件 beforeMount — 子组件beforeCreate — 子组件 created —子组件 beforeMount — 子组件 Mounted — 父组件 Mounted</p><ul><li><p>更新</p><ul><li><p>父组件更新只执行父组件的更新钩子函数</p><p>父组件 beforeUpdate  — 父组件 Updated</p></li><li><p>子组件更新只执行子组件的更新钩子函数</p><p>子组件 beforeUpdate  — 子组件 Updated</p></li></ul></li><li><p>销毁子组件</p></li></ul><p>​父组件 beforeUpdate — 子组件 beforeDestroy — 子组件 destroyed — 父组件 updated</p><h4 id="全局错误捕获-—-config-errorHandler"><a href="#全局错误捕获-—-config-errorHandler" class="headerlink" title="全局错误捕获 — config.errorHandler"></a>全局错误捕获 — config.errorHandler</h4><ul><li>使用方法与生命周期异常捕获钩子函数一致</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js </span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"><span class="comment">// 定义全局错误捕获</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">errorHandler</span> = <span class="keyword">function</span> (<span class="params">err, vm, info</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">stack</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    render h=&gt;<span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h4><ul><li>可以获取真实Dom元素; 如果是一个vue组件，则获取的是vue组件实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;templage&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;h3 ref=&#x27;h3Element&#x27;&gt;&lt;/h3&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/templage&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    mounted()&#123;</span><br><span class="line">        // 在挂载之后获取真实Dom</span><br><span class="line">        // 原生js</span><br><span class="line">        console.log(document.querySelector(&#x27;h3Element&#x27;))</span><br><span class="line">        //ref 获取</span><br><span class="line">        console.log(this.$refs.h3Element)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="nextTick-callback"><a href="#nextTick-callback" class="headerlink" title="nextTick([callback])"></a>nextTick([callback])</h4><p>​vue中更新Dom是异步的；会导致 数据更新延迟</p><p>​nextTick 可以等待Dom更新之后再执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;span ref=&#x27;spanNumber&#x27;&gt;&#123;&#123;num&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;button @click=&#x27;add&#x27;&gt;+1&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            num:1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        add()&#123;</span><br><span class="line">            this.num += 1;</span><br><span class="line">            // 打印的值总会是之前的值</span><br><span class="line">            console.log(this.$refs.spanNumber.innerHTML)</span><br><span class="line">            // 使用nextTick就可以避免这种问题</span><br><span class="line">            this.$nextTick(()=&gt;&#123;</span><br><span class="line">                console.log(this.$refs.spanNumber.innerHTML)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="内置组件Component"><a href="#内置组件Component" class="headerlink" title="内置组件Component"></a>内置组件Component</h4><p>​在 Vue 应用中实现动态组件渲染、按需加载组件、条件渲染等功能，从而使应用更加灵活和高效</p><ul><li><p>props</p><ul><li>is</li><li>inline-template</li></ul></li><li><p>用法</p><p>渲染一个元组件为动态组件。通过is，来决定渲染那个组件</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;current = &#x27;component1&#x27;&quot;&gt;切换组件1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;current = &#x27;component2&#x27;&quot;&gt;切换组件2&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">    &lt;component :is=&quot;current&quot;&gt;&lt;/component&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import component1 from &#x27;./component1.vue&#x27;</span><br><span class="line">import component2 from &#x27;./component2.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            current: &#x27;component1&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        component1,</span><br><span class="line">        component2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="keep-alive内置组件"><a href="#keep-alive内置组件" class="headerlink" title="keep-alive内置组件"></a>keep-alive内置组件</h4><p>​可以缓存组件，每次切换组件的时候不会重复创建挂载，只会出发首次的挂载生命周期，后续只会触发keep-alive的activated和deactivated的生命周期</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;current = &#x27;component1&#x27;&quot;&gt;切换组件1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;current = &#x27;component2&#x27;&quot;&gt;切换组件2&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">    &lt;keep-alive&gt;</span><br><span class="line">                &lt;component :is=&quot;current&quot;&gt;&lt;/component&gt;</span><br><span class="line">    &lt;/keep-alive&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import component1 from &#x27;./component1.vue&#x27;</span><br><span class="line">import component2 from &#x27;./component2.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            current: &#x27;component1&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        component1,</span><br><span class="line">        component2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h4><h5 id="默认插槽"><a href="#默认插槽" class="headerlink" title="默认插槽"></a>默认插槽</h5><p>​通过调用组件的方式，使用双标签写法，将包裹的元素传递给组件，组件使用<slot> 标签占位显示</slot></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// Son.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;div&gt;Son组件&lt;/div&gt;</span><br><span class="line">        &lt;!-- 不传默认显示default --&gt;</span><br><span class="line">        &lt;solt&gt;default&lt;/solt&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// parent.vue</span><br><span class="line">// Son.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;div&gt;Parent组件&lt;/div&gt;</span><br><span class="line">        &lt;Son&gt;</span><br><span class="line">    &lt;div&gt;默认插槽&lt;/div&gt;</span><br><span class="line">    &lt;/Son&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Son from &#x27;./Son.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;parent&#x27;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        Son</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h5><p>​将多个元素利用命名来分别占位到子组件的不同的<slot>标签</slot></p><p>​子组件命名使用 name属性； 父组件使用v-slot:<name>, 简写 #<name>; 传入插槽标签使用<template></template></name></name></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// Son.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;slot name=&quot;title&quot;&gt;&lt;/slot&gt;</span><br><span class="line">        &lt;div&gt;标题&lt;/div&gt;</span><br><span class="line">        &lt;div&gt;页脚&lt;/div&gt;</span><br><span class="line">        &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//parent.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;div&gt;Parent组件&lt;/div&gt;</span><br><span class="line">        &lt;Son&gt;</span><br><span class="line">    &lt;template v-slot:title&gt;标题之前&lt;/template&gt;</span><br><span class="line">&lt;template #footer&gt;页脚之后&lt;/template&gt;</span><br><span class="line">    &lt;/Son&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Son from &#x27;./Son.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;parent&#x27;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        Son</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h5><p>​让父组件使用插槽时可以访问子组件内部的数据 ， 子组件使用 :row 属性将数据暴露，row并非固定命名；父组件使用v-slot&#x3D;”scope”,接收 使用scope. 就能使用，scope并非固定命名</p><p>​#title&#x3D;”scope”  是具名插槽加作用域的写法，同一标签中不能使用多个v-slot指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// Son.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;slot name=&quot;title&quot; :row=&quot;title&quot;&gt;&lt;/slot&gt;</span><br><span class="line">        &lt;div&gt;标题&lt;/div&gt;</span><br><span class="line">        &lt;div&gt;页脚&lt;/div&gt;</span><br><span class="line">        &lt;slot name=&quot;footer&quot; :row=&quot;footer&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">    name: &#x27;Son&#x27;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            title: &quot;Son组件：title&quot;,</span><br><span class="line">            footer: &quot;Son组件：footer&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// Son.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;div&gt;Parent组件&lt;/div&gt;</span><br><span class="line">        &lt;Son&gt;</span><br><span class="line">    &lt;template #title=&quot;scope&quot;&gt;标题之前, 子组件title数据-&#123;&#123;scopt.title&#125;&#125;&lt;/template&gt;</span><br><span class="line">&lt;template #footer=&quot;scope&quot;&gt;页脚之后 子组件footer数据-&#123;&#123;scopt.footer&#125;&#125;&lt;/template&gt;</span><br><span class="line">    &lt;/Son&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Son from &#x27;./Son.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;parent&#x27;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        Son </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h4><p>​除了可以用封装组件的形式来代码复用和抽象，也可以使用自定义指令。</p><ul><li>全局指令创建</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTop</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局注册自定义指令 - v-has</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;has&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">inserted</span>(<span class="params">el</span>)&#123;</span><br><span class="line">        <span class="comment">// 逻辑操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 初始化Vue实例</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="comment">// 在id为app的div盒子上渲染App.vue组件</span></span><br><span class="line">    <span class="attr">render</span>:<span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">    </span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>) <span class="comment">// 挂载容器，将vue实例插入到id为app的div盒子</span></span><br></pre></td></tr></table></figure><ul><li>局部指令创建</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &quot;App&quot;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 局部注册自定义指令</span><br><span class="line">    directives:&#123;</span><br><span class="line">        has:&#123;</span><br><span class="line">            inserted: function(el)&#123;</span><br><span class="line">                // 逻辑操作</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>案例- 访问当前页面时，input自动聚焦 - v-focus</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-focus&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &quot;App&quot;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 局部注册自定义指令</span><br><span class="line">    directives:&#123;</span><br><span class="line">        focus:&#123;</span><br><span class="line">            inserted: function(el)&#123;</span><br><span class="line">                el.focus();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>案例 - 按钮级权限( 显示或隐藏判断) - v-has</p><p>pass</p></li></ul><h4 id="自定义指令传参"><a href="#自定义指令传参" class="headerlink" title="自定义指令传参"></a>自定义指令传参</h4><p>pass</p><h4 id="路由VueRouter-3"><a href="#路由VueRouter-3" class="headerlink" title="路由VueRouter 3"></a>路由VueRouter 3</h4><h5 id="vue-router使用"><a href="#vue-router使用" class="headerlink" title="vue-router使用"></a>vue-router使用</h5><ul><li>封装路由规则</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /router/index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-rotuer&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义路由规则</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 路由响应路径</span></span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/users/:id&#x27;</span>, </span><br><span class="line">        <span class="comment">// 命名路由</span></span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;profile&#x27;</span>, </span><br><span class="line">        <span class="comment">// 响应模板(路由懒加载)</span></span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./views/UserDetails.vue&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由实例对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    routes,</span><br><span class="line">    <span class="comment">// 路由模式</span></span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> rotuer;</span><br></pre></td></tr></table></figure><ul><li>挂载封装好的router</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&#x27;@/router/index.js&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="comment">// 在id为app的div盒子上渲染App.vue组件</span></span><br><span class="line">    <span class="attr">render</span>:<span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">    <span class="comment">// 挂载路由</span></span><br><span class="line">    <span class="title class_">Router</span></span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>) <span class="comment">// 挂载容器，将vue实例插入到id为app的div盒子</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">或使用Vue.use(Router)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>App.vue中使用内置路由占位组件 - RouteView (router-view)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// ./src/App.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;RouterView /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h5 id="RouteLink-内置组件"><a href="#RouteLink-内置组件" class="headerlink" title="RouteLink 内置组件"></a>RouteLink 内置组件</h5><p>​页面导航，最终会被翻译为a标签，to属性翻译成herf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// ./src/App.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;router-link to=&quot;/home&quot;&gt;首页&lt;/router-link&gt;</span><br><span class="line">        &lt;router-link to=&quot;/user&quot;&gt;用户&lt;/router-link&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;RouterView /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li>与a标签区别</li></ul><h5 id="动态路由匹配-路由传参"><a href="#动态路由匹配-路由传参" class="headerlink" title="动态路由匹配 - 路由传参"></a>动态路由匹配 - 路由传参</h5><h6 id="params"><a href="#params" class="headerlink" title="params"></a>params</h6><table><thead><tr><th>模式</th><th>匹配路径</th><th>$route.params</th></tr></thead><tbody><tr><td>&#x2F;user&#x2F;:username</td><td>&#x2F;user&#x2F;evan</td><td><code>&#123; username: &#39;evan&#39; &#125;</code></td></tr><tr><td>&#x2F;user&#x2F;:username&#x2F;post&#x2F;:post_id</td><td>&#x2F;user&#x2F;evan&#x2F;post&#x2F;123</td><td><code>&#123; username: &#39;evan&#39;, post_id: &#39;123&#39; &#125;</code></td></tr></tbody></table><ul><li><p>路由规则为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">User</span> <span class="keyword">from</span> <span class="string">&#x27;@/view/userList.vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    <span class="comment">// 动态路径参数 以冒号开头</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在模板中匹配 ( 使用 $route.params 获取参数)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// App.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;router-link to=&quot;/user/100&quot;&gt;用户&lt;/router-link&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;RouterView /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// userList.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt; 传递参数 &#123;&#123; $route.params.id&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li></ul><h6 id="query"><a href="#query" class="headerlink" title="query"></a>query</h6><ul><li><p>路由规则为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">User</span> <span class="keyword">from</span> <span class="string">&#x27;@/view/userList.vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    <span class="comment">// 动态路径参数 以冒号开头</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在模板中匹配 ( 使用 $route.query 获取参数)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// App.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;router-link to=&quot;/user?username=&#x27;张三&#x27;&amp;age=&#x27;23&#x27;&quot;&gt;用户&lt;/router-link&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;RouterView /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// userList.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt; 传递参数 &#123;&#123; $route.query.username&#125;&#125; - &#123;&#123; $route.query.age&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li></ul><h5 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h5><ul><li><p>路由规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">User</span> <span class="keyword">from</span> <span class="string">&#x27;@/view/userList.vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    <span class="comment">// 动态路径参数 以冒号开头</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>, <span class="attr">component</span>: <span class="title class_">User</span>, <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span> &#125;,</span><br><span class="line">    <span class="comment">// 利用path</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/userList&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/user&#x27;</span>&#125;,</span><br><span class="line">    <span class="comment">// 利用命名</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/userList&#x27;</span>, <span class="attr">redirect</span>: &#123;<span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h5 id="404-页面"><a href="#404-页面" class="headerlink" title="404 页面"></a>404 页面</h5><p>​路由规则是从上到下检索的，所以404需要放在最下面。</p><ul><li><p>路由规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">User</span> <span class="keyword">from</span> <span class="string">&#x27;@/view/userList.vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    <span class="comment">// 动态路径参数 以冒号开头</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>, <span class="attr">component</span>: <span class="title class_">User</span>, <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span> &#125;,</span><br><span class="line">    <span class="comment">// 利用path</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/userList&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/user&#x27;</span>&#125;,</span><br><span class="line">    <span class="comment">// 或利用命名</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/userList&#x27;</span>, <span class="attr">redirect</span>: &#123;<span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>&#125;，</span><br><span class="line">    <span class="comment">// 上面的路由没有匹配到，剩下的所有 * 多会进入404页面</span></span><br><span class="line">    &#123; path： <span class="string">&#x27;*&#x27;</span>, <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./views/404.vue&#x27;</span>)&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h5 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h5><h6 id="router-push"><a href="#router-push" class="headerlink" title="router.push()"></a>router.push()</h6><table><thead><tr><th>声明式</th><th>编程式</th></tr></thead><tbody><tr><td><code>&lt;router-link :to=&quot;...&quot;&gt;</code></td><td><code>router.push(...)</code></td></tr></tbody></table><ul><li><p>使用方法</p><p><strong>在 Vue 2，你可以通过 <code>$router</code> 访问路由实例。因此你可以调用 <code>this.$router.push</code>。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串</span></span><br><span class="line">router.<span class="title function_">push</span>(<span class="string">&#x27;home&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;home&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名的路由</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>, <span class="attr">params</span>: &#123; <span class="attr">userId</span>: <span class="string">&#x27;123&#x27;</span> &#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带查询参数，变成 /register?plan=private</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;register&#x27;</span>, <span class="attr">query</span>: &#123; <span class="attr">plan</span>: <span class="string">&#x27;private&#x27;</span> &#125;&#125;)</span><br></pre></td></tr></table></figure></li></ul><h6 id="router-replace"><a href="#router-replace" class="headerlink" title="router.replace"></a>router.replace</h6><p>​跟 <code>router.push</code> 很像，唯一的不同就是，它不会向 history 添加新记录, 而是会替换掉当前的 history 记录。</p><table><thead><tr><th>声明式</th><th>编程式</th></tr></thead><tbody><tr><td><code>&lt;router-link :to=&quot;...&quot; replace&gt;</code></td><td><code>router.replace(...)</code></td></tr></tbody></table><h6 id="router-go-n"><a href="#router-go-n" class="headerlink" title="router.go(n)"></a>router.go(n)</h6><p>这个方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步，类似 <code>window.history.go(n)</code>。</p><ul><li><p>使用方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在浏览器记录中前进一步，等同于 history.forward()</span></span><br><span class="line">router.<span class="title function_">go</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后退一步记录，等同于 history.back()</span></span><br><span class="line">router.<span class="title function_">go</span>(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前进 3 步记录</span></span><br><span class="line">router.<span class="title function_">go</span>(<span class="number">3</span>)</span><br></pre></td></tr></table></figure></li></ul><h5 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h5><p>​在一个路由里面嵌套其他子路由，在路由规则中使用children定义子路由</p><ul><li><p>路由规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">User</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">// 当 /user/profile 匹配成功，</span></span><br><span class="line">          <span class="comment">// UserProfile 会被渲染在 User 的 &lt;router-view&gt; 中</span></span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;profile&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="title class_">UserProfile</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">// 当 /user/posts 匹配成功</span></span><br><span class="line">          <span class="comment">// UserPosts 会被渲染在 User 的 &lt;router-view&gt; 中</span></span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;posts&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="title class_">UserPosts</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h5 id="Router实例属性"><a href="#Router实例属性" class="headerlink" title="Router实例属性"></a>Router实例属性</h5><ul><li>导航守卫 - router.beforeEach()</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flex弹性盒子布局</title>
      <link href="/2022/10/23/Flex%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90%E5%B8%83%E5%B1%80/"/>
      <url>/2022/10/23/Flex%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h2><p>​Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性</p><h3 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>​利用Flex 布局的元素，称为Flex，简称“容器”，旗下所有子元素自动成为容器成员</p><h4 id="容器属性-1"><a href="#容器属性-1" class="headerlink" title="容器属性"></a>容器属性</h4><h5 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a><strong>flex-direction</strong></h5><p><code>flex-direction</code>属性决定主轴的方向（项目的排列方向）</p><p><img src="/2022/10/23/Flex%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90%E5%B8%83%E5%B1%80/flex-direction.png" alt="flex-direction"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">row（默认值）：主轴为水平方向，起点在左端</span></span><br><span class="line"><span class="comment">row-reverse : 主轴为水平方向，起点在右端</span></span><br><span class="line"><span class="comment">column ：主轴为垂直方向，起点在上沿</span></span><br><span class="line"><span class="comment">column-reverse ：主轴为垂直方向，起点在下沿</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="flex-warp"><a href="#flex-warp" class="headerlink" title="flex-warp"></a><strong>flex-warp</strong></h5><p><code>flex-wrap</code>属性定义，如果一条轴线排不下，如何换行。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">nowrap（默认） ：不换行</span></span><br><span class="line"><span class="comment">warp ：换行，第一行在上方</span></span><br><span class="line"><span class="comment">warp-reverse ：换行，第一行在下方</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a><strong>flex-flow</strong></h5><p><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a><strong>justify-content</strong></h5><p><img src="/2022/10/23/Flex%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90%E5%B8%83%E5%B1%80/justify-content.png" alt="justify-content"></p><p><code>justify-content</code>属性定义了项目在主轴上的对齐方式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">flex-start（默认值）：左对齐</span></span><br><span class="line"><span class="comment">flex-end ：右对齐</span></span><br><span class="line"><span class="comment">center ： 居中对齐</span></span><br><span class="line"><span class="comment">space-between ：两端对齐。间隔相等</span></span><br><span class="line"><span class="comment">space-around ：每个项目两侧的间隔相等</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a><strong>align-items</strong></h5><p><img src="/2022/10/23/Flex%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90%E5%B8%83%E5%B1%80/align-items.png" alt="align-items"></p><p><code>align-items</code>属性定义项目在交叉轴上如何对齐</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">streth（默认值） ：如果项目未设置高度值或设置为auto，将占满震整个容器高度</span></span><br><span class="line"><span class="comment">flex-start ： 顶格对齐</span></span><br><span class="line"><span class="comment">flex-end ：底部对齐</span></span><br><span class="line"><span class="comment">center ： 居中对齐</span></span><br><span class="line"><span class="comment">baseline ： 项目的第一行文字基线对齐</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a><strong>align-content</strong></h5><p><code>align-content</code>属性定义了多根轴线的对齐方式。<code>如果项目只有一根轴线，该属性不起作用</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">stretch（默认值） ：轴线占满整个高度</span></span><br><span class="line"><span class="comment">flex-start ：靠顶部对齐</span></span><br><span class="line"><span class="comment">flex-end ：靠底部对齐</span></span><br><span class="line"><span class="comment">center ：居中对齐</span></span><br><span class="line"><span class="comment">soace-between ：两端对齐</span></span><br><span class="line"><span class="comment">space-around ：每根轴线两侧间隔相等</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="子元素属性"><a href="#子元素属性" class="headerlink" title="子元素属性"></a>子元素属性</h4><h5 id="order"><a href="#order" class="headerlink" title="order"></a><strong>order</strong></h5><p><img src="/2022/10/23/Flex%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90%E5%B8%83%E5%B1%80/order.png" alt="order"></p><p><code>order</code>属性定义项目的排列顺序。数值越小，排列越靠前，默认为0</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: &lt;integer&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a><strong>flex-grow</strong></h5><p><img src="/2022/10/23/Flex%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90%E5%B8%83%E5%B1%80/flex-grow.png" alt="flex-grow"></p><p><code>flex-grow</code>属性定义项目的放大比例，默认为<code>0</code>，即如果存在剩余空间，也不放大</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: &lt;number&gt;; <span class="comment">/* default 0 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a><strong>flex-shrink</strong></h5><p><img src="/2022/10/23/Flex%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90%E5%B8%83%E5%B1%80/flex-shrink.png" alt="flex-shrink"></p><p><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: &lt;number&gt;; <span class="comment">/* default 1 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小;负值对该属性无效</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h5><p><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间,它的默认值为<code>auto</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: &lt;length&gt; | auto; <span class="comment">/* default auto */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="flex"><a href="#flex" class="headerlink" title="flex"></a><strong>flex</strong></h5><p><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: none | [ &lt;<span class="string">&#x27;flex-grow&#x27;</span>&gt; &lt;<span class="string">&#x27;flex-shrink&#x27;</span>&gt;? || &lt;<span class="string">&#x27;flex-basis&#x27;</span>&gt; ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。</span></span><br><span class="line"><span class="comment">建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a><strong>align-self</strong></h5><p><img src="/2022/10/23/Flex%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90%E5%B8%83%E5%B1%80/align-self.png" alt="align-self"></p><p><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式,可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="案例-nav"><a href="#案例-nav" class="headerlink" title="案例 - nav"></a>案例 - nav</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span>,<span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">list-style</span>:none;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu_con</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">960px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:<span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">50px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>:flex;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.logo</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span>&#123;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">flex-grow</span>:<span class="number">1</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css"><span class="attribute">align-items</span>:center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">overflow</span>:hidden;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">flex-grow</span>:<span class="number">1</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-right</span>:<span class="number">1px</span> solid <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-right</span>:-<span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-decoration</span>:none;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:<span class="number">#666</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="keyword">@media</span> (<span class="attribute">max-width</span>:<span class="number">960px</span>)&#123;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu_con</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu_con&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;menu&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>公司简介<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>公司新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>行业动态<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>联系我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/10/23/Flex%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90%E5%B8%83%E5%B1%80/nav.gif" alt="nav案例"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> css </category>
          
          <category> flex] </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
            <tag> flex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaScript第一章</title>
      <link href="/2022/09/07/javaScript%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
      <url>/2022/09/07/javaScript%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="js嵌入页面的方式"><a href="#js嵌入页面的方式" class="headerlink" title="js嵌入页面的方式"></a>js嵌入页面的方式</h3><ul><li><p><strong>内联脚本（Inline Script）</strong>：将JavaScript代码直接写在HTML文件中的<code>&lt;script&gt;</code>标签内。这种方式简单直接，适用于少量代码的情况。优点是方便快捷，缺点是可维护性较差，不利于代码的复用和分离。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// JavaScript code here</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>外部脚本（Internal Script）</strong>：将JavaScript代码写在HTML文件的<code>&lt;script&gt;</code>标签内，但是通过src属性引入外部JavaScript文件。这种方式适用于较大的JavaScript代码或多个页面共用的代码。优点是可以将JavaScript代码单独存放在外部文件中，方便维护和复用，缺点是需要额外的HTTP请求来加载外部文件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;hello.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>行间事件</strong>,onclick、onmouseover等。这种方式可以在HTML标签中直接定义事件处理函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;弹框&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;hello!&#x27;)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="js注释"><a href="#js注释" class="headerlink" title="js注释"></a>js注释</h3><ul><li><p>单行文本注释</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure></li><li><p>多行文本注释</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="js基础语法及dom操作"><a href="#js基础语法及dom操作" class="headerlink" title="js基础语法及dom操作"></a>js基础语法及dom操作</h3><h4 id="变量声明-const-let-var"><a href="#变量声明-const-let-var" class="headerlink" title="变量声明-const let var"></a>变量声明-const let var</h4><ol><li><p>var</p><ul><li><p><strong>区别</strong>：使用var声明的变量是函数作用域（function-scoped），在函数内部声明的变量在函数外部不可访问。</p></li><li><p><strong>优点</strong>：在ES5及之前的版本中是唯一的声明变量的方式，兼容性较好。</p></li><li><p><strong>缺点</strong>：存在变量提升（hoisting）的问题，可能会导致意外的行为；没有块级作用域，可能会造成变量污染。</p></li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br></pre></td></tr></table></figure><ol start="2"><li><p>let</p><ul><li><p><strong>区别</strong>：使用let声明的变量是块级作用域（block-scoped），在块级作用域内声明的变量只在该块内部有效。</p></li><li><p><strong>优点</strong>：解决了var存在的变量提升和缺乏块级作用域的问题，更安全和可靠。</p></li><li><p><strong>缺点</strong>：在ES6之前的浏览器可能不支持。</p></li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> y = <span class="number">20</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y);</span><br></pre></td></tr></table></figure><ol start="3"><li><p>const</p><ul><li><p><strong>区别</strong>：使用const声明的变量是常量，一旦赋值就不能再修改。</p></li><li><p><strong>优点</strong>：可以确保变量的值不会被意外修改，提高代码的可靠性。</p></li><li><p><strong>缺点</strong>：必须在声明时初始化，且不能再次赋值，不适用于需要动态改变值的情况。</p></li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span>;</span><br><span class="line"><span class="variable constant_">PI</span> = <span class="number">3.14159</span>; </span><br></pre></td></tr></table></figure><h4 id="js-基本数据类型"><a href="#js-基本数据类型" class="headerlink" title="js 基本数据类型"></a>js 基本数据类型</h4><ul><li><p>基本数据类型</p><ol><li>Number</li><li>String</li><li>Boolean</li><li>Undefined</li><li>null</li><li>symbol</li></ol></li><li><p>引用类型（object）</p><p>复杂数据类型统称为Object  es6新添加有 Set  Map</p></li></ul><p>基本数据类型存储在栈中；引用类型的对象存储在堆中; 当变量赋值，解析器首先要确认引用类型还是基本类型</p><ul><li>声明变量时不同的内存地址分配：<ul><li>简单类型的值存放在栈中，在栈中存放的是对应的值</li><li>引用类型对应的值存储在堆中，在栈中存放的是指向堆内存的地址</li></ul></li><li>不同的类型数据导致赋值变量时的不同：<ul><li>简单类型赋值，是生成相同的值，两个对象对应不同的地址</li><li>复杂类型赋值，是将保存对象的内存地址赋值给另一个变量。也就是两个变量指向堆内存中同一个对象</li></ul></li></ul><h4 id="js-操作属性"><a href="#js-操作属性" class="headerlink" title="js 操作属性"></a>js 操作属性</h4><ul><li>js通过document.getElementById获取DOM元素，</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>js 基本语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">onload是window窗口对象的事件属性， 语句是把“匿名函数”赋值给window的onload事件属性， 当window加载完成时会触发onload事件，也就触发了“匿名函数”，执行函数体内的语句。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">*/</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 获取DOM元素</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> oA = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;link1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 修改元素href属性</span></span></span><br><span class="line"><span class="language-javascript">oA.<span class="property">href</span> = <span class="string">&quot;http://www.baidu.com&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 修改元素title属性</span></span></span><br><span class="line"><span class="language-javascript">oA.<span class="property">title</span> = <span class="string">&quot;go baidu.com&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 浏览器弹窗</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(oA.<span class="property">id</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span> <span class="attr">title</span>=<span class="string">&quot;这是div元素，看到了吗？&quot;</span>&gt;</span>div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">id</span>=<span class="string">&quot;link1&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>css的属性 - 的，在js中可以用大写表示； 例如 font-size &#x3D;&gt; fintSize,</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;div1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// style属性中的样式属性，没有“-”的，写法相同</span></span></span><br><span class="line"><span class="language-javascript">oDiv.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">oDiv.<span class="property">style</span>.<span class="property">background</span> = <span class="string">&quot;gold&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// style属性中的样式属性，带有“-”的，写成驼峰式</span></span></span><br><span class="line"><span class="language-javascript">oDiv.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="string">&quot;30px&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="js操作class-className"><a href="#js操作class-className" class="headerlink" title="js操作class - className"></a>js操作class - className</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box01</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box02</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;div1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 通过className修改元素的class</span></span></span><br><span class="line"><span class="language-javascript">oDiv.<span class="property">className</span> = <span class="string">&#x27;box02&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box01&quot;</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="通过-的方式修改元素属性"><a href="#通过-的方式修改元素属性" class="headerlink" title="通过 [ ] 的方式修改元素属性"></a>通过 [ ] 的方式修改元素属性</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;div1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">/* 通过 [] 操作属性可以写变量*/</span></span></span><br><span class="line"><span class="language-javascript">oDiv[<span class="string">&#x27;style&#x27;</span>][<span class="string">&#x27;color&#x27;</span>] = <span class="string">&#x27;red&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/* 通过 innerHTML可以读写元素的内容*/</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(oDiv.<span class="property">innerHTML</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> oDiv2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;div2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">/*oDiv2.innerHTML = &#x27;已修改后的内容&#x27;;*/</span></span></span><br><span class="line"><span class="language-javascript">oDiv2.<span class="property">innerHTML</span> = <span class="string">&quot;&lt;a href=&#x27;http://www.baidu.com&#x27;&gt;百度&lt;/a&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="函数，onclick事件"><a href="#函数，onclick事件" class="headerlink" title="函数，onclick事件"></a>函数，onclick事件</h4><ul><li><p>js函数由 function 声明</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">aa</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 逻辑操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>onclick() 事件</p></li></ul><p>  给元素添加点击事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>javascript 函数<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">inputAlert</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;hello!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;弹框&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;inputAlert()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="案例-点击给元素换色"><a href="#案例-点击给元素换色" class="headerlink" title="案例 - 点击给元素换色"></a>案例 - 点击给元素换色</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>换肤<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;1.css&quot;</span> <span class="attr">id</span>=<span class="string">&quot;link1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> oBtn01 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn01&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> oBtn02 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn02&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">oBtn01.<span class="property">onclick</span> = skin01;</span></span><br><span class="line"><span class="language-javascript">oBtn02.<span class="property">onclick</span> = skin02;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 通过修改link标签属性，修改不同的css文件，达到换肤效果</span></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">function</span> <span class="title function_">skin01</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">var</span> oLink = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;link1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"> oLink.<span class="property">href</span> = <span class="string">&#x27;1.css&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"> &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">function</span> <span class="title function_">skin02</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">var</span> oLink = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;link1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"> oLink.<span class="property">href</span> = <span class="string">&#x27;2.css&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"> &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;皮肤01&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn01&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;皮肤02&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn02&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box01&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box02&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="通过js给元素添加onclick事件"><a href="#通过js给元素添加onclick事件" class="headerlink" title="通过js给元素添加onclick事件"></a>通过js给元素添加onclick事件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;div1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 给元素添加点击事件，执行匿名函数</span></span></span><br><span class="line"><span class="language-javascript">oDiv.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(<span class="string">&#x27;hello!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="函数传参"><a href="#函数传参" class="headerlink" title="函数传参"></a>函数传参</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;div1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">changestyle</span>(<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;gold&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">changestyle</span>(<span class="string">&#x27;background&#x27;</span>,<span class="string">&#x27;red&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">changestyle</span>(<span class="string">&#x27;width&#x27;</span>,<span class="string">&#x27;300px&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">changestyle</span>(<span class="string">&#x27;height&#x27;</span>,<span class="string">&#x27;300px&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">changestyle</span>(<span class="string">&#x27;fontSize&#x27;</span>,<span class="string">&#x27;30px&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">changestyle</span>(<span class="params">styl,val</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">oDiv.<span class="property">style</span>[styl] = val;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="函数-return-关键字"><a href="#函数-return-关键字" class="headerlink" title="函数 return 关键字"></a>函数 return 关键字</h4><ul><li>在函数内部使用<code>return</code>关键字可以将一个值返回给调用该函数的地方。</li><li><code>return</code>后面可以跟着一个表达式、变量、常量或者函数调用。</li><li>如果函数没有明确使用<code>return</code>语句，默认会返回<code>undefined</code>。</li><li>一个函数可以有多个<code>return</code>语句，但一旦执行到其中一个<code>return</code>语句，函数就会结束。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> a !== <span class="string">&#x27;number&#x27;</span> || <span class="keyword">typeof</span> b !== <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Please provide valid numbers&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 正常计算乘积并返回</span></span><br><span class="line">  <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkNumber</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (num &gt; ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Positive&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num &lt; ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Negative&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 没有明确返回值，默认返回undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">multiply</span>(<span class="number">5</span>, <span class="number">3</span>)); <span class="comment">// 输出：15</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">multiply</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="number">3</span>)); <span class="comment">// 输出：Please provide valid numbers</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">checkNumber</span>(<span class="number">10</span>)); <span class="comment">// 输出：Positive</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">checkNumber</span>(-<span class="number">5</span>)); <span class="comment">// 输出：Negative</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">checkNumber</span>()); <span class="comment">// 输出：undefined</span></span><br></pre></td></tr></table></figure><h4 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h4><ul><li><p>if</p><ul><li><code>if</code>语句允许根据条件执行代码块。</li><li>语法：<code>if (condition) &#123; // code to be executed &#125;</code></li></ul></li><li><p>if … else …</p><ul><li><code>if</code>语句允许根据条件执行代码块。</li><li>语法：<code>if (condition) &#123; // code to be executed &#125;</code></li></ul></li><li><p>switch</p><ul><li><p><code>switch</code>语句用于根据不同的情况执行不同的代码块。</p></li><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="attr">value1</span>:</span><br><span class="line">    <span class="comment">// code block 1</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="attr">value2</span>:</span><br><span class="line">    <span class="comment">// code block 2</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    <span class="comment">// default code block</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>三元运算符</p><ul><li><p>三元运算符是一种简洁的条件语句，可以代替简单的<code>if ... else ...</code>语句。</p></li><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果条件为真，则返回`expression1`；否则返回`expression2`。</span></span><br><span class="line">condition ? expression1 : expression2</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql基础</title>
      <link href="/2022/08/26/mysql%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/08/26/mysql%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><h3 id="关系数据库概述"><a href="#关系数据库概述" class="headerlink" title="关系数据库概述"></a>关系数据库概述</h3><h4 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h4><p>数据库一共有三种模型：</p><ul><li><p>层次模型</p><p>层次模型就是以“上下级”的层次关系来组织数据的一种方式，层次模型的数据结构看起来就像一颗树</p><p><img src="/2022/08/26/mysql%E5%9F%BA%E7%A1%80/%E5%B1%82%E6%AC%A1%E6%A8%A1%E5%9E%8B.png"></p></li><li><p>网状模型</p><p>网状模型把每个数据节点和其他很多节点都连接起来，它的数据结构看起来就像很多城市之间的路网</p><p><img src="/2022/08/26/mysql%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%8A%B6%E6%A8%A1%E5%9E%8B.png"></p></li><li><p>关系模型</p><p>关系模型把数据看作是一个二维表格，任何数据都可以通过行号+列号来唯一确定，它的数据模型看起来就是一个Excel表</p><p><img src="/2022/08/26/mysql%E5%9F%BA%E7%A1%80/%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%9E%8B.png" alt="image-20240725165200125"></p></li></ul><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>对于一个关系表，除了定义每一列的名称外，还需要定义每一列的数据类型。关系数据库支持的标准数据类型包括数值、字符串、时间等</p><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>INT</td><td>整型</td><td>4字节整数类型，范围约+&#x2F;-21亿</td></tr><tr><td>BIGINT</td><td>长整型</td><td>8字节整数类型，范围约+&#x2F;-922亿亿</td></tr><tr><td>REAL</td><td>浮点型</td><td>4字节浮点数，范围约+&#x2F;-1038</td></tr><tr><td>DOUBLE</td><td>浮点型</td><td>8字节浮点数，范围约+&#x2F;-10308</td></tr><tr><td>DECIMAL(M,N)</td><td>高精度小数</td><td>由用户指定精度的小数，例如，DECIMAL(20,10)表示一共20位，其中小数10位，通常用于财务计算</td></tr><tr><td>CHAR(N)</td><td>定长字符串</td><td>存储指定长度的字符串，例如，CHAR(100)总是存储100个字符的字符串</td></tr><tr><td>VARCHAR(N)</td><td>变长字符串</td><td>存储可变长度的字符串，例如，VARCHAR(100)可以存储0~100个字符的字符串</td></tr><tr><td>BOOLEAN</td><td>布尔类型</td><td>存储True或者False</td></tr><tr><td>DATE</td><td>日期类型</td><td>存储日期，例如，2018-06-22</td></tr><tr><td>TIME</td><td>时间类型</td><td>存储时间，例如，12:20:59</td></tr><tr><td>DATETIME</td><td>日期和时间类型</td><td>存储日期+时间，例如，2018-06-22 12:20:59</td></tr></tbody></table><h4 id="主流关系数据库"><a href="#主流关系数据库" class="headerlink" title="主流关系数据库"></a>主流关系数据库</h4><p>目前，主流的关系数据库主要分为以下几类：</p><ol><li>商用数据库，例如：<a href="https://www.oracle.com/">Oracle</a>，<a href="https://www.microsoft.com/sql-server/">SQL Server</a>，<a href="https://www.ibm.com/db2/">DB2</a>等；</li><li>开源数据库，例如：<a href="https://www.mysql.com/">MySQL</a>，<a href="https://www.postgresql.org/">PostgreSQL</a>等；</li><li>桌面数据库，以微软<a href="https://products.office.com/access">Access</a>为代表，适合桌面应用程序使用；</li><li>嵌入式数据库，以<a href="https://sqlite.org/">Sqlite</a>为代表，适合手机应用和桌面程序。</li></ol><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>MySQL是目前应用最广泛的开源关系数据库。MySQL最早是由瑞典的MySQL AB公司开发，该公司在2008年被SUN公司收购，紧接着，SUN公司在2009年被Oracle公司收购，所以MySQL最终就变成了Oracle旗下的产品。</p><h4 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h4><p>要安装MySQL，可以从MySQL官方网站下载最新的MySQL Community Server版本：</p><p><a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a></p><p>安装教程：<a href="https://dev.mysql.com/doc/refman/5.7/en/mysql-installer-setup.html">MySQL ：： MySQL 5.7 参考手册 ：： 2.3.3.1 MySQL安装程序初始设置</a></p><h4 id="使用Docker运行MySQL"><a href="#使用Docker运行MySQL" class="headerlink" title="使用Docker运行MySQL"></a>使用Docker运行MySQL</h4><ol><li><p>docker安装最新版mysql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure></li><li><p>启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=password -v /Users/liaoxuefeng/mysql-data:/var/lib/mysql mysql</span><br><span class="line"><span class="comment"># -d：表示在后台执行；</span></span><br><span class="line"><span class="comment"># --name mysql：表示容器的名字，不输入Docker会自动选择一个名字；</span></span><br><span class="line"><span class="comment"># -p 3306:3306：表示把容器的端口3306映射到本机，这样可以在本机通过3306端口连接MySQL；</span></span><br><span class="line"><span class="comment"># -e MYSQL_ROOT_PASSWORD=password：表示传入一个环境变量，作为root的口令，这里设置的口令是password，不输入此项则会自动生成一个口令，需要查看日志才能知道口令；</span></span><br><span class="line"><span class="comment"># -v /Users/liaoxuefeng/mysql-data:/var/lib/mysql：表示将本地目录映射到容器目录/var/lib/mysql作为MySQL数据库存放的位置，需要将/Users/liaoxuefeng/mysql-data改为你的电脑上的实际目录；</span></span><br><span class="line"><span class="comment"># mysql：最后一个参数是Docker镜像的名称。</span></span><br></pre></td></tr></table></figure></li><li><p>可以在Docker Desktop的管理窗口中选择<code>Containers</code>，看到正在运行的MySQL</p></li></ol><h3 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h3><p>表的每一行称为记录（Record），记录是一个逻辑意义上的数据。<br>表的每一列称为字段（Column），同一个表的每一行记录都拥有相同的若干字段。</p><h4 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h4><p>对于关系表，有个很重要的约束，就是任意两条记录不能重复。不能重复不是指两条记录不完全相同，而是指能够通过某个字段唯一区分出不同的记录，这个字段被称为<strong>主键</strong></p><p>作为主键最好是完全业务无关的字段，我们一般把这个字段命名为<code>id</code>。常见的可作为<code>id</code>字段的类型有：</p><ol><li>自增整数类型：数据库会在插入数据时自动为每一条记录分配一个自增整数，这样我们就完全不用担心主键重复，也不用自己预先生成主键；</li><li>全局唯一GUID类型：也称UUID，使用一种全局唯一的字符串作为主键，类似<code>8f55d96b-8acc-4636-8cb8-76bf8abc2f57</code>。GUID算法通过网卡MAC地址、时间戳和随机数保证任意计算机在任意时间生成的字符串都是不同的，大部分编程语言都内置了GUID算法，可以自己预算出主键。</li></ol><p>在定义表结构时，表中定义的主键也是<code>BIGINT NOT NULL AUTO_INCREMENT</code>类型</p><table><thead><tr><th>id</th><th>s_id</th><th>username</th><th>age</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>小明</td><td>18</td><td>90</td></tr><tr><td>2</td><td>1</td><td>小红</td><td>19</td><td>95</td></tr></tbody></table><p><strong>联合主键</strong></p><p>关系数据库实际上还允许通过多个字段唯一标识记录，即两个或更多的字段都设置为主键，这种主键被称为联合主键</p><h4 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h4><p>classes表</p><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>一班</td></tr><tr><td>2</td><td>二班</td></tr></tbody></table><p>students表</p><table><thead><tr><th>id</th><th>class_id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>小明</td></tr><tr><td>2</td><td>1</td><td>小红</td></tr><tr><td>5</td><td>2</td><td>小白</td></tr></tbody></table><p>外键定义</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_class_id</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (class_id)</span><br><span class="line"><span class="keyword">REFERENCES</span> classes (id);</span><br></pre></td></tr></table></figure><p>其中，外键约束的名称<code>fk_class_id</code>可以任意，<code>FOREIGN KEY (class_id)</code>指定了<code>class_id</code>作为外键，<code>REFERENCES classes (id)</code>指定了这个外键将关联到<code>classes</code>表的<code>id</code>列（即<code>classes</code>表的主键）。</p><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><p>在关系数据库中，如果有上万甚至上亿条记录，在查找记录的时候，想要获得非常快的速度，就需要使用索引。</p><p>索引是关系数据库中对某一列或多个列的值进行预排序的数据结构。通过使用索引，可以让数据库系统不必扫描整个表，而是直接定位到符合条件的记录，这样就大大加快了查询速度。</p><p>students表</p><table><thead><tr><th>d</th><th>class_id</th><th>name</th><th>gender</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>小明</td><td>M</td><td>90</td></tr><tr><td>2</td><td>1</td><td>小红</td><td>F</td><td>95</td></tr><tr><td>3</td><td>1</td><td>小军</td><td>M</td><td>88</td></tr></tbody></table><p>如果要经常根据<code>score</code>列进行查询，就可以对<code>score</code>列创建索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br><span class="line"><span class="keyword">ADD</span> INDEX idx_score (score);</span><br><span class="line"># 使用<span class="keyword">ADD</span> INDEX idx_score (score)就创建了一个名称为idx_score，使用列score的索引。索引名称是任意的，索引如果有多列，可以在括号里依次写上，例如：</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br><span class="line"><span class="keyword">ADD</span> INDEX idx_name_score (name, score);</span><br></pre></td></tr></table></figure><p><strong>唯一索引</strong></p><p>通过<code>UNIQUE</code>关键字添加唯一索引。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> INDEX uni_name (name);</span><br><span class="line"># 也可以只对某一列添加一个唯一约束而不创建唯一索引，这种情况下，name列没有索引，但仍然具有唯一性保证</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> uni_name <span class="keyword">UNIQUE</span> (name);</span><br></pre></td></tr></table></figure><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE new_database; </span><br></pre></td></tr></table></figure><h4 id="查看所有数据库名"><a href="#查看所有数据库名" class="headerlink" title="查看所有数据库名"></a>查看所有数据库名</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> DATABASE;</span><br></pre></td></tr></table></figure><h4 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use <span class="operator">&lt;</span>database_name<span class="operator">&gt;</span>; # database_name 为数据库名字</span><br></pre></td></tr></table></figure><h4 id="数据库数据导入导出"><a href="#数据库数据导入导出" class="headerlink" title="数据库数据导入导出"></a>数据库数据导入导出</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mysqldump -u username -p old_database &gt; dump.sql  </span><br><span class="line">$ mysql -u username -p new_database &lt; dump.sql  </span><br></pre></td></tr></table></figure><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE old_database;</span><br></pre></td></tr></table></figure><h4 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h4><h4 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name (  </span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,  </span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,  </span><br><span class="line">    age <span class="type">INT</span>,  </span><br><span class="line">    created_at <span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>  </span><br><span class="line">); </span><br></pre></td></tr></table></figure><ul><li><code>PRIMARY KEY</code>：将 id 字段设置为主键，用于唯一标识每一行数据。</li><li><code>NOT NULL</code>：表示 name 字段不允许为空值。</li><li><code>INT</code> 和 <code>VARCHAR(50)</code> 是数据类型，分别表示整数和字符串，并且可以设置长度。</li><li><code>DEFAULT CURRENT_TIMESTAMP</code>：将 created_at 字段默认值设为当前时间戳。</li></ul><p>除了上述示例中提到的属性外，还有许多其他可用的字段属性，如自增（AUTO_INCREMENT）、唯一约束（UNIQUE）、外键约束（FOREIGN KEY）等。可以根据需要来选择相应的字段属性进行设置。</p><h4 id="查看数据库中所有的表"><a href="#查看数据库中所有的表" class="headerlink" title="查看数据库中所有的表"></a>查看数据库中所有的表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure><h4 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DESCRIBE</span> table_name;  </span><br></pre></td></tr></table></figure><p><img src="/2022/08/26/mysql%E5%9F%BA%E7%A1%80/%E8%A1%A8%E7%BB%93%E6%9E%84.png" alt="image-20240726180159047"></p><h4 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RENAME <span class="keyword">TABLE</span> employees <span class="keyword">TO</span> staff;  </span><br></pre></td></tr></table></figure><h4 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h4><h5 id="添加新列"><a href="#添加新列" class="headerlink" title="添加新列"></a>添加新列</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name  </span><br><span class="line"><span class="keyword">ADD</span> email <span class="type">VARCHAR</span>(<span class="number">50</span>);</span><br></pre></td></tr></table></figure><h5 id="修改表某一列的属性"><a href="#修改表某一列的属性" class="headerlink" title="修改表某一列的属性"></a>修改表某一列的属性</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name  </span><br><span class="line">MODIFY age <span class="type">BIGINT</span>; # <span class="type">int</span> <span class="operator">-</span><span class="operator">&gt;</span> <span class="type">BIGINT</span></span><br></pre></td></tr></table></figure><h5 id="删除某一列"><a href="#删除某一列" class="headerlink" title="删除某一列"></a>删除某一列</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name  </span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> age;  </span><br></pre></td></tr></table></figure><h5 id="删除主键并修改主键"><a href="#删除主键并修改主键" class="headerlink" title="删除主键并修改主键"></a>删除主键并修改主键</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name  </span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY,  # 删除原有主键</span><br><span class="line">MODIFY id <span class="type">INT</span> AUTO_INCREMENT,  # id自增</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY (id);  # 将id设置新主键</span><br></pre></td></tr></table></figure><h5 id="添加外键约束"><a href="#添加外键约束" class="headerlink" title="添加外键约束"></a>添加外键约束</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name  </span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_example <span class="keyword">FOREIGN</span> KEY (parent_id) <span class="keyword">REFERENCES</span> parent_table(id); </span><br></pre></td></tr></table></figure><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><h5 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h5><p>查询<code>students</code>表的所有行的所有数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students</span><br></pre></td></tr></table></figure><h5 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h5><p>查询<code>students</code>表成绩( score)大于等于80的所有行的所有数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> score <span class="operator">&gt;=</span> <span class="number">80</span>;</span><br></pre></td></tr></table></figure><p>查询<code>students</code>表成绩( score)大于等于80且姓’李’的所有行的所有数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> score <span class="operator">&gt;=</span> <span class="number">80</span> <span class="keyword">AND</span> name<span class="operator">=</span><span class="string">&#x27;李%&#x27;</span>;</span><br></pre></td></tr></table></figure><h5 id="条件查询关键字"><a href="#条件查询关键字" class="headerlink" title="条件查询关键字"></a>条件查询关键字</h5><h6 id="IN关键字"><a href="#IN关键字" class="headerlink" title="IN关键字"></a>IN关键字</h6><p>IN 关键字用于判断某个字段的值是否在指定的集合中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="operator">|</span> 字段名<span class="number">1</span> <span class="operator">|</span> 字段名<span class="number">2</span></span><br><span class="line"><span class="keyword">FROM</span> 表名 </span><br><span class="line"><span class="keyword">where</span> 字段名 [<span class="keyword">NOT</span>] <span class="keyword">IN</span>(元素<span class="number">1</span>,元素<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h6 id="BETTEEN-ADN-关键字"><a href="#BETTEEN-ADN-关键字" class="headerlink" title="BETTEEN ADN 关键字"></a>BETTEEN ADN 关键字</h6><p>BETWEEN ADN 用于判断某个字段的值是否在指定的范围之内</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">WHERE</span> stuID <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">and</span>  <span class="number">3</span></span><br></pre></td></tr></table></figure><h6 id="空值查询"><a href="#空值查询" class="headerlink" title="空值查询"></a>空值查询</h6><p>在数据表中,某些列的值可能为空(NULL), 空值不同于0,也不同于空字符串.在MYSQL中,使用is null 来判断字段的值是否为空</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> stuName <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure><h6 id="DISTINCT-关键字"><a href="#DISTINCT-关键字" class="headerlink" title="DISTINCT 关键字"></a>DISTINCT 关键字</h6><p>把查询的数据去掉重复的值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> stuGender <span class="keyword">FROM</span> student</span><br></pre></td></tr></table></figure><h6 id="LIKE-关键字"><a href="#LIKE-关键字" class="headerlink" title="LIKE 关键字"></a>LIKE 关键字</h6><p>对某些字符串进行模糊搜索的查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="operator">|</span> 字段名<span class="number">1</span> <span class="operator">|</span> 字段名<span class="number">2</span></span><br><span class="line"><span class="keyword">FROM</span> 表名 </span><br><span class="line"><span class="keyword">WHERE</span> 字段名  [<span class="keyword">NOT</span>] <span class="keyword">LIKE</span> <span class="string">&#x27;匹配字符串&#x27;</span></span><br></pre></td></tr></table></figure><h6 id="百分号-通配符"><a href="#百分号-通配符" class="headerlink" title="百分号(%)通配符"></a>百分号(%)通配符</h6><p>匹配任意长度的字符串,包括空字符串</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span>  <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> stuName <span class="keyword">LIKE</span> <span class="string">&#x27;黄%&#x27;</span></span><br></pre></td></tr></table></figure><h6 id="下划线-通配符"><a href="#下划线-通配符" class="headerlink" title="下划线(_)通配符"></a>下划线(_)通配符</h6><p>下划线通配符,只匹配单个字符</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span>  <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> stuName <span class="keyword">LIKE</span> <span class="string">&#x27;黄__&#x27;</span></span><br></pre></td></tr></table></figure><h6 id="AND关键字"><a href="#AND关键字" class="headerlink" title="AND关键字"></a>AND关键字</h6><p>使用多个查询条件,且同时满足</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="operator">|</span> 字段名<span class="number">1</span> <span class="operator">|</span> 字段名<span class="number">2</span></span><br><span class="line"><span class="keyword">FROM</span> 表名 </span><br><span class="line"><span class="keyword">WHERE</span> 表达式<span class="number">1</span> <span class="keyword">AND</span> 表达式<span class="number">2</span> </span><br></pre></td></tr></table></figure><h6 id="OR关键字"><a href="#OR关键字" class="headerlink" title="OR关键字"></a>OR关键字</h6><p>使用多个查询条件,满足其中一个即可</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="operator">|</span> 字段名<span class="number">1</span> <span class="operator">|</span> 字段名<span class="number">2</span></span><br><span class="line"><span class="keyword">FROM</span> 表名 </span><br><span class="line"><span class="keyword">WHERE</span> 表达式<span class="number">1</span> <span class="keyword">OR</span>表达式<span class="number">2</span> </span><br></pre></td></tr></table></figure><h5 id="投影查询"><a href="#投影查询" class="headerlink" title="投影查询"></a>投影查询</h5><p>查询<code>students</code>表的所有行的id, score, name</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, score, name <span class="keyword">FROM</span> students;</span><br></pre></td></tr></table></figure><h5 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h5><p>查询<code>students</code>表的所有行的id, score, name 并以score升序进行排列 (默认ASC)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, name, score <span class="keyword">FROM</span> students <span class="keyword">ORDER</span> <span class="keyword">BY</span> score;</span><br></pre></td></tr></table></figure><p>查询<code>students</code>表的所有行的id, score, name 并以score倒序排列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, name, score <span class="keyword">FROM</span> students <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>查询<code>students</code>表的所有行的id, score,gender, name 并以score升序进行排列，如果有相同的再按gender升序排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, name, gender, score <span class="keyword">FROM</span> students <span class="keyword">ORDER</span> <span class="keyword">BY</span> score ,gender;</span><br></pre></td></tr></table></figure><h5 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h5><p>使用SELECT查询时，如果结果集数据量很大，比如几万行数据，放在一个页面显示的话数据量太大，不如分页显示，每次显示100条。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, name, gender, score</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">100</span> <span class="keyword">OFFSET</span> <span class="number">0</span>; </span><br><span class="line"># 每页数据<span class="number">100</span>条，查询第<span class="number">1</span>页；注意<span class="keyword">SQL</span>记录集的索引从<span class="number">0</span>开始</span><br><span class="line"># <span class="keyword">OFFSET</span>超过了查询的最大数量并不会报错，而是得到一个空的结果集。</span><br></pre></td></tr></table></figure><p><code>OFFSET</code>是可选的，如果只写<code>LIMIT 15</code>，那么相当于<code>LIMIT 15 OFFSET 0</code>。<br>在MySQL中，<code>LIMIT 15 OFFSET 30</code>还可以简写成<code>LIMIT 30, 15</code>。<br>使用<code>LIMIT &lt;M&gt; OFFSET &lt;N&gt;</code>分页时，随着<code>N</code>越来越大，查询效率也会越来越低。</p><h5 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> students;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) num <span class="keyword">FROM</span> students; # 将字段输出命名为num</span><br></pre></td></tr></table></figure><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>SUM</td><td>计算某一列的合计值，该列必须为数值类型</td></tr><tr><td>AVG</td><td>计算某一列的平均值，该列必须为数值类型</td></tr><tr><td>MAX</td><td>计算某一列的最大值</td></tr><tr><td>MIN</td><td>计算某一列的最小值</td></tr><tr><td>COUNT</td><td>计算内容条数</td></tr><tr><td>FLOOR</td><td>向下取整</td></tr><tr><td>CEILING</td><td>向上取整</td></tr><tr><td>CONCAT</td><td>将两个字符串连接在一起</td></tr><tr><td>SUBSTRING(str,6,5)</td><td>提取字符串 - 切片</td></tr><tr><td>UPPER</td><td>将字符串转换为大写</td></tr><tr><td>NOW</td><td>返回当前日期和时间</td></tr><tr><td>DATE_FORMAT(NOW(), ‘%Y-%m-%d’)</td><td>格式化日期</td></tr><tr><td>IF(10 &gt; 5, ‘True’, ‘False’)</td><td>根据条件返回不同的值</td></tr><tr><td>RAND()</td><td>生成随机数</td></tr></tbody></table><h5 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h5><p>返回两个表中所有行的组合</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    s.id sid,</span><br><span class="line">    s.name,</span><br><span class="line">    s.gender,</span><br><span class="line">    s.score,</span><br><span class="line">    c.id cid,</span><br><span class="line">    c.name cname</span><br><span class="line"><span class="keyword">FROM</span> students s, classes c;</span><br></pre></td></tr></table></figure><h5 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h5><p><strong>INNER JOIN - 内连接</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.id, s.name, s.class_id, c.name class_name, s.gender, s.score</span><br><span class="line"><span class="keyword">FROM</span> students s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> classes c</span><br><span class="line"><span class="keyword">ON</span> s.class_id <span class="operator">=</span> c.id;</span><br></pre></td></tr></table></figure><ol><li>先确定主表，仍然使用<code>FROM &lt;表1&gt;</code>的语法；</li><li>再确定需要连接的表，使用<code>INNER JOIN &lt;表2&gt;</code>的语法；</li><li>然后确定连接条件，使用<code>ON &lt;条件...&gt;</code>，这里的条件是<code>s.class_id = c.id</code>，表示<code>students</code>表的<code>class_id</code>列与<code>classes</code>表的<code>id</code>列相同的行需要连接；</li><li>可选：加上<code>WHERE</code>子句、<code>ORDER BY</code>等子句。</li></ol><p><strong>OUTER JOIN - 外连接</strong></p><p>当外表中没有与内表匹配的数据时，外连接会在结果集中为外表中的行填充NULL值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.id, s.name, s.class_id, c.name class_name, s.gender, s.score</span><br><span class="line"><span class="keyword">FROM</span> students s</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> classes c</span><br><span class="line"><span class="keyword">ON</span> s.class_id <span class="operator">=</span> c.id;</span><br></pre></td></tr></table></figure><p><strong>RIGHT OUTER JOIN - 右外连接</strong></p><p>RIGHT OUTER JOIN（右外连接）则会返回右表中的所有行以及左表中与右表匹配的行，如果左表中没有匹配的行，则会在结果集中为左表的列填充NULL值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.id, s.name, s.class_id, c.name class_name, s.gender, s.score</span><br><span class="line"><span class="keyword">FROM</span> students s</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> classes c</span><br><span class="line"><span class="keyword">ON</span> s.class_id <span class="operator">=</span> c.id;</span><br></pre></td></tr></table></figure><p><strong>LEFT OUTER JOIN - 左外连接</strong></p><p>LEFT OUTER JOIN（左外连接）会返回左表中的所有行以及右表中与左表匹配的行，如果右表中没有匹配的行，则会在结果集中为右表的列填充NULL值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.id, s.name, s.class_id, c.name class_name, s.gender, s.score</span><br><span class="line"><span class="keyword">FROM</span> students s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> classes c</span><br><span class="line"><span class="keyword">ON</span> s.class_id <span class="operator">=</span> c.id;</span><br></pre></td></tr></table></figure><p><strong>FULL OUTER JOIN - 全外连接</strong></p><p>FULL OUTER JOIN（全外连接）则会返回左表和右表中的所有行，并在结果集中为没有匹配的行填充NULL值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.id, s.name, s.class_id, c.name class_name, s.gender, s.score</span><br><span class="line"><span class="keyword">FROM</span> students s</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> classes c</span><br><span class="line"><span class="keyword">ON</span> s.class_id <span class="operator">=</span> c.id;</span><br></pre></td></tr></table></figure><p><img src="/2022/08/26/mysql%E5%9F%BA%E7%A1%80/%E5%A4%96%E8%BF%9E%E6%8E%A5.png" alt="image-20240726173438999"></p><h3 id><a href="#" class="headerlink" title></a></h3><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><p>当我们需要向数据库表中插入一条新记录时，使用<code>INSERT</code>语句。</p><ul><li>INSERT INTO &lt;表名&gt; (字段1, 字段2, …) VALUES (值1, 值2, …);</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (class_id, name, gender, score) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;老大&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">80</span>);</span><br><span class="line"># 插入多条数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (class_id, name, gender, score) <span class="keyword">VALUES</span></span><br><span class="line">  (<span class="number">3</span>, <span class="string">&#x27;老二&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">87</span>),</span><br><span class="line">  (<span class="number">4</span>, <span class="string">&#x27;老三&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">81</span>);</span><br><span class="line"># 可以使用不写字段的方式直接插入数据，需要注意字段个数和排序位置</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name  </span><br><span class="line"><span class="keyword">VALUES</span> (value1, value2, value3, ...); </span><br></pre></td></tr></table></figure><h4 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h4><p>更新数据库表中的记录，使用<code>UPDATE</code>语句</p><ul><li>UPDATE &lt;表名&gt; SET 字段1&#x3D;值1, 字段2&#x3D;值2, … WHERE …;</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> students <span class="keyword">SET</span> name<span class="operator">=</span><span class="string">&#x27;大牛&#x27;</span>, score<span class="operator">=</span><span class="number">66</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> students <span class="keyword">SET</span> score<span class="operator">=</span>score<span class="operator">+</span><span class="number">10</span> <span class="keyword">WHERE</span> score<span class="operator">&lt;</span><span class="number">80</span>;</span><br></pre></td></tr></table></figure><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><p>删除数据库表中的记录，我们可以使用<code>DELETE</code>语句。</p><ul><li>DELETE FROM &lt;表名&gt; WHERE …;</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>把多条sql语句作为一个整体进行操作的功能，被称为数据库<strong>事务</strong></p><p>数据库事务可以确保该事务范围内的所有操作都可以全部成功或者全部失败。如果事务失败，那么效果就和没有执行这些SQL一样，不会对数据库数据有任何改动。</p><p><strong>数据库事务具有ACID这4个特性：</strong></p><ul><li>A：Atomicity，原子性，将所有SQL作为原子工作单元执行，要么全部执行，要么全部不执行；</li><li>C：Consistency，一致性，事务完成后，所有数据的状态都是一致的，即A账户只要减去了100，B账户则必定加上了100；</li><li>I：Isolation，隔离性，如果有多个事务并发执行，每个事务作出的修改必须与其他事务隔离；</li><li>D：Durability，持久性，即事务完成后，对数据库数据的修改被持久化存储。</li></ul><p><strong>隐式事务</strong><br>对于单条SQL语句，数据库系统自动将其作为一个事务执行，这种事务被称为<em>隐式事务</em>。</p><p><strong>显式事务</strong><br>要手动把多条SQL语句作为一个事务执行，使用<code>BEGIN</code>开启一个事务，使用<code>COMMIT</code>提交一个事务，这种事务被称为<em>显式事务</em></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">100</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">100</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"># <span class="keyword">COMMIT</span>是指提交事务，即试图把事务内的所有<span class="keyword">SQL</span>所做的修改永久保存。</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">100</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">100</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"># 有些时候，我们希望主动让事务失败，这时，可以用<span class="keyword">ROLLBACK</span>回滚事务，整个事务会失败</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html5+css3</title>
      <link href="/2022/08/25/html5-css3/"/>
      <url>/2022/08/25/html5-css3/</url>
      
        <content type="html"><![CDATA[<p>&#96;</p><h2 id="html5"><a href="#html5" class="headerlink" title="html5"></a>html5</h2><h3 id="新标签"><a href="#新标签" class="headerlink" title="新标签"></a>新标签</h3><p>​HTML5引入了一些新的语义化标签，这些标签旨在更好地描述网页的结构和内容，提供更好的可读性和可访问性。</p><p>​这些新标签的引入有助于更好地组织和描述网页内容，提高可读性和可访问性。使用这些标签可以使网页结构更清晰，并为搜索引擎和辅助技术提供更多信息</p><ol><li><code>&lt;header&gt;</code>：定义文档或节的页眉，通常包含网站的标题、导航栏等内容。</li><li><code>&lt;nav&gt;</code>：定义导航链接的容器，用于包含网站的导航菜单。</li><li><code>&lt;section&gt;</code>：定义文档中的一个节或区块，通常包含一组相关的内容。</li><li><code>&lt;article&gt;</code>：定义独立的、完整的文章内容，如博客文章、新闻报道等。</li><li><code>&lt;aside&gt;</code>：定义页面的侧边栏内容，通常包含与主要内容相关但可以独立存在的内容。</li><li><code>&lt;footer&gt;</code>：定义文档或节的页脚，通常包含版权信息、联系方式等内容。</li><li><code>&lt;main&gt;</code>：定义文档的主要内容，每个文档中只能包含一个<code>&lt;main&gt;</code>标签。</li><li><code>&lt;figure&gt;</code>：定义一组媒体内容（如图像、图表、音频、视频等）及其标题。</li><li><code>&lt;figcaption&gt;</code>：定义<code>&lt;figure&gt;</code>元素的标题，用于描述与<code>&lt;figure&gt;</code>相关的媒体内容。</li><li><code>&lt;time&gt;</code>：定义日期或时间，可以用于表示发布日期、事件时间等。</li></ol><h3 id="表单控件"><a href="#表单控件" class="headerlink" title="表单控件"></a>表单控件</h3><p>​HTML5引入了一些新的表单控件，使得在网页中创建表单更加灵活和功能丰富。</p><ol><li><code>&lt;input type=&quot;date</code>：日期选择器，允许用户选择日期。</li><li><code>&lt;input=&quot;time&quot;&gt;</code>：时间输入框，允许用户选择时间。</li><li><code>&lt;input type=&quot;&quot;&gt;</code>：用于输入电子邮件地址，并提供浏览器端验证。</li><li><code>&lt;input type=&quot;url&quot;&gt;</code>：用于输入URL地址，并提供浏览器端验证。</li><li><code>&lt;input type=&quot;number&quot;&gt;</code>：数字输入框，允许用户输入数字，并可以设置小值、最大值等属性。</li><li><code>&lt;input type=&quot;range&quot;&gt;</code>：范围滑块，允许用户通过拖动块来选择一个值范围。</li><li><code>&lt;input type=&quot;color&quot;&gt;</code>颜色选择器，允许用户选择颜色。<br> 除了上述的新类型外，在 HTML 5还引入了对 <code>placeholder</code>, <code>autofocus</code>, <code>required</code>, 和 <code>pattern</code>(使用正则表达式进行简单格式验证) 属性的支持。</li></ol><ul><li>placeholder 设置默认提示文字</li><li>autofocus  设置自动获取焦点</li><li>autocomplete 设置是否有联想下拉，一般设置为“off”，将它关掉</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>网址:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">required</span> <span class="attr">placeholder</span>=<span class="string">&quot;http://xxx&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>邮箱:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">required</span> <span class="attr">placeholder</span>=<span class="string">&quot;123xxx@xxx.com&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>日期:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>时间:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;time&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>星期:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;week&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>数量:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>范围:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>电话:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;tel&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>颜色:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>搜索:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/25/html5-css3/%E8%A1%A8%E5%8D%95%E6%8E%A7%E4%BB%B6.png"></p><h3 id="音频视频"><a href="#音频视频" class="headerlink" title="音频视频"></a>音频视频</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>h5 音频 视频<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span>  <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">loop</span> <span class="attr">preload</span> <span class="attr">muted</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;source src=&quot;source/audio.mp3&quot; type=&quot;&quot;&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;source/audio02.wav&quot;</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span>  <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">loop</span> <span class="attr">preload</span> <span class="attr">width</span>=<span class="string">&quot;600&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;source/mov.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;source/mov.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/25/html5-css3/%E9%9F%B3%E9%A2%91%E8%A7%86%E9%A2%91.png"></p><h2 id="css3"><a href="#css3" class="headerlink" title="css3"></a>css3</h2><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><ul><li><p>id选择器（#box），选择id为box的元素</p></li><li><p>类选择器（.one），选择类名为one的所有元素</p></li><li><p>标签选择器（div），选择标签为div的所有元素</p></li><li><p>后代选择器（#box div），选择id为box元素内部所有的div元素</p></li><li><p>子选择器（.one&gt;one_1），选择父元素为.one的所有.one_1的元素</p></li><li><p>相邻同胞选择器（.one+.two），选择紧接在.one之后的所有.two元素</p></li><li><p>群组选择器（div,p），选择div、p的所有元素</p></li><li><p>伪类选择器</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">:first-of-type 表示一组同级元素中其类型的第一个元素</span><br><span class="line">:last-of-type 表示一组同级元素中其类型的最后一个元素</span><br><span class="line">:only-of-type 表示没有同类型兄弟元素的元素</span><br><span class="line">:only-child 表示没有任何兄弟的元素</span><br><span class="line">:nth-child(n) 根据元素在一组同级中的位置匹配元素</span><br><span class="line">:nth-last-of-type(n) 匹配给定类型的元素，基于它们在一组兄弟元素中的位置，从末尾开始计数</span><br><span class="line">:last-child 表示一组兄弟元素中的最后一个元素</span><br><span class="line">:root 设置HTML文档</span><br><span class="line">:empty 指定空的元素</span><br><span class="line">:enabled 选择可用元素</span><br><span class="line">:disabled 选择被禁用元素</span><br><span class="line">:checked 选择选中的元素</span><br><span class="line">:not(selector) 选择与 &lt;selector&gt; 不匹配的所有元素</span><br></pre></td></tr></table></figure></li><li><p>伪元素选择器</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:first-letter ：用于选取指定选择器的首字母</span><br><span class="line">:first-line ：选取指定选择器的首行</span><br><span class="line">:before : 选择器在被选元素的内容前面插入内容</span><br><span class="line">:after : 选择器在被选元素的内容后面插入内容</span><br></pre></td></tr></table></figure></li><li><p>属性选择器</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[attribute] 选择带有attribute属性的元素</span><br><span class="line">[attribute=value] 选择所有使用attribute=value的元素</span><br><span class="line">[attribute~=value] 选择attribute属性包含value的元素</span><br><span class="line">[attribute|=value]：选择attribute属性以value开头的元素</span><br><span class="line">[attribute*=value]：选择attribute属性值包含value的所有元素</span><br><span class="line">[attribute^=value]：选择attribute属性开头为value的所有元素</span><br><span class="line">[attribute$=value]：选择attribute属性结尾为value的所有元素</span><br></pre></td></tr></table></figure></li><li><p>层次选择器（p~ul），选择前面有p元素的每个ul元素</p></li></ul><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>​内联 &gt; ID选择器 &gt; 类选择器 &gt; 标签选择器</p><p>​经过上面的优先级计算规则，我们知道内联样式的优先级最高，如果外部样式需要覆盖内联样式，就需要使用<code>!important</code></p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h4 id="继承属性"><a href="#继承属性" class="headerlink" title="继承属性"></a>继承属性</h4><ul><li><p>字体系列属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font</span>:组合字体</span><br><span class="line">font-family:规定元素的字体系列</span><br><span class="line">font-weight:设置字体的粗细</span><br><span class="line">font-size:设置字体的尺寸</span><br><span class="line">font-style:定义字体的风格</span><br><span class="line">font-variant:偏大或偏小的字体</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>文本系列属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-indent</span>：文本缩进</span><br><span class="line"><span class="attribute">text-align</span>：文本水平对刘</span><br><span class="line"><span class="attribute">line-height</span>：行高</span><br><span class="line"><span class="attribute">word-spacing</span>：增加或减少单词间的空白</span><br><span class="line"><span class="attribute">letter-spacing</span>：增加或减少字符间的空白</span><br><span class="line"><span class="attribute">text-transform</span>：控制文本大小写</span><br><span class="line"><span class="attribute">direction</span>：规定文本的书写方向</span><br><span class="line"><span class="attribute">color</span>：文本颜色</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>元素可见性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">visibility</span></span><br></pre></td></tr></table></figure></li><li><p>表格布局属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">caption-side</span>：定位表格标题位置</span><br><span class="line"><span class="attribute">border-collapse</span>：合并表格边框</span><br><span class="line"><span class="attribute">border-spacing</span>：设置相邻单元格的边框间的距离</span><br><span class="line"><span class="attribute">empty-cells</span>：单元格的边框的出现与消失</span><br><span class="line"><span class="attribute">table-layout</span>：表格的宽度由什么决定</span><br></pre></td></tr></table></figure></li><li><p>列表属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">list-style-type</span>：文字前面的小点点样式</span><br><span class="line"><span class="attribute">list-style-position</span>：小点点位置</span><br><span class="line"><span class="attribute">list-style</span>：以上的属性可通过这属性集合</span><br></pre></td></tr></table></figure></li><li><p>引用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">quotes</span>：设置嵌套引用的引号类型</span><br></pre></td></tr></table></figure></li><li><p>光标属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cursor</span>：箭头可以变成需要的形状</span><br></pre></td></tr></table></figure></li></ul><p>继承中比较特殊的几点：</p><ul><li>a 标签的字体颜色不能被继承</li><li>h1-h6标签字体的大下也是不能被继承的</li></ul><h4 id="无继承的属性"><a href="#无继承的属性" class="headerlink" title="无继承的属性"></a>无继承的属性</h4><ul><li>display</li><li>文本属性：vertical-align、text-decoration</li><li>盒子模型的属性：宽度、高度、内外边距、边框等</li><li>背景属性：背景图片、颜色、位置等</li><li>定位属性：浮动、清除浮动、定位position等</li><li>生成内容属性：content、counter-reset、counter-increment</li><li>轮廓样式属性：outline-style、outline-width、outline-color、outline</li><li>页面样式属性：size、page-break-before、page-break-after</li></ul><h3 id="em-px-rem-vh-vw"><a href="#em-px-rem-vh-vw" class="headerlink" title="em&#x2F;px&#x2F;rem&#x2F;vh&#x2F;vw"></a>em&#x2F;px&#x2F;rem&#x2F;vh&#x2F;vw</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>​传统的项目开发中，我们只会用到<code>px</code>、<code>%</code>、<code>em</code>这几个单位，它可以适用于大部分的项目开发，且拥有比较良好的兼容性；从<code>CSS3</code>开始，浏览器对计量单位的支持又提升到了另外一个境界，新增了<code>rem</code>、<code>vh</code>、<code>vw</code>、<code>vm</code>等一些新的计量单位</p><h4 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h4><table><thead><tr><th>CSS单位</th><th></th></tr></thead><tbody><tr><td>相对长度单位</td><td>em、ex、ch、rem、vw、vh、vmin、vmax、%</td></tr><tr><td>绝对长度单位</td><td>cm、mm、in、px、pt、pc</td></tr></tbody></table><ul><li><p>px</p><p><code>px</code>为绝对单位，在于<code>px</code>的大小和元素的其他属性无关</p></li><li><p>em</p><p>em是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸（<code>1em = 16px</code>）</p><ul><li>em 的值并不是固定的</li><li>em 会继承父级元素的字体大小</li><li>em 是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸</li><li>任意浏览器的默认字体高都是 16px</li></ul></li><li><p>rem</p><p>rem，相对单位，相对的只是HTML根元素<code>font-size</code>的值</p><p>特点：</p><ul><li>rem单位可谓集相对大小和绝对大小的优点于一身</li><li>和em不同的是rem总是相对于根元素，而不像em一样使用级联的方式来计算尺寸</li></ul></li><li><p>vh、vw</p><p>vw ，就是根据窗口的宽度，分成100等份，100vw就表示满宽，50vw就表示一半宽。（vw 始终是针对窗口的宽），同理，<code>vh</code>则为窗口的高度</p><ul><li>对于普通定位元素就是我们理解的父元素</li><li>对于position: absolute;的元素是相对于已定位的父元素</li><li>对于position: fixed;的元素是相对于 ViewPort（可视窗口）</li></ul></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>​<strong>px</strong>：绝对单位，页面按精确像素展示</p><p>​<strong>em</strong>：相对单位，基准点为父节点字体的大小，如果自身定义了<code>font-size</code>按自身来计算，整个页面内<code>1em</code>不是一个固定的值</p><p>​<strong>rem</strong>：相对单位，可理解为<code>root em</code>, 相对根节点<code>html</code>的字体大小来计算</p><p>​<strong>vh、vw</strong>：主要用于页面视口大小布局，在页面布局上更加方便简单</p><h3 id="圆角-border-radius"><a href="#圆角-border-radius" class="headerlink" title="圆角 (border-radius)"></a>圆角 (border-radius)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>css3 圆角<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">2px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">50px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* border-top-left-radius:100px 50px; */</span></span></span><br><span class="line"><span class="language-css"><span class="comment">/* border-top-left-radius:100px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">border-top-right-radius:100px; */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* border-radius:40px; */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* border-radius:20%; */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">border-radius</span>:<span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/25/html5-css3/%E5%9C%86%E8%A7%92.png"></p><h3 id="阴影-box-shadow"><a href="#阴影-box-shadow" class="headerlink" title="阴影 (box-shadow)"></a>阴影 (box-shadow)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>css3 阴影<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">100px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">box-shadow</span>:<span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> <span class="number">0px</span> pink;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">100px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">box-shadow</span>:<span class="number">0px</span> <span class="number">0px</span> <span class="number">20px</span> <span class="number">2px</span> red inset;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/25/html5-css3/%E9%98%B4%E5%BD%B1.png"></p><h3 id="透明度"><a href="#透明度" class="headerlink" title="透明度"></a>透明度</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>css 透明度<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:<span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* background:url(images/location_bg.jpg); */</span></span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">50px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">2px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-radius</span>:<span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">opacity</span>:<span class="number">0.3</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">filter</span>:<span class="built_in">alpha</span>(opacity=<span class="number">30</span>);</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">line-height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">50px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">2px</span> solid <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>);</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-radius</span>:<span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">line-height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:<span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">215</span>,<span class="number">0</span>,<span class="number">0.3</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>床前明月光<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>床前明月光<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/25/html5-css3/%E9%80%8F%E6%98%8E%E5%BA%A6.png"></p><h3 id="过渡动画"><a href="#过渡动画" class="headerlink" title="过渡动画"></a>过渡动画</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* transition:border-radius 500ms ease,width 500ms ease 500ms,height 500ms ease 1s,background-color 500ms ease 1.5s; */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">transition</span>:all <span class="number">500ms</span> ease;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:red;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-radius</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/25/html5-css3/%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB.gif"></p><h3 id="运动曲线"><a href="#运动曲线" class="headerlink" title="运动曲线"></a>运动曲线</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-bottom</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transition</span>:all <span class="number">1s</span> linear;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>)&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transition</span>:all <span class="number">1s</span> ease;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>)&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transition</span>:all <span class="number">1s</span> ease-in;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>)&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transition</span>:all <span class="number">1s</span> ease-out;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>)&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transition</span>:all <span class="number">1s</span> ease-in-out;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">6</span>)&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transition</span>:all <span class="number">1s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.750</span>, -<span class="number">0.425</span>, <span class="number">0.055</span>, <span class="number">1.480</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">1000px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>linear<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>ease<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>ease-in<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>ease-out<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>ease-in-out<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>bezier<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/25/html5-css3/%E8%BF%90%E5%8A%A8%E6%9B%B2%E7%BA%BF.gif"></p><h3 id="动画案例-文字遮罩"><a href="#动画案例-文字遮罩" class="headerlink" title="动画案例( 文字遮罩)"></a>动画案例( 文字遮罩)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">50px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>:relative;</span></span><br><span class="line"><span class="language-css"><span class="attribute">overflow</span>:hidden;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span>  <span class="selector-class">.pic_info</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>);</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:<span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>:absolute;</span></span><br><span class="line"><span class="language-css"><span class="attribute">left</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">top</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transition</span>:all <span class="number">500ms</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.750</span>, -<span class="number">0.425</span>, <span class="number">0.055</span>, <span class="number">1.480</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span>  <span class="selector-class">.pic_info</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">line-height</span>:<span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.pic_info</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">top</span>:<span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/location_bg.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pic_info&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>图片说明：这是一个风景图图片说明：这是一个风景图图片说明：这是一个风景图<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/25/html5-css3/%E6%96%87%E5%AD%97%E9%81%AE%E7%BD%A9.gif"></p><h3 id="元素旋转"><a href="#元素旋转" class="headerlink" title="元素旋转"></a>元素旋转</h3><ul><li>倾斜</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/*  旋转方向判断</span></span></span><br><span class="line"><span class="comment"><span class="language-css"></span></span></span><br><span class="line"><span class="comment"><span class="language-css">1、x轴向右、y轴向下、z轴向屏幕外</span></span></span><br><span class="line"><span class="comment"><span class="language-css"></span></span></span><br><span class="line"><span class="comment"><span class="language-css">2、让轴向对着自己，顺时针方向就是该轴向的旋转方向</span></span></span><br><span class="line"><span class="comment"><span class="language-css"></span></span></span><br><span class="line"><span class="comment"><span class="language-css"></span></span></span><br><span class="line"><span class="comment"><span class="language-css">   */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">50px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transition</span>:all <span class="number">500ms</span> ease;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">transform-style</span>:preserve-<span class="number">3</span>d;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transform</span>:<span class="built_in">perspective</span>(<span class="number">800px</span>) <span class="built_in">rotateX</span>(<span class="number">0deg</span>);</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-css">Z 轴旋转</span></span></span><br><span class="line"><span class="comment"><span class="language-css">transform:rotate(45deg); </span></span></span><br><span class="line"><span class="comment"><span class="language-css"></span></span></span><br><span class="line"><span class="comment"><span class="language-css">*/</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">transform</span>:<span class="built_in">perspective</span>(<span class="number">800px</span>) <span class="built_in">rotateX</span>(-<span class="number">30deg</span>);</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/25/html5-css3/%E5%85%83%E7%B4%A0%E6%97%8B%E8%BD%AC1.gif"></p><ul><li>旋转</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>图片翻面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.con</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">272px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">100px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>:relative;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transform-style</span>:preserve-<span class="number">3</span>d;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transform</span>:<span class="built_in">perspective</span>(<span class="number">800px</span>) <span class="built_in">rotateY</span>(<span class="number">0deg</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.pic</span>,<span class="selector-class">.info</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">272px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>:absolute;</span></span><br><span class="line"><span class="language-css"><span class="attribute">left</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">top</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">backface-visibility</span>:hidden;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transform</span>:<span class="built_in">perspective</span>(<span class="number">800px</span>) <span class="built_in">rotateY</span>(<span class="number">0deg</span>);</span></span><br><span class="line"><span class="language-css"><span class="attribute">transition</span>:all <span class="number">2000ms</span> ease;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.info</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">line-height</span>:<span class="number">272px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transform</span>:<span class="built_in">translateZ</span>(<span class="number">2px</span>) <span class="built_in">rotateY</span>(<span class="number">180deg</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.con</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.pic</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transform</span>:<span class="built_in">perspective</span>(<span class="number">800px</span>) <span class="built_in">rotateY</span>(<span class="number">180deg</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.con</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.info</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transform</span>:<span class="built_in">perspective</span>(<span class="number">800px</span>) <span class="built_in">rotateY</span>(<span class="number">0deg</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;con&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/location_bg.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span>图片文字说明<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/25/html5-css3/%E5%85%83%E7%B4%A0%E6%97%8B%E8%BD%AC2.gif"></p><h3 id="案例风车动画"><a href="#案例风车动画" class="headerlink" title="案例风车动画"></a>案例风车动画</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>animation 动画<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">50px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">images/fengche.png</span>) no-repeat;</span></span><br><span class="line"><span class="language-css"><span class="attribute">animation</span>:moving <span class="number">1s</span> linear <span class="number">0s</span> infinite;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="keyword">@keyframes</span> moving&#123;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">from</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">0deg</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">to</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">360deg</span>);</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/25/html5-css3/%E9%A3%8E%E8%BD%A6%E5%8A%A8%E7%94%BB.gif"></p><h3 id="案例loading动画"><a href="#案例loading动画" class="headerlink" title="案例loading动画"></a>案例loading动画</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">125px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">200px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">70px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-radius</span>:<span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:red;</span></span><br><span class="line"><span class="language-css"><span class="attribute">animation</span>:loading <span class="number">500ms</span> ease <span class="number">0s</span> infinite alternate;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>)&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:green;</span></span><br><span class="line"><span class="language-css"><span class="attribute">animation</span>:loading <span class="number">500ms</span> ease <span class="number">100ms</span> infinite alternate;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>)&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:pink;</span></span><br><span class="line"><span class="language-css"><span class="attribute">animation</span>:loading <span class="number">500ms</span> ease <span class="number">200ms</span> infinite alternate;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>)&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:greenyellow;</span></span><br><span class="line"><span class="language-css"><span class="attribute">animation</span>:loading <span class="number">500ms</span> ease <span class="number">300ms</span> infinite alternate;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>)&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:cyan;</span></span><br><span class="line"><span class="language-css"><span class="attribute">animation</span>:loading <span class="number">500ms</span> ease <span class="number">400ms</span> infinite alternate;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="keyword">@keyframes</span> loading&#123;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">from</span>&#123;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">transform</span>:<span class="built_in">scaleY</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">to</span>&#123;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">transform</span>:<span class="built_in">scaleY</span>(<span class="number">0.5</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>loading...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/25/html5-css3/loading.gif"></p><h3 id="background-size"><a href="#background-size" class="headerlink" title="background-size"></a>background-size</h3><p>​<code>background-size</code>属性用于指定背景图片的尺寸大小。通过设置<code>background-size</code>属性，你可以控制背景图片的显示方式，使其适应元素的大小或呈现特定效果</p><ul><li><p>语法：<code>background-size: value;</code></p><p>可以是以下几种取值：</p><ul><li><code>auto</code>: 默认值，保持背景图片原始大小。</li><li><code>&lt;length&gt;</code>: 使用具体的长度值来定义背景图片的大小。</li><li><code>&lt;percentage&gt;</code>: 使用百分比来定义背景图片的大小，相对于包含块的大小。</li><li><code>cover</code>: 背景图片等比例放大或缩小，以完全覆盖元素。</li><li><code>contain</code>: 背景图片等比例放大或缩小，以完全包含在元素内。</li></ul></li></ul><h3 id="流式布局"><a href="#流式布局" class="headerlink" title="流式布局"></a>流式布局</h3><p>​流式布局（Fluid Layout）是一种网页布局设计方法，其特点是元素的宽度不固定的像素值而是根据浏览器窗口大小或设备屏幕大小进行自适应调整。</p><ul><li>流式布局使用对单位（如百分比）来定义元素的宽度，使得页面可以根据浏览器窗口大小自动调整布局。</li><li>元素的宽度会随着浏览器窗口大小的变化而自动调整，从而适应不同分辨率的设备。</li><li>流式布局通常会结合媒体查询（Media Queries）来实现响应式设计，以适配不同设备的屏幕大小。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>流体布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span>,<span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>:<span class="number">0</span></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">list-style</span>:none;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-css">第一种解决宽度超过的方法：</span></span></span><br><span class="line"><span class="comment"><span class="language-css">width:calc(25% - 4px); </span></span></span><br><span class="line"><span class="comment"><span class="language-css"></span></span></span><br><span class="line"><span class="comment"><span class="language-css">*/</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">25%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">line-height</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">2px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">box-sizing</span>:border-box;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;menu&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>菜单文字<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>菜单文字<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>菜单文字<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>菜单文字<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/25/html5-css3/%E6%B5%81%E5%BC%8F%E5%B8%83%E5%B1%80.gif"></p><h3 id="响应式布局-媒体查询"><a href="#响应式布局-媒体查询" class="headerlink" title="响应式布局 (媒体查询)"></a>响应式布局 (媒体查询)</h3><p>​响应式布局是一种网页设计方法，旨在使网站在不同设备上（如桌面脑、平板电脑、手机等）都能呈现出最佳视觉和功能体验。</p><ul><li>响应式布局通过使用流式网格、弹性图片大小以及媒体查询等技术，使得页面能根据用户设备的屏幕大小动态调整布局和内容排列。</li><li>响应式设计需要考虑用户界面元的尺寸、排列方式和交互方式，并确保它们适不同设备，提供一致的用户体验。</li><li>对于不同屏尺寸，可以通过CSS中的媒体查询来设置不同样式规则，或者通过JavaScript实现功能上的适配。</li></ul><p><strong>使用优点：</strong></p><ol><li><strong>多设备兼容</strong>：响应式布局可以确保网站在各种移动设备和桌面端浏览器上都能良好展示，提高了跨平台兼容性。</li><li><strong>良好用户体验</strong>：无论用户用何种设备访问网站，响应式设计都可以为其提供舒适且一致的浏览体验。</li><li><strong>SEO友好</strong>：谷歌对移动友好度有利于搜索结果排序,而采用了响应布局就符合这个要求</li></ol><p><strong>使用缺点：</strong></p><ol start="6"><li><strong>复杂设计与开发成本较高</strong>：实施响应式设计需要更多精力让页面适各种情况,因此可能会增加项目成本</li><li><strong>加载速度变慢</strong>: 在某些情况下,加载相对大量图片会导致加载速度减慢</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>响应式布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span>,<span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">list-style</span>:none;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.con</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">overflow</span>:hidden;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.con</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">23%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">30px</span> <span class="number">1%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="keyword">@media</span> (<span class="attribute">max-width</span>:<span class="number">800px</span>)&#123;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.con</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">46%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">30px</span> <span class="number">2%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="keyword">@media</span> (<span class="attribute">max-width</span>:<span class="number">500px</span>)&#123;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.con</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">90%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">30px</span> <span class="number">5%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;con&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/25/html5-css3/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80.gif"></p><p>响应式布局还可以利用以下技术来实现：</p><ol><li><strong>Viewport单位</strong>：Viewport单位（如vw、vh、vmin、vmax）可以根据视口（浏览器窗口）的大小来设置元素的尺寸，从而实现响应式设计。</li><li><strong>Flexbox布局</strong>：使用CSS3中的Flexbox布局来实现灵活的盒子模型，可以更方便地实现响应式布局。</li><li><strong>CSS Grid布局</strong>：CSS Grid布局是一种二维网格布局系统，可以更灵活地控制元素的排列和布局，适用于响应式设计。</li><li><strong>图片响应式设计</strong>：通过设置图片的max-width属性为100%来使图片在不同设备上自适应调整大小，保持比例不变。</li><li><strong>字体响应式设计</strong>：使用相对单位（如em、rem）来设置字体大小，使得字体可以根据设备屏幕大小自适应调整。</li><li><strong>响应式框架</strong>：使用响应式框架（如Bootstrap、Foundation等）来快速构建响应式网站，这些框架提供了一系列的CSS和JavaScript组件，可以帮助开发者快速实现响应式设计。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> h5c3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Css第二章</title>
      <link href="/2022/08/19/css%E7%AC%AC%E4%BA%8C%E7%AB%A0/"/>
      <url>/2022/08/19/css%E7%AC%AC%E4%BA%8C%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><h4 id="相对定位（Relative-Positioning）"><a href="#相对定位（Relative-Positioning）" class="headerlink" title="相对定位（Relative Positioning）"></a>相对定位（Relative Positioning）</h4><ul><li>优点：相对定位不会脱离文档流，元素在页面中的位置仍然占据原先的空间，并且可以通过设置 <code>top</code>、<code>right</code>、<code>bottom</code>、<code>left</code> 属性来进行微调位置。</li><li>缺点：相对定位对其他元素的定位影响较小，无法实现脱离文档流的效果。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>相对定位<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.con</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">100px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.con</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">line-height</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> <span class="selector-class">.box01</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>:relative;</span></span><br><span class="line"><span class="language-css"><span class="attribute">left</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">top</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:green;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;con&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box01&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box02&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box03&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/19/css%E7%AC%AC%E4%BA%8C%E7%AB%A0/%E7%9B%B8%E5%AF%B9%E5%AE%9A%E4%BD%8D.png"></p><h4 id="绝对定位（Relative-Positioning）"><a href="#绝对定位（Relative-Positioning）" class="headerlink" title="绝对定位（Relative Positioning）"></a>绝对定位（Relative Positioning）</h4><ul><li>优点：绝对定位可以脱离文档流，相对于最近的具有定位属性（非 <code>static</code>）的父元素或者根据文档进行定位，可以精确控制元素的位置。</li><li>缺点：如果没有合适的参考对象或设置不当，可能导致布局混乱，需要谨慎使用。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>绝对定位<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.con</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">100px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>:relative;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.con</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">line-height</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> <span class="selector-class">.box01</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>:absolute;</span></span><br><span class="line"><span class="language-css"><span class="attribute">left</span>:-<span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">top</span>:-<span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:green;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;con&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box01&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box02&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box03&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/19/css%E7%AC%AC%E4%BA%8C%E7%AB%A0/%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D.png"></p><h4 id="固定定位（Fixed-Positioning）"><a href="#固定定位（Fixed-Positioning）" class="headerlink" title="固定定位（Fixed Positioning）"></a>固定定位（Fixed Positioning）</h4><ul><li>优点：固定定位会相对于浏览器窗口进行定位，即使页面滚动时也会保持在固定位置，常用于创建固定的导航栏或工具条。</li><li>缺点：在移动设备上可能存在兼容性问题，因为固定定位的元素会固定在屏幕上不动。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>固定定位<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.con</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">100px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>:relative;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.con</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">line-height</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> <span class="selector-class">.box01</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>:fixed;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* left:0; */</span></span></span><br><span class="line"><span class="language-css"><span class="attribute">right</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* top:0; */</span></span></span><br><span class="line"><span class="language-css"><span class="attribute">bottom</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:green;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box4</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:pink;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>:absolute;</span></span><br><span class="line"><span class="language-css"><span class="attribute">left</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">top</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;con&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box01&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box02&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box03&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box4&quot;</span>&gt;</span>第四个盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/19/css%E7%AC%AC%E4%BA%8C%E7%AB%A0/%E5%9B%BA%E5%AE%9A%E5%AE%9A%E4%BD%8D.png"></p><h3 id="元素层级"><a href="#元素层级" class="headerlink" title="元素层级"></a>元素层级</h3><p>​元素的层级关系指的是元素在页面上的覆盖顺序。通过设置 z-index 属性，可以控制元素在层级上的表现，使得某些元素可以覆盖其他元素或者位于其他元素之下,合理设置元素的层级关系可以让页面呈现出更加丰富的效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>元素层级<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.con</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">100px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>:relative;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.con</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">line-height</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>:absolute;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> <span class="selector-class">.box01</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:green;</span></span><br><span class="line"><span class="language-css"><span class="attribute">z-index</span>:<span class="number">10</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> <span class="selector-class">.box02</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:pink;</span></span><br><span class="line"><span class="language-css"><span class="attribute">left</span>:<span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">top</span>:<span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> <span class="selector-class">.box03</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">left</span>:<span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">top</span>:<span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">z-index</span>:<span class="number">11</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;con&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box01&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box02&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box03&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/19/css%E7%AC%AC%E4%BA%8C%E7%AB%A0/%E5%85%83%E7%B4%A0%E5%B1%82%E7%BA%A7.png"></p><h3 id="CSS背景"><a href="#CSS背景" class="headerlink" title="CSS背景"></a>CSS背景</h3><h4 id="背景-background-image"><a href="#背景-background-image" class="headerlink" title="背景 (background-image)"></a>背景 (background-image)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>背景<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">320px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">160px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">5px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-bottom</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">images/bg.jpg</span>);</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">320px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">160px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">5px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-bottom</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box3</span>&#123;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">320px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">160px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">5px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-bottom</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* background-color:gold;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">background-image:url(images/bg.jpg); */</span></span></span><br><span class="line"><span class="language-css"><span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-css">repeat:重复平铺;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">repeat-x：横向重复平铺</span></span></span><br><span class="line"><span class="comment"><span class="language-css">repeat-y：纵向重复平铺</span></span></span><br><span class="line"><span class="comment"><span class="language-css">no-repeat:不重复;</span></span></span><br><span class="line"><span class="comment"><span class="language-css"></span></span></span><br><span class="line"><span class="comment"><span class="language-css"> */</span></span></span><br><span class="line"><span class="language-css"><span class="comment">/* background-repeat:no-repeat; */</span></span></span><br><span class="line"><span class="language-css"><span class="comment">/* background-position:center; */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* background-position:-20px -20px; */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">images/bg.jpg</span>) -<span class="number">20px</span> -<span class="number">20px</span> gold no-repeat;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box4</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">5px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* background-image:url(images/location_bg.jpg);</span></span></span><br><span class="line"><span class="comment"><span class="language-css">background-repeat:no-repeat;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">background-position:-110px -150px; */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">images/location_bg.jpg</span>) -<span class="number">110px</span> -<span class="number">150px</span> no-repeat;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>背景图片<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/bg.jpg&quot;</span>&gt;</span>背景图片<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box4&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/19/css%E7%AC%AC%E4%BA%8C%E7%AB%A0/%E8%83%8C%E6%99%AF.png"></p><h4 id="背景滚动-background-attachment"><a href="#背景滚动-background-attachment" class="headerlink" title="背景滚动 (background-attachment)"></a>背景滚动 (background-attachment)</h4><ul><li><code>background-attachment: scroll;</code>: 这是默认值，背景图片会随着元素内容滚动，即整个页面滚动时，背景图片也会随之滚动。</li><li><code>background-attachment: fixed;</code>: 背景图片固定在视口中的位置，当页面滚动时，背景图片不会跟随滚动，保持固定位置。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>背景滚动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">images/location_bg.jpg</span>);</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">1000px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-attachment</span>:fixed;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">实际应用中，我们可以用background属性将上面所有的设置项放在一起，而且也建议这么做，这样做性能更高，而且兼容性更好，比如：“background: #00FF00 url(bgimage.gif) no-repeat left center fixed”，这里面的“#00ff00”是设置background-color；“url(bgimage.gif)”是设置background-image；“no-repeat”是设置background-repeat；“left center”是设置background-position；“fixed”是设置background-attachment，各个设置项用空格隔开，有的设置项不写也是可以的，它会使用默认值。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">实际应用中，我们可以用background属性将上面所有的设置项放在一起，而且也建议这么做，这样做性能更高，而且兼容性更好，比如：“background: #00FF00 url(bgimage.gif) no-repeat left center fixed”，这里面的“#00ff00”是设置background-color；“url(bgimage.gif)”是设置background-image；“no-repeat”是设置background-repeat；“left center”是设置background-position；“fixed”是设置background-attachment，各个设置项用空格隔开，有的设置项不写也是可以的，它会使用默认值。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="css权重"><a href="#css权重" class="headerlink" title="css权重"></a>css权重</h3><p>权重的计算规则如下：</p><ul><li>每个选择器都有一个特定的权重值，权重值由四个部分组成：行内样式（1000）、ID选择器（100）、类选择器、伪类和属性选择器（10）、元素和伪元素选择器（1）。</li><li>通配符（*）、关系选择器（+、&gt;、~、’ ‘）和通用选择器（div、p、span等）的权重值为0。</li><li>权重值越高的规则优先级越高，当多个规则的权重相同时，后定义的规则会覆前面的规则。</li></ul><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="布局案例1-hd-ft"><a href="#布局案例1-hd-ft" class="headerlink" title="布局案例1 - hd+ft"></a>布局案例1 - hd+ft</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>布局实例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.pagenation</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">958px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">50px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.pagenation</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>:inline-block;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>:<span class="number">5px</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>:<span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-family</span>:<span class="string">&#x27;Microsoft Yahei&#x27;</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-decoration</span>:none;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">8px</span> <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:<span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.pagenation</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:red;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:<span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.pagenation</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>:inline-block;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>:<span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">958px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">50px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">list-style</span>:none;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">line-height</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>:inline-block;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>:<span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span> <span class="selector-class">.line</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:<span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">0</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-family</span>:<span class="string">&#x27;Microsoft Yahei&#x27;</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:<span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-decoration</span>:none;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;menu&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>首 页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>网站建设<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>网站建设<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>网站建设<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>网站建设<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>网站建设<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>网站建设<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pagenation&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>17<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>18<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>19<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>20<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/19/css%E7%AC%AC%E4%BA%8C%E7%AB%A0/%E5%B8%83%E5%B1%801.png"></p><h4 id="布局案例2-nav"><a href="#布局案例2-nav" class="headerlink" title="布局案例2 - nav"></a>布局案例2 - nav</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>布局实例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">list-style</span>:none;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:<span class="number">#55a8ea</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">960px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">50px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>:relative;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">line-height</span>:<span class="number">40px</span>; </span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* font-size:14px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">font-family:&#x27;Microsoft Yahei&#x27;;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">color:#fff; */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">font</span>:<span class="number">14px</span>/<span class="number">40px</span> <span class="string">&#x27;Microsoft Yahei&#x27;</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:<span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-decoration</span>:none;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:<span class="number">#00619f</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span> <span class="selector-class">.active</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:<span class="number">#00619f</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span> <span class="selector-class">.new</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">33px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">images/new.png</span>) no-repeat;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>:absolute;</span></span><br><span class="line"><span class="language-css"><span class="attribute">left</span>:<span class="number">433px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">top</span>:-<span class="number">9px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span> <span class="selector-class">.new</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">images/new.png</span>) no-repeat;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;menu&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>首 页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>网站建设<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>网站建设<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>网站建设<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>网站建设<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>网站建设<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>网站建设<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;new&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/19/css%E7%AC%AC%E4%BA%8C%E7%AB%A0/%E5%B8%83%E5%B1%802.png"></p><h4 id="布局案例3"><a href="#布局案例3" class="headerlink" title="布局案例3"></a>布局案例3</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>特征布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.news_list_con</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">290px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">50px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">overflow</span>:hidden;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.news_list_con</span> <span class="selector-tag">h3</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">560px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-bottom</span>:<span class="number">1px</span> solid <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">0px</span> auto;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.news_list_con</span> <span class="selector-tag">h3</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-bottom</span>:<span class="number">2px</span> solid red;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font</span>:<span class="number">18px</span>/<span class="number">50px</span> <span class="string">&#x27;Microsoft Yahei&#x27;</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:<span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>:<span class="number">0</span> <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>:relative;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.news_list_con</span> <span class="selector-tag">h3</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span><span class="selector-pseudo">:right</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font</span>:<span class="number">14px</span>/<span class="number">14px</span> <span class="string">&#x27;Microsoft Yahei&#x27;</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:<span class="number">#666</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-decoration</span>:none;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-top</span>:<span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.news_list_con</span> <span class="selector-tag">h3</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.news_list_con</span> <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">list-style</span>:none;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">560px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">238px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">7px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.news_list_con</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">38px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-bottom</span>:<span class="number">1px</span> solid <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">images/dot.gif</span>) left center no-repeat;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.news_list_con</span> <span class="selector-tag">ul</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">38px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font</span>:<span class="number">14px</span>/<span class="number">38px</span> <span class="string">&#x27;Microsoft Yahei&#x27;</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-decoration</span>:none;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:<span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-indent</span>:<span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">images/icon.jpg</span>) <span class="number">5px</span> center no-repeat;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.news_list_con</span> <span class="selector-tag">ul</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.news_list_con</span> <span class="selector-tag">ul</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span><span class="selector-pseudo">:right</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">38px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font</span>:<span class="number">14px</span>/<span class="number">38px</span> <span class="string">&#x27;Microsoft Yahei&#x27;</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:<span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;news_list_con&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>新闻列表<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>更多<span class="symbol">&amp;gt;</span><span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>特征布局：新闻列表所需知识点：盒模型、浮动<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2016-11-25<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>特征布局：新闻列表所需知识点：盒模型、浮动<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2016-11-25<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>特征布局：新闻列表所需知识点：盒模型、浮动<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2016-11-25<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>特征布局：新闻列表所需知识点：盒模型、浮动<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2016-11-25<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>特征布局：新闻列表所需知识点：盒模型、浮动<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2016-11-25<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>特征布局：新闻列表所需知识点：盒模型、浮动<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2016-11-25<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/19/css%E7%AC%AC%E4%BA%8C%E7%AB%A0/%E5%B8%83%E5%B1%803.png"></p><h4 id="布局案例4"><a href="#布局案例4" class="headerlink" title="布局案例4"></a>布局案例4</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>布局复习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">li</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">list-style</span>:none;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.goods_list_con</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">498px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">343px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">50px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.goods_list_con</span> <span class="selector-tag">h3</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">436px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font</span>:<span class="number">20px</span>/<span class="number">20px</span> <span class="string">&#x27;Microsoft Yahei&#x27;</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:<span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">30px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-left</span>:<span class="number">4px</span> solid red;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-indent</span>:<span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.pic</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">212px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">239px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:pink;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">17px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">29px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.goods_list</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">211px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">239px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span><span class="selector-pseudo">:right</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">17px</span> <span class="number">29px</span> <span class="number">0</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.pic_list</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">105px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">142px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.pic_list</span> <span class="selector-class">.picshow</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>:block;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">70px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">90px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:green;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.pic_list</span> <span class="selector-tag">h4</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font</span>:<span class="number">16px</span>/<span class="number">40px</span> <span class="string">&#x27;Microsoft Yahei&#x27;</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:<span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.goods_list</span> <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">211px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">97px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.goods_list</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">104px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">47px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">1px</span> dashed <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-right</span>:-<span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-bottom</span>:-<span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.goods_list</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>:inline-block;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">104px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">47px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-decoration</span>:none;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font</span>:<span class="number">14px</span>/<span class="number">47px</span> <span class="string">&#x27;Microsoft Yahei&#x27;</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:<span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.goods_list</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>:pink;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;goods_list_con&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>淘宝女装<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;goods_list&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pic_list&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;picshow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>时尚包包<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pic_list&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;picshow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>潮流美鞋<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>新品上市<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>女装<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>欧美风<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>美搭<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/19/css%E7%AC%AC%E4%BA%8C%E7%AB%A0/%E5%B8%83%E5%B1%804.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Css第一章</title>
      <link href="/2022/08/17/css%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
      <url>/2022/08/17/css%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="CSS样式引用"><a href="#CSS样式引用" class="headerlink" title="CSS样式引用"></a>CSS样式引用</h3><p>​css样式写法分为：内联样式 ，内嵌样式，外联样式；其中内联优先级最高，外部样式表的优先级最低</p><p>​!important 规则可以增加样式的权重，覆盖任何其他声明</p><div class="tabs" id="unique-name"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="unique-name-1">内联样式</button><button type="button" class="tab " data-href="unique-name-2">内嵌样式</button><button type="button" class="tab " data-href="unique-name-3">外联样式</button></ul><div class="tab-contents"><div class="tab-item-content active" id="unique-name-1"><p>内联样式，直接在html标签加上style属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>这是一段带有内联样式的文本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="unique-name-2"><p>和html元素放在同一个html文件下，用<code>&lt;style&gt; </code>标签包裹</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="unique-name-3"><p>单独创建.css 文件，在需要用到的html文件内使用link导入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="css选择器"><a href="#css选择器" class="headerlink" title="css选择器"></a>css选择器</h3><p>​选择器用于指定要样式化的HTML元素。选择器可以根据元素的标签名、类名、ID等属性来选择元素。</p><h4 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h4><p>​元素选择器（Element Selector）：根据元素的标签名选择元素。例如，选择所有段落元素可以使用 <code>p</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p &#123;</span><br><span class="line">  color: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类名选择器"><a href="#类名选择器" class="headerlink" title="类名选择器"></a>类名选择器</h4><p>​类选择器（Class Selector）：根据元素的类名选择元素。类选择器以<code>.</code>开头，后面跟类名。例如，选择类名为 <code>highlight</code> 的元素可以使用 <code>.highlight</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.highlight &#123;</span><br><span class="line">  background-color: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h4><p>​ID选择器（ID Selector）：根据元素的ID选择元素。ID选择器以<code>#</code>开头，后面跟ID名。每个页面中的ID应该是唯一的。例如，选择ID为 <code>header</code> 的元素可以使用 <code>#header</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#header &#123;</span><br><span class="line">  font-size: 24px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h4><p>​后代选择器（Descendant Selector）：选择指定元素的后代元素。后代选择器使用空格分隔不同的选择器。例如，选择 <code>.content</code> 元素内的所有 <code>p</code> 元素：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.content p &#123;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h4><p>​子元素选择器（Child Selector）：选择指定元素的直接子元素。子元素选择器使用 <code>&gt;</code> 分隔不同的选择器。例如，选择 <code>.menu</code> 元素的直接子元素 <code>li</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.menu &gt; li &#123;</span><br><span class="line">  list-style-type: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通用选择器"><a href="#通用选择器" class="headerlink" title="通用选择器"></a>通用选择器</h4><p>​通用选择器（Universal Selector）：选择所有元素。通用选择器使用 <code>*</code> 表示。例如，为所有元素设置默认边框：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  border: 1px solid black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>​通过css就可以将html表格进行优化</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>表格样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.goods_list</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-collapse</span>:collapse;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-family</span>: <span class="string">&#x27;Microsoft Yahei&#x27;</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.goods_list</span> <span class="selector-tag">th</span>,<span class="selector-class">.goods_list</span> <span class="selector-tag">td</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.goods_list</span> <span class="selector-tag">th</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:<span class="number">#3366cc</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:<span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;goods_list&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>价格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>备注<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>¥ 5.00<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>销售中<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>¥ 5.00<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>销售中<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>¥ 5.00<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>销售中<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/17/css%E7%AC%AC%E4%B8%80%E7%AB%A0/table1.png"></p><h3 id="CSS-盒子模型"><a href="#CSS-盒子模型" class="headerlink" title="CSS 盒子模型"></a>CSS 盒子模型</h3><p>​CSS盒模型是指在网页布局时，每个元素被看作一个矩形的盒子，这个盒子包括内容区域、内边距（padding）、边框（border）和外边距（margin）。</p><ul><li><p>内容区域（Content）：内容区域包含元素的实际内容，例如文本、图片等。内容区域的宽度和高度可以通过设置元素的 <code>width</code> 和 <code>height</code> 属性来控制。</p></li><li><p>内边距（Padding）：内边距是内容区域与边框之间的空白区域，用于控制元素内容与边框之间的距离。内边距的大小可以通过设置元素的 <code>padding-top</code>、<code>padding-right</code>、<code>padding-bottom</code> 和 <code>padding-left</code> 属性来指定，也可以使用 <code>padding</code> 属性简写设置所有方向的内边距。</p></li><li><p>边框（Border）：边框包围在内边距的外侧，用于围绕元素内容和内边距创建可见的边界。边框的样式、宽度和颜色可以通过设置元素的 <code>border-style</code>、<code>border-width</code> 和 <code>border-color</code> 属性来指定。</p></li><li><p>外边距（Margin）：外边距是边框与相邻元素之间的空白区域，用于控制元素与其他元素之间的距离。外边距的大小可以通过设置元素的 <code>margin-top</code>、<code>margin-right</code>、<code>margin-bottom</code> 和 <code>margin-left</code> 属性来指定，也可以使用 <code>margin</code> 属性简写设置所有方向的外边距。</p><p>在CSS中，元素的宽度（width）和高度（height）指的是内容区域的宽度和高度，而元素的总宽度和总高度还要加上内边距、边框和外边距的宽度。这个概念称为“盒模型”。</p></li></ul><p><img src="/2022/08/17/css%E7%AC%AC%E4%B8%80%E7%AB%A0/%E7%9B%92%E6%A8%A1%E5%9E%8B.png"></p><h3 id="盒子尺寸"><a href="#盒子尺寸" class="headerlink" title="盒子尺寸"></a>盒子尺寸</h3><h4 id="标准盒模型-vs-IE-盒模型"><a href="#标准盒模型-vs-IE-盒模型" class="headerlink" title="标准盒模型 vs. IE 盒模型"></a>标准盒模型 vs. IE 盒模型</h4><ul><li>标准盒模型（content-box）：元素的宽度和高度只包括内容区域，不包括内边距（padding）、边框（border）和外边距（margin）。</li><li>IE 盒模型（border-box）：元素的宽度和高度包括内容区域、内边距和边框，但不包括外边距。</li></ul><h4 id="盒子尺寸计算公式"><a href="#盒子尺寸计算公式" class="headerlink" title="盒子尺寸计算公式"></a>盒子尺寸计算公式</h4><ul><li>对于标准盒模型：总宽度 &#x3D; 内容宽度 + 左内边距 + 右内边距 + 左边框 + 右边框 + 左外边距 + 右外边距</li><li>对于 IE 盒模型：总宽度 &#x3D; 内容宽度 + 左边框 + 右边框 + 左外边距 + 右外边距</li></ul><h4 id="盒模型的设置"><a href="#盒模型的设置" class="headerlink" title="盒模型的设置"></a>盒模型的设置</h4><ul><li>可以通过设置 CSS 的 <code>box-sizing</code> 属性来指定盒模型的类型，取值可以是 <code>content-box</code> 或 <code>border-box</code>。</li><li>在保证兼容性的前提下，可以使用以下代码设置盒模型： <code>box-sizing: border-box;</code>（部分浏览器支持）</li></ul><h4 id="兼容性问题"><a href="#兼容性问题" class="headerlink" title="兼容性问题"></a>兼容性问题</h4><ul><li>在编写 CSS 样式时，应该尽量考虑跨浏览器的兼容性问题。特别是在处理盒子尺寸时，需要谨慎选择盒模型，以确保页面在不同浏览器下显示一致。</li><li>在处理盒子尺寸和布局时，可以使用现代的布局技术（如 Flexbox 和 Grid）来简化代码并提高兼容性。</li></ul><h3 id="垂直margin合并问题"><a href="#垂直margin合并问题" class="headerlink" title="垂直margin合并问题"></a>垂直margin合并问题</h3><p>​两个相邻块级元素的上下 margin 相遇时，它们的 margin 会合并成一个 margin 的现象</p><ol><li>同一方向相邻元素的 margin 会合并：<ul><li>当两个相邻的块级元素中的 margin 相遇时，它们的 margin 会合并为一个 margin，取两者中较大的那个值作为最终的 margin。</li></ul></li><li>没有边框、padding、inline内容或 clearance 分隔的父子元素 margin 也会合并：<ul><li>如果一个父元素没有 border、padding、inline 内容或 clearance 分隔，且其第一个或最后一个子元素的 margin 会和父元素的 margin 合并。</li></ul></li><li>为了避免垂直 margin 合并带来的意外结果，可以考虑以下方法来解决或减少合并问题<ul><li>设置一个元素的 border、padding 或 overflow 属性可以防止其 margin 和其子元素的 margin 合并。</li><li>在两个相邻元素之间插入一个空的内联元素，可以阻止它们的 margin 合并。</li><li>为一个块级元素添加一个 <code>display: inline-block;</code> 可以阻止其 margin 与相邻元素的 margin 合并。</li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>垂直margin合并<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">50px</span> auto;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">text-indent</span>:<span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* margin-left:20px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">margin-right:20px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">margin-top:30px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">margin-bottom:30px; */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">30px</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。解决方法如下：</span><br><span class="line"></span><br><span class="line">1、使用这种特性</span><br><span class="line">2、设置一边的外边距，一般设置margin-top</span><br><span class="line">3、将元素浮动或者定位</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。解决方法如下：</span><br><span class="line"></span><br><span class="line">1、使用这种特性</span><br><span class="line">2、设置一边的外边距，一般设置margin-top</span><br><span class="line">3、将元素浮动或者定位</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。解决方法如下：</span><br><span class="line"></span><br><span class="line">1、使用这种特性</span><br><span class="line">2、设置一边的外边距，一般设置margin-top</span><br><span class="line">3、将元素浮动或者定位</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。解决方法如下：</span><br><span class="line"></span><br><span class="line">1、使用这种特性</span><br><span class="line">2、设置一边的外边距，一般设置margin-top</span><br><span class="line">3、将元素浮动或者定位</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。解决方法如下：</span><br><span class="line"></span><br><span class="line">1、使用这种特性</span><br><span class="line">2、设置一边的外边距，一般设置margin-top</span><br><span class="line">3、将元素浮动或者定位</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="margin-top-塌陷问题"><a href="#margin-top-塌陷问题" class="headerlink" title="margin-top 塌陷问题"></a>margin-top 塌陷问题</h3><p>​margin-top 塌陷问题通常发生在块级元素上，当一个块级元素的第一个子元素设置了 margin-top 时，其自身的 margin-top会塌陷到父元素上。这可能导致页面布局出意外的间距和位置。</p><p>解决这个问题的方法有几种：</p><ol><li>将父容器设置为 overflow: auto; 或 overflow: hidden; 可以清除塌陷。</li><li>使用-top 替代 margin-top。</li><li>使用 border-top 替代 margin-top。 . 设置父级容器为 display: flex; 或 display: grid; 可能也会解决这个问题。</li></ol><h3 id="css布局"><a href="#css布局" class="headerlink" title="css布局"></a>css布局</h3><h4 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h4><ul><li>特点：<ul><li>默认情下，块级元素会独占一行，从上至下排。</li><li>块级元素可以设置 width、height、margin、padding 等属性控制其尺寸和布局。</li></ul></li><li>优点： -适合用于创建页面结构，比如<div>和<section>标签。<ul><li>可以通过设置属性来控制盒模型相关样式（width、height等）。</li></ul></section></div></li><li>缺点 - 默认情况下会独占一行，不适合在水平排内容时使用。</li></ul><h4 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h4><ul><li><p>特点：</p></li><li><p>行内元素在默认情况下不会换行，在同一行。</p><ul><li>行内元素无法直接设置 width 和 height 属性，并且垂直方向上的 margin 和 padding 不会产生效果（只有水平方向上有效）。</li><li>优点：<ul><li>适包裹文本或者小片段内容，比如 <code>&lt;span&gt;</code> 和 <code>&lt;a&gt;</code> 标签。</li><li>不会独占一行，在水排列内容时非常便利。 缺点： -宽高无效</li></ul></li><li>对外边距垂直方向不起作用</li></ul></li></ul><h4 id="行内元素-1"><a href="#行内元素-1" class="headerlink" title="行内元素"></a>行内元素</h4><p>​具备了同时拥有块级和行内特性 邻两个<code>inline-block</code>之间存在空格回车符缩进导致间现 （解决办法：将 HTML 文档写成一整行。当然这个体验定不好） 定义 inline-block 元素除了添加 display: inline-block 属性之外， 还需要修复于字符间距带来额外空白间隙问题</p><h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><h4 id="浮动-1"><a href="#浮动-1" class="headerlink" title="浮动"></a>浮动</h4><p>​浮动是一种常用的布局方式，可以让元素脱离正常的文档流，悬浮在其他元素的周围</p><ul><li>介绍<ul><li>通过 <code>float</code> 属性可以将元素向左或向右浮动，周围的内容会围绕着浮动元素排列。</li><li>可以使用 <code>left</code>、<code>right</code>、<code>none</code> 或 <code>inherit</code> 来定义元素的浮动方向。</li></ul></li><li>优点<ul><li>创造多栏布局：通过浮动可以实现多栏布局，例如实现文字环绕图片的效果。</li><li>响应式设计：在响应式网页设计中，浮动可以很好地适应不同屏幕尺寸。</li></ul></li><li>缺点<ul><li>清除浮动：浮动元素可能造成父元素塌陷，需要清除浮动以避免影响布局。</li><li>破坏文档流：浮动的元素脱离了文档流，有时会引起布局混乱。</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>浮动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box01</span>,<span class="selector-class">.box02</span>,<span class="selector-class">.box03</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font</span>:<span class="number">30px</span>/<span class="number">200px</span> <span class="string">&#x27;Microsoft Yahei&#x27;</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box01</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box02</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span><span class="selector-pseudo">:right</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box03</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box01&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box01&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box01&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box01&quot;</span>&gt;</span>a标签<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box02&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box03&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/17/css%E7%AC%AC%E4%B8%80%E7%AB%A0/%E6%B5%AE%E5%8A%A8-float.png"></p><h4 id="浮动制作文字缠绕效果"><a href="#浮动制作文字缠绕效果" class="headerlink" title="浮动制作文字缠绕效果"></a>浮动制作文字缠绕效果</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>浮动文字饶图<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.con</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">100px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.pic</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">0</span> <span class="number">10px</span> <span class="number">5px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.duanluo</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:green;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:<span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;con&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;duanluo&quot;</span>&gt;</span>1、浮动元素有左浮动(float:left)和右浮动(float:right)两种</span><br><span class="line"></span><br><span class="line">2、浮动的元素会向左或向右浮动，碰到父元素边界、浮动元素、未浮动的元素才停下来</span><br><span class="line"></span><br><span class="line">3、相邻浮动的块元素可以并在一行，超出父级宽度就换行</span><br><span class="line"></span><br><span class="line">4、浮动让行内元素或块元素自动转化为行内块元素</span><br><span class="line">2、浮动的元素会向左或向右浮动，碰到父元素边界、浮动元素、未浮动的元素才停下来</span><br><span class="line"></span><br><span class="line">3、相邻浮动的块元素可以并在一行，超出父级宽度就换行</span><br><span class="line"></span><br><span class="line">4、浮动让行内元素或块元素自动转化为行内块元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/17/css%E7%AC%AC%E4%B8%80%E7%AB%A0/%E6%B5%AE%E5%8A%A8-float2.png"></p><h4 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h4><p>原因：在使用CSS浮动布局时，需要清除浮动的主要原因是为了避免父元素塌陷。父元素塌陷是指当包含浮动元素的元素高度无法自适应子元素高度时所发的问题，导致布局混乱。</p><p>当父元素不给高度的时候，内部元素不浮动时会撑开，而浮动的时候，父元素变成一条线</p><ol><li>清除浮动的传统方式是在浮动元素后面添加一个空元素，并为其设置 <code>clear: both;</code> 的样式</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float-left&quot;</span>&gt;</span>浮动左侧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float-right&quot;</span>&gt;</span>浮动右侧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;clear: both;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用伪元素 <code>::after</code> 来清除浮动，这是一种比较常用且优雅的方法，代码如下：</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>父元素触发 BFC（块级格式化上下文）也可以清除浮动，可以给父元素添加 <code>overflow: hidden;</code> 或 <code>overflow: auto;</code> 触发 BFC，这样也能清除浮动效果。</p><p>缺点：内容增多的时候容易造成不会自动换行导致内容被隐藏掉，无法显示要溢出的元素</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html第二章</title>
      <link href="/2022/08/14/html%E7%AC%AC%E4%BA%8C%E7%AB%A0/"/>
      <url>/2022/08/14/html%E7%AC%AC%E4%BA%8C%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<div class="tabs" id="unique-name"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="unique-name-1">Solution 1</button><button type="button" class="tab " data-href="unique-name-2">Solution 2</button><button type="button" class="tab " data-href="unique-name-3">Solution 3</button></ul><div class="tab-contents"><div class="tab-item-content active" id="unique-name-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-item-content" id="unique-name-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-item-content" id="unique-name-3"><p><strong>This is Tab 3.</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 开始节点</span><br><span class="line">in=&gt;inputoutput: 输入</span><br><span class="line">e=&gt;end: 结束节点</span><br><span class="line">op=&gt;operation: 操作节点</span><br><span class="line">cond=&gt;condition: 条件节点</span><br><span class="line">sub=&gt;subroutine: 子例程</span><br><span class="line">out=&gt;inputoutput: 输出</span><br><span class="line">st(right)-&gt;in-&gt;op-&gt;cond</span><br><span class="line">cond(yes,right)-&gt;out-&gt;e</span><br><span class="line">cond(no)-&gt;sub</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html</title>
      <link href="/2022/08/12/html/"/>
      <url>/2022/08/12/html/</url>
      
        <content type="html"><![CDATA[<h3 id="文档类型"><a href="#文档类型" class="headerlink" title="文档类型"></a>文档类型</h3><p><img src="/2022/08/12/html/html_version.png"></p><h4 id="html-1-0"><a href="#html-1-0" class="headerlink" title="html 1.0"></a>html 1.0</h4><p>​HTML1.0：HTML1.0是最早的HTML标准，功能相对比较简单，主要用于创建基本的网页结构和文本排版。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="attr">xml:lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>xhtml 1.0 文档类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  1、标签建议全部小写  --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">BODY</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  2、属性用引号引起来  --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;aa&quot;</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  3、标签应该闭合 成对标签应该成对出现，单个标签在结尾加 “ /”  --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 4、img标签加上alt属性   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/00111.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;风景图&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">HTML</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="html5"><a href="#html5" class="headerlink" title="html5"></a>html5</h4><p>​HTML5：HTML5是一种更加强大和灵活的标记语言，引入了许多新的元素和API，能够更好地支持多媒体元素、图形、动画等功能。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>html5文档类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>html1 与 html5<ul><li><strong>语法</strong>：<ul><li>HTML1.0：HTML1.0比较简单，语法较为严格。</li><li>HTML5：HTML5引入了许多新的语法和元素，使得创建和设计网页更加灵活和便捷</li></ul></li><li><strong>多媒体支持</strong>：<ul><li>HTML1.0：HTML1.0对多媒体元素的支持较为有限。</li><li>HTML5：HTML5具有更强大的多媒体支持，包括视频、音频、canvas等元素，使得网页能够展示更丰富的内容。</li></ul></li><li><strong>跨平台兼容性</strong>：<ul><li>HTML1.0：HTML1.0在不同浏览器和设备上的兼容性相对较差。</li><li>HTML5：HTML5基本上能够在各种现代浏览器和设备上良好地运行，具有更好的跨平台兼容性。</li></ul></li></ul></li></ul><h3 id="标题-段落-换行"><a href="#标题-段落-换行" class="headerlink" title="标题 - 段落 - 换行"></a>标题 - 段落 - 换行</h3><ul><li><p>标题</p><p>html的标题一共有6个分别为：h1,h2,h3,h4,h5,h6;</p><p>不同的标题可以对应不同的文字大小，用于定义网页的标题或章节标题，具有不同的层级结构。这些标签不仅用于呈现文本的外观，还有利于搜索引擎优化（SEO），有助于页面内容的结构化和可读性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>html标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>四级标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>五级标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>段落</p><p>段落标签（</p><p>）用于定义段落，可以将文本分成适当的段落，从而提高页面的可读性。段落标签不仅定义了文本的布局和格式，还有助于将内容按照逻辑结构进行组织，使页面更易于理解和浏览。通常在段落标签中包含的文本段落之间会有一定的间距，使页面看起来更加清晰和整洁。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>html标题、段落<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span> 一个html文件就是一个<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>网页，html文件用编辑器打开显示的是文本，可以用文本的方<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    式编辑它，如果用浏览器打开，浏览器会按照标签描述内容将文件渲染成网页，显示的网<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    页可以从一个网页链接跳转到另外一个网页。一个html文件就是一个网页，html文件用编辑器打开显示的是文本，可以用文本的方</span><br><span class="line">    式编辑它，如果用浏览器打开，浏览器会按照标签描述内容将文件渲染成网页，显示的网</span><br><span class="line">    页可以从一个网页链接跳转到另外一个网页。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>&lt;br&gt;</code> 标签插入单行换行符。</p></li></ul><h3 id="图像及路径"><a href="#图像及路径" class="headerlink" title="图像及路径"></a>图像及路径</h3><ul><li><p>图像标签为 <img> 属性有 src, alt </p><ul><li>src嵌入的图片的路径</li><li>alt     属性包含一条对图像的文本描述, 对无障碍而言, 屏幕阅读器会将这些描述读给需要使用阅读器的使用者听，让他们知道图像的含义。如果无法加载图像，普通浏览器也会在页面上显示 <code>alt</code> 属性中的备用文本</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>html图像及路径<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/002-022.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;水果&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>​锚元素：<a> , 通过 href 属性创建通向其他网页，文件，电子邮件地址；或统一页面内的位置</a></p><ul><li><p>href   跳转链接</p></li><li><p>title    链接注释</p></li><li><p>target    指定在何处显示链接</p><ul><li><code>_self</code>：当前页面加载。（默认）</li><li><code>_blank</code>：通常在新标签页打开，但用户可以通过配置选择在新窗口打开。</li><li><code>_parent</code>：当前浏览环境的父级浏览上下文。如果没有父级框架，行为与 <code>_self</code> 相同。</li><li><code>_top</code>：最顶级的浏览上下文（当前浏览上下文中最“高”的祖先）。如果没有祖先，行为与 <code>_self</code> 相同。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>链接<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">title</span>=<span class="string">&quot;跳转到百度&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 不做任何操作   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>缺省值<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>页面内跳转<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;biaoti01&quot;</span>&gt;</span>标题一<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#biaoti01&quot;</span>&gt;</span>标题一<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#biaoti02&quot;</span>&gt;</span>标题二<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#biaoti03&quot;</span>&gt;</span>标题三<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#biaoti04&quot;</span>&gt;</span>标题四<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span> </span><br></pre></td></tr></table></figure></li></ul><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><div class="tabs" id="unique-name"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="unique-name-1">有序列表(ol)</button><button type="button" class="tab " data-href="unique-name-2">无序列表(ul)</button><button type="button" class="tab " data-href="unique-name-3">列表标签(dl)</button></ul><div class="tab-contents"><div class="tab-item-content active" id="unique-name-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>html<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>css<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>javascript<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="unique-name-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="unique-name-3"><p><strong>dl, dt, dd含义</strong></p><ul><li>dl：定义列表（Definition List）</li><li>dt：定义术语（Definition Term）</li><li>dd：定义描述（Definition Description）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>html<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>负责页面的结构<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>css<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>样式<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>行为<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>产品列表<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span> <span class="attr">valign</span>=<span class="string">&quot;middle&quot;</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>产品名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>产品价格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>产品数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>¥5.00<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>橘子<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>¥4.00<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>2000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/12/html/table1.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>个人简历表<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;5&quot;</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span>&gt;</span>基本情况<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;18%&quot;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;18%&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;18%&quot;</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;18%&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>名族<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>政治面貌<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>籍贯<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>电子邮箱<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/12/html/table2.png"></p><ul><li>简历案例</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>简历<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span> <span class="attr">height</span>=<span class="string">&quot;800&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;260&quot;</span> <span class="attr">valign</span>=<span class="string">&quot;top&quot;</span> <span class="attr">bgcolor</span>=<span class="string">&quot;#f2f2f2&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;260&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;230&quot;</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/pic1x.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;人物图片&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;30&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span>张某某<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span>1821089xxxx<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span>zhangxxx@126.com<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;30&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;480&quot;</span> <span class="attr">valign</span>=<span class="string">&quot;top&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;480&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;75&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/resume.png&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;480&quot;</span> <span class="attr">height</span>=<span class="string">&quot;180&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;30&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>个人基本情况<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span>&gt;</span>姓 名：张达山<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span>&gt;</span>籍 贯：北京昌平<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>性 别：男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>身 高：175cm<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>民 族：汉<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>体 重：70kg<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>出生日期：1992.03.28<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>电 话：1821089xxxx<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>专 业：工业设计<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>现居住地：昌平天通苑<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;30&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/12/html/table3.png"></p><ul><li>表单案例</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>表单<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://wwww.itcast.cn&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">id</span>=<span class="string">&quot;female&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>爱好：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like&quot;</span> <span class="attr">value</span>=<span class="string">&quot;game&quot;</span>&gt;</span> 打游戏</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like&quot;</span> <span class="attr">value</span>=<span class="string">&quot;shopping&quot;</span>&gt;</span> 逛街</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sleep&quot;</span>&gt;</span> 睡觉</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>个人照片<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>籍贯：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;site&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>个人描述：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- &lt;input type=&quot;image&quot; name=&quot;&quot; src=&quot;images/new.png&quot;&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/12/html/table4.png"></p><h3 id="内嵌框架-iframe"><a href="#内嵌框架-iframe" class="headerlink" title="内嵌框架- iframe"></a>内嵌框架- iframe</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>内嵌框架<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;myframe&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.qq.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;myframe&quot;</span>&gt;</span>腾讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">width</span>=<span class="string">&quot;900&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">name</span>=<span class="string">&quot;myframe&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;001列表.html&quot;</span> <span class="attr">width</span>=<span class="string">&quot;900&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/12/html/iframe.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基本操作</title>
      <link href="/2022/07/26/Git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/07/26/Git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><ul><li><p>基本操作</p><p>git init 创建一个新的本地存储库</p><p>git clone  <git_url>克隆代码</git_url></p><p>git clone <git_url> -b &lt;分支名称&gt; [指定目录]将存储库克隆到指定目录，并指定分支</git_url></p><p>git status查看当前更改状态</p><p>git add提交更改，存储到暂存区</p><p>git reset  取消暂存文件，保留文件更改    [–hard]   将所有内容恢复到最后一次提交</p><p>git checkout .    还原所有修改，不会删除新增的文件</p><p>git clean -xdf    下面命令会删除新增的文件</p><p>git diff     查看已更改但未暂存内容的差异     [–staged]    已 commited 但尚未提交的内容的差异</p><p>git commit -m “add 添加新功能” 提交本地仓库</p><p>git commit –amend -m “new message”    重写最后的提交消息</p><p>git commit –amend –no-edit    修改最新的提交而不更改提交消息</p><p>git log      显示当前活动分支的提交历史</p><p>git log branchB..branchA      显示 branchA分支 上不在 branchB分支 上的提交</p><p>git diff branchB…branchA      显示 branchA分支 中的内容与 branchB分支 中的内容的差异</p><p>git push 提交远程仓库 ( 默认是向远程仓库的master分支push)</p><p>git push origin xxxxxx 提交到远程仓库的xxxxxx分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 功能开发完成后，将提交的本地仓库的xxxxxx分支合并到主分支，再上传到远程仓库</span><br><span class="line"></span><br><span class="line">//首先切换到主分支</span><br><span class="line">git checkout master</span><br><span class="line">//拉取master分支新代码，防止主分支做了更改，合并失败( 此阶段可能会产生冲突)</span><br><span class="line">git pull</span><br><span class="line">//将xxxxxx分支合并到master主分支</span><br><span class="line">git merge xxxxxx</span><br><span class="line">//将最新代码推送到远程仓库</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li><li><p>分支操作</p><p>git branch查看当前分支;列出所有本地分支   [-av]  列出所有分支，本地和远程</p><p>git branch -m <old> <new> #重命名分支</new></old></p><p>git checkout    切换分支   [-b 分支名] 并创建    [-d 分支名] 删除分支</p></li></ul><h4 id="工作中项目git都如何管理，冲突，push不上去如何解决"><a href="#工作中项目git都如何管理，冲突，push不上去如何解决" class="headerlink" title="工作中项目git都如何管理，冲突，push不上去如何解决"></a>工作中项目git都如何管理，冲突，push不上去如何解决</h4><ol><li><p>现在公司中一般的git仓库的管理方式是什么样的</p><ul><li>共用一个仓库，不同开发人员用不同分支，编写完后，再合并到主分支( 中小型公司)</li><li>主仓库不直接开发，成员把仓库fork到自己的账号下，然后开发合并</li></ul></li><li><p>代码为什么会push不上线上仓库</p><ul><li>没有权限 </li><li>本地比线上落后，有人比你先提交了他的功能代码( 重点)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 解决方案</span><br><span class="line">git pull  // 然后在重新提交</span><br><span class="line"></span><br><span class="line">// 如果发生的冲突修改的是跟你是同一个文件的同一区域 git pull 就会产生冲突，需协商手动解决</span><br><span class="line">// 如果有冲突会有 &#x27;&lt;&lt;&lt;&lt;&lt; HEAD&#x27; 和 &#x27;======&#x27; &quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 哈希值&quot;</span><br><span class="line">&#x27;&lt;&lt;&lt;&lt;&lt; HEAD&#x27; 到&#x27;======&#x27; 是你本地的版本代码</span><br><span class="line">&#x27;======&#x27; 到 &quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 哈希值&quot; 是远程仓库版本</span><br><span class="line">// 协商手动解决完后，需重新走一遍提交流程</span><br></pre></td></tr></table></figure></li><li><p>如何解决代码冲突</p></li></ol><h4 id="worktree"><a href="#worktree" class="headerlink" title="worktree"></a>worktree</h4><p>功能：它 允许我们同时在多个分支上工作，并且每个分支都有自己的工作目录</p><p>场景：你正在某个分支中处理一个功能，突然之间需要在主分支（master）中修复一个关键性 bug</p><p>不使用 <code>git worktree</code> ：</p><ol><li>在分支中存储或提交功能的更改</li><li>切换到主分支（master），在主分支中修复错误，提交修复</li><li>切换回功能分支，然后取消存储或检出更改。</li></ol><p>使用 <code>git worktree</code>:</p><ol><li>使用以下命令为主分支创建一个<strong>新的工作树</strong>到新的文件夹下</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git worktree add ../bugfix master</span><br></pre></td></tr></table></figure><ol start="2"><li>并在该目录中签出主分支。现在，你可以转到 bugfix 目录并修复 bug，在这里进行的<strong>任何更改都将在主分支上进行，并不会影响其他分支</strong>。一旦完成了bug修复，则可以直接提交你的更改</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ../bugfix</span><br><span class="line">git commit -am &quot;修复 bug&quot;</span><br></pre></td></tr></table></figure><ol start="3"><li>返回到原工作目录并继续在原分支（feature）上完成之前的工作，在原分支（feature）中的完成过的代码依然存在，并且你不需要进行额外的存储和切换分支的操作</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ../feature</span><br><span class="line">// 分支功能操作</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防抖节流</title>
      <link href="/2022/07/24/%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81/"/>
      <url>/2022/07/24/%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h4 id="防抖节流-闭包的实际运用"><a href="#防抖节流-闭包的实际运用" class="headerlink" title="防抖节流(闭包的实际运用)"></a>防抖节流(闭包的实际运用)</h4><ul><li><p>防抖函数</p><p>当持续出发事件，一定时间没有再触发该事件，事件函数将执行一次</p><p>如果设定时间之前又触发了一次，则重新延时(定时器)；类似王者荣耀回城，再次点击回城重新计时  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timeout;</span><br><span class="line"><span class="comment">//利用闭包来延长timer 的声明周期和作用域</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="variable language_">this</span>; <span class="comment">// 保存this指向</span></span><br><span class="line">        <span class="keyword">let</span> args = <span class="variable language_">arguments</span>; <span class="comment">// 拿到event对象</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">clearTimeout</span>(timeout) <span class="comment">// 清除上一次的函数</span></span><br><span class="line">        timeout = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;  <span class="comment">// 创建新的事件，并重新计时</span></span><br><span class="line">            func.<span class="title function_">apply</span>(context, args)</span><br><span class="line">        &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>节流函数</p><p>当持续触发一个事件的时候，保证一段事件内，只调用一次事件处理；类似王者荣耀技能，只有当CD结束时才能再次释放</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttled2</span>(<span class="params">fn, delay = <span class="number">500</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line"> <span class="comment">//利用闭包来延长timer 的声明周期和作用域</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">                timer = <span class="literal">null</span></span><br><span class="line">            &#125;, delay);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>相同点：</p><ul><li>都可以通过使用 <code>setTimeout</code> 实现</li><li>目的都是，降低回调执行频率。节省资源</li></ul><p>应用场景：</p><p>​防抖：</p><ul><li>搜索框搜索输入。只需用户最后一次输入完，再发送请求</li><li>手机号、邮箱验证输入检测</li><li>窗口大小<code>resize</code>。只需窗口调整完成后，计算窗口大小。防止重复渲染。</li></ul><p>​节流：</p><ul><li>滚动加载，加载更多或滚到底部监听</li><li>搜索框，搜索联想功能</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>firstBlog</title>
      <link href="/2022/07/03/firstBlog/"/>
      <url>/2022/07/03/firstBlog/</url>
      
        <content type="html"><![CDATA[<p>第一篇博客 test</p><p>选项卡片</p><div class="tabs" id="unique-name"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="unique-name-1">内容1</button><button type="button" class="tab " data-href="unique-name-2">内容2</button><button type="button" class="tab " data-href="unique-name-3">内容3</button></ul><div class="tab-contents"><div class="tab-item-content active" id="unique-name-1"><p>内容1</p></div><div class="tab-item-content" id="unique-name-2"><p>内容2</p></div><div class="tab-item-content" id="unique-name-3"><p>内容3</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
