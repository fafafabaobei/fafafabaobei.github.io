<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端性能优化</title>
      <link href="/2024/02/24/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/2024/02/24/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h4 id="前端性能优化"><a href="#前端性能优化" class="headerlink" title="前端性能优化"></a>前端性能优化</h4><ol><li><p>减少http请求</p></li><li><p>使用http2.0</p></li><li><p>使用ssr服务端渲染</p><p><strong><code>SSR</code> 可以让首屏加载更快，带来更好的 <code>SEO</code></strong></p><p>前端基本上现在都是 <code>SPA</code> 单页应用，单页应用的缺陷就是首屏加载很慢。使用 <code>SSR</code> 服务端渲染可以带来更好的 <code>SEO</code> ，<code>SEO</code> 就是搜索引擎优化，搜索引擎就是爬虫，可以更好的爬数据</p><ol><li>vue官网ssr</li><li>Nuxt.js</li></ol></li><li><p>合理使用cdn</p></li><li><p>将css放在文件头部，将js放在文件底部</p></li><li><p>使用精灵图&#x2F; 雪碧图, 减少请求次数</p></li><li><p>善用http缓存：强缓存&amp;协商缓存</p><p>二者都是后端控制的东西，强缓存是响应头添加 <code>&#39;Cache-Control&#39;: &#39;max-age=xxx&#39;</code> 字段， <code>max-age</code> 是过期时间，强缓存后无法缓存输入 <code>url</code> 后的 <code>get </code>请求，想要缓存这个请求需要靠协商缓存来实现，协商缓存的实现是在强缓存的基础上添加一个 <code>&#39;Last-Modified&#39;: stats.mtimeMs</code> 或者 <code>etag</code> 字段，若检查到前端返回的 <code>If-Modified-Since</code> 时间一致，后端就返回 <code>304</code> 状态码给前端，浏览器就从缓存中读取静态资源</p></li><li><p>其他</p><ul><li>首屏速度优化(SPA)——静态资源体积(tree-shaking、gzip)、异步引入、延迟加载</li><li>大量数据 渲染优化——一次渲染一部分；分页处理</li><li>用户体验优化——骨架屏、loading、页面状态缓存；搭配首屏加载</li><li>组件可扩展性和易用性能优化</li><li>错误处理 - 优化接口的出错处理，并发处理。让页面响应更快，体验更加</li></ul></li><li><p>压缩文件</p></li><li><p>懒加载</p></li></ol><p>懒加载的实现需要获取到可视区范围的高度，以及每张图片的高度，监听用户滚动的过程中图片是否进入范围内，进入时才赋值 <code>src</code> ， <code>src</code> 只要有值就一定会发送 <code>http</code> 请求，此前存放 <code>src</code> 的属性可以任意取名，当然一般我们取名为 <code>data-</code> 前缀，比如下面这样</p><img src data-src="****"><ol start="10"><li><p>尽量使用css，字体来代表图片</p></li><li><p>使用webp格式的图片</p></li></ol><p><code>webp</code> 格式的图片是谷歌推出的，这种格式的图像压缩算法能力要优于传统的 <code>jpg</code> ， <code>png</code> 等格式，在相同图片质量的情况下，空间大小会优化 30% 左右的样子</p><p>关于图片的性能优化就是小图用雪碧图，大图用 <code>webp</code> 格式</p><ol start="12"><li>webpack：tree-shaking  | 打包文件名 + hash</li></ol><p><code>tree-shaking</code> 的作用就是帮我们把项目中无用的代码给找出来，比如我们调试用的 <code>console.log</code> ，其实 <code>console.log</code> 对浏览器的开销还是蛮大的</p><ol start="13"><li>尽量减少回流重绘</li></ol><p>输入url到页面渲染后半段：回流，重绘，优化</p><p>回流（重排）就是计算布局，重绘就是给页面上色</p><ul><li><strong>尽量不用 js 去直接修改 css</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 案例一</span></span><br><span class="line">box.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;200px&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 案例二</span></span><br><span class="line">.<span class="property">more</span>&#123;</span><br><span class="line"> <span class="attr">width</span>: <span class="string">&#x27;200px&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">box.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;more&#x27;</span>)</span><br><span class="line"><span class="comment">// 一种方案就是直接修改 css ，第二种是添加类名。方案一会导致回流，方案二不会导致回流，因为添加类名并没有修改几何属性，它是间接交给了 css</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="14"><li>合理使用事件委托</li></ol><p>事件委托的机制是借助冒泡机制，把原本需要批量操作子组件的操作代理到一个父组件上</p><ol start="15"><li>if-else &amp; switch</li></ol><p><code>if-else</code> 有个判断顺序的，一定是从上往下走逐个走到目标，每次都判断一下，浪费性能。而 <code>switch</code> 不然， <code>switch</code> 是直接命中目标，只有一次判断</p><p><code>if-else</code> 会更加灵活，但是性能又没有 <code>switch</code> 来得好</p><ol start="16"><li><p>动画效果: requestAnimationFrame避免页面卡顿</p></li><li><p>Web Worker 开启多线程</p></li></ol><p>js默认情况下是单线程，但是v8引擎执行js的时候是可以多开辟线程，像页面上的图片有水印一般都是页面加载的时候实现，而非图片就有水印，像这种操作就是交给另一个线程来实现的(postMessge<code>和</code>onmessge  )</p><ol start="18"><li>css选择器复杂性要低</li></ol><p>浏览器读取css是从右往左读，尽量给每个标签打上类名，不要通过多层父容器</p><ol start="19"><li>尽量使用弹性布局</li></ol><p>flexbox性能会比较好</p><ul><li><p>首屏加载速度</p><ul><li><p>首屏速度</p><ul><li>白屏时间<ul><li>资源加载时间(占比最大)</li><li>首屏js执行</li></ul></li><li>渲染页面 (SSR 项目发生在服务器端，可以提升页面加载速度和用户体验，同时也有利于SEO)<ul><li>首屏数据请求</li><li>Dom渲染</li></ul></li></ul><p>解决：最大效果就是 减少首屏资源体积(打包工具压缩，异步加载，懒加载) </p><p>打包 工具压缩：tree-shaking，按需引入，按需打包，减少打包体积</p></li></ul></li><li><p>操作速度以及渲染速度</p><p>造成操作卡顿渲染慢 原因：</p><ol><li>一次性操作大量的dom (例如页面操作大量数据表格tr)</li></ol><p>解决：长列表渲染和异步渲染</p><ol start="2"><li><p>进行了复杂度很高的运算 (常见于循环)</p></li><li><p>vue或react项目中，渲染太多不必要的元素</p></li></ol><p>解决：Vue中有依赖手机，配合vue3的静态节点标记，已经基本避免了因为数据改变引起的无意义渲染</p><ul><li>频繁切换使用v-show ,否则使用v-if</li><li>循环，动态切换内容可以加key值</li><li>keep-alive缓存</li><li>区分请求颗粒度，减少请求范围</li></ul><ol start="4"><li>不变数据，定期失效可以缓存在cookies或者localstorage中，比如token，用户名</li><li>可以考虑做一个缓存队列，存于内存中(全局对象，vuex)。这样能保证刷新就更新数据，也能一定程度上缓存数据</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue响应式原理</title>
      <link href="/2024/02/12/vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/"/>
      <url>/2024/02/12/vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h4 id="Object-defineProperty与-Proxy区别"><a href="#Object-defineProperty与-Proxy区别" class="headerlink" title="Object.defineProperty与 Proxy区别"></a>Object.defineProperty与 Proxy区别</h4><ol><li>所有属性监听</li></ol><ul><li>Object.defineProperty无法一次性监听对象所有属性，必须遍历或者递归来实现</li><li>Proxy的实现就不需要遍历<ul><li>Proxy 的get方法用于拦截某个属性的读取操作，可以接收三个参数，依次为目标、属性名和Proxy实例本身，其中最后一个参数为可选参数</li><li>set方法用来拦截某个属性的赋值操作，可以接受四个参数，依次为目标对象、属性名、属性值和Proxy实本身，其中最后一个为可选参数</li></ul></li></ul><ol start="2"><li>新增属性监听</li></ol><ul><li><p>Object.defineProPerty无法监听新增属性，如果需要监听新增属性，需要手动再做一次监听，在Vue中想动态监听属性，一般用Vue.set(对象实例, “新增对象属性”)这种形式来添加</p><p><img src="/2024/02/12/vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/Users\发发发宝贝\AppData\Roaming\Typora\typora-user-images\image-20231118181334295.png" alt="image-20231118181334295"></p></li><li><p>Proxy可以监听新增属性</p></li></ul><ol start="3"><li>数组操作</li></ol><ul><li><p>Object.defineProperty 无法响应数组操作</p><ul><li><p>可以监听数组变化，但无法对新增数组变化进行监听，因此Mobk中为了监听数组变化，默认将数组长度设置为1000，监听0-999的属性变化</p></li><li><p>如果想要监听push、shift、pop、unshift等方法，该怎么做？Vue和Mobx中都是通过重写原型的方法实现的：在定义变量的时候，判断是否是数组，如果是数组，那么就修改它的proto，将其指向subArrProto，从而实现重写原型链。</p><p>vue源码：</p><p><img src="/2024/02/12/vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/.%5Cvue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86%5C%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86.png" alt="响应式原理"></p></li></ul></li></ul><p>场景：</p><ul><li>利用Proxy set get 应用proxy表单验证</li></ul> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//验证规则</span></span><br><span class="line"><span class="keyword">const</span> validators = &#123;</span><br><span class="line">    <span class="attr">name</span>: &#123;</span><br><span class="line">        <span class="title function_">validate</span>(<span class="params">value</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> value.<span class="property">length</span> &gt; <span class="number">6</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attr">message</span>:<span class="string">&#x27;用户名长度不能小于六&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">password</span>: &#123; </span><br><span class="line">        <span class="title function_">validate</span>(<span class="params">value</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> value.<span class="property">length</span> &gt; <span class="number">10</span>; </span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;密码长度不能小于十&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">moblie</span>: &#123;</span><br><span class="line">        <span class="title function_">validate</span>(<span class="params">value</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^1(3|5|기8|9)[0-9]&#123;9&#125;$/</span>.<span class="title function_">test</span>(value);</span><br><span class="line">        &#125;,</span><br><span class="line">        message：<span class="string">&#x27;手机号格式错误&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//验证方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">validator</span>(<span class="params">obj, validators</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">target, key, value</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> validator = validators[key]</span><br><span class="line">            <span class="keyword">if</span> (!validator) &#123; </span><br><span class="line">                target[key] = value;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (validator.<span class="title function_">validate</span>(value)) &#123; </span><br><span class="line">                target[key] = value;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123; alert (validator.<span class="property">message</span> <span class="string">&quot;&quot;</span>);&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> form = &#123;&#125;;</span><br><span class="line">form = <span class="title function_">validator</span>(form, validators);</span><br><span class="line">form.<span class="property">name</span> = <span class="string">&#x27;666&#x27;</span>; <span class="comment">//用户名长度不能小于六</span></span><br><span class="line">form.<span class="property">password</span> = <span class="string">&#x27;113123123123123&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>get 用来拦截私有属性的读取， 用_ 开头的属性是私有属性， 禁止私有属性读取</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person =&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">_sex</span>: <span class="string">&#x27;male&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(person, &#123; </span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, prop</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (prop[<span class="number">0</span>] === <span class="string">&#x27;_&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`<span class="subst">$&#123;prop&#125;</span> is private attribute`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> target[prop]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">proxy.<span class="property">name</span>; <span class="comment">//tom</span></span><br><span class="line">proxy.<span class="property">_sex</span>; <span class="comment">// _sex is private attribute</span></span><br></pre></td></tr></table></figure><ul><li>等等还有其他Proxy的方法使用 …….(get&#x2F; set&#x2F; apply&#x2F; construct&#x2F; has&#x2F; delete&#x2F; delete)</li><li>!!! Proxy 可以提高开发效率和代码质量，但在使用过程中需要注意性能优化、避免循环引用导致栈溢出、合理使用拦截器和兼容性等方面的细节。</li></ul><h4 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h4><ul><li><p>[…arr]</p></li><li><p>支持展开运算符是要有Symbol.iterator</p><p>arr[Symbol.iterator]</p></li></ul><p>面试题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我们能否以某种方式为下面的语句使用展开运算而不导致类型错误 ？</span></span><br><span class="line"><span class="comment">//错误代码示例</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">z</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...obj])<span class="comment">//报错 根本原因是因为对象是不具备迭代器属性的数据结构</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//正确代码</span></span><br><span class="line">obj[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">next</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> objArr = <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj)</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">index</span> &lt; objArr.<span class="property">length</span> -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">let</span> key = objArr[<span class="variable language_">this</span>.<span class="property">index</span>]</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">index</span>++</span><br><span class="line">                <span class="keyword">return</span>&#123;</span><br><span class="line">                    <span class="attr">value</span>: obj[key]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="attr">done</span>: <span class="literal">true</span>&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">index</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...obj])  <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以在Object 构造函数的原型上添加，为所有对象提供迭代器</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES7 也提出了新的写法</span></span><br><span class="line"><span class="comment">//console.log(&#123;...objj&#125;) 会涉及到对象的拷贝操作,相当于对obj进行了浅拷贝</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;...obj&#125;) <span class="comment">// &#123;x: 1, y: 2, z: 3&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>对象转数组案例</li></ul><ol><li>使用 Object.keys() 方法获取对象的所有键，然后使用 map() 方法将每个键对应的值存入新数组中。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="title function_">map</span>(<span class="function"><span class="params">key</span> =&gt;</span> obj[key]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用 Object.values() 方法获取对象的所有值，直接将值存入新数组中。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Object</span>.<span class="title function_">values</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><ol start="3"><li>使用 Object.entries() 方法获取对象的键值对数组，然后对每个键值对进行处理。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Object</span>.<span class="title function_">entries</span>(obj).<span class="title function_">map</span>(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> value);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">#### 高效运算符  &#x27;?.&#x27; 和 &#x27;??&#x27; 和 &#x27;??=&#x27;  的区别</span><br><span class="line"></span><br><span class="line">* 可选链运算符(?.)</span><br><span class="line"></span><br><span class="line">可选链运算符, 允许读取位于连接对象深处的属性值，而不必明确验证链式中的每个引用是否有效。</span><br><span class="line"></span><br><span class="line">使用场景：当我们不确定一个对象是否存在时，调用对象属性，可以使用该操作符</span><br><span class="line"></span><br><span class="line">* 空值合并运算符(??)</span><br><span class="line"></span><br><span class="line">空值合并运算符，是一个逻辑运算符，当左侧的操作为null或undefined时，返回其右侧操作数，否则返回左侧操作数</span><br><span class="line"></span><br><span class="line">有点类似于 ||(逻辑或) ，与 || 区别在于 ??. 对0和 &quot; 会判断为真</span><br><span class="line"></span><br><span class="line">* 逻辑空赋值(??=)</span><br><span class="line"></span><br><span class="line">逻辑空赋值运算符(X ?? = Y) 仅在X是空值(null 或undefined) 时对其赋值。</span><br><span class="line"></span><br><span class="line">使用场景：当你需要通过if判断某个变量不存在时，才需要为该变量赋值时使用</span><br><span class="line"></span><br><span class="line">#### 原型和原型链</span><br><span class="line"></span><br><span class="line">1. **原型（Prototype）**：每个对象都有一个原型对象，可以通过`__proto__`属性来访问。原型对象可以包含共享的属性和方法，可以被对象实例共享。</span><br><span class="line">2. **原型链（Prototype Chain）**：当访问对象的属性或方法时，如果对象本身没有该属性或方法，JavaScript引擎会顺着原型链向上查找，直到找到对应的属性或方法或者到达原型链的顶端。</span><br><span class="line"></span><br><span class="line">~~~ js</span><br><span class="line">// 定义了一个构造函数Person，并在其原型对象上定义了一个方法greet。创建了一个Person对象实例person1，并演示了访问属性和方法以及原型链的关系</span><br><span class="line">function Person(name, age) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 在Person的原型对象上定义一个方法</span><br><span class="line">Person.prototype.greet = function() &#123;</span><br><span class="line">    console.log(`Hello, my name is $&#123;this.name&#125; and I am $&#123;this.age&#125; years old.`);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 创建一个Person对象实例</span><br><span class="line">let person1 = new Person(&#x27;Alice&#x27;, 30);</span><br><span class="line"></span><br><span class="line">// 访问实例对象的属性和方法</span><br><span class="line">console.log(person1.name); // Output: Alice</span><br><span class="line">person1.greet(); // Output: Hello, my name is Alice and I am 30 years old.</span><br><span class="line"></span><br><span class="line">// 演示原型链 实例的__proto__ === 其构造函数的prototype</span><br><span class="line">console.log(person1.__proto__ === Person.prototype); // Output: true</span><br><span class="line">// 构造函数的原型Object</span><br><span class="line">console.log(Person.prototype.__proto__ === Object.prototype); // Output: true</span><br><span class="line">// Object的原型为null</span><br><span class="line">console.log(Object.prototype.__proto__); // Output: null</span><br></pre></td></tr></table></figure><ul><li>其他<ul><li><strong>继承</strong>：通过原型链，我们可以实现对象之间的继承关系，子对象可以继承父对象的属性和方法。可以尝试创建一个新的构造函数，让它继承自<code>Person</code>构造函数，并添加新的属性或方法。</li><li><strong>原型修改</strong>：可以尝试修改<code>Person</code>构造函数的原型对象上的方法，然后看看实例对象是否能够访问到修改后的方法。</li><li><strong>原型链终止</strong>：在原型链的顶端是<code>Object.prototype</code>，它的原型是<code>null</code>。可以思考一下为什么原型链的顶端是<code>Object.prototype</code>，而不是其他对象。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写数组Map函数和filter函数</title>
      <link href="/2024/01/18/%E6%89%8B%E5%86%99%E6%95%B0%E7%BB%84map%E5%87%BD%E6%95%B0%E5%92%8Cfilter%E5%87%BD%E6%95%B0/"/>
      <url>/2024/01/18/%E6%89%8B%E5%86%99%E6%95%B0%E7%BB%84map%E5%87%BD%E6%95%B0%E5%92%8Cfilter%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="手写数组map函数和filter函数"><a href="#手写数组map函数和filter函数" class="headerlink" title="手写数组map函数和filter函数"></a>手写数组map函数和filter函数</h4><ul><li><p>map()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法实现</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">_map</span> = <span class="keyword">function</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> newArr = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="variable language_">this</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        newArr.<span class="title function_">push</span>(<span class="title function_">fn</span>(<span class="variable language_">this</span>[i],i))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法调用</span></span><br><span class="line">arr.<span class="title function_">_map</span>(<span class="function">(<span class="params">v</span>)=&gt;</span>v+<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li><li><p>filter()</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法实现</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">_filter</span> = <span class="keyword">function</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> newArr = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="variable language_">this</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_">fn</span>(<span class="params"><span class="variable language_">this</span>[i]</span>)&#123;</span><br><span class="line">            newArr.<span class="title function_">push</span>(<span class="title function_">fn</span>(<span class="variable language_">this</span>[i]))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法调用</span></span><br><span class="line">arr.<span class="title function_">_filter</span>(<span class="function">(<span class="params">v</span>)=&gt;</span>v==<span class="number">1</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写深拷贝浅拷贝方法</title>
      <link href="/2024/01/15/%E6%89%8B%E5%86%99%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D%E6%96%B9%E6%B3%95/"/>
      <url>/2024/01/15/%E6%89%8B%E5%86%99%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h4 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h4><ul><li><p>浅拷贝</p><p><img src="/2024/01/15/%E6%89%8B%E5%86%99%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D%E6%96%B9%E6%B3%95/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">shallowClone</span>(<span class="params">source</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> source !== <span class="string">&#x27;object&#x27;</span> || source == <span class="literal">null</span>）</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">return</span> source;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">let</span> target = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(source) ? [] : &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="comment">//source.hasOwnProperty(key) 判断是否是source自身的属性，不拷贝原型链的属性</span></span><br><span class="line">        <span class="keyword">if</span> (source.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">            <span class="comment">//shallowClone 实现对属性进行递归拷贝</span></span><br><span class="line">            target[key] = <span class="title function_">shallowClone</span>(source[key]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>深拷贝(复杂数据类型也会开辟新空间存储)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用json数据转换来达到深拷贝</span></span><br><span class="line"><span class="keyword">let</span> deePerson = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(person))</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者自己写递归循环实现深拷贝</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj, hash = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj == <span class="literal">null</span>) <span class="keyword">return</span> obj; <span class="comment">// 如果是null或者undefined我就不进行拷贝操作</span></span><br><span class="line">    <span class="comment">//如果是时间函数Date() 、正则表达式 RegExp()也直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(obj);</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(obj);</span><br><span class="line">  <span class="comment">// 可能是对象或者普通的值  如果是函数的话是不需要深拷贝</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&quot;object&quot;</span>) <span class="keyword">return</span> obj;</span><br><span class="line">  <span class="comment">// 是对象的话就要进行深拷贝</span></span><br><span class="line">  <span class="keyword">if</span> (hash.<span class="title function_">get</span>(obj)) <span class="keyword">return</span> hash.<span class="title function_">get</span>(obj);</span><br><span class="line">  <span class="keyword">let</span> cloneObj = <span class="keyword">new</span> obj.<span class="title function_">constructor</span>(<span class="params"></span>);</span><br><span class="line">  <span class="comment">// 找到的是所属类原型上的constructor,而原型上的 constructor指向的是当前类本身</span></span><br><span class="line">  hash.<span class="title function_">set</span>(obj, cloneObj);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">      <span class="comment">// 实现一个递归拷贝</span></span><br><span class="line">      cloneObj[key] = <span class="title function_">deepClone</span>(obj[key], hash);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cloneObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>拷贝弊端：不能拷贝函数 、正则表达式 RegExp()</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写Vue的v-Model指令</title>
      <link href="/2024/01/03/%E6%89%8B%E5%86%99vue%E7%9A%84v-model%E6%8C%87%E4%BB%A4/"/>
      <url>/2024/01/03/%E6%89%8B%E5%86%99vue%E7%9A%84v-model%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h4 id="手写双向数据绑定-v-mode"><a href="#手写双向数据绑定-v-mode" class="headerlink" title="手写双向数据绑定(v-mode)"></a>手写双向数据绑定(v-mode)</h4><ul><li>使用Obiect.defineProperty() 实现双向数据绑定  vue2</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;input&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;input&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;p&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> obj=&#123;<span class="attr">name</span>: <span class="string">&quot;&quot;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//当set或者get obj对象属性，就会触发事件</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;name&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">val</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//input.value = val</span></span></span><br><span class="line"><span class="language-javascript">                    p.<span class="property">innerHTML</span> = val</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> val</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//监听input的修改,并赋值给中间对象obj</span></span></span><br><span class="line"><span class="language-javascript">            input.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                obj.<span class="property">name</span> = e.<span class="property">target</span>.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>使用Proxy( ES6 的新特性) 和Reflect 实现双向数据绑定  vue3</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</span><br><span class="line">&lt;title&gt;</span><br><span class="line">&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; id=&quot;input&quot;&gt;</span><br><span class="line">        &lt;p id=&quot;p&quot;&gt; &lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">            var input = document.getElementById(&#x27;input&#x27;)</span><br><span class="line">            var p = document.getElementById(&#x27;p&#x27;)</span><br><span class="line">var obj=&#123;&#125;</span><br><span class="line">            //Reflect 可以用于获取可以获取对象对象的行为，它与Object类似，但更易读,为操作对象提供一种更优雅地 方式。它地方法与Proxy是对应的</span><br><span class="line">            let newProxy = new Proxy(obj, &#123;</span><br><span class="line">                get: (target, key, recevier)=&gt;&#123;</span><br><span class="line">                    return Reflect.get(target, key, recrvier)</span><br><span class="line">                &#125;,</span><br><span class="line">                set: (target, key, value, recevier)=&gt;&#123;</span><br><span class="line">                    //监听newProxy是否有变化, 如果有则设置值</span><br><span class="line">                    if(key == &quot;text&quot;)&#123;</span><br><span class="line">                        input.value = val</span><br><span class="line">                        p.innerHTML = value;</span><br><span class="line">                    &#125;</span><br><span class="line">                    //将变化反射回原有对象</span><br><span class="line">                    return Reflect.set(target, key, value, recevier)</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            </span><br><span class="line">          //监听input的修改,并赋值给代理对象newProxy</span><br><span class="line">            input.addEventListener(&#x27;input&#x27;, function(e)&#123;</span><br><span class="line">                newProxy.text = e.target.value</span><br><span class="line">            &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片懒加载</title>
      <link href="/2023/11/24/%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
      <url>/2023/11/24/%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h4 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h4><p>​图片懒加载是一种网页优化技术，用于延迟加载页面中的图片，以减少页面加载时间和带宽消耗。在网页中，当用户滚动浏览页面时，只有当图片进入可视窗口时才加载图片，而不是一次性加载所有图片</p><p>​思路：通过JavaScript监听滚动事件，当图片进入可视窗口时再动态加载图片。</p><ul><li>原生js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 获取所有带有.lazy-load类的图片元素</span></span><br><span class="line">  <span class="keyword">let</span> lazyImages = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.lazy-load&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 懒加载函数</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">lazyLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">    lazyImages.<span class="title function_">forEach</span>(<span class="function"><span class="params">img</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 判断图片是否进入可视区域并且有data-src属性</span></span><br><span class="line">      <span class="keyword">if</span> (img.<span class="title function_">getBoundingClientRect</span>().<span class="property">top</span> &lt; <span class="variable language_">window</span>.<span class="property">innerHeight</span> &amp;&amp; img.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-src&#x27;</span>)) &#123;</span><br><span class="line">        <span class="comment">// 将data-src属性的值赋给src属性，实现图片加载</span></span><br><span class="line">        img.<span class="property">src</span> = img.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-src&#x27;</span>);</span><br><span class="line">        <span class="comment">// 加载完成后移除data-src属性，避免重复加载</span></span><br><span class="line">        img.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;data-src&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听滚动事件和窗口大小改变事件，触发懒加载函数</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, lazyLoad);</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, lazyLoad);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 页面加载完成后立即执行一次懒加载函数</span></span><br><span class="line">  <span class="title function_">lazyLoad</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>vue3 setup 组合式api 写法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div ref=&quot;imageRef&quot;&gt;</span><br><span class="line">    &lt;img v-if=&quot;isVisible&quot; :src=&quot;imageSrc&quot; alt=&quot;Lazy Loaded Image&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, onMounted &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const imageSrc = &#x27;image.jpg&#x27;; // 图片的真实URL</span><br><span class="line">    const isVisible = ref(false); // 控制图片是否显示的变量</span><br><span class="line"></span><br><span class="line">    const imageRef = ref(null); // 图片元素的引用</span><br><span class="line"></span><br><span class="line">    // 创建 Intersection Observer 实例</span><br><span class="line">    const intersectionObserver = new IntersectionObserver((entries) =&gt; &#123;</span><br><span class="line">      entries.forEach(entry =&gt; &#123;</span><br><span class="line">        if (entry.isIntersecting) &#123;</span><br><span class="line">          isVisible.value = true; // 图片进入可视区域时显示图片</span><br><span class="line">          intersectionObserver.unobserve(imageRef.value); // 停止观察图片元素</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 在组件挂载后开始观察图片元素</span><br><span class="line">    onMounted(() =&gt; &#123;</span><br><span class="line">      intersectionObserver.observe(imageRef.value);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>下拉刷新，触底加载</title>
      <link href="/2023/10/13/%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%EF%BC%8C%E8%A7%A6%E5%BA%95%E5%8A%A0%E8%BD%BD/"/>
      <url>/2023/10/13/%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%EF%BC%8C%E8%A7%A6%E5%BA%95%E5%8A%A0%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h4 id="上拉刷新，触底加载"><a href="#上拉刷新，触底加载" class="headerlink" title="上拉刷新，触底加载"></a>上拉刷新，触底加载</h4><ul><li>原生js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> content = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;content&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> isLoading = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// 上拉刷新</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handlePullToRefresh</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (content.<span class="property">scrollTop</span> === <span class="number">0</span> &amp;&amp; !isLoading) &#123;</span><br><span class="line">      isLoading = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">// 模拟数据加载</span></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 插入新内容到顶部</span></span><br><span class="line">        <span class="keyword">const</span> newContent = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        newContent.<span class="property">textContent</span> = <span class="string">&#x27;New Content&#x27;</span>;</span><br><span class="line">        content.<span class="title function_">insertBefore</span>(newContent, content.<span class="property">firstChild</span>);</span><br><span class="line">        isLoading = <span class="literal">false</span>;</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 触底加载</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleLoadMore</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (content.<span class="property">scrollHeight</span> - content.<span class="property">scrollTop</span> &lt;= content.<span class="property">clientHeight</span> &amp;&amp; !isLoading) &#123;</span><br><span class="line">      isLoading = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">// 模拟数据加载</span></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 插入新内容到底部</span></span><br><span class="line">        <span class="keyword">const</span> newContent = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        newContent.<span class="property">textContent</span> = <span class="string">&#x27;More Content&#x27;</span>;</span><br><span class="line">        content.<span class="title function_">appendChild</span>(newContent);</span><br><span class="line">        isLoading = <span class="literal">false</span>;</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 监听滚动事件，触发上拉刷新和触底加载</span></span><br><span class="line">  content.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">handlePullToRefresh</span>();</span><br><span class="line">    <span class="title function_">handleLoadMore</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>vue3 setup 组合式api 写法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;content&quot; @scroll=&quot;handleScroll&quot;&gt;</span><br><span class="line">    &lt;div v-for=&quot;item in items&quot; :key=&quot;item&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const items = ref([1, 2, 3, 4, 5]);</span><br><span class="line">    let isLoading = false;</span><br><span class="line"></span><br><span class="line">    // 上拉刷新</span><br><span class="line">    function handlePullToRefresh(e) &#123;</span><br><span class="line">      if (e.target.scrollTop === 0 &amp;&amp; !isLoading) &#123;</span><br><span class="line">        isLoading = true;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">          items.value.unshift(&#x27;New Content&#x27;);</span><br><span class="line">          isLoading = false;</span><br><span class="line">        &#125;, 1000);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 触底加载</span><br><span class="line">    function handleLoadMore(e) &#123;</span><br><span class="line">      if (e.target.scrollHeight - e.target.scrollTop &lt;= e.target.clientHeight &amp;&amp; !isLoading) &#123;</span><br><span class="line">        isLoading = true;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">          items.value.push(&#x27;More Content&#x27;);</span><br><span class="line">          isLoading = false;</span><br><span class="line">        &#125;, 1000);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 处理滚动事件</span><br><span class="line">    function handleScroll(e) &#123;</span><br><span class="line">      handlePullToRefresh(e);</span><br><span class="line">      handleLoadMore(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      items,</span><br><span class="line">      handleScroll</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原生Js实现路由</title>
      <link href="/2023/08/25/%E5%8E%9F%E7%94%9Fjs%E5%AE%9E%E7%8E%B0%E8%B7%AF%E7%94%B1/"/>
      <url>/2023/08/25/%E5%8E%9F%E7%94%9Fjs%E5%AE%9E%E7%8E%B0%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<h4 id="原生js实现路由"><a href="#原生js实现路由" class="headerlink" title="原生js实现路由"></a>原生js实现路由</h4><p>​背景： 再过去，路由切换只出现在后台，前端想要切换到某个页面，就需要向后端请求，随后完成路由切换。但随着spa单页面应用模型的发展，前端路由也逐渐火热，单页面顾名思义就是一个html页面，但当我们点击导航的时候url会改变，网页也会显示不同的内容。简而言之就是js监测url变化，从而改变内容</p><p>​实现思路：实现前端路由是为了在单页面应用中实现页面切换而不刷新整个页面。原生JavaScript可以通过监听URL的变化来实现简单的路由功能</p><p>​步骤：</p><ol><li><strong>使用<code>hash</code>实现路由</strong>：在URL中使用<code>#</code>后面的部分来表示路由路径，当<code>hash</code>发生变化时，可以通过监听<code>hashchange</code>事件来捕获路由变化。</li><li><strong>动态更新页面内容</strong>：根据不同的路由路径，动态更新页面内容，实现页面切换的效果</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自执行函数</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 定义 Router 构造函数</span></span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Router</span> = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">routers</span> = &#123;&#125; <span class="comment">//保存路由</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">curUrl</span> = <span class="string">&#x27;&#x27;</span> <span class="comment">//获取当前的hash</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 给构造函数Router原型添加初始化方法</span></span><br><span class="line">    <span class="title class_">Router</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">init</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;hashchange&#x27;</span>, <span class="variable language_">this</span>.<span class="property">reloadPage</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Router</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">reloadPage</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//获取当前hash值</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">curUrl</span> = location.<span class="property">hash</span>.<span class="title function_">substring</span>(<span class="number">1</span>) || <span class="string">&#x27;/&#x27;</span></span><br><span class="line">        <span class="comment">//运行hash值对应的函数</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">routers</span>[<span class="variable language_">this</span>.<span class="property">curUrl</span>]()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Router</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">map</span> = <span class="keyword">function</span>(<span class="params">key,callback</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">router</span>[key] = callback</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//暴露出去,挂载到oRou</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">oRou</span> = <span class="title class_">Router</span></span><br><span class="line">&#125;)&#123;&#125;</span><br><span class="line"><span class="comment">//实例化</span></span><br><span class="line"><span class="keyword">var</span> oRouter = <span class="keyword">new</span> <span class="title function_">oRou</span>()</span><br><span class="line">oROuter.<span class="title function_">init</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取路由并展示main可视区内容</span></span><br><span class="line">oRouter.<span class="title function_">map</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">var</span> oSidebar = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;sidebar&#x27;</span>)</span><br><span class="line">    oSidebar.<span class="property">innerHTML</span> = <span class="string">&#x27;我是主页&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">oRouter.<span class="title function_">map</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">var</span> oSidebar = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;sidebar&#x27;</span>)</span><br><span class="line">    oSidebar.<span class="property">innerHTML</span> = <span class="string">&#x27;我是html页面&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">oRouter.<span class="title function_">map</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">var</span> oSidebar = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;sidebar&#x27;</span>)</span><br><span class="line">    oSidebar.<span class="property">innerHTML</span> = <span class="string">&#x27;我是css页面&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>其他：</p><ol><li><strong>参数传递</strong>：可以在路由路径中传递参数，通过解析参数来动态展示页面内容。</li><li><strong>路由拦截</strong>：可以在路由处理函数中增加拦截逻辑，实现路由权限控制或其他逻辑。</li><li><strong>路由动画</strong>：可以在页面切换时添加动画效果，提升用户体验</li></ol><ul><li>使用history</li></ul><p>​通过<code>history</code>对象的<code>popstate</code>事件，我们可以在浏览历史记录发生变化时捕获路由的变化</p><p>​我们通过<code>window.addEventListener(&#39;popstate&#39;, function(event) &#123; ... &#125;)</code>来监听<code>popstate</code>事件，当浏览历史记录发生变化时，会触发该事件。在事件处理函数中，我们可以获取当前的URL，从而实现路由变化的监听和处理。</p><p>通过监听<code>history</code>对象的路由变化，我们可以实现更灵活的路由管理，同时可以结合<code>pushState</code>、<code>replaceState</code>等方法来改变路由并触发相应的事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听popstate事件</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;popstate&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理路由变化</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Current URL: &#x27;</span> + <span class="variable language_">document</span>.<span class="property">location</span>.<span class="property">href</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改变路由并触发popstate事件</span></span><br><span class="line">history.<span class="title function_">pushState</span>(&#123;<span class="attr">page</span>: <span class="number">1</span>&#125;, <span class="string">&quot;title 1&quot;</span>, <span class="string">&quot;/page1&quot;</span>);</span><br><span class="line">history.<span class="title function_">pushState</span>(&#123;<span class="attr">page</span>: <span class="number">2</span>&#125;, <span class="string">&quot;title 2&quot;</span>, <span class="string">&quot;/page2&quot;</span>);</span><br><span class="line">history.<span class="title function_">replaceState</span>(&#123;<span class="attr">page</span>: <span class="number">3</span>&#125;, <span class="string">&quot;title 3&quot;</span>, <span class="string">&quot;/page3&quot;</span>);</span><br><span class="line">history.<span class="title function_">back</span>(); <span class="comment">// 模拟后退操作</span></span><br><span class="line">history.<span class="title function_">forward</span>(); <span class="comment">// 模拟前进操作</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础</title>
      <link href="/2023/06/14/python%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/06/14/python%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>​Python是一门动态、解释型、强类型语言</p><ol><li>动态：在运行期间才做数据检查（不用提前声明变量）- 静态语音(C&#x2F;Java)：编译时检查数据类型（编码时需要声明变量类型）</li><li>解释型：在执行程序时，才一条条解释成机器语言给计算机执行（无需编译，速度较慢）- 编译型语言(C&#x2F;Java)：先要将代码编译成二进制可执行文件，再执行</li><li>强类型：类型安全，变量一旦被指定了数据类型，如果不强制转换，那么永远是这种类型（严谨，避免类型错误，速度较慢）- 弱类型（VBScript&#x2F;JavaScript）: 类型在运行期间会转化，如 js中的 1+”2”&#x3D;”12”, 1会由数字转化为string</li></ol><p><img src="/2023/06/14/python%E5%9F%BA%E7%A1%80/.%5Cpython%E5%9F%BA%E7%A1%80%5Cpython%E8%A7%A3%E6%9E%90%E5%99%A8.png" alt="python解析器"></p><p><strong>优点</strong></p><ol><li>简单易学</li><li>开发效率高</li><li>高级语言</li><li>可移植、可扩展、可嵌入</li><li>庞大的三方库</li></ol><p><strong>缺点</strong></p><ol><li>速度慢</li><li>代码不能加密</li><li>多线程不能充分利用多核cpu(GIL全局解释性锁，同一时刻只能运行一个线程</li></ol><p><strong>应用领域</strong></p><ol><li>自动化测试（UI&#x2F;接口）</li><li>自动化运维</li><li>爬虫</li><li>Web开发（Django&#x2F;Flask&#x2F;..)</li><li>图形GUI开发</li><li>游戏脚本</li><li>金融、量化交易</li><li>数据分析，大数据</li><li>人工智能、机器学习、NLP、计算机视觉</li><li>云计算</li></ol><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>Windows Python3环境搭建</p><ol><li>从<a href="https://www.python.org/getit/">Python官网</a>，下载Python3安装包</li><li>双击安装，第一个节目选中Add Python3.* to PATH，点击Install Now(默认安装pip)，一路下一步</li><li>验证：打开cmd命令行，输入python，应能进入python shell 并显示为Python 3.6.5版本</li></ol><p>Mac OS Python3环境搭建</p><ol><li>安装brew：在终端执行以下命令 <code>ruby -e &quot;$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)&quot;</code></li><li>使用brew安装python3：<code>brew install python3</code></li></ol><p>CentOS Python3环境搭建</p><ol><li><p>安装依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make</span><br><span class="line">yum install libffi-devel -y</span><br></pre></td></tr></table></figure></li><li><p>下载Python3源码安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz</span><br><span class="line">tar -zxvf Python-3.7.0.tgz</span><br><span class="line"><span class="built_in">cd</span> Python-3.7.0</span><br><span class="line">./configure --prefix=/usr/local/python37</span><br><span class="line">make &amp; make install</span><br></pre></td></tr></table></figure></li><li><p>建立软连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /usr/local/python37/bin/python3.7 /usr/bin/python3</span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/python37/bin/pip3 /usr/bin/pip3</span><br></pre></td></tr></table></figure></li><li><p>添加环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/local/python37/bin</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">vim ~/.bashrc, 增加</span><br></pre></td></tr></table></figure></li></ol><h3 id="包管理工具-pip"><a href="#包管理工具-pip" class="headerlink" title="包管理工具-pip"></a>包管理工具-pip</h3><h4 id="在线安装库文件"><a href="#在线安装库文件" class="headerlink" title="在线安装库文件"></a>在线安装库文件</h4><ul><li>在线安装：<code>pip install 包名</code></li><li>从豆瓣源查找安装：<code>pip install 包名 -i https://pypi.doubanio.com/simple/</code></li><li>直接从GitHub安装：<code>git+https://github.com/hanzhichao/logz</code></li><li>一次安装多个：<code>pip install 包1 包2</code></li><li>指定安装版本：<code>pip install 包名==1.5.6</code></li><li>升级到包的最新版本：·pip install 包名 –upgrade·</li><li>卸载包：pip uninstall 包名</li><li>批量安装requiements.txt文件中所有列出的包：<code>pip install -r requiements.txt</code></li><li>查看已安装包的信息：<code>pip show 包名</code></li><li>查看已安装的所有包：<code>pip list</code></li><li>导出当前环境所有安装的包：<code>pip freeze &gt; requirements.txt</code></li></ul><h4 id="修改pip源"><a href="#修改pip源" class="headerlink" title="修改pip源"></a>修改pip源</h4><p>​Linux&#x2F;MacOS下，修改 ~&#x2F;.pip&#x2F;pip.conf (没有就创建一个)，windows下，直接在user目录中创建一个pip目录，如：C:\Users\xx\pip，新建文件pip.ini，内容如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">index-url</span> = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"><span class="comment">#豆瓣：http://pypi.douban.com/simple/</span></span><br><span class="line"><span class="comment">#中科大：https://pypi.mirrors.ustc.edu.cn/simple/</span></span><br><span class="line"><span class="comment">#清华：https://pypi.tuna.tsinghua.edu.cn/simple</span></span><br></pre></td></tr></table></figure><h4 id="pip-离线安装"><a href="#pip-离线安装" class="headerlink" title="pip 离线安装"></a>pip 离线安装</h4><ul><li>离线安装<ol><li>从<a href="https://pypi.org/">Pypi.org</a>网站查找需要的包，下载.whl文件</li><li>使用pip install &lt;下载的whl包&gt;  进行本地whl文件安装</li></ol></li><li>源码安装<ol><li>从<a href="https://pypi.org/">Pypi.org</a>下载源码包，解压，进入解压目录</li><li>打开命令行，执行 <code>python setup.py install</code></li><li>验证：pip list  进行查找</li></ol></li></ul><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h4><p>​python 语法没有 { } 代码块，严格按照缩进进行代码块的规范</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> x &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正数&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> x = <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;0&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;负数&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br></pre></td></tr></table></figure><h4 id="一行多条语句"><a href="#一行多条语句" class="headerlink" title="一行多条语句"></a>一行多条语句</h4><p> 除了可以利用换行进行语句结束划分，也可以使用 ;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">1</span>; y=<span class="number">2</span>; <span class="built_in">print</span>(x+y)</span><br></pre></td></tr></table></figure><h4 id="断行"><a href="#断行" class="headerlink" title="断行"></a>断行</h4><p>当一行语句太长时，会显得累赘；可以使用 ‘\‘ 将两行语句归为一行</p><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单行注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">多行注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">多行注释，也可以代表函数说明</span></span><br><span class="line"><span class="string">使用三个单引号（&#x27;&#x27;&#x27; &#x27;&#x27;&#x27;）或三个双引号（&quot;&quot;&quot;</span> <span class="string">&quot;&quot;&quot;）来创建多行注释</span></span><br><span class="line"><span class="string">用法：三个单引号和三个双引号都可以用来创建多行注释。两者的作用是一样的，都可以用于对代码进行注释和说明。</span></span><br><span class="line"><span class="string">使用双引号时，你不需要转义单引号，而使用单引号时则需要转义双引号。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="类型注释"><a href="#类型注释" class="headerlink" title="类型注释"></a>类型注释</h4><p>在函数中，可以对参数及返回值类型进行注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x: <span class="built_in">int</span>, y: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br></pre></td></tr></table></figure><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><ol><li><p>变量类型（局部变量、全局变量、系统变量）</p></li><li><p>变量赋值</p><ul><li><p>多重赋值<code>x=y=z=1</code></p></li><li><p>多元赋值<code>x,y = y,x</code></p></li></ul></li><li><p>变量自增 <code>x+=1</code>，<code>x-=1</code>(不支持<code>x++</code>, <code>x--</code>)</p></li><li><p>Python 语言本身没有提供内置的常量机制，但是通常使用全大写命名的变量来表示常量，在 Python 3.8 中引入了 <code>typing.Final</code> 来标识一个变量为最终值；Python 中，使用约定而不是强制，不像Java 有明确的常量关键字 <code>final</code> 来定义常量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Final</span><br><span class="line">PI: Final = <span class="number">3.14159</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><ul><li><p>算术运算符：一般用于数字类型的计算</p><ul><li>+：加，如 <code>1+2</code>，结果为3，在字符串中为连接，如<code>&#39;1&#39; + &#39;2&#39;</code>，结果为’12’，不同类型不能直接相加。</li><li><ul><li>：减，如 <code>3-1</code>，结果2</li></ul></li><li><em>：乘，如&#96;2</em>3，结果为6</li><li>&#x2F;：除：如 <code>3/2</code>，结果为1.5</li><li>&#x2F;&#x2F;：地板除（只向下保留整数），如<code>3//2</code>，结果为1，<code>3//-2</code>，结果为-2</li><li>**：乘方，如<code>4**2</code>，结果为16</li><li>%： 取余，如果<code>5%2</code>，结果为1</li></ul></li><li><p>比较运算符：可用于两个相同类型对象的比较</p><ul><li>&#x3D;&#x3D;：相等比较，如<code>1+1==2</code>，结果为True，<code>&#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125; = &#123;&#39;b&#39;: 1 , &#39;a&#39;: 1&#125;</code>，结果为True</li><li>!&#x3D;：比较是否不等，如<code>1+1 != 3</code>，结果为True，<code>[1,2,3] != [2,1,3]</code>，结果为True</li><li>&lt;：比较小于</li><li>&lt;&#x3D;：比较小于等于</li></ul></li><li><p>身份运算符：用于判断是否同一对象</p><ul><li>is：判断是同一对象，’&#x3D;&#x3D;’只判断值是否相等，如<code>True==1</code>，is则判断是否同一对象（使用id()得出的内存地址相同），2&gt;1 is True<code>，结果为True，</code>a&#x3D;None;a is None&#96;，结果为True</li><li>is not：判断非同一对象，如<code>True is not 1</code>结果为True。</li></ul></li><li><p>赋值运算符：用于将值赋给变量</p><ul><li>&#x3D;：赋值，如<code>a = 1</code>，将1赋给变量a，支持多重赋值，如<code>a,b = 1,2</code>或<code>a,b=[1,2]</code>（赋值时序列会自动解包变为1,2两个变量），结果为将1赋给a，将2赋给b</li><li>+&#x3D;：变量自增，如<code>a+=1</code>相当于<code>a=a+1</code></li><li>-&#x3D;: 自减</li><li>*&#x3D;：自乘</li><li>&#x2F;&#x3D;：自除</li><li>&#x2F;&#x2F;&#x3D;：自地板除</li><li>**&#x3D;：自乘方</li><li>%&#x3D;：自取余</li></ul></li><li><p>逻辑运算符：用于多个表达式的逻辑判断，有短路效应</p><ul><li>and：并且，如<code>1&gt;2 and 1&gt;0</code>，都为真时返回最后一个结果的值。当第一个条件为假时不执行后面的判断，直接返回False，如果第一个条件为真时结果为第二个判断的结果（本例实际1&gt;0不会执行）</li><li>or：或，如<code>1&gt;2 or 1&gt;0</code>，返回第一个为真的值或都无假时返回最后一个结果的值。当第一个条件为真是不执行后面的判断，直接返回True，否则返回第二个结果的值（本例1&gt;0会执行）</li><li>not：非，如<code>not 1&gt;2</code>，结果为True</li></ul></li><li><p>成员运算符：用于判断包含，常用判断字符串、列表、元祖、集合、字典中是否包含某元素（某键值）</p><ul><li>in：是否在其中，如<code>a in &#39;abcd&#39;</code>，结果为True，或<code>1 in [1,2,3]</code>，结果为True，或<code>&#39;name&#39; in &#123;&#39;name&#39;: &#39;kevin&#39;, &#39;age&#39;: 12&#125;</code>，结果为True。</li><li>not in：判断不包含，如<code>a not in &#39;bcde&#39;</code>结果为True，从效率上由于not in会对比所有的元素，因此效率比使用in低</li></ul></li><li><p>位运算符：用于二进制或集合运算</p><ul><li>&amp;：按位与</li><li>|：按位或</li><li>~：按位取反</li><li>^：按位异或</li><li>&lt;&lt;：左移</li></ul></li></ul><h4 id="运算符优先级-从高到低"><a href="#运算符优先级-从高到低" class="headerlink" title="运算符优先级 ( 从高到低)"></a>运算符优先级 ( 从高到低)</h4><table><thead><tr><th align="center">运算符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">**</td><td align="center">指数（最高优先级）</td></tr><tr><td align="center">~、+、-</td><td align="center">按位翻转，一元加号和减号（最后两个的方法名为+@和-@）</td></tr><tr><td align="center">*、&#x2F;、%、&#x2F;&#x2F;</td><td align="center">乘、除、取模和取整除</td></tr><tr><td align="center">+、-</td><td align="center">加法、减法</td></tr><tr><td align="center">&gt;&gt;、&lt;&lt;</td><td align="center">右移、左移运算符</td></tr><tr><td align="center">&amp;</td><td align="center">位与</td></tr><tr><td align="center">^、|</td><td align="center">位运算符</td></tr><tr><td align="center">&lt;&#x3D;、&lt;、&gt;、&gt;&#x3D;</td><td align="center">比较运算符</td></tr><tr><td align="center">&lt;&gt; &#x3D;&#x3D; !&#x3D;</td><td align="center">等于运算符</td></tr><tr><td align="center">&#x3D; %&#x3D; &#x2F;&#x3D; &#x2F;&#x2F;&#x3D; -&#x3D; +&#x3D; *&#x3D; **&#x3D;</td><td align="center">赋值运算符</td></tr><tr><td align="center">is  is not</td><td align="center">身份运算符</td></tr><tr><td align="center">in  in not</td><td align="center">成员运算符</td></tr><tr><td align="center">not or and</td><td align="center">逻辑运算符</td></tr></tbody></table><p><code>[&#39;&#39;]</code>，<code>[[],[]]</code>由于不是空列表，在逻辑判断时被认为是True。</p><h4 id="表达式与语句"><a href="#表达式与语句" class="headerlink" title="表达式与语句"></a>表达式与语句</h4><p>​Python代码由表达式和语句组成；表达式(Expression)是运算符(operator)和操作数(operand)所构成的序列,语句是让计算机执行特定操作的指示</p><ul><li><p>表达式</p><p>表达式一般结果为一个Python对象，如<code>1+2</code>, <code>int(&#39;123&#39;)</code>，<code>range(10)</code><br>表达式一般可以包含算数运算符、比较运算符、逻辑运算符、成员运算符、位运算符，但不能包含赋值运算符</p><p>由于表达式计算后返回一个Python对象，因此表达式可以当做待计算的变量一样使用</p></li><li><p>语句</p><p>结果不是对象的代码则成为‘语句’。它们表示的是一个动作而不是生成或者返回一个值。</p><p>常见的Python语句有：</p><ul><li>赋值语句</li><li>调用</li><li>print：打印对象</li><li>if&#x2F;elif&#x2F;else</li><li>for&#x2F;else、while&#x2F;else</li><li>pass</li><li>break、continue</li><li>def</li><li>return、yield</li><li>global</li><li>raise</li><li>import、from … import</li></ul></li></ul><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>Python基本的数据类型包含10种，分别是：</p><ul><li>整数（int）：表示整数值，例如：5、-10、100。</li><li>浮点数（float）：表示带有小数点的数值，例如：3.14、-2.5、1.0。</li><li>布尔类型（bool）：表示真（True）或假（False）的值。</li><li>字符串类型（str）：表示文本数据，使用单引号（’）或双引号（”）括起来，例如：”Hello”、’World’。</li><li>列表类型（list）：表示有序、可变的集合，可以包含不同类型的元素，使用方括号（[]）括起来，例如：[1, 2, ‘three’, True]。</li><li>元组类型（tuple）：表示有序、不可变的集合，可以包含不同类型的元素，使用圆括号（()）括起来，例如：(1, 2, ‘three’, True)。</li><li>集合类型（set）：表示无序、唯一的元素集合，不包含重复的元素，使用大括号（{}）或 set() 函数创建，例如：{1, 2, 3}、set([1, 2, 3])。</li><li>字典类型（dict）：表示键值对的集合，每个键都是唯一的，使用大括号（{}）括起来，键和值之间使用冒号（:）分隔，例如：{‘name’: ‘John’, ‘age’: 25}。</li><li><code>NoneType</code> 类型：<code>None</code> 是一个特殊的常量，表示一个空对象或空值。它是一个内置的对象</li><li>复数类型（complex）</li></ul><p>这些又可以分为可变类型和不可变类型</p><ul><li>不可变类型- 整数、浮点数、布尔类型、字符串、元组</li></ul><p>不可变类型指的是一旦创建就不能被修改的数据类型，例如整数、浮点数、布尔类型、字符串、元组等。对于不可变类型的数据，如果需要修改，通常需要创建一个新的对象来代替原来的对象。</p><p>对于不可变类型的数据，虽然不能直接修改其内容，但是可以通过重新赋值的方式来改变其值。</p><ul><li>可变类型 - 列表、集合、字典等</li></ul><p>可变类型指的是可以被修改的数据类型，例如列表、集合、字典等。对于可变类型的数据，可以直接修改其内容，而不需要创建新的对象。</p><p>可以通过选择合适的数据类型、避免频繁的对象复制、使用不可变类型作为函数参数、使用生成器和迭代器等方式来提高程序的性能。</p><p>总结：</p><p>不可变类型：数字&#x2F;字符串&#x2F;元祖&#x2F;frozen set<br>可变类型：列表、集合、字典</p><p>有序类型：序列(字符串&#x2F;列表&#x2F;元祖<br>无序类型：集合、字典</p><h4 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h4><ul><li><code>+</code>：加</li><li><code>-</code>：减</li><li><code>*</code>：乘</li><li><code>/</code>：除，结果为浮点数，如<code>1/2=0.5</code>，又称真实除</li><li><code>//</code>：整除，舍去所有小数，又称地板除</li><li><code>%</code>：取模，如<code>3 % 2 = 1</code></li><li><code>**</code>：乘方，如<code>3 ** 2 = 9</code></li></ul><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p>​!!! 字符串形式的浮点数，如’1.23’，只能使用float转为浮点数，用int转为整数则会报错。</p><ul><li>str(): 其他类型转为字符串, 如<code>str(12)</code></li><li>int()：字符串整数或浮点数转为整型，如<code>int(&quot;12&quot;)</code></li><li>float()：字符串数字或整形，转换为浮点数，如<code>float(&quot;1.23&quot;)</code></li></ul><h4 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h4><p>Python中的数字除了10进制数之外，还支持2进制（表示为0b开头）、8进制（表示为0o开头）、16进制数（表示为0x开头）。相互转换方法如下：</p><ul><li>bin()：转为2进制，如<code>bin(10)</code>，结果为<code>0b1010</code></li><li>oct()：转为8进制，如<code>oct(10)</code>，结果为<code>0o12</code></li><li>hex()：转为16进制，如<code>hex(10)</code>，结果为<code>0xa</code></li><li>int()：转为10进制，如<code>int(0b1010)</code>结果为<code>10</code></li></ul><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="系统方法"><a href="#系统方法" class="headerlink" title="系统方法"></a>系统方法</h4><table><thead><tr><th>方法</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>len()</td><td>计算字符串长度</td><td>len(“abcdefg”)，结果为7</td></tr><tr><td>count()</td><td>查询字符串中某个元素的数量</td><td>aabcabc”.count(“a”)，结果为3</td></tr><tr><td>find() &#x2F; index()</td><td>查找字符串中某个字符第一次出现的索引，find()找不到返回-1 , index()找不到报错</td><td>“abcdefg”.find(“b”)，结果为1 , ”abcdefg”.index(“b”)，结果也为1</td></tr><tr><td>replace()</td><td>替换字符串中的某部分</td><td>“hello,java”.replace(“java”, “python”)，结果为hello,python</td></tr><tr><td>split()</td><td>将字符串按分隔符分割成列表</td><td>“a,b,c,d”.split(“,”)，结果为[“a”, “b”, “c”, “d”]</td></tr><tr><td>join()</td><td>将字符串作为分隔符连接列表元素得到一个字符串</td><td>“-“.join([“a”, “b”, “c”, “d”])，结果为a-b-c-d</td></tr><tr><td>lower() &#x2F; upper()</td><td>将字符串转换为全小写&#x2F;大写</td><td>“AbcdeF”.lower()，结果为abcdef , “abcedF”.upper()，结果也为ABCDEF</td></tr><tr><td>isdigit() &#x2F; isalpha() &#x2F; isalnum()</td><td>字符串是否纯数字&#x2F;纯字母&#x2F;纯数字字母组合</td><td>“123”.isdigit()，结果为True</td></tr><tr><td>strip() &#x2F; lstrip() &#x2F; rstrip()</td><td>去掉字符串左右&#x2F;左边&#x2F;右边的无意字符（包括空格、换行等非显示字符)</td><td>“ this has blanks \n”.strip()，结果为this has balnks</td></tr></tbody></table><h4 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h4><p>字符串格式化是指，将字符串的某部分按一定格式输出，同时也可以将某些变量的实际值，插入到字符串中。</p><ul><li>%: 如<code>&quot;Name: %s, Age: %d&quot; % (&quot;Lily&quot;, 12)</code>或<code>&quot;Name: %(name)s, Age: %(age)d&quot; % &#123;&quot;name&quot;: &quot;Lily&quot;, &quot;age&quot;: 12&#125;</code></li><li>format: 如<code>&quot;Name: &#123;&#125;, Age: &#123;&#125;&quot;.format(&quot;Lily&quot;, 12)</code>或<code>&quot;Name: &#123;name&#125;, Age: &#123;age&#125;&quot;.format(name=&quot;Lily&quot;,age=12)</code></li><li>fstring：如 <code>f&#39;Name: &#123;name&#125;, Age: &#123;age&#125;&#39;</code></li><li>substitude(不完全替换会报错)&#x2F;safe_substitude: 如&#96;”Name: ${name}, Age: ${age}”.safe_substitude(name&#x3D;”Lily”,age&#x3D;12)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">tpl=<span class="string">&#x27;&#x27;&#x27;&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;&lt;title&gt;&#123;title&#125;&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;h1&gt;&#123;title&#125;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">&lt;table border=1px&gt;</span></span><br><span class="line"><span class="string">    &lt;tr&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;序号&lt;/th&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;用例&lt;/th&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;结果&lt;/th&gt;</span></span><br><span class="line"><span class="string">    &lt;/tr&gt;</span></span><br><span class="line"><span class="string">    &#123;trs&#125;</span></span><br><span class="line"><span class="string">&lt;/table&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">tr=<span class="string">&#x27;&#x27;&#x27;&lt;tr&gt;&lt;td&gt;&#123;sn&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="string">&lt;td&gt;&#123;case_name&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="string">&lt;td&gt;&#123;result&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">title=<span class="string">&quot;自动化测试报告&quot;</span></span><br><span class="line">case_results = [(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;test_add_normal&quot;</span>, <span class="string">&quot;PASS&quot;</span>),(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;test_add_negative&quot;</span>, <span class="string">&quot;PASS&quot;</span>), (<span class="string">&quot;3&quot;</span>, <span class="string">&quot;test_add_float&quot;</span>, <span class="string">&quot;FAIL&quot;</span>)]</span><br><span class="line"></span><br><span class="line">trs=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> case_result <span class="keyword">in</span> case_results:</span><br><span class="line">    tr_format = tr.<span class="built_in">format</span>(sn=case_result[<span class="number">0</span>], case_name=case_result[<span class="number">1</span>], result=case_result[<span class="number">2</span>])</span><br><span class="line">    trs += tr_format</span><br><span class="line"></span><br><span class="line">html = tpl.<span class="built_in">format</span>(title=title, trs=trs)</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;report.html&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">f.write(html)</span><br><span class="line">f.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="列表list"><a href="#列表list" class="headerlink" title="列表list"></a>列表list</h3><p>​列表元素支持各种对象的混合,支持嵌套各种对象,如<code>[&quot;a&quot;, 1, &#123;&quot;b&quot;: 3&#125;, [1,2,3]]</code></p><h4 id="列表操作"><a href="#列表操作" class="headerlink" title="列表操作"></a>列表操作</h4><ul><li>赋值: <code>l = [1, &quot;hello&quot;, (&quot;a&quot;, &quot;b&quot;)]</code></li><li>获取: <code>a = l[0] # 通过索引获取</code></li><li>增: <code>l.append(&quot;c&quot;);l.extend([&quot;d&quot;,&quot;e&quot;]);l+[&quot;f&quot;]</code></li><li>删: <code>l.pop() # 按索引删除,无参数默认删除最后一个;l.remove(&quot;c&quot;) # 按元素删除</code></li><li>改:<code>l[1]=&quot;HELLO&quot; # 通过索引修改</code></li><li>查: 遍历 <code>for i in l: print(i)</code></li></ul><h4 id="列表系统方法"><a href="#列表系统方法" class="headerlink" title="列表系统方法"></a>列表系统方法</h4><table><thead><tr><th>方法</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>append()&#x2F;insert()&#x2F;extend()</td><td>添加&#x2F;插入&#x2F;扩展(连接)</td><td>[1,2].append(3)</td></tr><tr><td>insert()</td><td>插入</td><td>[1,3].insert(1,2)</td></tr><tr><td>extend()</td><td>扩展(连接)</td><td>[1,2].extend([3,4])</td></tr><tr><td>index()</td><td>获取元素索引</td><td>[1,2].index(2)</td></tr><tr><td>count()</td><td>统计元素个数</td><td>[1,2,1,1].count(1)</td></tr><tr><td>pop()</td><td>按索引删除</td><td>[1,2].pop(0)</td></tr><tr><td>remove()</td><td>按元素删除</td><td>[1,2].remove(1)</td></tr><tr><td>sort()</td><td>排序</td><td>[1,3,2].sort()</td></tr><tr><td>reverse()</td><td>反转</td><td>[1,3,2].reverse()</td></tr></tbody></table><h3 id="元祖tuple"><a href="#元祖tuple" class="headerlink" title="元祖tuple"></a>元祖tuple</h3><ol><li>不可改变,常用作函数参数(安全性好)</li><li>同样支持混合元素以及嵌套</li><li>只有一个元素时,必须加”,”号,如<code>a=(&quot;hello&quot;,)</code> - 因为Python中()还有分组的含义,不加”,”会识别为字符串</li></ol><p>为什么需要元祖？有时候我们需要多个变量来表达一个确定的值，如坐标(x,y)。在哈希算法中，不可变是非常重要的，这样每次生成的哈希值才能相同。作为不可变对象，元祖可以作为字典的KEY，即<code>&#123;(1,2): 3&#125;</code>是合法的。</p><h4 id="元祖对象操作方法"><a href="#元祖对象操作方法" class="headerlink" title="元祖对象操作方法"></a>元祖对象操作方法</h4><p>​由于元素是不可变对象，自带操作对象较少</p><table><thead><tr><th>方法</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>index()</td><td>获取元素索引</td><td>t&#x3D;(1,2,3); print(t.index(2)</td></tr><tr><td>count()</td><td>获取元素个数</td><td>t&#x3D;(1,2,3,2,1,2,3); print(t.index(2)</td></tr></tbody></table><h3 id="序列类型相关操作方法"><a href="#序列类型相关操作方法" class="headerlink" title="序列类型相关操作方法"></a>序列类型相关操作方法</h3><p>​字符串、列表、元祖等按顺序存储的变量类型，我们统称为序列类型。</p><h4 id="序列类型-索引"><a href="#序列类型-索引" class="headerlink" title="序列类型 - 索引"></a>序列类型 - 索引</h4><ul><li>正反索引: <code>l[3];l[-1]</code></li><li>索引溢出(IndexError): 当索引大于序列的最大索引时会报错,如[1,2,3,4]最大索引是3,引用l[4]会报IndexError</li></ul><h4 id="序列类型-切片"><a href="#序列类型-切片" class="headerlink" title="序列类型 - 切片"></a>序列类型 - 切片</h4><ul><li>l[1:3] # 从列表索引1到索引3(不包含索引3)进行截取, 如 l &#x3D; [1, 2, 3, 4, 5], l[1:3]为[2, 3]</li><li>l[:5:2] # 第一个表示开始索引(留空0), 第二个表示结束索引(留空为最后一个,即-1), 第三个是步长, 即从开头到第5个(不包含第5个),跳一个取一个</li><li><em>案例</em>: 字符串反转 <code>s=&quot;abcdefg&quot;;r=s[::-1]</code></li></ul><h4 id="序列类型-遍历"><a href="#序列类型-遍历" class="headerlink" title="序列类型-遍历"></a>序列类型-遍历</h4><ul><li>按元素遍历: <code>for item in l: print(item)</code></li><li>按索引遍历: <code>for index in range(len(l)): print(l[index])</code></li><li>按枚举遍历: <code>for i,v in enumerate(l): print((i,v))</code></li></ul><p>当遍历序列类型（如列表、元组、字符串等）和非序列类型（如集合、字典等）时，存在一些区别和注意点。</p><h4 id="遍历序列类型"><a href="#遍历序列类型" class="headerlink" title="遍历序列类型"></a>遍历序列类型</h4><ol><li><p>使用 for 循环：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> my_list:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure></li><li><p>使用 while 循环和索引：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">my_tuple = (<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line">index = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> index &lt; <span class="built_in">len</span>(my_tuple):</span><br><span class="line">    <span class="built_in">print</span>(my_tuple[index])</span><br><span class="line">    index += <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>使用内置函数 enumerate() 获取索引和值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my_string = <span class="string">&quot;Hello&quot;</span></span><br><span class="line"><span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(my_string):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Index: <span class="subst">&#123;index&#125;</span>, Value: <span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>列表解析（List comprehension）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">squared_values = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> my_list]</span><br><span class="line"><span class="built_in">print</span>(squared_values) </span><br></pre></td></tr></table></figure></li></ol><ul><li>序列类型支持索引操作，因此可以使用循环或者内置函数来获取每个元素。</li><li>序列类型的元素有顺序，因此我们可以按照它们在序列中的位置来进行遍历。</li><li>序列类型通常具有固定长度，因此我们可以使用内置函数 <code>len()</code> 来获取其长度</li></ul><h4 id="遍历非序列类型"><a href="#遍历非序列类型" class="headerlink" title="遍历非序列类型"></a>遍历非序列类型</h4><h4 id="集合-set-示例："><a href="#集合-set-示例：" class="headerlink" title="集合 (set) 示例："></a>集合 (set) 示例：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my_set = &#123;<span class="number">10</span>, <span class="string">&#x27;a&#x27;</span>, <span class="literal">True</span>&#125;</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> my_set:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure><h4 id="字典-dict-示例："><a href="#字典-dict-示例：" class="headerlink" title="字典 (dict) 示例："></a>字典 (dict) 示例：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">my_dict = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">25</span>&#125;</span><br><span class="line"><span class="comment"># 遍历键值对</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> my_dict.items():</span><br><span class="line">    <span class="built_in">print</span>(key, value)</span><br><span class="line"><span class="comment"># 只遍历键或值</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> my_dict.keys():</span><br><span class="line">     <span class="built_in">print</span>(key)</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> my_dict.values():</span><br><span class="line">     <span class="built_in">print</span>(value)</span><br></pre></td></tr></table></figure><p>某些非序列对象可能具有特定方法用于迭代。例如，在 pandas 的 DataFrame 中，我们可以使用 iteritems() 方法来遍历每一行数据。</p><h4 id="区别与注意点"><a href="#区别与注意点" class="headerlink" title="区别与注意点"></a>区别与注意点</h4><ul><li>对于集合（set），由于其是无需且不重复的容器，所以在遍历时不能保证元素的顺序。</li><li>字典（dict）是键值对形式存储数据的对象，在循环中需要考虑是否要同时处理键和值。</li><li>其他非序列对象可能具有特定方法用于迭代。需要查看相应文档以了解如何进行迭代操作。</li></ul><h4 id="扩展-连接-添加多个元素"><a href="#扩展-连接-添加多个元素" class="headerlink" title="扩展&#x2F;连接(添加多个元素"></a>扩展&#x2F;连接(添加多个元素</h4><p>extend()&#x2F;+ <code>&quot;abc&quot;+&quot;123&quot;;[1,2,3]+[4,5];[1,2,3].extend([4,5,6,7])</code></p><h4 id="类型互转-str-list-tuple"><a href="#类型互转-str-list-tuple" class="headerlink" title="类型互转: str()&#x2F;list()&#x2F;tuple()"></a>类型互转: str()&#x2F;list()&#x2F;tuple()</h4><p>list转str一般用join(), str转list一般用split()</p><h4 id="系统函数"><a href="#系统函数" class="headerlink" title="系统函数"></a>系统函数</h4><ul><li>len(): 计算长度</li><li>max()&#x2F;min(): 求最大&#x2F;最小元素</li><li>sorted()&#x2F;reversed(): 排序&#x2F;反转并生成新序列(sort()&#x2F;reverse()直接操作原序列)<code>l_new=sorted(l);l_new2=reversed(l)</code></li></ul><h3 id="集合-set"><a href="#集合-set" class="headerlink" title="集合 set"></a>集合 set</h3><p>集合是Python中一种映射类型，集合中的元素要是不可变类型（数字、字符串、元祖），元素不重复（自动去重）。</p><p>由于集合是基于映射类型（基于hash算法计算得到的元素地址，而不是顺序排列），相比于列表和元祖，集合的查询效率非常高，无论集合中有多少个元素，查询某个元素只需要一次操作。</p><p>Python中有可变结合set和不可变集合frozenset两种</p><h4 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line">s = <span class="built_in">set</span>()  <span class="comment"># 创建空集合</span></span><br><span class="line">s = <span class="built_in">set</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])  <span class="comment"># 将列表转为集合</span></span><br></pre></td></tr></table></figure><h4 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h4><p>同数学概念中的集合，Python中的集合也支持交集、并集、差集等操作，集合于集合常见操作符如下：</p><ul><li>联合(并集): 例如：<code>&#123;&#39;a&#39;, &#39;b&#39; &#125; | &#123;&#39;b&#39;, &#39;c&#39;&#125;</code>，结果为<code>&#123;&#39;a&#39;, &#39;b&#39;, &#39;c&#39;&#125;</code></li><li>交集: <code>&amp;</code>: 例如：<code>&#123;&#39;a&#39;, &#39;b&#39; &#125; | &#123;&#39;b&#39;, &#39;c&#39;&#125;</code> ，结果为<code>&#123;&#39;b&#39;&#125;</code></li><li>差集: 例如：<code>&#123;&#39;a&#39;, &#39;b&#39; &#125; - &#123;&#39;b&#39;, &#39;c&#39;&#125;</code>，结果为 <code>&#123;&#39;a&#39;&#125;</code>，相反<code>&#123;&#39;b&#39;, &#39;c&#39; &#125; - &#123;&#39;a&#39;, &#39;b&#39;&#125;</code>，结果为<code>&#123;&#39;c&#39;&#125;</code></li><li>对称差分(去除相同的项做并集): 例如<code>&#123;&#39;a&#39;, &#39;b&#39; &#125; ^ &#123;&#39;b&#39;, &#39;c&#39;&#125;</code>结果为<code>&#123;&#39;a&#39;, &#39;c&#39;&#125;</code></li></ul><h4 id="通过集合操作快速对比出一些数据的不同"><a href="#通过集合操作快速对比出一些数据的不同" class="headerlink" title="通过集合操作快速对比出一些数据的不同"></a>通过集合操作快速对比出一些数据的不同</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">data1 = [&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;王六&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">75</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">98</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;赵六&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">89</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">87</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;李五&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">87</span>&#125;]</span><br><span class="line">data2 = [&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;赵六&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">89</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">98</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">98</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">75</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;王六&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">85</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将列表中的每一项转为value值组成的不可变元祖, 然后将列表转为集合</span></span><br><span class="line">set1 = <span class="built_in">set</span>([<span class="built_in">tuple</span>(i.values()) <span class="keyword">for</span> i <span class="keyword">in</span> data1])  </span><br><span class="line">set2 = <span class="built_in">set</span>([<span class="built_in">tuple</span>(i.values()) <span class="keyword">for</span> i <span class="keyword">in</span> data2])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;data2中于data1中不同的有&#x27;</span>, set1-set2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;data1中于data2中不同的有&#x27;</span>, set2-set1)</span><br></pre></td></tr></table></figure><h4 id="集合对象自带方法"><a href="#集合对象自带方法" class="headerlink" title="集合对象自带方法"></a>集合对象自带方法</h4><table><thead><tr><th>方法</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>add()</td><td>添加元素</td><td>s &#x3D; set(); s.add(‘a’)</td></tr><tr><td>update()</td><td>更新集合(批量添加多个)</td><td>s &#x3D; {‘a’, ‘b’}; s1&#x3D;set([‘b’, ‘c’]); s.update(s1)</td></tr><tr><td>remove(element)</td><td>移除指定元素(如果元素不存在报错)</td><td>s &#x3D; {‘a’, ‘b’, ‘c’}; s.remove(‘a’) ;print(s)</td></tr><tr><td>discard(element)</td><td>丢弃指定元素(如果元素不存在不报错）</td><td>s &#x3D; {‘a’, ‘b’, ‘c’}; s.discard(‘d’) ;print(s)</td></tr><tr><td>pop()</td><td>随机移除一个元素</td><td>s&#x3D;{‘a’, ‘b’, ‘c’}; s.pop(); print(s)</td></tr><tr><td>copy()</td><td>复制集合</td><td>s &#x3D; {‘a’, ‘b’, ‘c’}; s1 &#x3D; s.copy(); print(s1)</td></tr><tr><td>clear()</td><td>清空集合</td><td>s &#x3D; {‘a’, ‘b’, ‘c’}; s.clear() ; print(s)</td></tr><tr><td>difference(s1)</td><td>与另一个集合的差别（相当于差集）</td><td>s &#x3D; {‘a’, ‘b’};s1 &#x3D; {‘b’, ‘c’};print(s.difference(s1))</td></tr><tr><td>issubset(s1)</td><td>是否子集</td><td>s &#x3D; {‘a’, ‘b’}; s1 &#x3D; {‘a’, ‘b’, ‘c’}; print(s.issubset(s1))</td></tr><tr><td>issuperset(s)</td><td>是否父集</td><td>s &#x3D; {‘a’, ‘b’};s1 &#x3D; {‘a’, ‘b’, ‘c’}; print(s1.issuperset(s))</td></tr><tr><td>isdisjoint(s)</td><td>是否互斥(彼此都不包含对方元素)</td><td>s &#x3D; {‘a’, ‘b’};s1 &#x3D; {‘c’, ‘d’}; print(s1.isdisjoint(s))</td></tr></tbody></table><h4 id="案例1-列表去重"><a href="#案例1-列表去重" class="headerlink" title="案例1: 列表去重"></a><em>案例1</em>: 列表去重</h4><p><code>l=[1,2,3,1,4,3,2,5,6,2];l=list(set(l))</code> (由于集合无序,无法保持原有顺序)</p><h4 id="案例2-100w条数据-用列表和集合哪个性能更好"><a href="#案例2-100w条数据-用列表和集合哪个性能更好" class="headerlink" title="案例2: 100w条数据,用列表和集合哪个性能更好?"></a><em>案例2</em>: 100w条数据,用列表和集合哪个性能更好?</h4><p>集合性能要远远优于列表, 集合是基于哈希的, 无论有多少元素,查找元素永远只需要一步操作, 而列表长度多次就可能需要操作多少次(比如元素在列表最后一个位置)</p><h3 id="字典-dict"><a href="#字典-dict" class="headerlink" title="字典 dict"></a>字典 dict</h3><p>​字典是由若干key-value对组成, Python3.6后字典是有序的, 字典的key不能重复,而且必须是可哈希的,通常是字符串</p><h4 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h4><ul><li><p>dict(key1&#x3D;value1, key2&#x3D;value2, …): 创建字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = <span class="built_in">dict</span>(a=<span class="number">1</span>, b=<span class="number">2</span>, c=<span class="number">3</span>)</span><br><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>dict.fromkeys(key1, key2, key3, … , default): 以默认值创建包含多个键的字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = <span class="built_in">dict</span>.fromkeys([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], <span class="number">1</span>)</span><br><span class="line">d=&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="字典操作"><a href="#字典操作" class="headerlink" title="字典操作"></a>字典操作</h4><ul><li>赋值: <code>d = &#123;&quot;a&quot;:1, &quot;b&quot;:2&#125;</code></li><li>获取: <code>a = d[&#39;a&#39;]</code>或<code>a = d.get(&quot;a&quot;) # d中不存在&quot;a&quot;元素时不会报错</code></li><li>增: <code>d[&quot;c&quot;] = 3; d.update(&#123;&quot;d&quot;:5, &quot;e&quot;: 6&#125;</code></li><li>删: <code>d.pop(&quot;d&quot;); d.clear() # 清空</code></li><li>查: <code>d.get(&quot;c&quot;)</code></li><li>遍历:<ul><li>遍历key: <code>for key in d:</code>或<code>for key in d.keys():</code></li><li>遍历value: <code>for value in d.values():</code></li><li>遍历key-value对: <code>for item in d.items():</code></li></ul></li></ul><h4 id="字典常用方法"><a href="#字典常用方法" class="headerlink" title="字典常用方法"></a>字典常用方法</h4><table><thead><tr><th>方法</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>get(key, default&#x3D;None)</td><td>获取指定键的值，如果不存在该键，则返回default默认值，</td><td>d &#x3D; {‘a’: 1, ‘b’: 2, ‘c’: 3}; print(d.get(e, 5))</td></tr><tr><td>setdefault(key, default)</td><td>设置没有字典中该项时的默认值</td><td>d &#x3D; {‘a’: 1, ‘b’: 2, ‘c’: 3}; d.set_default(‘e’, 5); print(d[‘e’])</td></tr><tr><td>keys()</td><td>所有键的集合(类似列表)</td><td>d &#x3D; {‘a’: 1, ‘b’: 2, ‘c’: 3}; print(d.keys())</td></tr><tr><td>values()</td><td>所有值的集合(类似列表)</td><td>d &#x3D; {‘a’: 1, ‘b’: 2, ‘c’: 3}; print(d.values())</td></tr><tr><td>items()</td><td>所有key, value对的集合(类似列表)</td><td>d &#x3D; {‘a’: 1, ‘b’: 2, ‘c’: 3}; print(d.items())</td></tr><tr><td>copy()</td><td>复制字典(浅拷贝)</td><td>d &#x3D; {‘a’: 1, ‘b’: 2, ‘c’: 3}; d2 &#x3D; d.copy(); print(d2)</td></tr><tr><td>update(…)</td><td>更新字典</td><td>d &#x3D; {‘a’: 1, ‘b’: 2, ‘c’: 3}; d.update({‘c’: 4, ‘d’: 5}; print(d)</td></tr><tr><td>clear()</td><td>清空字典</td><td>d &#x3D; {‘a’: 1, ‘b’: 2, ‘c’: 3}; d.clear(); print(d)</td></tr><tr><td>pop(key)</td><td>取出(移除)指定key并获取对应的值</td><td>d &#x3D; {‘a’: 1, ‘b’: 2, ‘c’: 3}; b_value &#x3D; d.pop(‘b’); print(d)</td></tr><tr><td>popitem()</td><td>取出(移除)末尾的key-value对</td><td>d &#x3D; {‘a’: 1, ‘b’: 2, ‘c’: 3}; print(d.popitem())</td></tr></tbody></table><h4 id="更新字典数据"><a href="#更新字典数据" class="headerlink" title="更新字典数据"></a>更新字典数据</h4><ul><li><p>通过key值修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">api = &#123;<span class="string">&quot;url&quot;</span>: <span class="string">&quot;/api/user/login&quot;</span>: data: &#123;<span class="string">&quot;username&quot;</span>: <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;123456&quot;</span>&#125;&#125;</span><br><span class="line">api[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;username&#x27;</span>] = <span class="string">&quot;李四&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>通过update() 方法修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">api = &#123;<span class="string">&quot;url&quot;</span>: <span class="string">&quot;/api/user/login&quot;</span>: data: &#123;<span class="string">&quot;username&quot;</span>: <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;123456&quot;</span>&#125;&#125;</span><br><span class="line">api[<span class="string">&#x27;data&#x27;</span>].update(&#123;<span class="string">&quot;username&quot;</span>: <span class="string">&quot;李四&quot;</span>&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="哈希与可哈希元素"><a href="#哈希与可哈希元素" class="headerlink" title="哈希与可哈希元素"></a>哈希与可哈希元素</h4><ol><li>哈希是通过计算得到元素的存储地址(映射), 这就要求不同长度的元素都能计算出地址,相同元素每次计算出的地址都一样, 不同元素计算的地址必须唯一, 基于哈希的查找永远只需要一步操作, 计算一下得到元素相应的地址, 不需要向序列那样遍历, 所以性能较好</li><li>可哈希元素: 为了保证每次计算出的地址相同, 要求元素长度是固定的, 如数字&#x2F;字符串&#x2F;只包含数字,字符串的元组, 这些都是可哈希元素</li></ol><h2 id="分支及循环"><a href="#分支及循环" class="headerlink" title="分支及循环"></a>分支及循环</h2><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><h4 id="if条件判断"><a href="#if条件判断" class="headerlink" title="if条件判断"></a>if条件判断</h4><h5 id="if-…"><a href="#if-…" class="headerlink" title="if …"></a>if …</h5><p>如果条件满足，才执行其中语句，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> x&gt;<span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正数&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;结束&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="if-…-else-…"><a href="#if-…-else-…" class="headerlink" title="if … else …"></a>if … else …</h5><p>即，如果条件满足，执行某些语句，否则执行另一些语句，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> x&gt;<span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正数&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;不是正数&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;结束&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="f…-elif-…-else-…"><a href="#f…-elif-…-else-…" class="headerlink" title="f… elif … else …"></a>f… elif … else …</h5><p>即，如果满足某条件，执行某些语句，否则如果满足另一条件，执行该条件语句，如果都不满足所列条件则执行其他语句。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> x&gt;<span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正数&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> x=<span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;0&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;负数&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;结束&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="真假值"><a href="#真假值" class="headerlink" title="真假值"></a>真假值</h4><p>​在Python中False、None，数字0，字符串’0’，以及空字符串’’，空列表[]、空字典{}，空元祖(,)，空集合set()，都被失望假值；否则被视为真。比如可以直接使用if list判断列表为空：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = []</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">list</span>:   <span class="comment"># 也可以使用if len(list)&gt;0:</span></span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&#x27;列表不为空&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h4><p>​三元表达式即 当条件满足时 变量 为一个值，条件不满足时，变量为另一个值，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">max</span> = a <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> b</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">当 a&gt;b 为true时</span></span><br><span class="line"><span class="string">max = a</span></span><br><span class="line"><span class="string">若 a&gt;b 为false</span></span><br><span class="line"><span class="string">max = b</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="逻辑符代替if判断"><a href="#逻辑符代替if判断" class="headerlink" title="逻辑符代替if判断"></a>逻辑符代替if判断</h4><p>在Python语句中and和or也可以用于逻辑判断。</p><ul><li><code>c = a and b</code>：如果a为假，则c的值为a，否则c的值为b</li><li><code>c = a or b</code>：想反，如果a为假，c的值为b，否则c的值为a</li></ul><p>特别是or语句，常用来确保变量的值非空并赋于默认值，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>&#125;</span><br><span class="line">c = d.get(<span class="string">&#x27;c&#x27;</span>) <span class="keyword">or</span> <span class="string">&#x27;默认值&#x27;</span>  </span><br><span class="line"><span class="comment"># 如果d.get(&#x27;c&#x27;)的结果为None,0,空字符串等假值，c被赋予默认值</span></span><br></pre></td></tr></table></figure><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>Python中的循环有for循环和while循环两种</p><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><p>for循环（也称遍历），是从一个含有多个变量的数据集合中，依次取出每一项，进行操作。</p><p>for循环可以对字符串、列表、元祖、集合、字典及生成器、迭代器、文件指针等可以迭代的对象进行遍历输出。</p><ul><li><p>遍历获取一组顺序的数字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):  <span class="comment"># range(10)即生成0-9的10个数字，不包括10</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure></li><li><p>遍历字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str_var = <span class="string">&#x27;hello,world&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str_var:  <span class="comment"># i是代表所遍历对象的每一项的一个变量，可以是任意变量名</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure></li><li><p>遍历列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list_var = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list_var:  <span class="comment"># i是代表所遍历对象的每一项的一个变量，可以是任意变量名</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>在遍历时如果想连同该项的索引一起输出，可以使用enumerate实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list_var = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(list_var):  <span class="comment"># index代表索引，item代表每一项的值</span></span><br><span class="line">    <span class="built_in">print</span>(index, item)</span><br></pre></td></tr></table></figure></li><li><p>遍历字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dict_var =&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="comment"># 遍历字典时，需要使用字典的items()方法，得到每一项key,value的组合</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> dict_var.items():  <span class="comment"># i是代表所遍历对象的每一项的一个变量，可以是任意变量名</span></span><br><span class="line">    <span class="built_in">print</span>(key, value)</span><br></pre></td></tr></table></figure></li></ul><h4 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h4><p>​while循环用于当指定条件满足时，循环执行某些语句，直到条件不满足。while循环中为了避免死循环，一般循环中要有使循环趋于结束的语句，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:  <span class="comment"># 当i&lt;10时，循环执行下面语句</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    i += <span class="number">1</span>  <span class="comment"># i每次自己增加1，等i&gt;=10时，循环自动结束</span></span><br></pre></td></tr></table></figure><h4 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h4><p>break用于结束当前循环，continue用于结束本次循环，直接开始下次循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># break    当有多层循环嵌套时，break每次只能跳出一层循环</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">5</span>:  <span class="comment"># 如果大于5，结束循环</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># continue</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:  <span class="comment"># 如果是偶数，跳过本次循环</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h4 id="循环中的else"><a href="#循环中的else" class="headerlink" title="循环中的else"></a>循环中的else</h4><p>​循环结束有break结束和全部循环完结束两种，为了判断是哪种结束方式，可以使用else。当非break结束时执行else。</p><p>由于实际不会break，因此运行结果会打印’循环完毕’，while…else的使用和for…else类似：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">5</span>:  <span class="comment"># 如果大于5，结束循环</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">else</span>:  <span class="comment"># 非break结束时执行</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;非break跳出，循环全部执行完毕&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;非break跳出，循环全部执行完毕&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>Python中的函数可以理解为一种<em>预先设定</em>的处理过程。一般过程都会包含输入、处理、和输出三个部分。</p><ul><li>输入，即函数参数，可以有多个参数；</li><li>处理：函数内部的处理过程，可以调用其他函数及模块；</li><li>输出：即返回值，也有可以返回多个。</li></ul><p>数学中的函数指一种映射的变换关系，如<code>f(x)=2x+1</code>，转换为Python函数为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x*<span class="number">2</span> + <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="函数定义和调用"><a href="#函数定义和调用" class="headerlink" title="函数定义和调用"></a>函数定义和调用</h3><p>函数分为函数定义和函数调用两部分。</p><ul><li>函数定义即设计函数，是对参数、处理过程和返回值的描述。</li><li>函数调用及使用函数，是使用实际的数据，运行函数并得到实际的返回值。</li></ul><h4 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h4><p>定义一个函数使用<code>def</code>关键字，格式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">参数<span class="number">1</span>,参数<span class="number">2</span>, ...</span>):</span><br><span class="line">    处理过程</span><br></pre></td></tr></table></figure><h4 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h4><p>定义的函数需要调用才能执行，调用是按定义的格式传入和参数对应的实际数据，调用方式如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名(数据<span class="number">1</span>,数据<span class="number">2</span>,...)</span><br></pre></td></tr></table></figure><p>如果需要获取函数的返回结果，可以使用将函数调用复制给变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量 = 函数名(数据<span class="number">1</span>,数据<span class="number">2</span>,...) </span><br></pre></td></tr></table></figure><h4 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h4><p>参数是指使用函数时需要提供的信息，如一个登录函数<code>add(a, b)</code>，需要提供加数和被加数，才能进行运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>): <span class="comment"># 定义函数</span></span><br><span class="line">    s = x+y     <span class="comment"># 处理过程</span></span><br><span class="line">    <span class="keyword">return</span> s   <span class="comment"># 返回结果</span></span><br></pre></td></tr></table></figure><h4 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h4><p>函数分为定义和调用，在定义函数时的参数称为形式参数，如<code>def add(x, y): ...</code>，这里的<code>x</code>和<code>y</code>便是形式参数，形式参数是函数内部使用的。<br>在调用函数时需要传入实际的数据，如<code>add(3,5)</code>，这里的<code>3</code>和<code>5</code>便是实际参数。实际参数也可以是预先定义好的变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>): </span><br><span class="line">    <span class="comment"># 这里的 x,y 便是形参，函数外部不能调用</span></span><br><span class="line">    s = x+y     </span><br><span class="line">    <span class="keyword">return</span> s </span><br><span class="line"></span><br><span class="line">a, b = <span class="number">3</span>, <span class="number">5</span> <span class="comment"># 实参</span></span><br><span class="line">add(a, b)</span><br></pre></td></tr></table></figure><h4 id="参数类型注解"><a href="#参数类型注解" class="headerlink" title="参数类型注解"></a>参数类型注解</h4><p>Python3.5版本以后提供了类型注解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x: <span class="built_in">int</span>, y: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:   <span class="comment"># 说明x,y应为整型 -&gt; 返回值也会整数</span></span><br><span class="line">    s = x+y </span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"><span class="comment"># 类型注释也可以指定多种类型，同时也可以注释函数返回值类型。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x: (<span class="params"><span class="built_in">int</span>, <span class="built_in">float</span></span>), y: (<span class="params"><span class="built_in">int</span>, <span class="built_in">float</span></span>)</span>) -&gt; (<span class="built_in">int</span>, <span class="built_in">float</span>):  <span class="comment"># -&gt;指返回值类型</span></span><br><span class="line">    s = x+y</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure><h4 id="参数默认值-必选和可选参数"><a href="#参数默认值-必选和可选参数" class="headerlink" title="参数默认值-必选和可选参数"></a>参数默认值-必选和可选参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y=<span class="number">1</span></span>): <span class="comment"># x 为必传参数， y 为可选传参数，不传默认值为1； 提供默认值的参数必须写到后面</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果加上类型注解，写法为</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x: (<span class="params"><span class="built_in">int</span>,<span class="built_in">float</span></span>), y: (<span class="params"><span class="built_in">int</span>, <span class="built_in">float</span></span>) = <span class="number">1</span></span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h4 id="位置参数和关键字参数"><a href="#位置参数和关键字参数" class="headerlink" title="位置参数和关键字参数"></a>位置参数和关键字参数</h4><p>参数在定义时只有必选和可选之分，可选的参数需要写到后面。<br>但是在函数调用时就有如下两种传参方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line">add(y=<span class="number">3</span>,x=<span class="number">5</span>) <span class="comment"># 加了y= 就会将3传值给y形数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>): </span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h4 id="不定参数"><a href="#不定参数" class="headerlink" title="不定参数"></a>不定参数</h4><p>​当一个函数使用方式不确定，需要设计其支持任意多个、任意方式（位置&#x2F;关键字形式）传入时。可以使用<code>*args</code>和<code>**kwargs</code><br>args即参数(复数)：arguments的缩写，kwargs即关键词参数(复数)：keyword arguments的缩写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> args:   <span class="comment"># args得到一个元祖类型，没有位置参数时为空元祖</span></span><br><span class="line">        s += num</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> kwargs.values():  <span class="comment"># kwargs得到一个字典类型，无关键词参数时为空字典</span></span><br><span class="line">        s += num</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">add()   <span class="comment"># args 为 空元祖 ()  kwargs 为空字典 &#123;&#125;  结果为 0</span></span><br><span class="line">add(<span class="number">3</span>, <span class="number">5</span>) <span class="comment"># args 为 元祖 (3,5)  kwargs 为空字典 &#123;&#125;  结果为 8</span></span><br><span class="line">add(x=<span class="number">3</span>, y=<span class="number">5</span>)  <span class="comment"># args 为 空元祖 ()  kwargs 为空字典 &#123;&#x27;x&#x27;: 3, &#x27;y&#x27;: 5&#125;  结果为 8</span></span><br><span class="line">add(<span class="number">3</span>, <span class="number">5</span>, z=<span class="number">6</span>)   <span class="comment"># 此时 args为(3,5)  kwargs为 &#123;&#x27;z&#x27;: 6&#125;, 得到 14</span></span><br></pre></td></tr></table></figure><h4 id="限定关键字参数"><a href="#限定关键字参数" class="headerlink" title="限定关键字参数"></a>限定关键字参数</h4><p>函数中可以使用<code>*</code>参数，其后的参数在使用时只能按<code>key=value</code>形式使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">*, a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">1</span>, <span class="number">2</span>)) <span class="comment"># 报错</span></span><br><span class="line"><span class="built_in">print</span>(add(a=<span class="number">1</span>,b=<span class="number">2</span>))</span><br></pre></td></tr></table></figure><h4 id="限定位置参数"><a href="#限定位置参数" class="headerlink" title="限定位置参数"></a>限定位置参数</h4><p>函数中可以使用<code>/</code>参数，其前的参数在使用时只能按位置参数形式使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b, /</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(add(a=<span class="number">1</span>,b=<span class="number">2</span>)) <span class="comment"># 报错</span></span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>函数中也可以使用不定参 <code>def add(*args): ...</code> 来仅允许使用位置参数，使用起来不如上述形式方便，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">*args</span>):</span><br><span class="line">    a, b = args</span><br><span class="line">    <span class="built_in">print</span>(a + b)</span><br><span class="line"></span><br><span class="line">add(a=<span class="number">1</span>, b=<span class="number">2</span>)  <span class="comment"># 报错</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h4 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h4><p>函数中使用关键<code>return</code>返回结果，return操作后，函数结束（后面的语句不会再执行)</p><p>如果想函数每次调用都返回一个值后并不终止，而是暂停等待下次调用，可以使用<code>yield</code>代替<code>return</code>，这样便得到一个生成器函数。</p><h4 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h4><p>函数内部的变量被称为<em>局部变量</em>，局部变量是私有变量，一般情况下，一个函数无法访问其他函数的局部变量。</p><p>如果需要在一个函数中声明一个变量，让所有函数都可以使用，可以使用global关键字声明其为全局变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">global</span> z</span><br><span class="line">    z = <span class="number">3</span></span><br><span class="line">    <span class="keyword">return</span> x + y + z</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x - y -z  <span class="comment"># 可以使用全局变量z</span></span><br><span class="line"><span class="comment"># 由于函数都可以访问和改变全局变量，这会导致全局变量的值不可预测，因此需要谨慎使用全局变量。</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">3</span>   <span class="comment"># 模块中的全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>():</span><br><span class="line">    a = a + <span class="number">3</span> <span class="comment"># 将全局变量 进行加3 赋值给局部变量</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addGlobal</span>():</span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line">    a = a + <span class="number">3</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> 参数: 返回值</span><br><span class="line">add = lamda x,y: x+y</span><br></pre></td></tr></table></figure><h4 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h4><p>函数用于显示一个函数的信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;加法函数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数描述的方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">info</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="comment"># 使用魔术方法获取func方法的信息并打印</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;函数名称:&#x27;</span>, func.__name__) <span class="comment"># __name__: 可以获取函数的方法名</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;函数描述:&#x27;</span>, func.__doc__)<span class="comment"># __doc__: 可以获取到函数的解析注释</span></span><br><span class="line">    <span class="comment"># 通常情况下，我们不会直接使用 func.__name__ 来获取函数或者方法的名称，通常会使用内置函数 getattr() 来动态地获取对象属性。</span></span><br><span class="line">    function_name = <span class="built_in">getattr</span>(my_function, <span class="string">&#x27;__name__&#x27;</span>)</span><br><span class="line">    method_name = <span class="built_in">getattr</span>(obj.my_method, <span class="string">&#x27;__doc__&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;函数名称:&#x27;</span>, function_name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;函数描述:&#x27;</span>, method_name) </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">info(add) </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">函数名称: add</span></span><br><span class="line"><span class="string">函数描述: 加法函数</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h4><p>装饰器也是一种典型的以函数为参数的函数，装饰器旨在通过包装，在不改变原函数的情况下，为函数来增加功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接使用@info为add函数加上装饰器</span></span><br><span class="line"><span class="meta">@info   </span><span class="comment"># @info 装饰器 - 在调用函数add时会自动打印相应的函数信息。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;加法函数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br></pre></td></tr></table></figure><h5 id="装饰器的执行流程"><a href="#装饰器的执行流程" class="headerlink" title="装饰器的执行流程"></a>装饰器的执行流程</h5><ol><li>定义装饰器函数：首先需要定义一个装饰器函数。这个函数将接收一个被装饰的目标函数作为参数，并返回一个新的内嵌（包裹）了目标函数功能的封闭（wrapper）函数。</li><li>应用装饰器：使用 <code>@</code> 符号将定义好的装饰器应用到目标函数上。这相当于将目标函数作为参数传递给了装饰器，并重新赋值给了原来的名称。</li><li>装饰过程：当调用被修饰后的原始目标函时数时，实际上调用并执行了封闭（wrapper） 函数。这个封闭函（wrapper）数接收到相同参数并执行了额外操作或者修改后再调用内部保存着目标函数引用 的实际逻辑代码。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">uppercase_decorator</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>():</span><br><span class="line">        result = func() <span class="comment"># 获取原函数的返回值</span></span><br><span class="line">        <span class="keyword">return</span> result.upper() <span class="comment"># 将原函数的返回值进行大写</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> wrapper  </span><br><span class="line"></span><br><span class="line"><span class="meta">@uppercase_decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(greet())  <span class="comment"># 输出: HELLO WORLD</span></span><br></pre></td></tr></table></figure><h4 id="常用高阶函数"><a href="#常用高阶函数" class="headerlink" title="常用高阶函数"></a>常用高阶函数</h4><p>map, filter和reduce是Python中常用的3个高阶函数</p><ul><li><p>map()<br>map用于使用一个函数，对一个序列进行批量操作，示例如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add1 = <span class="keyword">lambda</span> x: x + <span class="number">1</span>   <span class="comment"># 处理函数，由于一次处理一个，所有只能有一个参数</span></span><br><span class="line">data = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line">new_data = <span class="built_in">list</span>(<span class="built_in">map</span>(add1, data)   <span class="comment"># map(add1,  data)  实际上是一个生成器，不会自动执行，必须遍历或者转成列表才会执行</span></span><br><span class="line"><span class="built_in">print</span>(new_data)  <span class="comment"># 得到列表 [2, 4, 8 , 10]</span></span><br></pre></td></tr></table></figure></li><li><p>filter()<br>filter使用一个函数来过滤数据<br>当某个数据传入函数时返回非”假”值（Python中False,None,0, ‘0’, ‘’,[], {}, (,)都被视为假），则保留。否则抛弃。示例如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">is_even = <span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span>   <span class="comment">#  过滤函数，x是偶数是 x对2取模==0，返回True，奇数时不等于0，返回False。</span></span><br><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">new_data = <span class="built_in">list</span>(<span class="built_in">filter</span>(is_even, data))   <span class="comment"># filter同样是一个生成器，需要转列表才会执行。</span></span><br><span class="line"><span class="built_in">print</span>(new_data)  <span class="comment"># 得到列表 [2, 4, 6, 8]</span></span><br></pre></td></tr></table></figure></li><li><p>reduce()<br>reduce使用一个函数，对序列进行累积操作，不同的是，这个函数接受两个参数，操作完将结果作为下一轮的第一个参数，再读入下一个参数。<br>如累加[1, 2, 3, 4, 5,6 ,7, 8, 9, 10]，先传入add(1,2)得到和3，第二轮结果3作为第一个参数，再传入下一个参数3得到add(3,3)结果6，下一轮则为add(6,4)…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fuctools <span class="keyword">import</span> reduce  <span class="comment"># 不同于map/filter，reduce需要导入方可使用</span></span><br><span class="line"></span><br><span class="line">add = <span class="keyword">lambda</span> x,y: x + y</span><br><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>,<span class="number">6</span> ,<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line">result = reduce(add, data)  <span class="comment"># reduce调用即执行，返回序列操作完的最后结果</span></span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 得到 55</span></span><br></pre></td></tr></table></figure></li><li><p>sorted()</p><p>Python内置的<code>sorted()</code>函数就可以对list进行排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>([<span class="number">36</span>, <span class="number">5</span>, -<span class="number">12</span>, <span class="number">9</span>, -<span class="number">21</span>])</span><br><span class="line">[-<span class="number">21</span>, -<span class="number">12</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">36</span>]</span><br></pre></td></tr></table></figure><p>它还可以接收一个<code>key</code>函数来实现自定义的排序<br>绝对值大小排序 - key &#x3D; abs</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>([<span class="number">36</span>, <span class="number">5</span>, -<span class="number">12</span>, <span class="number">9</span>, -<span class="number">21</span>], key=<span class="built_in">abs</span>)</span><br><span class="line">[<span class="number">5</span>, <span class="number">9</span>, -<span class="number">12</span>, -<span class="number">21</span>, <span class="number">36</span>]</span><br></pre></td></tr></table></figure><p>忽略大小写 - key &#x3D; str.lower </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>([<span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;about&#x27;</span>, <span class="string">&#x27;Zoo&#x27;</span>, <span class="string">&#x27;Credit&#x27;</span>], key=<span class="built_in">str</span>.lower)</span><br><span class="line">[<span class="string">&#x27;about&#x27;</span>, <span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;Credit&#x27;</span>, <span class="string">&#x27;Zoo&#x27;</span>]</span><br></pre></td></tr></table></figure><p>进行反向排序 - reverse&#x3D;True</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>([<span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;about&#x27;</span>, <span class="string">&#x27;Zoo&#x27;</span>, <span class="string">&#x27;Credit&#x27;</span>], key=<span class="built_in">str</span>.lower, reverse=<span class="literal">True</span>)</span><br><span class="line">[<span class="string">&#x27;Zoo&#x27;</span>, <span class="string">&#x27;Credit&#x27;</span>, <span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;about&#x27;</span>]</span><br></pre></td></tr></table></figure></li></ul><h4 id="函数嵌套-和闭包"><a href="#函数嵌套-和闭包" class="headerlink" title="函数嵌套 和闭包"></a>函数嵌套 和闭包</h4><h5 id="函数嵌套"><a href="#函数嵌套" class="headerlink" title="函数嵌套"></a>函数嵌套</h5><p>​函数嵌套是指在一个函数内部定义了另一个函数。这种嵌套的函数被称为内部函数，而包含它的外部函数被称为外部函数</p><p>嵌套的内部函数可以访问外部函数的参数，但是外部函数无法访问内部函数的参数。<br>如果想在内部函数内声明一个具有外部函数范围的参数可以使用<code>nolocal</code>关键字声明其为自由变量</p><p>优点：内部函数可以使用外部函数中的参数 (当内部函数使用了外部函数的参数时，就形成了闭包。)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">outer_function</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner_function</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This is inner function&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;This is outer function&quot;</span>)</span><br><span class="line">    inner_function()</span><br><span class="line">outer_function()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当嵌套函数传入的参数是函数，则会变成装饰器； 这样便得到一个参数类型，检查装饰器@check</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">add</span>):  <span class="comment"># 外部函数，接受一个add函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">new_add</span>(<span class="params">x, y</span>):  <span class="comment"># 内部函数</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(x, <span class="built_in">int</span>) <span class="keyword">or</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(y, <span class="built_in">int</span>):   <span class="comment"># 参数类型校验</span></span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;x,y两个参数必须是整数类型&#x27;</span>)</span><br><span class="line">        result = add(x,y)   <span class="comment"># 可以使用外部函数参数add并得到结果</span></span><br><span class="line">        <span class="comment"># return result</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> new_add   <span class="comment"># 返回替换后的new_add函数，具有函数add的功能，还加了参数检查功能</span></span><br></pre></td></tr></table></figure><h5 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h5><p>​闭包是指在一个内层函数中引用了其外层（封闭）作用域中变量的情况。这样的情况下，如果返回了内层函数，则该内层函数将继续保持对其封闭作用域中变量的引用，即使这些变量已经超出了其正常生命周期或者超出了原本作用域。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">counter</span>():</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">increment</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> count</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> increment</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建两个计数器实例</span></span><br><span class="line">counter1 = counter()</span><br><span class="line">counter2 = counter()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(counter1()) <span class="comment"># 输出: 1</span></span><br><span class="line"><span class="built_in">print</span>(counter1()) <span class="comment"># 输出: 2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(counter2()) <span class="comment"># 输出: 1</span></span><br><span class="line"><span class="built_in">print</span>(counter2()) <span class="comment"># 输出: 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：每个计数器实例都有自己独立的状态和计数值。</span></span><br></pre></td></tr></table></figure><h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h5><ul><li>函数嵌套是指在一个函数里定义另一个子级或者局部级别别名。</li><li>当子级或者局势级别师徒能够访问父级别名称空间时就形成了闭包关系。</li><li>这种情况下，如果返回了子级或者局势级别师徒则他将会继续保存父亲名称空间数据区块信息</li></ul><h4 id="递归函数和尾递归"><a href="#递归函数和尾递归" class="headerlink" title="递归函数和尾递归"></a>递归函数和尾递归</h4><h5 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h5><ol><li>必须有出口条件，如最后一层1，有明确的结果1。</li><li>每层只负责乘以本层数字，调用自己推给下一层</li><li>整个推导过程要逐步趋于出口</li></ol><p>递归函数是指在函数的定义中调用函数本身的过程。递归函数通常用于解决可以被分解为相同问题的子问题的情况，每次递归调用都会将问题规模缩小，直到达到基本情况（递归终止条件）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n-<span class="number">1</span>) <span class="comment"># 自己调用自己</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">factorial() 函数通过递归调用自身来计算阶乘。当 n 的值为 0 时，递归终止，返回 1。否则，函数会将问题规模缩小，将 n 乘以 factorial(n-1) 的结果。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(factorial(<span class="number">5</span>))  <span class="comment"># 输出: 120</span></span><br></pre></td></tr></table></figure><h5 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归"></a>尾递归</h5><p>尾递归是一种特殊的递归形式，指的是递归函数的最后一个操作是递归调用本身。在尾递归中，递归调用是函数的最后一步操作，不会再有其他操作。</p><p>尾递归函数可以通过优化来避免栈溢出的问题，因为它们可以被转换为循环的形式，不会在每次递归调用时创建新的栈帧。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算斐波那契数列的尾递归函数的示例</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fibonacci</span>(<span class="params">n, a=<span class="number">0</span>, b=<span class="number">1</span></span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fibonacci(n-<span class="number">1</span>, b, a+b)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">fibonacci() 函数使用尾递归的方式计算斐波那契数列。每次递归调用时，更新参数 a 和 b 的值，并将 n 的值减少，直到达到递归终止条件。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(fibonacci(<span class="number">6</span>))  <span class="comment"># 输出: 8</span></span><br></pre></td></tr></table></figure><h5 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h5><ul><li>递归函数是指在函数的定义中调用函数本身的过程，用于解决可以被分解为相同问题的子问题的情况。</li><li>尾递归是一种特殊的递归形式，指的是递归函数的最后一个操作是递归调用本身。</li><li>尾递归函数可以通过优化来避免栈溢出的问题，因为它们可以被转换为循环的形式，不会在每次递归调用时创建新的栈帧。</li></ul><h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><p>类（Class）和对象（Object），也称作实例（Instance）是面向对象编程（OOP)中的重要概念。类的主要作用如下：</p><ul><li>在同一模块中，对多个函数进行分组，并共享其中的变量；</li><li>按动作主体归类函数动作，使得逻辑更清晰。</li></ul><h3 id="面向过程及面向对象"><a href="#面向过程及面向对象" class="headerlink" title="面向过程及面向对象"></a>面向过程及面向对象</h3><p>面向过和面向对象是两种编程风格。</p><ul><li>面向过程：<strong>主要考虑功能的实现步骤和过程</strong>，即怎么去实现，多使用函数相互组合调用实现。</li><li>面向对象：<strong>主要考虑动作的主体和相互关系</strong>，即谁去实现，怎么配合，使用类的继承或组合实现。</li></ul><p>面向过程的实现逻辑如下：</p><ul><li>拆分过程</li><li>定义函数实现每个过程（过程可以包含子过程及相互调用）</li><li>在主函数中组合调用各个过程函数，完成整个流程。</li></ul><p>面向对象实现逻辑如下：</p><ul><li>根据动作主体进行建模，即需要几种对象（角色），每个对象需要哪些属性和方法</li><li>设计各个对象需要的类</li><li>在主流程中将每个类生成对象，组合对象完成整个流程操作。</li></ul><p><img src="/2023/06/14/python%E5%9F%BA%E7%A1%80/.%5Cpython%E5%9F%BA%E7%A1%80%5C%E9%9D%A2%E7%9B%B8%E5%AF%B9%E8%B1%A1%E4%B8%8E%E9%9D%A2%E7%9B%B8%E8%BF%87%E7%A8%8B.png" alt="面相对象与面相过程"></p><h3 id="类与对象-实例-的关系"><a href="#类与对象-实例-的关系" class="headerlink" title="类与对象(实例)的关系"></a>类与对象(实例)的关系</h3><p>类是创建实例的模板，而实例则是一个一个具体的对象，各个实例拥有的数据都互相独立，互不影响；</p><h3 id="对象初始化方法"><a href="#对象初始化方法" class="headerlink" title="对象初始化方法"></a>对象初始化方法</h3><p>Python类中拥有很多魔术方法，起不同的作用，其中<code>__init__(self)</code>方法称作对象初始化方法，在调用类创建对象时自动调用，通常作用如下：</p><ul><li>将创建类传人的参数，绑定到对象属性</li><li>做一些对象初始化操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我是一个学生&#x27;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 创建对象时将自动将参数传递给对象，并打印初始化信息</span></span><br><span class="line">lilei = Student(<span class="string">&#x27;李磊&#x27;</span>, <span class="number">18</span>)  <span class="comment"># 创建对象</span></span><br><span class="line"><span class="built_in">print</span>(lilei.name, lilei.age)</span><br></pre></td></tr></table></figure><h3 id="类属性及实例属性"><a href="#类属性及实例属性" class="headerlink" title="类属性及实例属性"></a>类属性及实例属性</h3><p>类中的属性称为类属性 ( 类共享)，绑定self的属性称为实例属性 (实例独有)，同时实例自动继承类属性</p><ul><li>类属性：可以使用类名或对象访问</li><li>对象属性：一般使用对象进行访问</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    role = <span class="string">&#x27;学生&#x27;</span>  <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name  <span class="comment"># 对象属性</span></span><br><span class="line">        self.age = age    <span class="comment"># 对象属性</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lilei = Student(<span class="string">&#x27;李磊&#x27;</span>, <span class="number">18</span>)  <span class="comment"># 生成对象</span></span><br><span class="line"><span class="built_in">print</span>(lilei.role)  <span class="comment"># 使用对象引用类属性</span></span><br><span class="line"><span class="built_in">print</span>(lilei.name, lilei.age)  <span class="comment"># 使用对象引用对象属性</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Student.role)  <span class="comment"># 使用类名引用类属性</span></span><br></pre></td></tr></table></figure><h3 id="访问限制-私有变量"><a href="#访问限制-私有变量" class="headerlink" title="访问限制 - 私有变量"></a>访问限制 - 私有变量</h3><p>如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线<code>__</code>，在Python中，实例的变量名如果以<code>__</code>开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问</p><p>不能直接访问<code>__name</code>是因为Python解释器对外把<code>__name</code>变量改成了<code>_Student__name</code>，所以，仍然可以通过<code>_Student__name</code>来访问<code>__name</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, score</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__score = score</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_score</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s: %s&#x27;</span> % (self.__name, self.__score))</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_name</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_score</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__score</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_score</span>(<span class="params">self, score</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= score &lt;= <span class="number">100</span>:</span><br><span class="line">            self.__score = score</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;bad score&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="类方法、实例方法及静态方法"><a href="#类方法、实例方法及静态方法" class="headerlink" title="类方法、实例方法及静态方法"></a>类方法、实例方法及静态方法</h3><p>类和实例是两种不同的范畴，因此在类中可以实例方法，也可以有类方法，如果方法根类和实例都没有关系，则可以设置成静态方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    role = <span class="string">&#x27;学生&#x27;</span>  <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name  <span class="comment"># 对象属性</span></span><br><span class="line">        self.age = age    <span class="comment"># 对象属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">self</span>):  <span class="comment"># 实例方法，self代表实例本身</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_class_role</span>(<span class="params">cls</span>):  <span class="comment"># 类方法，cls代表当前类名</span></span><br><span class="line">        <span class="keyword">return</span> cls.role</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_datetime</span>():  <span class="comment"># 静态方法，与类和对象都无关 (无需访问类/对象属性或调用其方法)</span></span><br><span class="line">        <span class="keyword">return</span> datetime.now().strftime(<span class="string">&#x27;%Y%m%d %H:%M:%D&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用对象调用</span></span><br><span class="line">lilei = Student(<span class="string">&#x27;李磊&#x27;</span>, <span class="number">18</span>)  <span class="comment"># 生成对象</span></span><br><span class="line"><span class="built_in">print</span>(lilei.get_name())  <span class="comment"># 对象调用实例方法</span></span><br><span class="line"><span class="built_in">print</span>(lilei.get_class_role())  <span class="comment"># 对象调用类方法</span></span><br><span class="line"><span class="built_in">print</span>(lilei.get_datetime())  <span class="comment"># 对象调用静态方法</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">静态方法和静态类属性是所有类和实例共享的。它们属于类本身，而不是类的实例。因此，无论是通过类还是实例访问和修改静态方法或静态类属性，都会影响到所有的类和实例。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 使用类名调用，注意类名后不加括号(加括号是调用类并生成对象，即实际为对象）</span></span><br><span class="line"><span class="built_in">print</span>(Student.get_class_role())  <span class="comment"># 类名调用类方法</span></span><br><span class="line"><span class="built_in">print</span>(Student.get_datetime())    <span class="comment"># 类名调用静态方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类也可以调用对象实例方法，但是需要传入一个对象本身，将self指向该对象</span></span><br><span class="line"><span class="built_in">print</span>(Student.get_name(lilei))   <span class="comment"># 类名调用对象方法，需要一个对象</span></span><br></pre></td></tr></table></figure><h3 id="继承和多态"><a href="#继承和多态" class="headerlink" title="继承和多态"></a>继承和多态</h3><p>在OOP程序设计中，当我们定义一个class的时候，可以从某个现有的class继承，新的class称为子类（Subclass），而被继承的class称为基类、父类或超类（Base class、Super class）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Animal is running...&#x27;</span>)</span><br><span class="line">       </span><br><span class="line"><span class="comment"># 继承可以让子类获得了父类的全部功能</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):  <span class="comment"># 继承Animal</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Animal</span>):<span class="comment"># 继承Animal</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    重写是针对继承关系中的父类和子类，子类通过重写方法来改变继承自父类的方法的行为。</span></span><br><span class="line"><span class="string">重载是在同一个类中定义多个具有相同名称但参数列表不同的方法，通过参数的不同来区分方法的调用。</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):  <span class="comment"># 重写run方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Animal-Cat is running...&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="获取对象属性"><a href="#获取对象属性" class="headerlink" title="获取对象属性"></a>获取对象属性</h3><ul><li><p>dir()</p><p>获得一个对象的所有属性和方法，可以使用<code>dir()</code>函数，它返回一个包含字符串的list</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dir</span>(<span class="string">&#x27;ABC&#x27;</span>)</span><br><span class="line">[<span class="string">&#x27;__add__&#x27;</span>, <span class="string">&#x27;__class__&#x27;</span>,..., <span class="string">&#x27;__subclasshook__&#x27;</span>, <span class="string">&#x27;capitalize&#x27;</span>, <span class="string">&#x27;casefold&#x27;</span>,..., <span class="string">&#x27;zfill&#x27;</span>]</span><br></pre></td></tr></table></figure></li><li><p>__len__() or len()</p><p><code>len()</code>函数试图获取一个对象的长度，实际上，在<code>len()</code>函数内部，它自动去调用该对象的<code>__len__()</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(<span class="string">&#x27;ABC&#x27;</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;ABC&#x27;</span>.__len__()</span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给自己的类写一个__len__()方法</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">class</span> <span class="title class_">MyDog</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="number">100</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dog = MyDog()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(dog)</span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure></li><li><p>hasattr()</p><p>判断某个对象中是否有该属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hasattr</span>(obj1, <span class="string">&#x27;x&#x27;</span>) <span class="comment"># 有属性&#x27;x&#x27;吗？</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></li><li><p>getattr()</p><p>获取某个对象中的属性；当前属性不存在时会报错，建议结合hasattr() 使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">hasattr</span>(obj1, <span class="string">&#x27;x&#x27;</span>):</span><br><span class="line">    <span class="built_in">getattr</span>(obj1, <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"><span class="comment"># 通过第三个参数给默认值，当属性不存在时，返回默认值</span></span><br><span class="line"><span class="built_in">getattr</span>(obj1, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;属性不存在&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过getattr的返回值，把地址赋给fn变量</span></span><br><span class="line">fn = <span class="built_in">getattr</span>(obj1, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;属性不存在&#x27;</span>)</span><br><span class="line"><span class="comment"># 此时fn() 等同于 obj1.x()</span></span><br></pre></td></tr></table></figure></li><li><p>setattr()</p><p>给某个对象的属性设置新的值</p></li><li><p>MethodType()</p><p>给对象实例绑定方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> types <span class="keyword">import</span> MethodType</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_age</span>(<span class="params">self, age</span>): <span class="comment"># 定义一个函数作为实例方法</span></span><br><span class="line">self.age = age</span><br><span class="line">s = Student() <span class="comment"># 创建实例</span></span><br><span class="line"><span class="comment"># MethodType函数的第一个参数是方法，第二个参数是要绑定该方法的实例。</span></span><br><span class="line">s.set_age = MethodType(set_age, s) <span class="comment"># 给实例绑定一个方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 扩展：给class绑定方法，所有实例均可调用</span></span><br><span class="line">Student.set_age = set_age</span><br></pre></td></tr></table></figure></li></ul><h2 id="模块与包"><a href="#模块与包" class="headerlink" title="模块与包"></a>模块与包</h2><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><h4 id="一个-py脚本就是一个模块"><a href="#一个-py脚本就是一个模块" class="headerlink" title="一个.py脚本就是一个模块"></a>一个.py脚本就是一个模块</h4><p>当程序较为复杂时，我们可以将不同类型的功能拆分成不同的模块，每个模块建立一个.py脚本。这样做的好处是：</p><ul><li>不同模块负责不同部分的内容，逻辑更清晰；</li><li>公共模块部分可以复用；</li><li>模块拥有独立的命名空间（不同模块中可以拥有同名的变量&#x2F;函数&#x2F;类型）。</li></ul><h4 id="模块导入"><a href="#模块导入" class="headerlink" title="模块导入"></a>模块导入</h4><p>一个模块可以导入其他模块，；但要避免循环导入，导入的名不能与当前模块重名</p><ul><li><p>import moudle</p><p>如<code>import time</code>，此时模块名被导入到当前命名空间，使用模块名引用其中的函数，如<code>time.sleep(1)</code></p></li><li><p>from moudle import …</p><p>如果要最小导入到模块，不能直接使用import 导入模块中的变量&#x2F;函数&#x2F;类，如<code>import time.sleep</code>；要使用<code>from .. import ...</code>语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分开导入</span></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> localtime <span class="keyword">as</span> lt <span class="comment"># 如果一个模块的函数名太长，可以使用as别名，在该模块下可以使用别名来使用该函数 localtime() 等同于 lt()</span></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep </span><br><span class="line"></span><br><span class="line"><span class="comment"># 一起导入</span></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> localtime, sleep</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一起导入</span></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> (localtime, sleep)</span><br></pre></td></tr></table></figure></li><li><p>from moudle import *</p><p>如，<code>from time import *</code>，将导入<code>time</code>模块所有，非下划线<code>_</code>开头的变量&#x2F;函数&#x2F;类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># aaa.py</span></span><br><span class="line">__all__ = [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]  <span class="comment"># 设置from b import * 时只导入b和c变量</span></span><br><span class="line"></span><br><span class="line">b = <span class="number">1</span></span><br><span class="line">_b = <span class="number">2</span>  <span class="comment"># 下划线开头到变量视为私有变量，from b import * 时不会被导入</span></span><br><span class="line">c = <span class="number">3</span></span><br><span class="line">d = <span class="number">4</span>  <span class="comment"># __all__ 设置了不会导入d变量</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bbb.py</span></span><br><span class="line"><span class="keyword">from</span> b <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="number">4</span> <span class="comment"># 将覆盖b中导入的c</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment"># print(d)  # 由于没有导入d，因此打印d会报错</span></span><br><span class="line"><span class="comment"># print(_b)  # 由于没有导入d，因此打印d会报错</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">如果想使用b模块的私有变量_b，可以使用import b; print(b._b)，或 from b import _b; print(_b)等方式</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">这种方式是不被推荐的，原因如下：</span></span><br><span class="line"><span class="string">不知道都导入了哪些变量/模块/类；</span></span><br><span class="line"><span class="string">把其他模块的变量全部导入到当前命名空间，可能导致名称覆盖（重复），及来源不清楚。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="模块导入常见问题"><a href="#模块导入常见问题" class="headerlink" title="模块导入常见问题"></a>模块导入常见问题</h4><h5 id="主模块和导入模块"><a href="#主模块和导入模块" class="headerlink" title="主模块和导入模块"></a>主模块和导入模块</h5><p>模块分为主模块和导入模块，当前执行模块被称为主模块，其他被导入的模块称为导入模块。可以使用Python魔术变量<code>__name__</code>（注意不加引号)，来查看当前模块是否主模块。<br>如果当前模块为主模块时，模块名<code>__name__</code>为字符串<code>&#39;__main__&#39;</code>;因此在模块中常用<code>if __name__ == &#39;__main__&#39;</code>来判断当前模块是不是主模块（即是不是以当前脚本为开始运行的）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;b模块，当前模块名&#x27;</span>, __name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;模块私有代码，只有b模块自己运行才会输出，别的模块导入不会输出&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="间接导入问题"><a href="#间接导入问题" class="headerlink" title="间接导入问题"></a>间接导入问题</h5><p>间接导入是指a模块导入b模块，b模块导入c模块，运行a模块时c模块被间接导入</p><p>根本原因是：相对路径问题</p><p>例如：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">假如目录结构为：</span><br><span class="line">project/</span><br><span class="line">    package1/</span><br><span class="line">        __init__.py</span><br><span class="line">        ccc.py</span><br><span class="line">        bbb.py</span><br><span class="line">    package2/</span><br><span class="line">        __init__.py</span><br><span class="line">        aaa.py</span><br></pre></td></tr></table></figure><p>aaa.py 导入了bbb.py  ，但是 bbb.py 里面已经导入了ccc.py<br>此时，运行a.py，间接导入c模块时便会出现异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    ...</span><br><span class="line">    <span class="keyword">import</span> ccc</span><br><span class="line">ModuleNotFoundError: No module named <span class="string">&#x27;ccc&#x27;</span></span><br></pre></td></tr></table></figure><p>原因为，运行a.py时，间接导入<code>import c</code>时，只会在a.py所在目录（当前运行目录是package2, 在bbb.py 中导入的路径是package1，导致找不到模块ccc.py）及PYTHONPATH、三方包site-packages中查找。而不会切换目录到b.py所在目录进行查找。</p><p>需要为当前python模块添加package1添加环境变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前脚本文件的路径</span></span><br><span class="line">current_file_path = os.path.abspath(__file__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前文件所在目录的父目录（即项目根目录）</span></span><br><span class="line">project_root = os.path.dirname(os.path.dirname(current_file_path))</span><br><span class="line"><span class="comment"># 添加到环境变量中</span></span><br><span class="line">sys.path.append(project_root)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="循环导入问题"><a href="#循环导入问题" class="headerlink" title="循环导入问题"></a>循环导入问题</h5><p>​循环导入指a导入了b模块，b模块又直接或间接导入了a模块</p><ul><li>使用<code>import 模块</code> 导入时，允许循环导入，模块只在第一次导入时及作为主模块时运行</li><li>使用<code>from ... import ...</code>时不允许循环导入</li></ul><p>处理方法有以下几种：</p><ul><li>使用<code>import 模块</code>方式导入</li><li>将<code>from ... import ...</code>改到函数内部（延迟执行）</li><li>使用包<code>__init__.py</code>统一规划导入方式</li></ul><h5 id="导入立即执行及调用-延迟-执行"><a href="#导入立即执行及调用-延迟-执行" class="headerlink" title="导入立即执行及调用(延迟)执行"></a>导入立即执行及调用(延迟)执行</h5><p>在导入模块时，有些是立即执行，有些时调用时才执行的</p><p>第一次导入模块时立即执行的有：</p><ul><li>直接写模块中的语句</li><li>装饰器</li><li>类变量</li></ul><p>调用时才执行的有：</p><ul><li>定义的函数</li><li>定义的类及方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">deco</span>(<span class="params">func</span>):   <span class="comment"># 装饰器函数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;调用 %s&#x27;</span> % func.__name__)</span><br><span class="line">    <span class="keyword">return</span> func</span><br><span class="line"></span><br><span class="line"><span class="meta">@deco  </span><span class="comment"># 装饰器调用，第一次导入模块时立即执行</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):  <span class="comment"># 函数定义，调用函数时执行</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s+%s&#x27;</span> % (x, y))</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line">s1 = add(<span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># 模块语句，第一次导入模块时立即执行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Calc</span>:  <span class="comment"># 类定义，调用类(生成对象时) 执行__init__方法</span></span><br><span class="line">    s2 = add(<span class="number">3</span>, <span class="number">4</span>)  <span class="comment"># 类属性，第一次导入模块时立即执行</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;对象初始化&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sub</span>(<span class="params">self, x, y</span>):  <span class="comment"># 对象方法，调用时执行</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s-%s&#x27;</span> % (x, y))</span><br><span class="line">        <span class="keyword">return</span> x - y</span><br></pre></td></tr></table></figure><h3 id="包-package"><a href="#包-package" class="headerlink" title="包 package"></a>包 package</h3><h4 id="包Package"><a href="#包Package" class="headerlink" title="包Package"></a>包Package</h4><p>当拥有多个模块时，我们可以使用包来组织同一类别或层次的模块。在Python<br><strong>在Python中，一个目录被视为包</strong>，包中可以包含其他子包（子目录），包中不强制必须有<code>__init__.py</code>文件。<br>包中可以包含<code>__init__.py</code>文件作为包的初始化配置，<code>__init__.py</code>可以为空。<br>在Python3中，目录中是否包含<code>__init__.py</code>机会没有区别，我们可以使用Python魔术变量__pacakge__查看当前模块所在包路径。</p><p>ython中常用的魔术变量如下：</p><ul><li><code>__file__</code>：表示当前脚本路径</li><li><code>__name__</code>: 表示当前模块导入路径，作为主模块时（当前运行脚本)，其值为<code>&#39;__main__&#39;</code>，否则为其模块导入路径</li><li><code>__package__</code>: 当前包导入路径，作为主模块时（当前运行脚本)，其值为<code>None</code>，否则为其模块所在包导入路径</li><li><code>__buildins__</code>: 当前所有可用内置变量&#x2F;函数组成的字典</li></ul><h4 id="导入包及模块"><a href="#导入包及模块" class="headerlink" title="导入包及模块"></a>导入包及模块</h4><p>同模块导入一样，包的导入也支持<code>import ...</code>和<code>from ... import ...</code>两种导入方式</p><h4 id="导入包或子包"><a href="#导入包或子包" class="headerlink" title="导入包或子包"></a>导入包或子包</h4><p>在main.py中，可以使用如下语句导入包或子包</p><ul><li>import package</li><li>import package.sub_package</li></ul><p>此时实际导入的是<code>package/__init__.py</code>,及<code>package/sub_package/__init__.py</code></p><h4 id="包中-init-py的作用"><a href="#包中-init-py的作用" class="headerlink" title="包中__init__.py的作用"></a>包中<code>__init__.py</code>的作用</h4><p>包中的<code>__init__.py</code>常用作包的初始配置，常见使用场景如下：</p><ul><li>导入包时进行一些初始化操作</li><li>修改包中模块的导入设置</li></ul><p>从包中导入模块时的查找顺序为，先从包<code>__init__.py</code>中查找同名变量，如果没有，则在包所在目录中查找同名脚本（模块）。<br>一般可以使用__init__.py来整理包所要暴露的模块及功能（模块中的变量&#x2F;函数&#x2F;类）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># package/__init__.py</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> a</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> b</span><br><span class="line"><span class="keyword">from</span> .sub_package <span class="keyword">import</span> c</span><br><span class="line"><span class="keyword">from</span> .a <span class="keyword">import</span> var_a</span><br><span class="line"><span class="keyword">from</span> .b <span class="keyword">import</span> var_b</span><br><span class="line"><span class="keyword">from</span> .sub_package.c <span class="keyword">import</span> var_c</span><br></pre></td></tr></table></figure><p>此时我们便可以直接通过package导入所暴露的变量，例如在main.py中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过模块直接导入</span></span><br><span class="line"><span class="keyword">from</span> package <span class="keyword">import</span> a, b, c, var_a, var_b, var_c</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a.var_a, b.var_b, c.var_c)</span><br><span class="line"><span class="built_in">print</span>(var_a, var_b, var_c)</span><br></pre></td></tr></table></figure><p>同时，在包<code>__init__.py</code>中也可以下划线开头的私有变量，及使用<code>__all__</code>变量来限制<code>from package import *</code>时导入的全部变量。</p><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="纯文本文件读取"><a href="#纯文本文件读取" class="headerlink" title="纯文本文件读取"></a>纯文本文件读取</h3><ul><li><p><strong>读取全部内容</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;demo.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">data = f.read()  <span class="comment"># 读取文件全部内容</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li><li><p><strong>按行读取</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;demo.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">line = f.readline()  <span class="comment"># 读取一行(包括结尾的换行符)</span></span><br><span class="line"><span class="built_in">print</span>(line)</span><br><span class="line">line = f.readline()  <span class="comment"># 读取下一行(包括结尾的换行符)</span></span><br><span class="line"><span class="built_in">print</span>(line)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li><li><p><strong>结合for循环按行读取文件全部内容</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;demo.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():   <span class="comment"># 也可以直接 for line in f:</span></span><br><span class="line">    <span class="built_in">print</span>(line)  <span class="comment"># 每一行内容包括结尾的换行符</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li></ul><h3 id="纯文本文件写入"><a href="#纯文本文件写入" class="headerlink" title="纯文本文件写入"></a>纯文本文件写入</h3><ul><li><p><strong>写入整段文本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="string">&#x27;&#x27;&#x27;hello</span></span><br><span class="line"><span class="string">world</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;demo2.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    f.write(data)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li><li><p><strong>写入多行数据</strong><br>有一行一行文本组成的列表型数据，可以使用f.writelines()写入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="string">&#x27;hello\n&#x27;</span>, <span class="string">&#x27;world\n&#x27;</span>]</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;demo2.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    f.writelines(data)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li></ul><h3 id="使用上下文格式自动关闭文件"><a href="#使用上下文格式自动关闭文件" class="headerlink" title="使用上下文格式自动关闭文件"></a>使用上下文格式自动关闭文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 退出with语句(如print时)，自动关闭文件。</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;demo.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><h3 id="非纯文件读写"><a href="#非纯文件读写" class="headerlink" title="非纯文件读写"></a>非纯文件读写</h3><p>二进制格式读写图片等非二进制文件，有一张图片hua.jpg，我们可以读写来复制文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用二进制读/写模式打开时无需指定编码</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;hua.jpg&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;hua_copy.jpg&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(data)</span><br></pre></td></tr></table></figure><h3 id="读写模式"><a href="#读写模式" class="headerlink" title="读写模式"></a>读写模式</h3><table><thead><tr><th>标示</th><th>文本模式 (默认)。</th></tr></thead><tbody><tr><td>x</td><td>写模式，新建一个文件，如果该文件已存在则会报错。</td></tr><tr><td>b</td><td>二进制模式。</td></tr><tr><td>+</td><td>打开一个文件进行更新(可读可写)。</td></tr><tr><td>U</td><td>通用换行模式（Python 3 不支持）。</td></tr><tr><td>r</td><td>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td>rb</td><td>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。</td></tr><tr><td>r+</td><td>打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td>rb+</td><td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。</td></tr><tr><td>w</td><td>打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>wb</td><td>以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td>w+</td><td>打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>wb+</td><td>以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td>a</td><td>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>ab</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>a+</td><td>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td>ab+</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><h3 id="其他类型文件读取"><a href="#其他类型文件读取" class="headerlink" title="其他类型文件读取"></a>其他类型文件读取</h3><h4 id="数据及配置文件之争"><a href="#数据及配置文件之争" class="headerlink" title="数据及配置文件之争"></a>数据及配置文件之争</h4><p>数据及文件通常有三种类型：</p><ol><li>配置文件型：如ini，conf，properties文件，适合存储简单变量和配置项，最多支持两层，不适合存储多层嵌套数据</li><li>表格矩阵型：如csv，excel等，适合于存储大量同类数据，不适合存储层级结构的数据</li><li>多层嵌套型：如XML，HTMl，JSON、YAML，TOML等，适合存储单条或少数多层嵌套数据，不适合存储大量数据</li></ol><h4 id="CSV文件"><a href="#CSV文件" class="headerlink" title="CSV文件"></a>CSV文件</h4><p>​CSV(Comma-Separated Values)即逗号分隔值，一种以逗号分隔按行存储的文本文件，所有的值都表现为字符串类型（注意：数字为字符串类型）。<br>​如果CSV中有中文，应以utf-8编码读写，如果要支持Excel查看，应是要用utf-8 with bom格式及utf-8-sig</p><h5 id="Python3操作CSV文件使用自带的csv包"><a href="#Python3操作CSV文件使用自带的csv包" class="headerlink" title="Python3操作CSV文件使用自带的csv包"></a>Python3操作CSV文件使用自带的csv包</h5><ul><li>reader&#x3D;csv.reader(f, delimiter&#x3D;’,’)：用来读取数据，reader为生成器，每次读取一行，每行数据为列表格式，可以通过delimiter参数指定分隔符</li><li>writer&#x3D;csv.writer(f)：用来写入数据，按行写入，writer支持writerow(列表)单行写入，和writerows(嵌套列表)批量写入多行，无须手动保存。</li><li>当文件中有标题行时，可以使用header&#x3D;next(reader)先获取到第一行的数据，再进行遍历所有的数据行。</li><li>写入时，可以先使用writer.writerow(标题行列表)，写入标题行，再使用writer.writerows(多行数据嵌套列表)，写入多行数据（也可以逐行写入）。</li></ul><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 数据文件data.csv</span><br><span class="line">name,password,status</span><br><span class="line">abc,123456,</span><br><span class="line">张五,123#456,</span><br><span class="line">张#abc123,123456,</span><br><span class="line">666,123456,</span><br><span class="line">a b,123456,</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># getCsvFile.py  读取</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.csv&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># 读取数据，reader为生成器，每次读取一行，每行数据为列表格式</span></span><br><span class="line">    reader = csv.reader(f)</span><br><span class="line">    header = <span class="built_in">next</span>(reader)</span><br><span class="line">    <span class="built_in">print</span>(header)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">        <span class="built_in">print</span>(row)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">reader必须在文件打开的上下文中使用，否则文件被关闭后reader无法使用</span></span><br><span class="line"><span class="string">所有的数字被作为字符串，如果要使用数字格式，应使用int()/float()做相应转换</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># setCsvFile.py  写入</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">header = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;password&#x27;</span>, <span class="string">&#x27;status&#x27;</span>]</span><br><span class="line"></span><br><span class="line">data = [</span><br><span class="line">    [<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;PASS&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;张五&#x27;</span>, <span class="string">&#x27;123#456&#x27;</span>, <span class="string">&#x27;PASS&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;张#abc123&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;PASS&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;666&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;PASS&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;a b&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;PASS&#x27;</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;result.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    writer = csv.writer(f)</span><br><span class="line">    writer.writerow(header)</span><br><span class="line">    writer.writerows(data)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">打开文件时应指定格式为w, 文本写入，不支持wb,二进制写入，当然，也可以使用a/w+/r+</span></span><br><span class="line"><span class="string">打开文件时，指定不自动添加新行newline=&#x27;&#x27;,否则每写入一行就或多一个空行。</span></span><br><span class="line"><span class="string">如果想写入的文件Excel打开没有乱码，utf-8可以改为utf-8-sig。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="使用字典格式的数据：DictReader-DictWriter"><a href="#使用字典格式的数据：DictReader-DictWriter" class="headerlink" title="使用字典格式的数据：DictReader, DictWriter"></a>使用字典格式的数据：DictReader, DictWriter</h5><p>​!!! 使用此方法时，必须有标题行才能使用</p><ul><li>reader&#x3D;csv.DictReader(f)：直接将标题和每一列数据组装成有序字典（OrderedDict）格式，无须再单独读取标题行</li><li>writer&#x3D;csv.DictWriter(f, 标题行列表)：写入时可使用writer.writeheader()写入标题，然后使用writer.writerow(字典格式数据行)或write.writerows(多行数据)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># getCsvFile.py</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.csv&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    reader = csv.DictReader(f)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">        <span class="built_in">print</span>(row[<span class="string">&#x27;name&#x27;</span>], row[<span class="string">&#x27;password&#x27;</span>],row[<span class="string">&#x27;status&#x27;</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># setCsvFile.py</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">header = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;password&#x27;</span>, <span class="string">&#x27;status&#x27;</span>]</span><br><span class="line"></span><br><span class="line">data = [</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;status&#x27;</span>:<span class="string">&#x27;PASS&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;张五&#x27;</span>, <span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;123#456&#x27;</span>, <span class="string">&#x27;status&#x27;</span>:<span class="string">&#x27;PASS&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;张#abc123&#x27;</span>, <span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;status&#x27;</span>:<span class="string">&#x27;PASS&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;666&#x27;</span>, <span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;status&#x27;</span>:<span class="string">&#x27;PASS&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;a b&#x27;</span>, <span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;status&#x27;</span>:<span class="string">&#x27;PASS&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;result2.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    writer = csv.DictWriter(f, header)</span><br><span class="line">    writer.writeheader()</span><br><span class="line">    writer.writerows(data)</span><br></pre></td></tr></table></figure><h4 id="ini文件"><a href="#ini文件" class="headerlink" title="ini文件"></a>ini文件</h4><p>​ini文件即Initialization File初始化文件，在应用程序及框架中常作为配置文件使用，是一种静态纯文本文件，使用记事本即可编辑。<br>​配置文件的主要功能就是存储一批变量和变量值，在ini文件中使用<code>[章(Section)]</code>对变量进行了分组，基本格式如下。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: config.ini</span></span><br><span class="line"><span class="section">[user]</span></span><br><span class="line"><span class="attr">name</span>=admin</span><br><span class="line"><span class="attr">password</span>=<span class="number">123456</span></span><br><span class="line"><span class="attr">is_admin</span>=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="attr">host</span>=<span class="number">10.10</span>.<span class="number">10.10</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="attr">db</span>=apitest</span><br><span class="line"><span class="attr">user</span>=root</span><br><span class="line"><span class="attr">password</span>=<span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="section">[log]</span></span><br><span class="line"><span class="attr">file</span>=run.log</span><br><span class="line"><span class="attr">level</span>=info</span><br></pre></td></tr></table></figure><p>以上文件中，有3个Section段，分别user、mysql和log<br>ini文件中使用<code>#</code>或者<code>;</code>添加注释，最好独占一行，不能写在变量后面</p><h5 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h5><p>读取ini配置文件需要使用Python3自带的configparser库，使用示例如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> configparser <span class="keyword">import</span> ConfigParser   <span class="comment"># Python2中是from ConfigParser import ConfigParser</span></span><br><span class="line"></span><br><span class="line">conf = ConfigParser()  <span class="comment"># 需要实例化一个ConfigParser对象</span></span><br><span class="line">conf.read(<span class="string">&#x27;config.ini&#x27;</span>)  <span class="comment"># 需要添加上config.ini的路径，不需要open打开，直接给文件路径就读取，也可以指定encoding=&#x27;utf-8&#x27;</span></span><br><span class="line"><span class="comment"># conf对象每个section段的数据类似于一个字典，可以使用[&#x27;变量名&#x27;]或者.get(&#x27;变量名&#x27;)获取对应的值，获取到的是字符串格式。</span></span><br><span class="line"><span class="built_in">print</span>(conf[<span class="string">&#x27;user&#x27;</span>][<span class="string">&#x27;name&#x27;</span>])  <span class="comment"># 读取user段的name变量的值，字符串格式</span></span><br></pre></td></tr></table></figure><p>其他常用的读取方法如下：</p><ul><li>conf.sections(): 获取所有的section名，结果[‘user’, ‘mysql’, ‘log’]</li><li>conf[‘mysql’][‘port’]: 获取section端port变量的值，字符串格式</li><li>conf[‘mysql’].get(‘port’): 同上，字符串格式</li><li>conf.get(‘mysql’, ‘port’): 同上，字符串格式</li><li>conf[‘mysql’].getint(‘port’): 获取对应变量的整型值</li><li>conf[‘mysql’].getfloat(‘port’): 获取对应变量的浮点型值</li><li>conf[‘user’].getboolean(‘is_admin’): 获取对应变量的布尔值，支持配置为<code>yes/no, on/‘off, true/false 和 1/0</code>，都可以转化为Python中的True&#x2F;False</li><li>conf.has_section(section)：检查是否有该section</li><li>conf.options(section)：输出section中所有的变量名</li><li>conf.has_option(section, option)：检查指定section下是否有该变量值</li></ul><p>如果想遍历一个section所有的变量和值，可以像遍历字典意义操作，示例如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> conf[<span class="string">&#x27;mysql&#x27;</span>].items():</span><br><span class="line">    <span class="built_in">print</span>(key, value)</span><br><span class="line"><span class="comment"># ini文件中的变量名是大小写不敏感的，而Section名是大小写敏感的。</span></span><br></pre></td></tr></table></figure><h5 id="公共变量"><a href="#公共变量" class="headerlink" title="公共变量"></a>公共变量</h5><p>假如我们每个Section变量组都有一批相同的重复变量，如：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[dev]</span></span><br><span class="line"><span class="comment"># 开发环境</span></span><br><span class="line"><span class="attr">user</span>=admin</span><br><span class="line"><span class="attr">password</span>=<span class="number">123456</span></span><br><span class="line"><span class="attr">base_url</span>=http://localhost:<span class="number">7777</span></span><br><span class="line"></span><br><span class="line"><span class="section">[test]</span></span><br><span class="line"><span class="comment"># 测试环境</span></span><br><span class="line"><span class="attr">user</span>=admin</span><br><span class="line"><span class="attr">password</span>=<span class="number">123456</span></span><br><span class="line"><span class="attr">base_url</span>=http://test.abc.com</span><br><span class="line"></span><br><span class="line"><span class="section">[prod]</span></span><br><span class="line"><span class="comment"># 生产环境</span></span><br><span class="line"><span class="attr">user</span>=admin</span><br><span class="line"><span class="attr">password</span>=<span class="number">123456</span></span><br><span class="line"><span class="attr">base_url</span>=http://www.abc.com</span><br></pre></td></tr></table></figure><p>对应这种，我们可以设置[DEFAULT]段公用变量，公用变量会自动添加到每一个段中，修改后如下</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[DEFAULT]</span></span><br><span class="line"><span class="attr">user</span>=admin</span><br><span class="line"><span class="attr">password</span>=<span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="section">[dev]</span></span><br><span class="line"><span class="comment"># 开发环境</span></span><br><span class="line"><span class="attr">base_url</span>=http://localhost:<span class="number">7777</span></span><br><span class="line"></span><br><span class="line"><span class="section">[test]</span></span><br><span class="line"><span class="comment"># 测试环境</span></span><br><span class="line"><span class="attr">base_url</span>=http://test.abc.com</span><br><span class="line"></span><br><span class="line"><span class="section">[prod]</span></span><br><span class="line"><span class="comment"># 生产环境</span></span><br><span class="line"><span class="attr">base_url</span>=http://www.abc.com</span><br></pre></td></tr></table></figure><h5 id="参数化"><a href="#参数化" class="headerlink" title="参数化"></a>参数化</h5><p>在ini文件中我们还可以使用<code>%(变量名)s</code>的占位符进行参数化，这种特性被称为Interpolation(插值)。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[DEFAULT]</span></span><br><span class="line"><span class="attr">url</span> = %(base_url)s/get?a=%(a)s&amp;b=%(b)s</span><br><span class="line"><span class="attr">base_url</span>=https://httpbin.org</span><br><span class="line"></span><br><span class="line"><span class="section">[dev]</span></span><br><span class="line"><span class="comment"># 开发环境</span></span><br><span class="line"><span class="attr">base_url</span>=http://localhost:<span class="number">5555</span></span><br><span class="line"><span class="attr">a</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">b</span>=<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="section">[prod-case1]</span></span><br><span class="line"><span class="comment"># 生成环境-场景1</span></span><br><span class="line"><span class="attr">a</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">b</span>=<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="section">[prod-case2]</span></span><br><span class="line"><span class="comment"># 生成环境-场景2</span></span><br><span class="line"><span class="attr">a</span>=kevin</span><br><span class="line"><span class="attr">b</span>=male</span><br></pre></td></tr></table></figure><p>上例中，我们在[DEFAULT]段设置了一个参数化的公用变量url，其中埋设了三个占位符，%(base_url)s、%(a)s、和%(b)s。<br>并且我们设置了base_url变量的默认值为<a href="https://httpbin.org./">https://httpbin.org。</a><br>当下面的section中没有覆盖该变量时，如prod-case1和prod-case2中，是用base_url的默认值。</p><p>!!!  每个section段中，加上默认变量base_url，必须提供所有参数化变量的值，比如此例中每个段最少必须设置a和b的值，否则会报错。</p><p>在Python脚本中打印<code>conf[&#39;prod-case2&#39;][&#39;url&#39;]</code>，可以得到组装后的url。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base_url = conf[<span class="string">&#x27;prod-case2&#x27;</span>][<span class="string">&#x27;url&#x27;</span>] <span class="comment"># https://httpbin.org/get?a=kevin&amp;b=male</span></span><br></pre></td></tr></table></figure><h5 id="修改保存"><a href="#修改保存" class="headerlink" title="修改保存"></a>修改保存</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> configparser <span class="keyword">import</span> ConfigParser</span><br><span class="line"><span class="keyword">from</span> configparser <span class="keyword">import</span> ConfigParser</span><br><span class="line"></span><br><span class="line">conf = ConfigParser()</span><br><span class="line"></span><br><span class="line">conf.read(<span class="string">&#x27;httpbin.ini&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="comment"># 如果新建的话就不需要read,如果修改则需要使用read打开</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用set() 方法修改</span></span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&#x27;DEFAULT&#x27;</span>, <span class="string">&#x27;url&#x27;</span>, <span class="string">&#x27;%(base_url)s/get?a=%(a)s&amp;b=%(b)s&#x27;</span>)  <span class="comment"># 可以设置DEFAULT段的值</span></span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&#x27;DEFAULT&#x27;</span>, <span class="string">&#x27;base_url&#x27;</span>, <span class="string">&#x27;https://httpbin.org&#x27;</span>)  <span class="comment"># 可以设置DEFAULT段的值</span></span><br><span class="line">conf.add_section(<span class="string">&#x27;dev&#x27;</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&#x27;dev&#x27;</span>, <span class="string">&#x27;base_url&#x27;</span>, <span class="string">&#x27;http://localhost:5555&#x27;</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&#x27;dev&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)  <span class="comment"># 值必须是字符串</span></span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&#x27;dev&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用下标的方式</span></span><br><span class="line">conf[<span class="string">&#x27;prod-case1&#x27;</span>] = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;  <span class="comment"># 直接使用字典添加多个变量</span></span><br><span class="line">conf[<span class="string">&#x27;prod-case2&#x27;</span>] = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;kevin&#x27;</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;male&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(conf.get(<span class="string">&#x27;dev&#x27;</span>, <span class="string">&#x27;url&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(conf.get(<span class="string">&#x27;prod-case1&#x27;</span>, <span class="string">&#x27;url&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(conf.get(<span class="string">&#x27;prod-case2&#x27;</span>, <span class="string">&#x27;url&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存csv</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;httpbin.ini&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    conf.write(f)</span><br></pre></td></tr></table></figure><h4 id="JSON文件"><a href="#JSON文件" class="headerlink" title="JSON文件"></a>JSON文件</h4><p>JSON(JavaScript Object Notation)即JavaScript对象表示法,一种轻量级，通用的<strong>文本</strong>数据格式。<br>JSON语法支持对象（Object），数组（Array），字符串，数字（int&#x2F;float）以及true&#x2F;false和null。<br>JSON拥有严格的格式，主要格式如下：</p><ul><li>只能用双引号，不能用单引号</li><li>元素之间用逗号隔开，最后一个元素不能有逗号</li><li>不支持注释</li><li>中文等特殊字符传输时应确保转为ASCII码（\uXXX格式）</li><li>支持多层嵌套Object或Array</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Cactus&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skills&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;Python&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Java&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Go&quot;</span><span class="punctuation">,</span> <span class="string">&quot;NodeJS&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;has_blog&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;gf&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="JSON与Python数据类型的对应关系"><a href="#JSON与Python数据类型的对应关系" class="headerlink" title="JSON与Python数据类型的对应关系"></a>JSON与Python数据类型的对应关系</h5><table><thead><tr><th>JSON</th><th>Python</th></tr></thead><tbody><tr><td>Object</td><td>字典</td></tr><tr><td>Array</td><td>列表</td></tr><tr><td>字符串</td><td>字符串</td></tr><tr><td>数字</td><td>数字（int&#x2F;float）</td></tr><tr><td>true&#x2F;false</td><td>True&#x2F;False</td></tr><tr><td>null</td><td>Null</td></tr></tbody></table><h5 id="JSON字符串与Python字典的相互转换"><a href="#JSON字符串与Python字典的相互转换" class="headerlink" title="JSON字符串与Python字典的相互转换"></a>JSON字符串与Python字典的相互转换</h5><p>!!!  为什么要相互转换，JSON是字符串，方便存储传输，不方便提取值；字典是内存中的数据结构，取值方便，不方便传输和存储</p><p>使用Python自带的json包可以完成字典与JSON字符串的相互转换</p><ul><li>json.dumps(字典)：将字典转为JSON字符串</li><li>json.loads(JSON字符串)：将JSON字符串转为字典，如果字符串不是合法的JSON格式，会报JSONDecodeError</li></ul><p><strong>字典转JSON字符串</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">dict_var = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Cactus&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, </span><br><span class="line">    <span class="string">&#x27;skills&#x27;</span>: [<span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;Go&#x27;</span>, <span class="string">&#x27;NodeJS&#x27;</span>], </span><br><span class="line">    <span class="string">&#x27;has_blog&#x27;</span>: <span class="literal">True</span>, </span><br><span class="line">    <span class="string">&#x27;gf&#x27;</span>: <span class="literal">None</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(json.dumps(dict_var))</span><br><span class="line"><span class="built_in">print</span>(json.dumps(dict_var, indent=<span class="number">2</span>,sort_keys=<span class="literal">True</span>, ensure_ascii=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure><p><strong>JSON字符串转字典</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">json_str = <span class="string">&#x27;&#x27;&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;name&quot;: &quot;Cactus&quot;,</span></span><br><span class="line"><span class="string">    &quot;age&quot;: 18,</span></span><br><span class="line"><span class="string">    &quot;skills&quot;: [&quot;Python&quot;, &quot;Java&quot;, &quot;Go&quot;, &quot;NodeJS&quot;],</span></span><br><span class="line"><span class="string">    &quot;has_blog&quot;: true,</span></span><br><span class="line"><span class="string">    &quot;gf&quot;: null</span></span><br><span class="line"><span class="string">&#125;&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(json.loads(json_str))</span><br></pre></td></tr></table></figure><h5 id="JSON文件与字典的相互转换"><a href="#JSON文件与字典的相互转换" class="headerlink" title="JSON文件与字典的相互转换"></a>JSON文件与字典的相互转换</h5><p>将字典保存为JSON文件或从JSON文件转为字典</p><ul><li>json.dump(字典, f)：将字典转为JSON文件（句柄）</li><li>json.loads(f)：将打开的JSON文件句柄转为字典</li></ul><p><strong>字典转成JSON文件</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">dict_var = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Cactus&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, </span><br><span class="line">    <span class="string">&#x27;skills&#x27;</span>: [<span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;Go&#x27;</span>, <span class="string">&#x27;NodeJS&#x27;</span>], </span><br><span class="line">    <span class="string">&#x27;has_blog&#x27;</span>: <span class="literal">True</span>, </span><br><span class="line">    <span class="string">&#x27;gf&#x27;</span>: <span class="literal">None</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;demo2.json&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># json.dump(dict_var, f)  # 写为一行</span></span><br><span class="line">    json.dump(dict_var, f,indent=<span class="number">2</span>,sort_keys=<span class="literal">True</span>, ensure_ascii=<span class="literal">False</span>)  <span class="comment"># 写为多行</span></span><br></pre></td></tr></table></figure><p><strong>JSON文件转成字典</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;demo2.json&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = json.load(f)</span><br><span class="line"></span><br><span class="line">pritn(data)</span><br></pre></td></tr></table></figure><p>!!! 字典转为JSON时，只支持嵌套字典、列表、字符串、数字、True&#x2F;False&#x2F;None等，不支持日期对象以及Python的其他对象<br>!!! 解析复杂嵌套JSON格式，请使用JSONPath</p><h4 id="YAML-文件"><a href="#YAML-文件" class="headerlink" title="YAML 文件"></a>YAML 文件</h4><p>​YAML兼容JSON格式，简洁，强大，灵活，可以很方便的构造层级数据并快速转为Python中的字典。</p><h5 id="yaml简介"><a href="#yaml简介" class="headerlink" title="yaml简介"></a>yaml简介</h5><p>​YAML（YAML Ain’t Markup Language）即一种反标记（XML）语言。强调数据为中心，而非标记。YAML大小写敏感，使用缩进代表层级关系。<br>​YAML中支持对象Object(对应Python中的字典), 数组Array(对应Python中的列表)以及常量（字符串、数字（int&#x2F;float），true&#x2F;false&#x2F;null）。<br>​相比于JSON格式，YAML免除了双引号，逗号，大括号，中括号等，（当然也支持原始的JSON格式），并且支持注释，类型转换，跨行，锚点，引用及插入等等。</p><h5 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h5><ul><li>对象：使用<code>key: value</code>表示，<strong>冒号后面有一个空格</strong>，也可以是使用<code>&#123;key: value&#125;</code>（flow流格式）或<code>&#123;&quot;key&quot;: &quot;value&quot;&#125;</code>表示</li><li>数组：使用<code>- value</code>表示，**-后面有一个空格**，每项一行，也可以使用<code>[value1,value2,value3,...]</code> （flow流格式）或<code>[&quot;value1&quot;, &quot;value2&quot;, &quot;value3&quot;, ...]</code></li><li>字符串：<code>abc</code>或<code>&quot;abc&quot;</code></li><li>数字：<code>123</code>或<code>123.45</code></li><li>true&#x2F;false：<code>true</code>&#x2F;<code>false</code>,<code>TRUE</code>&#x2F;<code>FALSE</code>,<code>True</code>&#x2F;<code>False</code>或<code>on</code>&#x2F;<code>off</code>, <code>ON</code>&#x2F;<code>OFF</code>, <code>On</code>&#x2F;<code>Off</code></li><li>null: <code>null</code>,<code>NULL</code>, <code>Null</code>或<code>~</code></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注释：示例yaml文件</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Cactus</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">18</span></span><br><span class="line"><span class="attr">skills:</span> </span><br><span class="line">  <span class="bullet">-</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Python</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">3</span></span><br><span class="line">  <span class="bullet">-</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Java</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">5</span></span><br><span class="line"><span class="attr">has_blog:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">gf:</span> <span class="string">~</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转译成json文件</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Cactus&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;skills&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;Python&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="number">3</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;Java&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="number">5</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;has_blog&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;gf&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="类型转换-1"><a href="#类型转换-1" class="headerlink" title="类型转换"></a>类型转换</h5><p>使用<code>!!str</code>, <code>!!float</code>等可以将默认类型转为指定类型</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="type">!!float</span> <span class="number">3</span></span><br><span class="line"><span class="bullet">-</span> <span class="type">!!str</span> <span class="number">4</span></span><br><span class="line"><span class="bullet">-</span> <span class="type">!!str</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>对应JSON格式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="number">3.0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;4&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;true&quot;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h5 id="多行文本及拼接"><a href="#多行文本及拼接" class="headerlink" title="多行文本及拼接"></a>多行文本及拼接</h5><ul><li><code>|</code> 保留多行文本（保留换行符）</li><li><code>&gt;</code> 将多行拼接为一行</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">a:</span> <span class="string">|</span></span><br><span class="line"><span class="string">  我</span></span><br><span class="line"><span class="string">  喜欢你</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="attr">b:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">  我</span></span><br><span class="line"><span class="string">  不喜欢你</span></span><br><span class="line"><span class="string">  才怪</span></span><br></pre></td></tr></table></figure><p>对应JSON格式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="string">&quot;我\n喜欢你\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="string">&quot;我 不喜欢你 才怪&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="锚点，引用及插入"><a href="#锚点，引用及插入" class="headerlink" title="锚点，引用及插入"></a>锚点，引用及插入</h5><p>在<code>-</code>或<code>:</code>后 加上<code>&amp;锚点名</code>为当前字段建立锚点，下面可使用<code>*锚点名</code>引用锚点，或使用<code>&lt;&lt;: *锚点名</code>直接将锚点数据插入到当前的数据中，示例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">users:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="meta">&amp;zs</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">张三</span></span><br><span class="line">    <span class="attr">password:</span> <span class="type">!!str</span> <span class="number">123456</span></span><br><span class="line">  <span class="bullet">-</span> <span class="meta">&amp;ls</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">李四</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">abcdefg</span></span><br><span class="line"></span><br><span class="line"><span class="attr">case1:</span></span><br><span class="line">  <span class="attr">login:</span> <span class="meta">*zs</span></span><br><span class="line"></span><br><span class="line"><span class="attr">case2:</span></span><br><span class="line">  <span class="attr">user:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="meta">*ls</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><p>对应JSON格式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;users&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;李四&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;abcdefg&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;case1&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;login&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;case2&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;李四&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;abcdefg&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">20</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="Python操作YAML文件及字符串"><a href="#Python操作YAML文件及字符串" class="headerlink" title="Python操作YAML文件及字符串"></a>Python操作YAML文件及字符串</h5><p>​需要安装pyyaml， <code>pip install pyyaml</code></p><p>和JSON文件类似，yaml也提供load和dump两种方法。</p><ul><li><code>yaml.load()</code>或<code>yaml.safe_load(YAML字符串或文件句柄)</code>：yaml -&gt; 字典，如yaml中有中文，需要使用 <code>字符串.encode(&#39;utf-8&#39;)</code>或打开文件时指定<code>encoding=&#39;utf-8&#39;</code></li><li><code>yaml.dump(字典)</code>：默认为flow流格式，即字典<code>&#123;b&#39;: &#123;&#39;c&#39;: 3, &#39;d&#39;: 4&#125;&#125;</code>，会被转为<code>b: &#123;c: 3, d: 4&#125;</code>形式，可以使用<code>default_flow_style=False</code>关闭流模式</li></ul><p>由于<code>yaml.load()</code>支持原生Python对象，不安全，建议使用<code>yaml.safe_load()</code></p><h5 id="yaml-字符串-转成-字典"><a href="#yaml-字符串-转成-字典" class="headerlink" title="yaml 字符串 转成 字典"></a>yaml 字符串 转成 字典</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="comment"># yaml字符串</span></span><br><span class="line">yaml_str = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">name: Cactus</span></span><br><span class="line"><span class="string">age: 18</span></span><br><span class="line"><span class="string">skills: </span></span><br><span class="line"><span class="string">  -</span></span><br><span class="line"><span class="string">    - Python</span></span><br><span class="line"><span class="string">    - 3</span></span><br><span class="line"><span class="string">  -</span></span><br><span class="line"><span class="string">    - Java</span></span><br><span class="line"><span class="string">    - 5</span></span><br><span class="line"><span class="string">has_blog: true</span></span><br><span class="line"><span class="string">gf: ~</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(yaml.safe_load(yaml_str)) </span><br><span class="line"><span class="comment"># 如果有中文，可以使用</span></span><br><span class="line">yaml.load(yaml_str.encoding(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><h5 id="yaml-文件转成字典"><a href="#yaml-文件转成字典" class="headerlink" title="yaml 文件转成字典"></a>yaml 文件转成字典</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;demo.yaml&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:   <span class="comment"># demo.yaml内容同上例yaml字符串 </span></span><br><span class="line">    <span class="built_in">print</span>(yaml.safe_load(f))</span><br></pre></td></tr></table></figure><h5 id="字典-转成-yaml字符串或文件"><a href="#字典-转成-yaml字符串或文件" class="headerlink" title="字典 转成 yaml字符串或文件"></a>字典 转成 yaml字符串或文件</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line">dict_var = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Cactus&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;skills&#x27;</span>: [[<span class="string">&#x27;Python&#x27;</span>, <span class="number">3</span>], [<span class="string">&#x27;Java&#x27;</span>, <span class="number">5</span>]], <span class="string">&#x27;has_blog&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;gf&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(yaml.dump(dict_var,))  <span class="comment"># 转为字符串，使用默认flow流格式</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;demo5.yaml&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    yaml.dump(dict_var, f, default_flow_style=<span class="literal">False</span>)  <span class="comment"># 写入文件，不是用flow流格式</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># demo5.yaml</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">18</span></span><br><span class="line"><span class="attr">gf:</span> <span class="literal">null</span></span><br><span class="line"><span class="attr">has_blog:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Cactus</span></span><br><span class="line"><span class="attr">skills:</span></span><br><span class="line"><span class="bullet">-</span> <span class="bullet">-</span> <span class="string">Python</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">3</span></span><br><span class="line"><span class="bullet">-</span> <span class="bullet">-</span> <span class="string">Java</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><h5 id="自定义tag"><a href="#自定义tag" class="headerlink" title="自定义tag"></a>自定义tag</h5><p>​YAML常用于配置文件，当配置文件中需要配置一些用户名密码时，直接写在YAML文件并上传到代码仓库中则很容易造成密码泄露。</p><p>解决的方法有两种：</p><ol><li>配置文件仅本地使用，不传到代码仓库中</li><li>将密码配置到执行机器的环境变量中，在YAML中使用特殊标记表示读取一个环境变量 (推荐)</li></ol><p>在PyYAML中一种tag标识一种类型，常见的tag有：</p><table><thead><tr><th>!!null</th><th>None</th></tr></thead><tbody><tr><td>!!bool</td><td>bool</td></tr><tr><td>!!int</td><td>int</td></tr><tr><td>!!float</td><td>float</td></tr><tr><td>!!binary</td><td>bytes</td></tr><tr><td>!!timestamp</td><td>datetime.datetime</td></tr><tr><td>!!omap, !!pairs</td><td>list of pairs</td></tr><tr><td>!!set</td><td>set</td></tr><tr><td>!!str</td><td>str</td></tr><tr><td>!!seq</td><td>list</td></tr><tr><td>!!map</td><td>dict</td></tr></tbody></table><p>我们自定义一个新的tag, <code>!env</code>, 并编写一个对应的处理函数（PyYAML中称为constructor构造器），代码如下：<br>demo.yaml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># demo.yml</span></span><br><span class="line"><span class="attr">user:</span> <span class="type">!env</span> <span class="string">$&#123;USER&#125;</span>  <span class="comment"># 表示环境变量USER，即当前用户名</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tag在python中使用</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> yaml  <span class="comment"># 需要pip install pyyaml</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">env_var_constructor</span>(<span class="params">loader, node</span>):</span><br><span class="line">    value = loader.construct_scalar(node)   <span class="comment"># PyYAML loader的固定方法，用于根据当前节点构造一个变量值</span></span><br><span class="line">    var_name = value.strip(<span class="string">&#x27;$&#123;&#125; &#x27;</span>)  <span class="comment"># 去除变量值（例如$&#123;USER&#125;）前后的特殊字符及空格</span></span><br><span class="line">    <span class="keyword">return</span> os.getenv(var_name, value)  <span class="comment"># 尝试在环境变量中获取变量名（如USER）对应的值，获取不到使用默认值value（即原来的$&#123;USER&#125;）</span></span><br><span class="line"></span><br><span class="line">yaml.SafeLoader.add_constructor(<span class="string">&#x27;!env&#x27;</span>, env_var_constructor)  <span class="comment"># 为SafeLoader添加新的tag和构造器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;demo.yml&#x27;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">    <span class="built_in">print</span>(yaml.safe_load(f))  <span class="comment"># 打开文件并使用SafeLoader加载文件内容</span></span><br></pre></td></tr></table></figure><p><strong>为tag分配匹配模式</strong></p><p>此时YAML文件中环境变量只能使用强制类型声明<code>!env $&#123;变量名&#125;</code>来使用，如果想直接使用<code>$&#123;变量名&#125;</code>来使用则需要为该tag指定一种正则匹配模式，即识别到类似<code>$&#123;变量名&#125;</code>格式时自动使用!env这个tag。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># demo.yml</span></span><br><span class="line"><span class="attr">user:</span> <span class="type">!env</span> <span class="string">$&#123;USER&#125;</span>  <span class="comment"># 表示环境变量USER，即当前用户名</span></span><br><span class="line"><span class="attr">path:</span> <span class="string">$&#123;PATH&#125;</span>  <span class="comment"># 期望可以直接使用</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tag在python中使用</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"></span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;\$&#123;\w+&#125;&#x27;</span>)  <span class="comment"># 匹配 $&#123;一个或多个字母或数字&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">env_var_constructor</span>(<span class="params">loader, node</span>):</span><br><span class="line">    value = loader.construct_scalar(node)  </span><br><span class="line">    var_name = value.strip(<span class="string">&#x27;$&#123;&#125; &#x27;</span>)  </span><br><span class="line">    <span class="keyword">return</span> os.getenv(var_name, value)  </span><br><span class="line"></span><br><span class="line">yaml.SafeLoader.add_constructor(<span class="string">&#x27;!env&#x27;</span>, env_var_constructor)  <span class="comment"># 添加新tag即对应的构造器</span></span><br><span class="line">yaml.SafeLoader.add_implicit_resolver(<span class="string">&#x27;!env&#x27;</span>, pattern, <span class="literal">None</span>)    <span class="comment">#  为tag指定一种正则匹配</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;demo.yml&#x27;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">    <span class="built_in">print</span>(yaml.safe_load(f))  <span class="comment"># 打开文件并使用SafeLoader加载文件内容</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>一个节点使用多个变量</strong></p><p>如果我们想要在一个节点中使用多个变量，如</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># demo.yml</span></span><br><span class="line"><span class="attr">user:</span> <span class="type">!env</span> <span class="string">$&#123;USER&#125;</span></span><br><span class="line"><span class="attr">path:</span> <span class="string">$&#123;PATH&#125;</span></span><br><span class="line"><span class="attr">msg:</span> <span class="string">当前用户名</span> <span class="string">$&#123;USER&#125;</span> <span class="string">系统路径</span> <span class="string">$&#123;PATH&#125;</span></span><br></pre></td></tr></table></figure><p>则需要对节点值value(字符串格式)进行逐个替换。<br>首先我们需要修改我们的匹配模式，允许${变量}前后可以拥有多个任意字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"></span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;.*?(\$&#123;\w+&#125;).*?&#x27;</span>)  <span class="comment"># 前后可以拥有多个任意字符，使用小括号分组只取当前变量$&#123;变量名&#125;内容，`?`表示非贪婪匹配。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">env_var_constructor</span>(<span class="params">loader, node</span>):</span><br><span class="line">    value = loader.construct_scalar(node)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> pattern.findall(value):  <span class="comment"># 遍历所有匹配到到$&#123;变量名&#125;的变量, 如$&#123;USER&#125;</span></span><br><span class="line">        var_name = item.strip(<span class="string">&#x27;$&#123;&#125; &#x27;</span>)    <span class="comment"># 如,USER</span></span><br><span class="line">        value = value.replace(item, os.getenv(var_name, item))  <span class="comment"># 用环境变量中取到的对应值替换当前变量</span></span><br><span class="line">    <span class="keyword">return</span> value                                  <span class="comment"># 如superin替换$&#123;USER&#125;，取不到则使用原值$&#123;USER&#125;</span></span><br><span class="line"></span><br><span class="line">yaml.SafeLoader.add_constructor(<span class="string">&#x27;!env&#x27;</span>, env_var_constructor)</span><br><span class="line">yaml.SafeLoader.add_implicit_resolver(<span class="string">&#x27;!env&#x27;</span>, pattern, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;demo.yml&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(yaml.safe_load(f))</span><br></pre></td></tr></table></figure><h4 id="Excel文件"><a href="#Excel文件" class="headerlink" title="Excel文件"></a>Excel文件</h4><p>Python中常用的操作Excel的三方包有xlrd,xlwt和openpyxl等</p><ul><li>xlrd支持读取.xls和.xlsx格式的Excel文件，只支持读取，不支持写入。</li><li>xlwt只支持写入.xls格式的文件，不支持读取。</li><li>openpyxl不支持.xls格式，但是支持.xlsx格式的读取写入，并且支持写入公式等。</li></ul><h5 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h5><h6 id="读取所有数据"><a href="#读取所有数据" class="headerlink" title="读取所有数据"></a>读取所有数据</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开excel</span></span><br><span class="line">excel = openpyxl.load_workbook(<span class="string">&#x27;apis.xlsx&#x27;</span>)  <span class="comment"># 有路径应带上路径</span></span><br><span class="line"><span class="comment"># 使用指定工作表</span></span><br><span class="line">sheet = excel.active  <span class="comment"># 当前激活的工作表</span></span><br><span class="line"><span class="comment"># sheet = excel.get_sheet_by_name(&#x27;Sheet1&#x27;)</span></span><br><span class="line"><span class="comment"># 读取所有数据</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(sheet.values))  <span class="comment"># sheet.values 生成器</span></span><br><span class="line"><span class="built_in">print</span>(sheet.max_column)  <span class="comment"># 最大列数</span></span><br><span class="line"><span class="built_in">print</span>(sheet.max_row)  <span class="comment"># 最大行数</span></span><br></pre></td></tr></table></figure><h6 id="按行读取"><a href="#按行读取" class="headerlink" title="按行读取"></a>按行读取</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开excel</span></span><br><span class="line">excel = openpyxl.load_workbook(<span class="string">&#x27;apis.xlsx&#x27;</span>)  <span class="comment"># 有路径应带上路径</span></span><br><span class="line"><span class="comment"># 使用指定工作表</span></span><br><span class="line">sheet = excel.active  <span class="comment"># 当前激活的工作表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按行读取</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> sheet.iter_rows(min_row=<span class="number">1</span>, min_col=<span class="number">1</span>, max_col=<span class="number">3</span>, max_row=<span class="number">3</span>): </span><br><span class="line">    <span class="built_in">print</span>(row)</span><br><span class="line"><span class="comment"># 读取标题行</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> sheet.iter_rows(max_row=<span class="number">1</span>):</span><br><span class="line">    title_row = [cell.value <span class="keyword">for</span> cell <span class="keyword">in</span> row]</span><br><span class="line"><span class="built_in">print</span>(title_row)</span><br><span class="line"><span class="comment"># 读取标题行以外数据</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> sheet.iter_rows(min_row=<span class="number">2</span>):</span><br><span class="line">    row_data = [cell.value <span class="keyword">for</span> cell <span class="keyword">in</span> row]</span><br><span class="line">    <span class="built_in">print</span>(row_data)</span><br></pre></td></tr></table></figure><h6 id="读取单元格数据"><a href="#读取单元格数据" class="headerlink" title="读取单元格数据"></a>读取单元格数据</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开excel</span></span><br><span class="line">excel = openpyxl.load_workbook(<span class="string">&#x27;apis.xlsx&#x27;</span>)  <span class="comment"># 有路径应带上路径</span></span><br><span class="line"><span class="comment"># 使用指定工作表</span></span><br><span class="line">sheet = excel.active  <span class="comment"># 当前激活的工作表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取单元格数据</span></span><br><span class="line"><span class="built_in">print</span>(sheet[<span class="string">&#x27;A1&#x27;</span>].value)</span><br><span class="line"><span class="built_in">print</span>(sheet.cell(<span class="number">1</span>,<span class="number">1</span>).value)  <span class="comment"># 索引从1开始</span></span><br></pre></td></tr></table></figure><h6 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开excel</span></span><br><span class="line">excel = openpyxl.load_workbook(<span class="string">&#x27;apis.xlsx&#x27;</span>)  <span class="comment"># 有路径应带上路径</span></span><br><span class="line"><span class="comment"># 使用指定工作表</span></span><br><span class="line">sheet = excel.active  <span class="comment"># 当前激活的工作表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入单元格</span></span><br><span class="line">sheet[<span class="string">&#x27;F2&#x27;</span>] = <span class="string">&#x27;PASS&#x27;</span></span><br><span class="line">result_col = title_row.index(<span class="string">&#x27;result&#x27;</span>)+<span class="number">1</span>  <span class="comment"># &#x27;result&#x27;所在的列号</span></span><br><span class="line">sheet.cell(<span class="number">3</span>, result_col).value = <span class="string">&#x27;PASS&#x27;</span></span><br><span class="line"><span class="comment"># 整行写入</span></span><br><span class="line">new_row = [<span class="string">&#x27;post-xml接口&#x27;</span>, <span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;https://httpbin.org/post&#x27;</span>]</span><br><span class="line">sheet.append(new_row)</span><br><span class="line"><span class="comment"># 保存文件，也可覆盖原文件</span></span><br><span class="line">excel.save(<span class="string">&quot;apis2.xlsx&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="html文件"><a href="#html文件" class="headerlink" title="html文件"></a>html文件</h4><p>lxml支持HTML及XML，解析速度快，兼容性强。使用方式和ElementTree比较像。</p><h5 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install lxml</span><br></pre></td></tr></table></figure><h5 id="lxml节点对象常用方法："><a href="#lxml节点对象常用方法：" class="headerlink" title="lxml节点对象常用方法："></a>lxml节点对象常用方法：</h5><ul><li>xpath(): 使用XPath获取下级节点，结果为列表</li><li>text: 节点文本</li><li>itertext(): 迭代输出当前节点及下级所有节点文本，例如<code>&#39;&#39;.join(node.itertext())</code> 可以拿到节点中所有文本</li><li>attrib: 节点属性字典，如a节点 <code>node.attrib[&#39;href&#39;]</code>可以拿到其url</li></ul><h5 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h5><ul><li><p>第一步：使用etree.HTML()实例化得到根节点，实例化时会自动补全HTML代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">html = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;div id=&quot;content&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li id=&quot;top_001&quot; class=&quot;item&quot;&gt;肖申克的救赎&lt;li&gt;</span></span><br><span class="line"><span class="string">        &lt;li id=&quot;top_001&quot; class=&quot;item&quot;&gt;霸王别姬&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li id=&quot;top_002&quot; class=&quot;item&quot;&gt;阿甘正传&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">root = etree.HTML(html) </span><br></pre></td></tr></table></figure></li><li><p>第二步：使用root.xpath()查找节点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">不同于xml.etree.ElementTree中只支持部分的XPath语法，root.xpath()中支持使用完整的XPath语法，路径不需要使用“.”开始，root.xpath()方法返回查找到的所有节点列表</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">root.xpath(<span class="string">&#x27;/html/body/div&#x27;</span>)：绝对路径查找</span><br><span class="line">root.xpath(<span class="string">&#x27;//ul/li[2]&#x27;</span>) ：相对路径，结合索引</span><br><span class="line">root.xpath(<span class="string">&#x27;//div[@id=&quot;content&quot;]&#x27;</span>)：结合属性查找</span><br><span class="line">root.xpath(<span class="string">&#x27;//li[@id=&quot;top_001&quot; and @class=&quot;item&quot;]&#x27;</span>)：多条件查找</span><br><span class="line">root.xpath(<span class="string">&#x27;//li[text()=&quot;阿甘正传&quot;]&#x27;</span>)：使用text()函数根据元素文本查找</span><br><span class="line">root.xpath(<span class="string">&#x27;//li[contains(text(), &quot;阿甘&quot;)]&#x27;</span>)：使用contains函数查找文本包含</span><br><span class="line">root.xpath(<span class="string">&#x27;//li[1]/following-sibling::li&#x27;</span>)：使用XPath的轴方法获取后面所有的同级元素</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">如果想要获取节点是属性或文本等，可以从返回的节点列表中取出节点，并使用.tag、.text或.attrib获取节点的标签、文本或属性字典，也可以直接在XPath语句中使用/@attribute或/text来获取属性</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">div = root.xpath(<span class="string">&#x27;//div&#x27;</span>)[<span class="number">0</span>] </span><br><span class="line"><span class="built_in">print</span>(div.attrib)</span><br><span class="line"><span class="built_in">print</span>(root.xpath(<span class="string">&#x27;//div/@id&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(root.xpath(<span class="string">&#x27;//ul/li[last()]/text()&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">由于root.xpath()方法返回节点列表，这里去第一个元素，并打印其属性字典。第三行直接使用XPath表达式取相应节点的id属性，返回属性列表。第四行使用XPath表达式text()函数取节点的文本，返回文本列表</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;content&#x27;</span>&#125;</span><br><span class="line">[<span class="string">&#x27;content&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;阿甘正传&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="StringIO和BytesIO"><a href="#StringIO和BytesIO" class="headerlink" title="StringIO和BytesIO"></a>StringIO和BytesIO</h2><h3 id="StringIO"><a href="#StringIO" class="headerlink" title="StringIO"></a>StringIO</h3><p>数据读写不一定是文件，也可以在内存中读写;<br><code>StringIO</code>顾名思义就是在内存中读写<code>str</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line">f = StringIO() <span class="comment"># 创建 StringIO</span></span><br><span class="line">f.write(<span class="string">&#x27;hello&#x27;</span>) <span class="comment"># 返回写入的长度： 5</span></span><br><span class="line">f.write(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">f.write(<span class="string">&#x27;world!&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(f.getvalue()) <span class="comment"># 通过 getvalue() 方法读取f的值</span></span><br><span class="line">hello world!</span><br></pre></td></tr></table></figure><h3 id="BytesIO"><a href="#BytesIO" class="headerlink" title="BytesIO"></a>BytesIO</h3><p><code>StringIO</code>操作的只能是<code>str</code>，如果要操作二进制数据，就需要使用<code>BytesIO</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line">f = BytesIO()</span><br><span class="line"><span class="comment"># 写入的不是str，而是经过UTF-8编码的bytes</span></span><br><span class="line">f.write(<span class="string">&#x27;中文&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)) <span class="comment"># 返回写入的长度 6</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f.getvalue())</span><br><span class="line"><span class="comment">#  b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="os-文件及目录操作"><a href="#os-文件及目录操作" class="headerlink" title="os 文件及目录操作"></a>os 文件及目录操作</h2><h3 id="os-name"><a href="#os-name" class="headerlink" title="os.name"></a>os.name</h3><p>通过name的值可以判断是什么系统<br>如果是<code>posix</code>，说明系统是<code>Linux</code>、<code>Unix</code>或<code>Mac OS X</code>，如果是<code>nt</code>，就是<code>Windows</code>系统。<br>详细信息可以使用 os.uname()</p><h3 id="环境变量-os-environ"><a href="#环境变量-os-environ" class="headerlink" title="环境变量 - os.environ"></a>环境变量 - os.environ</h3><p>在操作系统中定义的环境变量，全部保存在<code>os.environ</code>这个变量中, 要获取某个环境变量的值，可以调用<code>os.environ.get(&#39;key&#39;)</code></p><h3 id="操作文件和目录"><a href="#操作文件和目录" class="headerlink" title="操作文件和目录"></a>操作文件和目录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 查看当前目录的绝对路径:</span></span><br><span class="line">os.path.abspath(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前模块的文件名</span></span><br><span class="line"><span class="built_in">print</span>(__file__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取命令行参数</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="built_in">print</span>(sys.argv)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并路径</span></span><br><span class="line">os.path.join(<span class="string">&#x27;/Users/michael&#x27;</span>, <span class="string">&#x27;testdir&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个目录</span></span><br><span class="line">os.mkdir(<span class="string">&#x27;/Users/michael/testdir&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删掉一个目录:</span></span><br><span class="line">os.rmdir(<span class="string">&#x27;/Users/michael/testdir&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拆分路径</span></span><br><span class="line">os.path.split(<span class="string">&#x27;/Users/michael/testdir/file.txt&#x27;</span>)</span><br><span class="line"><span class="comment"># (&#x27;/Users/michael/testdir&#x27;, &#x27;file.txt&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到文件扩展名</span></span><br><span class="line">os.path.splitext(<span class="string">&#x27;/path/to/file.txt&#x27;</span>)</span><br><span class="line"><span class="comment"># (&#x27;/path/to/file&#x27;, &#x27;.txt&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件重命名</span></span><br><span class="line">os.rename(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;test.py&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删掉文件</span></span><br><span class="line">os.remove(<span class="string">&#x27;test.py&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件复制</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">`shutil`模块提供了`copyfile()`的复制函数，你还可以在`shutil`模块中找到很多实用函数，它们可以看做是`os`模块的补充。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> shutil  </span><br><span class="line"><span class="comment"># 源文件路径  </span></span><br><span class="line">source_file = <span class="string">&#x27;path/to/source/file.txt&#x27;</span>  </span><br><span class="line"><span class="comment"># 目标文件路径  </span></span><br><span class="line">destination_file = <span class="string">&#x27;path/to/destination/file.txt&#x27;</span>  </span><br><span class="line"><span class="comment"># 复制文件  </span></span><br><span class="line">shutil.copy(source_file, destination_file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取文件路径下的所有文件</span></span><br><span class="line"><span class="comment"># 指定要遍历的文件夹路径  </span></span><br><span class="line">folder_path = <span class="string">&#x27;path/to/your/folder&#x27;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定目录下所有的文件  </span></span><br><span class="line">files_in_folder = [f <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(folder_path) <span class="keyword">if</span> os.path.isfile(os.path.join(folder_path, f))]  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印输出所有文件名  </span></span><br><span class="line"><span class="keyword">for</span> file_name <span class="keyword">in</span> files_in_folder:  </span><br><span class="line">    <span class="built_in">print</span>(file_name)  </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 获取目录和子目录</span></span><br><span class="line"><span class="comment"># 指定要遍历的根路径  </span></span><br><span class="line">root_folder = <span class="string">&#x27;path/to/your/folder&#x27;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用os.walk()遍历根路径以及其子路径，并打印每个找到项  </span></span><br><span class="line"><span class="keyword">for</span> folder_path, folders, files <span class="keyword">in</span> os.walk(root_folder):  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;当前所在位置: <span class="subst">&#123;folder_path&#125;</span>&#x27;</span>)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;包含以下子目录：&#x27;</span>)  </span><br><span class="line">    <span class="keyword">for</span> folder <span class="keyword">in</span> folders:  </span><br><span class="line">        <span class="built_in">print</span>(os.path.join(folder_path, folder))</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment"># 获取整个树结构</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">list_files</span>(<span class="params">startpath</span>):  </span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(startpath):  </span><br><span class="line">        level = root.replace(startpath, <span class="string">&#x27;&#x27;</span>).count(os.sep)  </span><br><span class="line">        indent = <span class="string">&#x27; &#x27;</span> * <span class="number">4</span> * (level)  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125;&#123;&#125;/&#x27;</span>.<span class="built_in">format</span>(indent, os.path.basename(root)))  </span><br><span class="line">        subindent = <span class="string">&#x27; &#x27;</span> * <span class="number">4</span> * (level + <span class="number">1</span>)  </span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> files:  </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(subindent, f))  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root_folder = <span class="string">&#x27;path/to/your/folder&#x27;</span>  </span><br><span class="line">list_files(root_folder)  </span><br></pre></td></tr></table></figure><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>在程序运行的过程中，所有的变量都是在内存中<br>把变量从内存中变成可存储或传输的过程称之为序列化<br>序列化之后，就可以把序列化后的内容写入磁盘，或者通过网络传输到别的机器上。<br>反过来，把变量内容从序列化的对象重新读到内存里称之为反序列化</p><p>Python提供了<code>pickle</code>模块来实现序列化。</p><p><strong>序列化</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle  </span><br><span class="line">d = <span class="built_in">dict</span>(name=<span class="string">&#x27;Bob&#x27;</span>, age=<span class="number">20</span>, score=<span class="number">88</span>)  </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.pickle&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">    pickle.dump(d, f)</span><br></pre></td></tr></table></figure><p><strong>反序列化</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle  </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.pickle&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">    d = pickle.load(f)  </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(d)  <span class="comment"># Output: &#123;&#x27;name&#x27;: &#x27;Bob&#x27;, &#x27;age&#x27;: 20, &#x27;score&#x27;: 88&#125;</span></span><br></pre></td></tr></table></figure><h3 id="JSON处理"><a href="#JSON处理" class="headerlink" title="JSON处理"></a>JSON处理</h3><p>如果我们要在不同的编程语言之间传递对象，就必须把对象序列化为标准格式，例如XML，JSON</p><table><thead><tr><th>JSON类型</th><th>Python类型</th></tr></thead><tbody><tr><td>{}</td><td>dict</td></tr><tr><td>[]</td><td>list</td></tr><tr><td>“string”</td><td>str</td></tr><tr><td>1234.56</td><td>int或float</td></tr><tr><td>true&#x2F;false</td><td>True&#x2F;False</td></tr><tr><td>null</td><td>None</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):  </span><br><span class="line">        self.name = name  </span><br><span class="line">        self.age = age  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建类的实例  </span></span><br><span class="line">my_object = MyClass(<span class="string">&quot;John&quot;</span>, <span class="number">25</span>)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 将类实例转换为JSON字符串  </span></span><br><span class="line">json_string = json.dumps(my_object.__dict__)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 将JSON字符串序列化到文件中  </span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data.json&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> file:  </span><br><span class="line">    json.dump(json_string, file)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 从JSON文件中读取数据  </span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data.json&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file:  </span><br><span class="line">    json_string = json.load(file)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 将JSON字符串转换为Python对象  </span></span><br><span class="line">my_object = json.loads(json_string)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印Python对象的属性  </span></span><br><span class="line"><span class="built_in">print</span>(my_object[<span class="string">&quot;name&quot;</span>])  </span><br><span class="line"><span class="built_in">print</span>(my_object[<span class="string">&quot;age&quot;</span>])</span><br></pre></td></tr></table></figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="try…-except"><a href="#try…-except" class="headerlink" title="try… except"></a>try… except</h3><p>一般情况下，异常会导致程序中断退出，为避免程序中断，我们需要对异常进行处理，在Python中我们使用<code>try ... except ...</code>语句处理异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">div</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> a / b</span><br><span class="line">    <span class="comment"># 使用Exception代表任何异常, as ex是对异常添加别名，ex就是具体的异常对象</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> ex:</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&#x27;出现异常&#x27;</span>, <span class="built_in">type</span>(ex), ex)</span><br><span class="line">       </span><br><span class="line">div(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">div(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure><p>一般来说，建议对不同类型的异常进行单独处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">div</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> a / b</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;被除数b不能为0&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> TypeError:</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&#x27;类型错误a和b应为数字&#x27;</span>)</span><br><span class="line">       </span><br><span class="line">div(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">div(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure><p>except也可以一次捕获多个异常，对任意一种异常做同一处理，例如<code>try: ... except: (ZeroDivisionError, TypeError): ...</code></p><h3 id="无异常及无论是否有异常都执行的操作"><a href="#无异常及无论是否有异常都执行的操作" class="headerlink" title="无异常及无论是否有异常都执行的操作"></a>无异常及无论是否有异常都执行的操作</h3><p>异常处理支持使用<code>try: ... except: ...</code>后使用<code>else: ...</code>在无异常时执行某些操作，及使用<code>finally: ...</code>，无论是否有异常都执行某些语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">div</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        c = a / b</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;被除数b不能为0&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> TypeError:</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&#x27;类型错误a和b应为数字&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;结果为&#x27;</span>, c)</span><br><span class="line">        <span class="keyword">return</span> c</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;执行结束...&#x27;</span>)</span><br><span class="line">     </span><br><span class="line">div(<span class="number">4</span>, <span class="number">2</span>)</span><br><span class="line">div(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">div(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">结果为 2.0</span></span><br><span class="line"><span class="string">执行结束...</span></span><br><span class="line"><span class="string">被除数b不能为0</span></span><br><span class="line"><span class="string">执行结束...</span></span><br><span class="line"><span class="string">类型错误a和b应为数字</span></span><br><span class="line"><span class="string">执行结束...</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Python中常见异常"><a href="#Python中常见异常" class="headerlink" title="Python中常见异常"></a>Python中常见异常</h3><table><thead><tr><th>异常类型</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>SyntaxError</td><td>Python语法异常(缩紧或语法错误)</td><td>int a &#x3D; 1</td></tr><tr><td>NameError</td><td>变量名异常(不存在该变量名)</td><td>print(a)</td></tr><tr><td>TypeError</td><td>变量类型异常</td><td>print(‘a’&#x2F; ‘b’)</td></tr><tr><td>ValueError</td><td>值异常(变量值异常)</td><td>int(‘a’)</td></tr><tr><td>ZeroDivisionError</td><td>0除异常(被除数不能为0)</td><td>10&#x2F;0</td></tr><tr><td>IndexError</td><td>索引异常(列表等中不存在该索引对应的值)</td><td>s &#x3D; [‘a’, ‘b’, ‘c’] ; print(s[5])</td></tr><tr><td>KeyError</td><td>键异常(字典中不存在这个Key对应的值)</td><td>s &#x3D; {‘a’:1, ‘b’:2, ‘c’:3} ; print(s[‘d’])</td></tr><tr><td>AttributeError</td><td>获取属性异常(对象没有该属性)</td><td>a &#x3D; ‘hello’; print(a.name)</td></tr><tr><td>AssertionError</td><td>断言异常(断言未通过)</td><td>assert 1&gt;2</td></tr><tr><td>FileNotFoundError</td><td>文件不存在</td><td>open(‘abc.txt’)</td></tr><tr><td>OSError</td><td>操作系统错误</td><td>os.mkdirs(‘&#x2F;ddd&#x2F;xxx’)</td></tr></tbody></table><h3 id="主动抛出异常"><a href="#主动抛出异常" class="headerlink" title="主动抛出异常"></a>主动抛出异常</h3><p>在编写程序中不一定要捕获并处理（抑制）所有异常，有时候快速抛出异常并清楚的说明原因也是一种比较好的使用方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">div</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(a, (<span class="built_in">int</span>, <span class="built_in">float</span>)) <span class="keyword">or</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(b, (<span class="built_in">int</span>, <span class="built_in">float</span>)):</span><br><span class="line">        <span class="comment"># 使用raise排除异常，终止程序</span></span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&#x27;a和b必须为int或float类型&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&#x27;被除数b不能为0&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> a / b</span><br><span class="line"></span><br><span class="line">div(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">div(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也可以自定义异常类型进行抛出，以使的错误类型更清晰</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NotNumberError</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;非数字异常&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CannotBeZeroError</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;不能为0异常&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">div</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(a, (<span class="built_in">int</span>, <span class="built_in">float</span>)) <span class="keyword">or</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(b, (<span class="built_in">int</span>, <span class="built_in">float</span>)):</span><br><span class="line">        <span class="keyword">raise</span> NotNumberError(<span class="string">&#x27;a和b必须为int或float类型&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> CannotBeZeroError(<span class="string">&#x27;被除数b不能为0&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> a / b</span><br><span class="line"></span><br><span class="line">div(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">div(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="装饰器-1"><a href="#装饰器-1" class="headerlink" title="装饰器"></a>装饰器</h2><p>装饰器是Python中的一个重要概念，多用于在不修改原函数的基础上，为函数增加额外的功能</p><h3 id="基础装饰器"><a href="#基础装饰器" class="headerlink" title="基础装饰器"></a>基础装饰器</h3><p>案例： 你要喝水</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">DrinkWater</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; 喝水(动作) &quot;</span>)</span><br><span class="line">DrinkWater()</span><br></pre></td></tr></table></figure><p>但你杯子里没水了，你还需要往杯子里装水</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">drinkWater</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; 喝水(动作) &quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 装水</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fillWater</span>(<span class="params">fn</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; 往杯子倒水 &quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> drinkWater</span><br><span class="line"></span><br><span class="line">drinkWater = fillWater(drinkWater)</span><br><span class="line"></span><br><span class="line">drinkWater()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">print 打印：</span></span><br><span class="line"><span class="string">往杯子倒水</span></span><br><span class="line"><span class="string">喝水(动作)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">fillWater 便是一个装饰器，它的参数是一个函数对象，同数字、字符串、列表、字典等数据类型一样，函数和类也可以作为函数的参数使用</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>装饰器本质上就是以函数作为参数，对函数做一些处理，并替换原函数的一种高阶函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 装水</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fillWater</span>(<span class="params">fn</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; 往杯子倒水 &quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> drinkWater</span><br><span class="line"></span><br><span class="line"><span class="meta">@fillWater  </span><span class="comment"># 挂载装饰器，会自动替换原函数, 我们只需要执行原函数就行</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">drinkWater</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; 喝水(动作) &quot;</span>)</span><br><span class="line">    </span><br><span class="line">drinkWater() <span class="comment"># 这里的drinkWater() 实际就是装饰后的drinkWater() == fillWater(drinkWater)</span></span><br></pre></td></tr></table></figure><h3 id="装饰器处理函数参数"><a href="#装饰器处理函数参数" class="headerlink" title="装饰器处理函数参数"></a>装饰器处理函数参数</h3><p>如果需要给喝水加入一个参数，控制喝几口水</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fillWater</span>(<span class="params">fn</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">new_gift</span>(<span class="params">item</span>):  <span class="comment"># 准备一个新的函数，跟drinkWater()一样传递一个数字</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot; 往杯子倒水 &quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> drinkWater(item)  <span class="comment"># 调用原函数，保证原函数的输出，并return结果出去</span></span><br><span class="line">    <span class="keyword">return</span> new_gift   <span class="comment"># 返回新的喝水函数，包装了倒水动作的新喝水函数</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@fillWater</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">drinkWater</span>(<span class="params">item</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;喝<span class="subst">&#123;item&#125;</span>口水&#x27;</span>)</span><br><span class="line"></span><br><span class="line">drinkWater(<span class="number">2</span>)   <span class="comment"># 通过传递参数喝几口水</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="带参装饰器"><a href="#带参装饰器" class="headerlink" title="带参装饰器"></a>带参装饰器</h3><p>如果给杯子倒水也加上倒多少毫升，通过装饰器传递多少毫升</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fillWater</span>(<span class="params">ms</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">new_gift</span>(<span class="params">item</span>):  <span class="comment"># 准备一个新的函数，跟drinkWater()一样传递一个数字</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot; 往杯子倒<span class="subst">&#123;ms&#125;</span>毫升水 &quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> drinkWater(item)  <span class="comment"># 调用原函数，保证原函数的输出，并return结果出去</span></span><br><span class="line">    <span class="keyword">return</span> new_gift   <span class="comment"># 返回新的喝水函数，包装了倒水动作的新喝水函数</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@fillWater(<span class="params"><span class="number">500</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">drinkWater</span>(<span class="params">item</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;喝<span class="subst">&#123;item&#125;</span>口水&#x27;</span>)</span><br><span class="line"></span><br><span class="line">drinkWater(<span class="number">2</span>)   <span class="comment"># 通过传递参数喝几口水</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>!!! 装饰器在导入模块时立即计算的，即没调用<code>drinkWater()</code>之前就已经执行生成定制后的new_gift</p><h2 id="生成器和迭代器"><a href="#生成器和迭代器" class="headerlink" title="生成器和迭代器"></a>生成器和迭代器</h2><h3 id="可迭代对象"><a href="#可迭代对象" class="headerlink" title="可迭代对象"></a>可迭代对象</h3><p>​实现了__iter__方法, __iter__方法返回一个迭代器</p><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>​按标准的迭代协议实现__iter__和__next__方法,StopIteration结束</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    start = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.start &gt; <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        self.start += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.start</span><br></pre></td></tr></table></figure><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>​内部实现了迭代器的一种函数,通过yield记录当前位置并返回一次迭代结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params"><span class="built_in">max</span></span>):</span><br><span class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="built_in">max</span>:</span><br><span class="line">        <span class="built_in">print</span>(b)</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;done&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h3><p>!!! 推倒式：当我们对一批可迭代的数据（如列表或字典）进行提取或处理，最后要得到一个新的列表或字典时，推导式是一种非常简洁的表达方式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">data = [</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span>,  <span class="string">&#x27;age&#x27;</span>: <span class="number">12</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;female&#x27;</span>,  <span class="string">&#x27;age&#x27;</span>: <span class="number">10</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span>,  <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;赵六&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span>,  <span class="string">&#x27;age&#x27;</span>: <span class="number">11</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;周七&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;female&#x27;</span>,  <span class="string">&#x27;age&#x27;</span>: <span class="number">16</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;孙八&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span>,  <span class="string">&#x27;age&#x27;</span>: <span class="number">13</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">names = []  <span class="comment"># 定义一个空列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用for循环</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> data:  <span class="comment"># 遍历数据</span></span><br><span class="line">    name = item[<span class="string">&#x27;name&#x27;</span>]  <span class="comment"># 提取每行中的name</span></span><br><span class="line">    names.append(name)  <span class="comment"># 追加到列表中</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用推导式</span></span><br><span class="line">names = [item[<span class="string">&#x27;name&#x27;</span>] <span class="keyword">for</span> item <span class="keyword">in</span> data]     <span class="comment"># 遍历data，提取每项中的name生成一个新列表</span></span><br><span class="line"><span class="comment"># 在提取数据时，我们还可以对每一项数据进行</span></span><br><span class="line">names = [<span class="string">&#x27;姓名: &#x27;</span>+item[<span class="string">&#x27;name&#x27;</span>] <span class="keyword">for</span> item <span class="keyword">in</span> data]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>多重循环</strong></p><p>推导式还支持多重循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">if</span> x &gt; <span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>)</span><br><span class="line">            <span class="keyword">if</span> y &lt; <span class="number">3</span></span><br><span class="line">                x*y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用推导式</span></span><br><span class="line">[x*y <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>) <span class="keyword">if</span> x &gt; <span class="number">2</span> <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>) <span class="keyword">if</span> y &lt; <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p><strong>批量执行操作</strong></p><p>推导式就是一种循环操作，我们也可以使用推导式来批量执行一些相似操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">step1</span>(<span class="params">driver</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;步骤1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def step2(driver):</span></span><br><span class="line"><span class="string">    print(&#x27;</span>步骤<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">step3</span>(<span class="params">driver</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;步骤3)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 用推导式实现</span></span><br><span class="line"><span class="string"># 我们可以将函数名放到一个列表里，然后使用推导式循环执行</span></span><br><span class="line"><span class="string">steps = [step1, step2, step3]   # 函数名列表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[step(driver) for step in steps]  # 不需要变量接收，我们只需要它循环执行</span></span><br></pre></td></tr></table></figure><h3 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h3><p>当我们需要遍历一批数据最后得到一个字典时，同样可以使用字典推导式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">data = [</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span>,  <span class="string">&#x27;age&#x27;</span>: <span class="number">12</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;female&#x27;</span>,  <span class="string">&#x27;age&#x27;</span>: <span class="number">10</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span>,  <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;赵六&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span>,  <span class="string">&#x27;age&#x27;</span>: <span class="number">11</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;周七&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;female&#x27;</span>,  <span class="string">&#x27;age&#x27;</span>: <span class="number">16</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;孙八&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span>,  <span class="string">&#x27;age&#x27;</span>: <span class="number">13</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用字典推导式</span></span><br><span class="line">persons = &#123;item[<span class="string">&#x27;name&#x27;</span>]: item[<span class="string">&#x27;age&#x27;</span>] <span class="keyword">for</span> item <span class="keyword">in</span> data&#125;</span><br></pre></td></tr></table></figure><h3 id="生成器-1"><a href="#生成器-1" class="headerlink" title="生成器"></a>生成器</h3><p>生成器实际上是一种包含初始数据和推导法则的对象</p><p>对应大量的数据或者CSV&#x2F;Excel文件中的数据，生成器可以大量的节省内存，比如csv.Reader(f)就是一个生成器，只存了当前位置和读取下一行数据的方法；当你需要遍历时，它再每次给你读取一行数据给你</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">data = [</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span>,  <span class="string">&#x27;age&#x27;</span>: <span class="number">12</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;female&#x27;</span>,  <span class="string">&#x27;age&#x27;</span>: <span class="number">10</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span>,  <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;赵六&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span>,  <span class="string">&#x27;age&#x27;</span>: <span class="number">11</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;周七&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;female&#x27;</span>,  <span class="string">&#x27;age&#x27;</span>: <span class="number">16</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;孙八&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span>,  <span class="string">&#x27;age&#x27;</span>: <span class="number">13</span>&#125;,</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 列表推导式</span></span><br><span class="line">names = [item[<span class="string">&#x27;name&#x27;</span>] <span class="keyword">for</span> item <span class="keyword">in</span> data]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们把列表的中括号改为小括号就得到一个生成器</span></span><br><span class="line">names2 = (item[<span class="string">&#x27;name&#x27;</span>] <span class="keyword">for</span> item <span class="keyword">in</span> data)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">!!! 生成器和推导式不同，其中的循环不是立即执行的，只用你遍历这个生成器时才会执行</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><table><thead><tr><th>魔术方法</th><th>描述</th></tr></thead><tbody><tr><td><code>__new__</code></td><td>创建类并返回这个类的实例</td></tr><tr><td><code>__init__</code></td><td>可理解为“构造函数”，在对象初始化的时候调用，使用传入的参数初始化该实例</td></tr><tr><td><code>__del__</code></td><td>可理解为“析构函数”，当一个对象进行垃圾回收时调用</td></tr><tr><td><code>__metaclass__</code></td><td>定义当前类的元类</td></tr><tr><td><code>__class__</code></td><td>查看对象所属的类</td></tr><tr><td><code>__base__</code></td><td>获取当前类的父类</td></tr><tr><td><code>__bases__</code></td><td>获取当前类的所有父类</td></tr><tr><td><code>__str__</code></td><td>定义当前类的实例的文本显示内容</td></tr><tr><td><code>__getattribute__</code></td><td>定义属性被访问时的行为</td></tr><tr><td><code>__getattr__</code></td><td>定义试图访问一个不存在的属性时的行为</td></tr><tr><td><code>__setattr__</code></td><td>定义对属性进行赋值和修改操作时的行为</td></tr><tr><td><code>__delattr__</code></td><td>定义删除属性时的行为</td></tr><tr><td><code>__copy__</code></td><td>定义对类的实例调用 copy.copy() 获得对象的一个浅拷贝时所产生的行为</td></tr><tr><td><code>__deepcopy__</code></td><td>定义对类的实例调用 copy.deepcopy() 获得对象的一个深拷贝时所产生的行为</td></tr><tr><td><code>__eq__</code></td><td>定义相等符号“&#x3D;&#x3D;”的行为</td></tr><tr><td><code>__ne__</code></td><td>定义不等符号“!&#x3D;”的行为</td></tr><tr><td><code>__lt__</code></td><td>定义小于符号“&lt;”的行为</td></tr><tr><td><code>__gt__</code></td><td>定义大于符号“&gt;”的行为</td></tr><tr><td><code>__le__</code></td><td>定义小于等于符号“&lt;&#x3D;”的行为</td></tr><tr><td><code>__ge__</code></td><td>定义大于等于符号“&gt;&#x3D;”的行为</td></tr><tr><td><code>__add__</code></td><td>实现操作符“+”表示的加法</td></tr><tr><td><code>__sub__</code></td><td>实现操作符“-”表示的减法</td></tr><tr><td><code>__mul__</code></td><td>实现操作符“*”表示的乘法</td></tr><tr><td><code>__div__</code></td><td>实现操作符“&#x2F;”表示的除法</td></tr><tr><td><code>__mod__</code></td><td>实现操作符“％”表示的取模(求余数)</td></tr><tr><td><code>__pow__</code></td><td>实现操作符“**”表示的指数操作</td></tr><tr><td><code>__and__</code></td><td>实现按位与操作</td></tr><tr><td><code>__or__</code></td><td>实现按位或操作</td></tr><tr><td><code>__xor__</code></td><td>实现按位异或操作</td></tr><tr><td><code>__len__</code></td><td>用于自定义容器类型，表示容器的长度</td></tr><tr><td><code>__getitem__</code></td><td>用于自定义容器类型，定义当某一项被访问时，使用 self[key] 所产生的行为</td></tr><tr><td><code>__setitem__</code></td><td>用于自定义容器类型，定义执行 self[key]&#x3D;value 时产生的行为</td></tr><tr><td><code>__delitem__</code></td><td>用于自定义容器类型，定义一个项目被删除时的行为</td></tr><tr><td><code>__iter__</code></td><td>用于自定义容器类型，一个容器迭代器</td></tr><tr><td><code>__reversed__</code></td><td>用于自定义容器类型，定义当 reversed( ) 被调用时的行为</td></tr><tr><td><code>__contains__</code></td><td>用于自定义容器类型，定义调用 in 和 not in 来测试成员是否存在的时候所产生的行为</td></tr><tr><td><code>__missing__</code></td><td>用于自定义容器类型，定义在容器中找不到 key 时触发的行为</td></tr></tbody></table><h2 id="面向对象-slots"><a href="#面向对象-slots" class="headerlink" title="面向对象 - __slots__"></a>面向对象 - __slots__</h2><p>如果我们想要限制实例的属性怎么办？比如，只允许对Student实例添加<code>name</code>和<code>age</code>属性。</p><p>为了达到限制的目的，Python允许在定义<code>class</code>的时候，定义一个特殊的<code>__slots__</code>变量，来限制该<code>class</code>实例能添加的属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    __slots__ = (<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>) <span class="comment"># 用tuple定义允许绑定的属性名称</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 当你给限定之外的属性绑定值，正常情况下会创建新属性，并赋值。但加了限制后会直接报错</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student() <span class="comment"># 创建新的实例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.name = <span class="string">&#x27;Michael&#x27;</span> <span class="comment"># 绑定属性&#x27;name&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.age = <span class="number">25</span> <span class="comment"># 绑定属性&#x27;age&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">99</span> <span class="comment"># 绑定属性&#x27;score&#x27;</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">&#x27;Student&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;score&#x27;</span></span><br></pre></td></tr></table></figure><p>!!! 使用<code>__slots__</code>要注意，<code>__slots__</code>定义的属性仅对当前类实例起作用，对继承的子类是不起作用的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ParentClass</span>:</span><br><span class="line">    __slots__ = [<span class="string">&#x27;attribute1&#x27;</span>, <span class="string">&#x27;attribute2&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChildClass</span>(<span class="title class_ inherited__">ParentClass</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在 ChildClass 没有定义自己的 __slots__，不受限制</span></span><br><span class="line"></span><br><span class="line">c1 = ChildClass() </span><br><span class="line">c1.attribute3 = <span class="number">1</span> <span class="comment"># success</span></span><br><span class="line"><span class="built_in">print</span>(c1.attribute3)</span><br></pre></td></tr></table></figure><p>除非在子类中也定义<code>__slots__</code>，这样，子类实例允许定义的属性就是自身的<code>__slots__</code>加上父类的<code>__slots__</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ParentClass</span>:</span><br><span class="line">    __slots__ = [<span class="string">&#x27;attribute1&#x27;</span>, <span class="string">&#x27;attribute2&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChildClass</span>(<span class="title class_ inherited__">ParentClass</span>):</span><br><span class="line">    __slots__ = []</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在 ChildClass 定义自己的 __slots__，它将会继承父类的 __slots__加上自己的 __slots__</span></span><br><span class="line"></span><br><span class="line">c1 = ChildClass()</span><br><span class="line">c1.attribute3 = <span class="number">1</span> <span class="comment"># 报错</span></span><br><span class="line"><span class="built_in">print</span>(c1.attribute3)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c1.attribute3 = 1</span></span><br><span class="line"><span class="string">AttributeError: &#x27;ChildClass&#x27; object has no attribute &#x27;attribute3&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="面相对象-MixIn"><a href="#面相对象-MixIn" class="headerlink" title="面相对象 - MixIn"></a>面相对象 - MixIn</h2><p>通过多重继承，一个子类就可以同时获得多个父类的所有功能</p><p>mixln - 可以让一个类除了继承其他类外，再同时集成其他类。这种设计通常称之为MixIn。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这样一来，我们不需要复杂而庞大的继承链，只要选择组合不同的类的功能，就可以快速构造出所需的子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(Mammal, RunnableMixIn, CarnivorousMixIn):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="面相对象-订制类"><a href="#面相对象-订制类" class="headerlink" title="面相对象 - 订制类"></a>面相对象 - 订制类</h2><h3 id="str"><a href="#str" class="headerlink" title="__str__"></a>__str__</h3><p>打印一个类实例会打印这种信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line"><span class="meta">... </span>        self.name = name</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(Student(<span class="string">&#x27;Michael&#x27;</span>))</span><br><span class="line">&lt;__main__.Student <span class="built_in">object</span> at <span class="number">0x109afb190</span>&gt;</span><br></pre></td></tr></table></figure><p>我们可以通过 __str__ 进行输出格式化操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">self.name = name</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):  <span class="comment"># print输出时调用</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;Student object (name: %s)&#x27;</span> % self.name</span><br><span class="line">__repr__ = __str__  </span><br><span class="line">s = Student(<span class="string">&#x27;Michael&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line">s</span><br><span class="line"><span class="comment"># Student object (name: Michael)</span></span><br></pre></td></tr></table></figure><p>如果一个类想被用于<code>for ... in</code>循环，类似list或tuple那样，就必须实现一个<code>__iter__()</code>方法，该方法返回一个迭代对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fib</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.a, self.b = <span class="number">0</span>, <span class="number">1</span> <span class="comment"># 初始化两个计数器a，b</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self <span class="comment"># 实例本身就是迭代对象，故返回自己</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        self.a, self.b = self.b, self.a + self.b <span class="comment"># 计算下一个值</span></span><br><span class="line">        <span class="keyword">if</span> self.a &gt; <span class="number">100000</span>: <span class="comment"># 退出循环的条件</span></span><br><span class="line">            <span class="keyword">raise</span> StopIteration()</span><br><span class="line">        <span class="keyword">return</span> self.a <span class="comment"># 返回下一个值</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> Fib():</span><br><span class="line"><span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure><h3 id="getitem"><a href="#getitem" class="headerlink" title="__getitem__"></a>__getitem__</h3><p>__iter__() 可以让类进行遍历，但不能拿到某一个单一的值，因为它不是了列表。不能用下标获取</p><p>但可以通过实现__getitem__ 可以实现用下标获取某一个值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fib</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, n</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(n, <span class="built_in">int</span>): <span class="comment"># n是索引</span></span><br><span class="line">            a, b = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                a, b = b, a + b</span><br><span class="line">            <span class="keyword">return</span> a</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(n, <span class="built_in">slice</span>): <span class="comment"># n是切片</span></span><br><span class="line">            start = n.start</span><br><span class="line">            stop = n.stop</span><br><span class="line">            <span class="keyword">if</span> start <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                start = <span class="number">0</span></span><br><span class="line">            a, b = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">            L = []</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(stop):</span><br><span class="line">                <span class="keyword">if</span> x &gt;= start:</span><br><span class="line">                    L.append(a)</span><br><span class="line">                a, b = b, a + b</span><br><span class="line">            <span class="keyword">return</span> L</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">f = Fib()</span><br><span class="line"><span class="built_in">print</span>(f[<span class="number">0</span>]) <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f[<span class="number">0</span>:<span class="number">5</span>]) <span class="comment"># [1, 1, 2, 3, 5]</span></span><br></pre></td></tr></table></figure><h3 id="getattr-和-setattr"><a href="#getattr-和-setattr" class="headerlink" title="__getattr__ 和 __setattr__"></a>__getattr__ 和 __setattr__</h3><p><code>__getattr__()</code>方法在访问一个不存在的属性时会被调用，可以在该方法中自定义返回值。<br>而<code>__setattr__()</code>方法在给对象的属性赋值时会被调用，可以在该方法中自定义赋值操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># __getattr__</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):  </span><br><span class="line">        self.name = name  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, attr</span>):  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;attr&#125;</span>属性不存在&quot;</span>  </span><br><span class="line"></span><br><span class="line">p = Person(<span class="string">&quot;Tom&quot;</span>)  </span><br><span class="line"><span class="built_in">print</span>(p.name)  <span class="comment"># 输出 &quot;Tom&quot;  </span></span><br><span class="line"><span class="built_in">print</span>(p.age)   <span class="comment"># 输出 &quot;age属性不存在&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># __setattr__()</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):  </span><br><span class="line">        self.name = name  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setattr__</span>(<span class="params">self, attr, value</span>):  </span><br><span class="line">        <span class="keyword">if</span> attr == <span class="string">&quot;name&quot;</span>:  </span><br><span class="line">            self.__dict__[attr] = value.upper()  <span class="comment"># 赋值时，对形参进行特殊处理</span></span><br><span class="line">        <span class="keyword">else</span>:  </span><br><span class="line">            self.__dict__[attr] = value  </span><br><span class="line"></span><br><span class="line">p = Person(<span class="string">&quot;Tom&quot;</span>)  </span><br><span class="line"><span class="built_in">print</span>(p.name)  <span class="comment"># 输出 &quot;TOM&quot;  </span></span><br><span class="line">p.age = <span class="number">18</span>  </span><br><span class="line"><span class="built_in">print</span>(p.age)   <span class="comment"># 输出 18</span></span><br></pre></td></tr></table></figure><h3 id="call"><a href="#call" class="headerlink" title="__call__"></a>__call__</h3><p>只需要定义一个<code>__call__()</code>方法，就可以直接对实例进行调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;hello word %s&#x27;</span> % self.name)</span><br><span class="line">        </span><br><span class="line">s = Student(<span class="string">&#x27;Michael&#x27;</span>)</span><br><span class="line">s() <span class="comment"># 直接调用实例，就会调用__call__方法</span></span><br></pre></td></tr></table></figure><h2 id="面向对象-枚举类"><a href="#面向对象-枚举类" class="headerlink" title="面向对象 - 枚举类"></a>面向对象 - 枚举类</h2><ol><li>枚举类中的成员是从1开始计数的int常量。</li><li>可以通过名称或值来获取对应的枚举成员，使用 <code>EnumName.member_name</code> 或 <code>EnumName(&#39;member_value&#39;)</code>。</li><li>枚举成员的值是自动赋给成员的int常量。</li><li>枚举类型会自动实现比较和排序功能。</li></ol><h3 id="列表类型"><a href="#列表类型" class="headerlink" title="列表类型"></a>列表类型</h3><p>当需要定义的类型，只含有值，可以这样定义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"></span><br><span class="line">Month = Enum(<span class="string">&#x27;Month&#x27;</span>, (<span class="string">&#x27;Jan&#x27;</span>, <span class="string">&#x27;Feb&#x27;</span>, <span class="string">&#x27;Mar&#x27;</span>, <span class="string">&#x27;Apr&#x27;</span>, <span class="string">&#x27;May&#x27;</span>, <span class="string">&#x27;Jun&#x27;</span>, <span class="string">&#x27;Jul&#x27;</span>, <span class="string">&#x27;Aug&#x27;</span>, <span class="string">&#x27;Sep&#x27;</span>, <span class="string">&#x27;Oct&#x27;</span>, <span class="string">&#x27;Nov&#x27;</span>, <span class="string">&#x27;Dec&#x27;</span>)) <span class="comment"># value属性则是自动赋给成员的int常量，默认从1开始计数。</span></span><br><span class="line"><span class="comment"># 访问枚举成员  </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Month.Jan)   <span class="comment"># 输出: Month.Jan（通过名称访问）  </span></span><br><span class="line"><span class="built_in">print</span>(Month[<span class="string">&#x27;Jan&#x27;</span>])   <span class="comment"># 输出: Month.Jan（通过名称访问）  </span></span><br><span class="line"><span class="built_in">print</span>(Month(<span class="number">1</span>))     <span class="comment"># 输出: Month.Jan（通过值访问）  </span></span><br><span class="line"><span class="built_in">print</span>(Month.Jan.value)   <span class="comment"># 输出: 1（通过名称访问）  </span></span><br><span class="line"><span class="built_in">print</span>(Month[<span class="string">&#x27;Jan&#x27;</span>].value)   <span class="comment"># 输出: 1（通过名称访问）  </span></span><br><span class="line"><span class="built_in">print</span>(Month(<span class="number">1</span>).value)     <span class="comment"># 输出: 1（通过值访问）  </span></span><br></pre></td></tr></table></figure><h3 id="键值对类型"><a href="#键值对类型" class="headerlink" title="键值对类型"></a>键值对类型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum, unique</span><br><span class="line"></span><br><span class="line"><span class="meta">@unique </span><span class="comment"># @unique装饰器可以帮助我们检查保证没有重复值。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Weekday</span>(<span class="title class_ inherited__">Enum</span>):</span><br><span class="line">    Sun = <span class="number">0</span> <span class="comment"># Sun的value被设定为0</span></span><br><span class="line">    Mon = <span class="number">1</span></span><br><span class="line">    Tue = <span class="number">2</span></span><br><span class="line">    Wed = <span class="number">3</span></span><br><span class="line">    Thu = <span class="number">4</span></span><br><span class="line">    Fri = <span class="number">5</span></span><br><span class="line">    Sat = <span class="number">6</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 获取方式</span></span><br><span class="line"><span class="built_in">print</span>(Weekday.Mon)   <span class="comment"># 输出: Weekday.Mon（通过名称访问）  </span></span><br><span class="line"><span class="built_in">print</span>(Weekday[<span class="string">&#x27;Mon&#x27;</span>])   <span class="comment"># 输出: Weekday.Mon（通过名称访问）  </span></span><br><span class="line"><span class="built_in">print</span>(Weekday(<span class="number">1</span>))     <span class="comment"># 输出: Weekday.Mon（通过值访问）</span></span><br><span class="line"><span class="built_in">print</span>(Weekday.Mon.value)   <span class="comment"># 输出: 1（通过名称访问）  </span></span><br><span class="line"><span class="built_in">print</span>(Weekday[<span class="string">&#x27;Mon&#x27;</span>].value)   <span class="comment"># 输出: 1（通过名称访问）  </span></span><br><span class="line"><span class="built_in">print</span>(Weekday(<span class="number">1</span>).value)     <span class="comment"># 输出: 1（通过值访问）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Sun =&gt; Weekday.Sun</span></span><br><span class="line"><span class="string">Mon =&gt; Weekday.Mon</span></span><br><span class="line"><span class="string">Tue =&gt; Weekday.Tue</span></span><br><span class="line"><span class="string">Wed =&gt; Weekday.Wed</span></span><br><span class="line"><span class="string">Thu =&gt; Weekday.Thu</span></span><br><span class="line"><span class="string">Fri =&gt; Weekday.Fri</span></span><br><span class="line"><span class="string">Sat =&gt; Weekday.Sat</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="面向对象-property"><a href="#面向对象-property" class="headerlink" title="面向对象 - @property"></a>面向对象 - @property</h2><p>当类中使用私有变量来限制访问，通过get和set方法来获取和设置，属性过多，就需要定义多的get和set方法；@property可以通过装饰器的方式解决这个问题</p><ul><li><p>@property</p><p>该装饰器，可以直接把一个get方法书写方式的返回值</p></li><li><p>@fn.setter</p></li><li><p>设置只读属性 - 只定义getter方法，不定义setter方法</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property    </span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">score</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._score</span><br><span class="line"></span><br><span class="line"><span class="meta">    @score.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">score</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(value, <span class="built_in">int</span>):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;score must be an integer!&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span> <span class="keyword">or</span> value &gt; <span class="number">100</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;score must between 0 ~ 100!&#x27;</span>)</span><br><span class="line">        self._score = value</span><br><span class="line">        </span><br><span class="line"><span class="meta">@property    </span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Student()</span><br><span class="line">s.score = <span class="number">60</span>  <span class="comment"># 这里调用的其实是  def score(self, value)</span></span><br><span class="line"><span class="built_in">print</span>(s.score)  <span class="comment"># 这里调用的其实是  def score(self)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">比正常的属性. 调用，这种写法可以不写属性，且可以在调用时进行逻辑判断</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="面相对象-元类-补充"><a href="#面相对象-元类-补充" class="headerlink" title="面相对象 - 元类 [补充]"></a>面相对象 - 元类 [补充]</h2><h3 id="元类是什么"><a href="#元类是什么" class="headerlink" title="元类是什么"></a>元类是什么</h3><p>​在面向对象（OOP）编程中，我们可以用不同的类来描述不同的实体及操作，可以通过父类来设计一些“默认”操作，也可以用<strong>MixIn类</strong>来组合扩展一些额外操作，也可以用<strong>抽象类</strong>及<strong>抽象方法</strong>来描述要实现的接口，面向接口编程。</p><p>​元类是一种<code>type</code>（type的子类）,是一种自定义类型，可以定制类的调用、对象创建、初始化、销毁等各种操作。</p><h3 id="元类的使用场景"><a href="#元类的使用场景" class="headerlink" title="元类的使用场景"></a>元类的使用场景</h3><p>多数情况下<strong>元类用来对普通类来加以限制和规范</strong>。使用元类（自定义类型）可以在类的创建(<code>__new__</code>)、初始化()比如限制类必须包含特定属性和实现特定方法、限制类只能有一个实例对象。</p><p>典型使用场景如下：</p><ul><li>不允许类实例化</li><li>单例模式：每个类只允许创建一个对象</li><li>根据属性缓存对象：当某一属性相同时返回同一对象</li><li>属性限制：类中必须包含某些属性或实现某些方法</li><li>ORM框架：用类及类属性来描述数据库表并转为数据库操作</li></ul><h3 id="元类使用示例"><a href="#元类使用示例" class="headerlink" title="元类使用示例"></a>元类使用示例</h3><h4 id="不允许类实例化"><a href="#不允许类实例化" class="headerlink" title="不允许类实例化"></a>不允许类实例化</h4><p>在某些情况下，假设我需要限制一些类不允许创建对象（只允许使用类名操作），可以使用元类加以限制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NoInstances</span>(<span class="title class_ inherited__">type</span>):  <span class="comment"># 定义元类-继承type</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):  <span class="comment"># 控制类调用（实例化）过程</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;类调用&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">&quot;不允许实例化&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(metaclass=NoInstances):  <span class="comment"># 声明使用元类（该类型）</span></span><br><span class="line">     <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">user = User()  <span class="comment"># ()即调用类的__call__操作，这里会抛出异常，因此无法直接实例化创建对象</span></span><br></pre></td></tr></table></figure><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><p>某些情况下仅允许类创建一个实例对象，也可以使用元类进行限制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>(<span class="title class_ inherited__">type</span>):   <span class="comment"># 单例类型-定制的元类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        self.__instance = <span class="literal">None</span>   <span class="comment"># 添加一个私有属性，用于保存唯一的实例对象</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):  <span class="comment"># 控制类调用</span></span><br><span class="line">        <span class="keyword">if</span> self.__instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.__instance = <span class="built_in">super</span>().__call__(*args, **kwargs)  <span class="comment"># 不存在则创建</span></span><br><span class="line">            <span class="keyword">return</span> self.__instance</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.__instance    <span class="comment"># 否则返回已创建的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(metaclass=Singleton):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;创建用户&#x27;</span>)</span><br><span class="line"></span><br><span class="line">user1 = User()  <span class="comment"># 创建对象</span></span><br><span class="line">user2 = User()  <span class="comment"># 创建对象</span></span><br><span class="line"><span class="built_in">print</span>(user1 <span class="keyword">is</span> user2)  <span class="comment"># 返回True，两者是同一对象</span></span><br></pre></td></tr></table></figure><h4 id="根据属性缓存对象"><a href="#根据属性缓存对象" class="headerlink" title="根据属性缓存对象"></a>根据属性缓存对象</h4><p>这是单例模式的扩展，针对特定属性，完全相同的属性组合创建同一对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> weakref</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cached</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">       <span class="built_in">super</span>().__init__(*args, **kwargs)</span><br><span class="line">       self.__cache = weakref.WeakValueDictionary()  <span class="comment"># 添加一个缓存字典</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args</span>):</span><br><span class="line">       <span class="keyword">if</span> args <span class="keyword">in</span> self.__cache:   <span class="comment"># 通过 参数组合查询缓存字典中有没有对应的对象</span></span><br><span class="line">           <span class="keyword">return</span> self.__cache[args]   </span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           obj = <span class="built_in">super</span>().__call__(*args)  <span class="comment"># 创建对象</span></span><br><span class="line">           self.__cache[args] = obj  <span class="comment"># 根据参数组合（元祖类型）到缓存字典</span></span><br><span class="line">           <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(metaclass=Cached):</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&#x27;创建用户(&#123;!r&#125;)&#x27;</span>.<span class="built_in">format</span>(name))</span><br><span class="line">       self.name = name</span><br><span class="line"></span><br><span class="line">a = User(<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line">b = User(<span class="string">&#x27;李四&#x27;</span>)</span><br><span class="line">c = User(<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b)  <span class="comment"># False 名字不同，不是同一对象</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> c)  <span class="comment"># True  名字相同，是同一对象</span></span><br></pre></td></tr></table></figure><h4 id="限制类必须包含特定属性"><a href="#限制类必须包含特定属性" class="headerlink" title="限制类必须包含特定属性"></a>限制类必须包含特定属性</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestCaseType</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, name, bases, attrs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;name&#x27;</span>, name)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;bases&#x27;</span>, bases)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;attrs&#x27;</span>, attrs)</span><br><span class="line">        <span class="keyword">if</span> &#123;<span class="string">&#x27;priority&#x27;</span>, <span class="string">&#x27;timeout&#x27;</span>, <span class="string">&#x27;owner&#x27;</span>, <span class="string">&#x27;status&#x27;</span>, <span class="string">&#x27;run_test&#x27;</span>&#125; - <span class="built_in">set</span>(attrs.keys()):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;测试用例类必须包含priority、status、owner、timeout属性并实现run_test方法&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().__new__(cls, name, bases, attrs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestA</span>(metaclass=TestCaseType):</span><br><span class="line">    <span class="comment"># priority = &#x27;P1&#x27;</span></span><br><span class="line">    timeout = <span class="number">10</span></span><br><span class="line">    owner = <span class="string">&#x27;kevin&#x27;</span></span><br><span class="line">    status = <span class="string">&#x27;ready&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run_test</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = TestA()  <span class="comment"># 这里注释了用例类的priority属性，实例化会报错</span></span><br></pre></td></tr></table></figure><h4 id="ORM框架"><a href="#ORM框架" class="headerlink" title="ORM框架"></a>ORM框架</h4><p>​ORM（Object-Relational Mapping）是一种将对象和关系数据库之间的映射的技术，它可以让我们使用面向对象的方式来操作数据库。</p><p>​Django中的ORM模型、以及SQLAlchemy都是基于元类实现的，将数据库操作映射为 类声明和对象操作，下面是一个基于元类的，简单的ORM框架的实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ModelMeta</span>(<span class="title class_ inherited__">type</span>):  <span class="comment"># 元类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, name, bases, attrs</span>):</span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">&#x27;Model&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>().__new__(cls, name, bases, attrs)</span><br><span class="line"></span><br><span class="line">        table_name = attrs.get(<span class="string">&#x27;__table__&#x27;</span>, name.lower())  <span class="comment"># 如果类中包含table_name属性，则以该属性作为表明</span></span><br><span class="line">        mappings = &#123;&#125;</span><br><span class="line">        fields = []</span><br><span class="line">        primary_key = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> attrs.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(v, Field):</span><br><span class="line">                mappings[k] = v</span><br><span class="line">                <span class="keyword">if</span> v.primary_key:</span><br><span class="line">                    <span class="keyword">if</span> primary_key:</span><br><span class="line">                        <span class="keyword">raise</span> RuntimeError(<span class="string">&#x27;Duplicate primary key for field: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(k))   <span class="comment"># 只允许一个Field声明为主键</span></span><br><span class="line">                    primary_key = k</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    fields.append(k)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> primary_key:</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">&#x27;Primary key not found for table: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(table_name))   <span class="comment"># 不允许没有主键</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> mappings.keys():</span><br><span class="line">            attrs.pop(k)</span><br><span class="line"></span><br><span class="line">        attrs[<span class="string">&#x27;__table__&#x27;</span>] = table_name</span><br><span class="line">        attrs[<span class="string">&#x27;__mappings__&#x27;</span>] = mappings</span><br><span class="line">        attrs[<span class="string">&#x27;__fields__&#x27;</span>] = fields</span><br><span class="line">        attrs[<span class="string">&#x27;__primary_key__&#x27;</span>] = primary_key</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().__new__(cls, name, bases, attrs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Model</span>(metaclass=ModelMeta):  <span class="comment"># 数据模型-对应一张数据库表</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, **kwargs</span>):</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> kwargs.items():</span><br><span class="line">            <span class="built_in">setattr</span>(self, k, v)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save</span>(<span class="params">self</span>):  <span class="comment"># 对象保存方法-对应数据库表插入数据</span></span><br><span class="line">        fields = []</span><br><span class="line">        params = []</span><br><span class="line">        args = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> self.__mappings__.items():</span><br><span class="line">            <span class="keyword">if</span> v.primary_key:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            fields.append(v.name)</span><br><span class="line">            params.append(<span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            args.append(<span class="built_in">getattr</span>(self, k, <span class="literal">None</span>))</span><br><span class="line"></span><br><span class="line">        sql = <span class="string">&#x27;INSERT INTO &#123;&#125; (&#123;&#125;) VALUES (&#123;&#125;)&#x27;</span>.<span class="built_in">format</span>(self.__table__, <span class="string">&#x27;,&#x27;</span>.join(fields), <span class="string">&#x27;,&#x27;</span>.join(params))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;SQL:&#x27;</span>, sql)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;ARGS:&#x27;</span>, args)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Field</span>:  <span class="comment"># 数据库字段</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, column_type, primary_key=<span class="literal">False</span></span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.column_type = column_type</span><br><span class="line">        self.primary_key = primary_key</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;&#123;&#125;:&#123;&#125;&gt;&#x27;</span>.<span class="built_in">format</span>(self.__class__.__name__, self.name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StringField</span>(<span class="title class_ inherited__">Field</span>):  <span class="comment"># 字符串类型字典-对应varchar</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, primary_key=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name, <span class="string">&#x27;varchar(100)&#x27;</span>, primary_key)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IntegerField</span>(<span class="title class_ inherited__">Field</span>):   <span class="comment"># 整型字典-对应bigint</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, primary_key=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name, <span class="string">&#x27;bigint&#x27;</span>, primary_key)</span><br></pre></td></tr></table></figure><p>使用这个ORM框架，我们可以定义一个继承自<code>Model</code>的类，并在其中定义字段。例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">Model</span>):</span><br><span class="line">    <span class="built_in">id</span> = IntegerField(<span class="string">&#x27;id&#x27;</span>, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = StringField(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    email = StringField(<span class="string">&#x27;email&#x27;</span>)</span><br><span class="line">    password = StringField(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 我们就可以创建一个User对象，并将其保存到数据库中</span></span><br><span class="line">user = User(<span class="built_in">id</span>=<span class="number">1</span>, name=<span class="string">&#x27;Alice&#x27;</span>, email=<span class="string">&#x27;alice@example.com&#x27;</span>, password=<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line">user.save()</span><br></pre></td></tr></table></figure><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式"></a>什么是正则表达式</h3><p>　　正则表达式是对字符串（包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为“元字符”））操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。正则表达式是一种文本模式，该模式描述在搜索文本时要匹配的一个或多个字符串。</p><h3 id="正则表达式可以干什么"><a href="#正则表达式可以干什么" class="headerlink" title="正则表达式可以干什么"></a>正则表达式可以干什么</h3><ul><li>快速高效的查找与分析字符串</li><li>进行有规律查找比对字符串，也叫：<a href="https://www.baidu.com/s?wd=%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">模式匹配</a></li><li>具有查找、比对、匹配、替换、插入、添加、删除等能力。</li></ul><h3 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h3><p>Python 自1.5版本起增加了re 模块，它提供 Perl 风格的正则表达式模式。re 模块使 Python 语言拥有全部的正则表达式功能。</p><p>由于Python的字符串本身也用<code>\</code>转义，所以要特别注意：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;ABC\\-001&#x27;</span> <span class="comment"># Python的字符串</span></span><br><span class="line"><span class="comment"># 对应的正则表达式字符串变成：</span></span><br><span class="line"><span class="comment"># &#x27;ABC\-001&#x27;</span></span><br></pre></td></tr></table></figure><p>因此建议使用Python的<code>r</code>前缀，就不用考虑转义的问题了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">r&#x27;ABC\-001&#x27;</span> <span class="comment"># Python的字符串</span></span><br><span class="line"><span class="comment"># 对应的正则表达式字符串不变：</span></span><br><span class="line"><span class="comment"># &#x27;ABC\-001&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="正则表达式模式"><a href="#正则表达式模式" class="headerlink" title="正则表达式模式"></a>正则表达式模式</h3><p><img src="https://i-blog.csdnimg.cn/blog_migrate/a99408c479af61afde137f3ae778afe2.png" alt="在这里插入图片描述"></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/c7ecf57c665cf086df0e137f9fdd0477.png" alt="在这里插入图片描述"></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/1cf83c53486642a902cff1145289cbdf.png" alt="在这里插入图片描述"></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/920768528b89daf9a864d4665e039ead.png" alt="在这里插入图片描述"></p><p>使用特殊符号表示字符：用<code>\d</code>可以匹配一个数字，<code>\w</code>可以匹配一个字母或数字，例如：</p><ul><li><code>&#39;00\d&#39;</code>可以匹配<code>&#39;007&#39;</code>，但无法匹配<code>&#39;00A&#39;</code>；</li><li><code>&#39;\d\d\d&#39;</code>可以匹配<code>&#39;010&#39;</code>；</li><li><code>&#39;\w\w\d&#39;</code>可以匹配<code>&#39;py3&#39;。</code></li></ul><p><code>&#39;.&#39;</code>可以匹配任意字符，所以：</p><ul><li><code>&#39;py.&#39;</code>可以匹配<code>&#39;pyc&#39;</code>、<code>&#39;py3&#39;</code>、<code>&#39;py!&#39;</code>等等。</li></ul><p>要匹配变长的字符，在正则表达式中，用<code>*</code>表示任意个字符（包括0个），用<code>+</code>表示至少一个字符，用<code>?</code>表示0个或1个字符，用<code>&#123;n&#125;</code>表示n个字符，用<code>&#123;n,m&#125;</code>表示n-m个字符。</p><p>来看一个复杂的例子：<code>\d&#123;3&#125;\s+\d&#123;3,8&#125;</code>。</p><p>我们来从左到右解读一下：</p><ol><li><code>\d&#123;3&#125;</code>表示匹配3个数字，例如<code>&#39;010&#39;</code>；</li><li><code>\s</code>可以匹配一个空格（也包括Tab等空白符），所以<code>\s+</code>表示至少有一个空格，例如匹配<code>&#39; &#39;</code>，<code>&#39; &#39;</code>等；</li><li><code>\d&#123;3,8&#125;</code>表示3-8个数字，例如<code>&#39;1234567&#39;</code>。</li></ol><p>综合起来，上面的正则表达式可以匹配以任意个空格隔开的带区号的电话号码。</p><p>如果要匹配<code>&#39;010-12345&#39;</code>这样的号码呢？由于<code>&#39;-&#39;</code>是特殊字符，在正则表达式中，要用<code>&#39;\&#39;</code>转义，所以，上面的正则是<code>\d&#123;3&#125;\-\d&#123;3,8&#125;</code>。</p><p>但是，仍然无法匹配<code>&#39;010 - 12345&#39;</code>，因为带有空格。所以我们需要更复杂的匹配方式。</p><p><strong>进阶</strong></p><p>要做更精确地匹配，可以用<code>[]</code>表示范围，比如：</p><ul><li><code>[0-9a-zA-Z\_]</code>可以匹配一个数字、字母或者下划线；</li><li><code>[0-9a-zA-Z\_]+</code>可以匹配至少由一个数字、字母或者下划线组成的字符串，比如<code>&#39;a100&#39;</code>，<code>&#39;0_Z&#39;</code>，<code>&#39;Py3000&#39;</code>等等；</li><li><code>[a-zA-Z\_][0-9a-zA-Z\_]*</code>可以匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串，也就是Python合法的变量；</li><li><code>[a-zA-Z\_][0-9a-zA-Z\_]&#123;0, 19&#125;</code>更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）。</li></ul><p><code>A|B</code>可以匹配A或B，所以<code>(P|p)ython</code>可以匹配<code>&#39;Python&#39;</code>或者<code>&#39;python&#39;</code>。</p><p><code>^</code>表示行的开头，<code>^\d</code>表示必须以数字开头。</p><p><code>$</code>表示行的结束，<code>\d$</code>表示必须以数字结束。</p><p><code>py</code>也可以匹配<code>&#39;python&#39;</code>，但是加上<code>^py$</code>就变成了整行匹配，就只能匹配<code>&#39;py&#39;</code>了。</p><h3 id="re模常用方法"><a href="#re模常用方法" class="headerlink" title="re模常用方法"></a>re模常用方法</h3><h4 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br></pre></td></tr></table></figure><h4 id="匹配多种可能"><a href="#匹配多种可能" class="headerlink" title="匹配多种可能 - []"></a>匹配多种可能 - []</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&#x27;run&#x27; or &#x27;ran&#x27;</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;r[au]n&#x27;</span>,<span class="string">&#x27;dog runs to cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">4</span>, <span class="number">7</span>), <span class="keyword">match</span>=<span class="string">&#x27;run&#x27;</span>&gt; </span><br><span class="line"></span><br><span class="line">res = re.search(<span class="string">r&#x27;r[au]n&#x27;</span>,<span class="string">&#x27;dog rans to cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">4</span>, <span class="number">7</span>), <span class="keyword">match</span>=<span class="string">&#x27;ran&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#continue 匹配更多种可能</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;r[A-Z]n&#x27;</span>,<span class="string">&#x27;dog rans to cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">None</span></span><br><span class="line"></span><br><span class="line">res = re.search(<span class="string">r&#x27;r[a-z]n&#x27;</span>,<span class="string">&#x27;dog rans to cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">4</span>, <span class="number">7</span>), <span class="keyword">match</span>=<span class="string">&#x27;ran&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line">res = re.search(<span class="string">r&#x27;r[0-9]n&#x27;</span>,<span class="string">&#x27;dog rans to cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line">&gt;&gt;&gt;<span class="literal">None</span></span><br><span class="line"></span><br><span class="line">res = re.search(<span class="string">r&#x27;r[0-9a-z]n&#x27;</span>,<span class="string">&#x27;dog rans to cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">4</span>, <span class="number">7</span>), <span class="keyword">match</span>=<span class="string">&#x27;ran&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="匹配数字-d-or-D"><a href="#匹配数字-d-or-D" class="headerlink" title="匹配数字 - \d or \D"></a>匹配数字 - \d or \D</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># \d : decimal digit 数字的</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;r\dn&#x27;</span>,<span class="string">&#x27;run r9n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">4</span>, <span class="number">7</span>), <span class="keyword">match</span>=<span class="string">&#x27;r9n&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># \D : any non-decimal digit 任何不是数字的</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;r\Dn&#x27;</span>,<span class="string">&#x27;run r9n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">0</span>, <span class="number">3</span>), <span class="keyword">match</span>=<span class="string">&#x27;run&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="匹配空白-s-or-S"><a href="#匹配空白-s-or-S" class="headerlink" title="匹配空白 - \s or \S"></a>匹配空白 - \s or \S</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># \s : any white space [\t \n \r \f \v]</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;r\sn&#x27;</span>,<span class="string">&#x27;r\nn r9n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">0</span>, <span class="number">3</span>), <span class="keyword">match</span>=<span class="string">&#x27;r\nn&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># \S : 和\s相反，any non-white space</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;r\Sn&#x27;</span>,<span class="string">&#x27;r\nn r9n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">4</span>, <span class="number">7</span>), <span class="keyword">match</span>=<span class="string">&#x27;r9n&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="匹配所有字母和数字以及-‘-’-w-or-W"><a href="#匹配所有字母和数字以及-‘-’-w-or-W" class="headerlink" title="匹配所有字母和数字以及 ‘_’ - \w or \W"></a>匹配所有字母和数字以及 ‘_’ - \w or \W</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># \w : [a-zA-Z0-9_]</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;r\wn&#x27;</span>,<span class="string">&#x27;r\nn r9n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">4</span>, <span class="number">7</span>), <span class="keyword">match</span>=<span class="string">&#x27;r9n&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># \W : opposite to \w 即与\w相反</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;r\Wn&#x27;</span>,<span class="string">&#x27;r\nn r9n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">0</span>, <span class="number">3</span>), <span class="keyword">match</span>=<span class="string">&#x27;r\nn&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="匹配空白字符串-b-or-B"><a href="#匹配空白字符串-b-or-B" class="headerlink" title="匹配空白字符串 - \b or \B"></a>匹配空白字符串 - \b or \B</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># \b : (only at the start or end of the word)</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;\bruns\b&#x27;</span>,<span class="string">&#x27;dog runs to cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">4</span>, <span class="number">8</span>), <span class="keyword">match</span>=<span class="string">&#x27;runs&#x27;</span>&gt;</span><br><span class="line">res = re.search(<span class="string">r&#x27;\bruns\b&#x27;</span>,<span class="string">&#x27;dogrunsto cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># \B : ( but not at the start or end of the word)</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;\Bruns\B&#x27;</span>,<span class="string">&#x27;dog runs to cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">None</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;\Bruns\B&#x27;</span>,<span class="string">&#x27;dogrunsto cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">5</span>, <span class="number">11</span>), <span class="keyword">match</span>=<span class="string">&#x27; runs &#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="匹配任意字符-特殊字符-or"><a href="#匹配任意字符-特殊字符-or" class="headerlink" title="匹配任意字符 特殊字符 - \ or ."></a>匹配任意字符 特殊字符 - \ or .</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># \\ : 匹配 \</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;runs\\&#x27;</span>,<span class="string">&#x27;dog runs\ to cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">4</span>, <span class="number">9</span>), <span class="keyword">match</span>=<span class="string">&#x27;runs\\&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># . : 匹配 anything （except \n）</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;r.ns&#x27;</span>,<span class="string">&#x27;dog r;ns to cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">4</span>, <span class="number">8</span>), <span class="keyword">match</span>=<span class="string">&#x27;r;ns&#x27;</span>&gt;</span><br><span class="line">&gt;res = re.search(<span class="string">r&#x27;r.ns&#x27;</span>,<span class="string">&#x27;dog r\nns to cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">None</span></span><br></pre></td></tr></table></figure><h4 id="匹配句首句尾-or"><a href="#匹配句首句尾-or" class="headerlink" title="匹配句首句尾 - $ or ^"></a>匹配句首句尾 - $ or ^</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ^ : 匹配line beginning</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;^runs&#x27;</span>,<span class="string">&#x27;dog runs to cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">None</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;^dog&#x27;</span>,<span class="string">&#x27;dog runs to cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">0</span>, <span class="number">3</span>), <span class="keyword">match</span>=<span class="string">&#x27;dog&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># $ : 匹配line ending</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;runs$&#x27;</span>,<span class="string">&#x27;dog runs to cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">None</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;cat$&#x27;</span>,<span class="string">&#x27;dog runs to cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">12</span>, <span class="number">15</span>), <span class="keyword">match</span>=<span class="string">&#x27;cat&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="是否匹配"><a href="#是否匹配" class="headerlink" title="是否匹配 - ?"></a>是否匹配 - ?</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ？ ： may or may nt occur</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;r(u)?ns&#x27;</span>,<span class="string">&#x27;dog runs to cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">4</span>, <span class="number">8</span>), <span class="keyword">match</span>=<span class="string">&#x27;runs&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line">res = re.search(<span class="string">r&#x27;r(u)?ns&#x27;</span>,<span class="string">&#x27;dog rns to cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line">&gt;&gt;&gt;&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">4</span>, <span class="number">7</span>), <span class="keyword">match</span>=<span class="string">&#x27;rns&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="多行匹配-re-M"><a href="#多行匹配-re-M" class="headerlink" title="多行匹配 - re.M"></a>多行匹配 - re.M</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配代码后面加上re.M</span></span><br><span class="line">string = <span class="string">&quot;&quot;&quot; 123.</span></span><br><span class="line"><span class="string">dog runs to cat.</span></span><br><span class="line"><span class="string">You run to dog.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;^You&#x27;</span>,string)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">None</span></span><br><span class="line"></span><br><span class="line">res = re.search(<span class="string">r&#x27;^You&#x27;</span>,string,re.M)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">10</span>, <span class="number">13</span>), <span class="keyword">match</span>=<span class="string">&#x27;run&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="匹配零次或多次"><a href="#匹配零次或多次" class="headerlink" title="匹配零次或多次 - *"></a>匹配零次或多次 - *</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># * ： occur 0 or more times</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;ab*&#x27;</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">0</span>, <span class="number">1</span>), <span class="keyword">match</span>=<span class="string">&#x27;a&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line">res = re.search(<span class="string">r&#x27;ab*&#x27;</span>,<span class="string">&#x27;abbbbbbbbbb&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">0</span>, <span class="number">11</span>), <span class="keyword">match</span>=<span class="string">&#x27;abbbbbbbbbb&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="匹配一次或多次"><a href="#匹配一次或多次" class="headerlink" title="匹配一次或多次 - +"></a>匹配一次或多次 - +</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># + ：occur 1 or more times</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;ab+&#x27;</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">None</span></span><br><span class="line"></span><br><span class="line">res = re.search(<span class="string">r&#x27;ab+&#x27;</span>,<span class="string">&#x27;abbbbbbbbbb&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">0</span>, <span class="number">11</span>), <span class="keyword">match</span>=<span class="string">&#x27;abbbbbbbbbb&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="可选匹配次数-n-m"><a href="#可选匹配次数-n-m" class="headerlink" title="可选匹配次数 - {n, m}"></a>可选匹配次数 - {n, m}</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &#123;n, m&#125; : occur n to m times</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;ab&#123;1,10&#125;&#x27;</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">None</span></span><br><span class="line"></span><br><span class="line">res = re.search(<span class="string">r&#x27;ab&#123;1,10&#125;&#x27;</span>,<span class="string">&#x27;abbbbbbbbbb&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">0</span>, <span class="number">11</span>), <span class="keyword">match</span>=<span class="string">&#x27;abbbbbbbbbb&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>匹配多个正则公式，利用group添加命名输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># group</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;ID: (\d+), Name: (.+)&#x27;</span>,<span class="string">&#x27;ID: 123456789, Name: a/b*c;d&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res.group())</span><br><span class="line"><span class="built_in">print</span>(res.group(<span class="number">1</span>)) <span class="comment"># 利用1, 2 标识顺序</span></span><br><span class="line"><span class="built_in">print</span>(res.group(<span class="number">2</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ID: <span class="number">123456789</span>, Name: a/b*c;d</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">123456789</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a/b*c;d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给group组命名  ?P&lt;name&gt;</span></span><br><span class="line">res = re.search(<span class="string">r&#x27;ID: (?P&lt;id&gt;\d+), Name: (?P&lt;name&gt;.+)&#x27;</span>,<span class="string">&#x27;ID: 123456789, Name: a/b*c;d&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res.group(<span class="string">&#x27;id&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(res.group(<span class="string">&#x27;name&#x27;</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">123456789</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a/b*c;d</span><br></pre></td></tr></table></figure><h4 id="去除惰性，寻找所有匹配-findall"><a href="#去除惰性，寻找所有匹配-findall" class="headerlink" title="去除惰性，寻找所有匹配 - findall"></a>去除惰性，寻找所有匹配 - findall</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># re.findall()</span></span><br><span class="line">res = re.findall(<span class="string">r&#x27;r[ua]n&#x27;</span>,<span class="string">&#x27;run ran ren&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">&#x27;run&#x27;</span>, <span class="string">&#x27;ran&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 另一种写法</span></span><br><span class="line">res = re.findall(<span class="string">r&#x27;(run|ran)&#x27;</span>,<span class="string">&#x27;run ran ren&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">&#x27;run&#x27;</span>, <span class="string">&#x27;ran&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="替换匹配内容-sub"><a href="#替换匹配内容-sub" class="headerlink" title="替换匹配内容 - sub"></a>替换匹配内容 - sub</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># re.sub(   ,replace,   )</span></span><br><span class="line">res = re.sub(<span class="string">r&#x27;runs&#x27;</span>,<span class="string">&#x27;catches&#x27;</span>,<span class="string">&#x27;dog runs to cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dog catches to cat</span><br></pre></td></tr></table></figure><h4 id="分裂匹配内容-split"><a href="#分裂匹配内容-split" class="headerlink" title="分裂匹配内容 - split"></a>分裂匹配内容 - split</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># re.split()</span></span><br><span class="line">res = re.split(<span class="string">r&#x27;[,;\.\\]&#x27;</span>, <span class="string">&#x27;a,b;c.d\e&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="将正则匹配规则进行包装-compile"><a href="#将正则匹配规则进行包装-compile" class="headerlink" title="将正则匹配规则进行包装 - compile"></a>将正则匹配规则进行包装 - compile</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># re. compile()</span></span><br><span class="line">compile_re = re.<span class="built_in">compile</span>(<span class="string">r&#x27;r[ua]n&#x27;</span>)</span><br><span class="line">res = compile_re.findall(<span class="string">&#x27;run ran ren&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">&#x27;run&#x27;</span>, <span class="string">&#x27;ran&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="一些常见的正则表达式"><a href="#一些常见的正则表达式" class="headerlink" title="一些常见的正则表达式"></a>一些常见的正则表达式</h3><h4 id="校验数字"><a href="#校验数字" class="headerlink" title="校验数字"></a>校验数字</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1、数字：^[0-9]*$</span><br><span class="line">2、n位的数字：^\d&#123;n&#125;$</span><br><span class="line">3、至少n位的数字：^\d&#123;n,&#125;$</span><br><span class="line">4、m-n位的数字：^\d&#123;m,n&#125;$</span><br><span class="line">5、零和非零开头的数字：^(0|[1-9][0-9]*)$</span><br><span class="line">6、非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]&#123;1,2&#125;)?$</span><br><span class="line">7、带1-2位小数的正数或负数：^(\-)?\d+(\.\d&#123;1,2&#125;)?$</span><br><span class="line">8、正数、负数、和小数：^(\-|\+)?\d+(\.\d+)?$</span><br><span class="line">9、有两位小数的正实数：^[0-9]+(.[0-9]&#123;2&#125;)?$</span><br><span class="line">10、有1~3位小数的正实数：^[0-9]+(.[0-9]&#123;1,3&#125;)?$</span><br><span class="line">11、非零的正整数：^[1-9]\d*$ 或 ^([1-9][0-9]*)&#123;1,3&#125;$ 或 ^\+?[1-9][0-9]*$</span><br><span class="line">12、非零的负整数：^\-[1-9][]0-9&quot;*$ 或 ^-[1-9]\d*$</span><br><span class="line">13、非负整数：^\d+$ 或 ^[1-9]\d*|0$</span><br><span class="line">14、非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</span><br><span class="line">15、非负浮点数：^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$</span><br><span class="line">16、非正浮点数：^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$</span><br><span class="line">17、正浮点数：^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$</span><br><span class="line">18、负浮点数：^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</span><br><span class="line">19、浮点数：^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$</span><br></pre></td></tr></table></figure><h4 id="校验字符"><a href="#校验字符" class="headerlink" title="校验字符"></a>校验字符</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1、汉字：^[\u4e00-\u9fa5]&#123;0,&#125;$</span><br><span class="line">2、英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]&#123;4,40&#125;$</span><br><span class="line">3、长度为3-20的所有字符：^.&#123;3,20&#125;$</span><br><span class="line">3、由26个英文字母组成的字符串：^[A-Za-z]+$</span><br><span class="line">5、由26个大写英文字母组成的字符串：^[A-Z]+$</span><br><span class="line">6、由26个小写英文字母组成的字符串：^[a-z]+$</span><br><span class="line">7、由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$</span><br><span class="line">8、由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w&#123;3,20&#125;$</span><br><span class="line">9、中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$</span><br><span class="line">10、中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]&#123;2,20&#125;$</span><br><span class="line">11、可以输入含有^%&amp;&#x27;,;=?$\&quot;等字符：[^%&amp;&#x27;,;=?$\x22]+</span><br><span class="line">12、禁止输入含有~的字符：[^~\x22]+</span><br></pre></td></tr></table></figure><h4 id="特殊需求"><a href="#特殊需求" class="headerlink" title="特殊需求"></a>特殊需求</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">1、Email地址：^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</span><br><span class="line">2、域名：[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/.?</span><br><span class="line">3、 InternetURL：[a-zA-z]+://[^\s]* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$</span><br><span class="line">4、手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d&#123;8&#125;$</span><br><span class="line">5、电话号码(&quot;XXX-XXXXXXX&quot;、&quot;XXXX-XXXXXXXX&quot;、&quot;XXX-XXXXXXX&quot;、&quot;XXX-XXXXXXXX&quot;、&quot;XXXXXXX&quot;和&quot;XXXXXXXX)：^(\(\d&#123;3,4&#125;-)|\d&#123;3.4&#125;-)?\d&#123;7,8&#125;$</span><br><span class="line">6、国内电话号码(0511-4405222、021-87888822)：\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;</span><br><span class="line">7、身份证号(15位、18位数字)：^\d&#123;15&#125;|\d&#123;18&#125;$</span><br><span class="line">8、短身份证号码(数字、字母x结尾)：^([0-9])&#123;7,18&#125;(x|X)?$ 或 ^\d&#123;8,18&#125;|[0-9x]&#123;8,18&#125;|[0-9X]&#123;8,18&#125;?$</span><br><span class="line">9、帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$</span><br><span class="line">10、密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w&#123;5,17&#125;$</span><br><span class="line">11、强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,10&#125;$</span><br><span class="line">12、日期格式：^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;</span><br><span class="line">13、一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$</span><br><span class="line">14 、一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$</span><br><span class="line">15、钱的输入格式：</span><br><span class="line">* 有四种钱的表示形式我们可以接受:&quot;10000.00&quot; 和 &quot;10,000.00&quot;, 和没有 &quot;分&quot; 的 &quot;10000&quot; 和 &quot;10,000&quot;：^[1-9][0-9]*$</span><br><span class="line">* 这表示任意一个不以0开头的数字,但是,这也意味着一个字符&quot;0&quot;不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$</span><br><span class="line">* 一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$</span><br><span class="line">* 这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$</span><br><span class="line">* 5.必须说明的是,小数点后面至少应该有1位数,所以&quot;10.&quot;是不通过的,但是 &quot;10&quot; 和 &quot;10.2&quot; 是通过的：^[0-9]+(.[0-9]&#123;2&#125;)?$</span><br><span class="line">* 6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]&#123;1,2&#125;)?$</span><br><span class="line">* 这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*(.[0-9]&#123;1,2&#125;)?$</span><br><span class="line">* 1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*)(.[0-9]&#123;1,2&#125;)?$</span><br><span class="line">* 备注：这就是最终结果了,别忘了&quot;+&quot;可以用&quot;*&quot;替代如果你觉得空字符串也可</span><br><span class="line">* 以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</span><br><span class="line">16、xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$</span><br><span class="line">17、中文字符的正则表达式：[\u4e00-\u9fa5]</span><br><span class="line">18、双字节字符：[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</span><br><span class="line">19、空白行的正则表达式：\n\s*\r (可以用来删除空白行)</span><br><span class="line">20、HTML标记的正则表达式：&lt;(\S*?)[^&gt;]*&gt;.*?&lt;/\1&gt;|&lt;.*? /&gt; (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</span><br><span class="line">21、首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</span><br><span class="line">22、 腾讯QQ号：[1-9][0-9]&#123;4,&#125; (腾讯QQ号从10000开始)</span><br><span class="line">23、中国邮政编码：[1-9]\d&#123;5&#125;(?!\d) (中国邮政编码为6位数字)</span><br><span class="line">24、IP地址：\d+\.\d+\.\d+\.\d+ (提取IP地址时有用)</span><br><span class="line">25、 IP地址：((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))</span><br></pre></td></tr></table></figure><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><p>单核CPU操作系统轮流让各个任务交替执行，任务1执行0.01秒，切换到任务2，任务2执行0.01秒，再切换到任务3，执行0.01秒……这样反复执行下去。表面上看，每个任务都是交替执行的，但是，由于CPU的执行速度实在是太快了，我们感觉就像所有任务都在同时执行一样。</p><p>真正的并行执行多任务只能在多核CPU上实现，但是，由于任务数量远远多于CPU的核心数量，所以，操作系统也会自动把很多任务轮流调度到每个核心上执行</p><p>对于操作系统来说，一个任务就是一个进程（Process）</p><p>Python既支持多进程，又支持多线程。python实现多任务有3中模式：</p><ul><li>多进程模式；</li><li>多线程模式；</li><li>多进程+多线程模式。</li></ul><p>线程是最小的执行单元，而进程由至少一个线程组成。如何调度进程和线程，完全由操作系统决定，程序自己不能决定什么时候执行，执行多长时间。</p><p>多进程和多线程的程序涉及到同步、数据共享的问题，编写起来更复杂。</p><h3 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h3><p>Unix&#x2F;Linux操作系统提供了一个<code>fork()</code>系统调用，fork()系统调用在Unix&#x2F;Linux操作系统中非常特殊，它会创建一个新的进程（子进程），该子进程是父进程的副本。父进程和子进程在执行fork()系统调用之后会继续执行接下来的代码。父进程中，fork()函数返回子进程的PID（Process ID），而在子进程中，fork()函数返回0。</p><p><strong>调用fork - Unix&#x2F;Linux</strong></p><p><code>os</code>模块封装了常见的系统调用，其中<code>fork</code>可以在Python程序中轻松创建子进程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">child_process</span>():  </span><br><span class="line">    <span class="comment"># 子进程代码  </span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;I am child process (%s) and my parent is %s.&#x27;</span> % (os.getpid(), os.getppid()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parent_process</span>():  </span><br><span class="line">    <span class="comment"># 父进程代码  </span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;I (%s) just created a child process (%s).&#x27;</span> % (os.getpid(), pid))  </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Process (%s) start...&#x27;</span> % os.getpid())  </span><br><span class="line">pid = os.fork()  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> pid == <span class="number">0</span>:  </span><br><span class="line">    <span class="comment"># 子进程执行child_process函数  </span></span><br><span class="line">    child_process()  </span><br><span class="line"><span class="keyword">else</span>:  </span><br><span class="line">    <span class="comment"># 父进程执行parent_process函数  </span></span><br><span class="line">    parent_process()</span><br></pre></td></tr></table></figure><p><strong>multiprocessing</strong></p><p>由于Windows没有<code>fork</code>调用，上面的代码在Windows上无法运行。<br><code>multiprocessing</code>模块就是跨平台版本的多进程模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing  </span><br><span class="line"><span class="keyword">import</span> os  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">child_process</span>():  </span><br><span class="line">    <span class="comment"># 子进程代码  </span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;I am child process (%s) and my parent is %s.&#x27;</span> % (os.getpid(), os.getppid()))  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parent_process</span>():  </span><br><span class="line">    <span class="comment"># 父进程代码  </span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;I (%s) just created a child process.&#x27;</span> % os.getpid())  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    <span class="comment"># 主程序开始执行  </span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Process (%s) start...&#x27;</span> % os.getpid())  </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建子进程并指定执行的函数为child_process()  </span></span><br><span class="line">    p = multiprocessing.Process(target=child_process)  </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 启动子进程  </span></span><br><span class="line">    p.start()  </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 等待子进程结束，这样可以确保父进程在子进程完成后再继续执行。  </span></span><br><span class="line">    p.join()  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行parent_process()函数，此时已经是父进程了。  </span></span><br><span class="line">    parent_process()</span><br></pre></td></tr></table></figure><p><strong>Pool - 进程池</strong></p><p>如果要启动大量的子进程，可以用进程池的方式批量创建子进程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing  </span><br><span class="line"><span class="keyword">import</span> os  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">worker</span>(<span class="params">num</span>):  </span><br><span class="line">    <span class="comment"># 子进程代码  </span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Worker %s is running (pid=%s)...&#x27;</span> % (num, os.getpid()))  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    <span class="comment"># 主程序开始执行  </span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Parent process is running (pid=%s)...&#x27;</span> % os.getpid())  </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建一个包含4个进程的进程池  </span></span><br><span class="line">    pool = multiprocessing.Pool(processes=<span class="number">4</span>)  </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 使用进程池执行worker函数，参数为0~3  </span></span><br><span class="line">    pool.<span class="built_in">map</span>(worker, <span class="built_in">range</span>(<span class="number">4</span>))  </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 关闭进程池  </span></span><br><span class="line">    pool.close()  </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 等待所有子进程结束  </span></span><br><span class="line">    pool.join()  </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 所有子进程结束后，主进程继续执行  </span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;All workers done.&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>子进程 - 交互</strong></p><p>很多时候，子进程并不是自身，而是一个外部进程。我们创建了子进程后，还需要控制子进程的输入和输出。</p><p><code>subprocess</code>模块可以让我们非常方便地启动一个子进程，然后控制其输入和输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_command</span>(<span class="params">command</span>):</span><br><span class="line">    <span class="comment"># 运行外部命令并获取输出</span></span><br><span class="line">    result = subprocess.run(command, shell=<span class="literal">True</span>, capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查命令是否成功执行</span></span><br><span class="line">    <span class="keyword">if</span> result.returncode == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Command &#x27;<span class="subst">&#123;command&#125;</span>&#x27; executed successfully.&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Output:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(result.stdout)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error executing command &#x27;<span class="subst">&#123;command&#125;</span>&#x27;.&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error output:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(result.stderr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 主程序开始执行</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Parent process is running (pid=%s)...&#x27;</span> % os.getpid())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义要运行的命令，可以根据不同操作系统选择不同的命令</span></span><br><span class="line">    command = <span class="string">&quot;ls -l&quot;</span> <span class="keyword">if</span> os.name != <span class="string">&#x27;nt&#x27;</span> <span class="keyword">else</span> <span class="string">&quot;dir&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 运行命令</span></span><br><span class="line">    run_command(command)</span><br></pre></td></tr></table></figure><p>通过 communicate() 方法与进程交互</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_command</span>(<span class="params">command</span>):</span><br><span class="line">    <span class="comment"># 运行外部命令并获取输出</span></span><br><span class="line">    process = subprocess.Popen(command, shell=<span class="literal">True</span>, stdout=subprocess.PIPE, stderr=subprocess.PIPE,stdin=subprocess.PIPE, text=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 与进程交互，可以向进程输入数据</span></span><br><span class="line">    input_data = <span class="string">&quot;Input data to the process&quot;</span></span><br><span class="line">    process.stdin.write(input_data)</span><br><span class="line">    process.stdin.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取进程的输出和错误信息</span></span><br><span class="line">    output, error = process.communicate()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查命令是否成功执行</span></span><br><span class="line">    <span class="keyword">if</span> process.returncode == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Command &#x27;<span class="subst">&#123;command&#125;</span>&#x27; executed successfully.&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Output:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(output.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error executing command &#x27;<span class="subst">&#123;command&#125;</span>&#x27;.&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error output:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(error.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 主程序开始执行</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Parent process is running (pid=%s)...&#x27;</span> % os.getpid())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义要运行的命令，可以根据不同操作系统选择不同的命令</span></span><br><span class="line">    command = <span class="string">&quot;ls -l&quot;</span> <span class="keyword">if</span> os.name != <span class="string">&#x27;nt&#x27;</span> <span class="keyword">else</span> <span class="string">&quot;dir&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 运行命令</span></span><br><span class="line">    run_command(command)</span><br></pre></td></tr></table></figure><p><strong>进程间通信</strong></p><p>进程与进程之间肯定是需要通信的，操作系统提供了很多机制来实现进程间的通信</p><p>Python的<code>multiprocessing</code>模块包装了底层的机制，提供了<code>Queue</code>、<code>Pipes</code>等多种方式来交换数据。</p><ol><li>在使用 <code>multiprocessing</code> 模块进行进程间通信时，需要注意数据的序列化和反序列化问题。因为不同进程之间的内存空间是独立的，所以需要将数据序列化后再传输到另一个进程中进行反序列化。</li><li>在使用 <code>subprocess</code> 模块启动子进程并与其进行交互时，需要注意输入和输出的缓冲区问题。如果子进程的输出数据量很大，可能会导致缓冲区溢出，从而导致程序出现异常。可以使用 <code>communicate()</code> 方法来避免这个问题，该方法会等待子进程结束并获取其输出和错误信息。</li></ol><ul><li>Queue - 队列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">producer</span>(<span class="params">queue</span>):  </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):  </span><br><span class="line">        queue.put(i)  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Producer put <span class="subst">&#123;i&#125;</span> into queue.&quot;</span>)  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">consumer</span>(<span class="params">queue</span>):  </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:  </span><br><span class="line">        item = queue.get()  </span><br><span class="line">        <span class="keyword">if</span> item <span class="keyword">is</span> <span class="literal">None</span>:  </span><br><span class="line">            <span class="keyword">break</span>  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Consumer got <span class="subst">&#123;item&#125;</span> from queue.&quot;</span>)  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    <span class="comment"># 创建一个进程间通信的队列  </span></span><br><span class="line">    queue = multiprocessing.Queue()  </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建一个生产者进程和一个消费者进程  </span></span><br><span class="line">    producer_process = multiprocessing.Process(target=producer, args=(queue,))  </span><br><span class="line">    consumer_process = multiprocessing.Process(target=consumer, args=(queue,))  </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 启动进程  </span></span><br><span class="line">    producer_process.start()  </span><br><span class="line">    consumer_process.start()  </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 等待生产者进程结束并向队列中添加结束标志  </span></span><br><span class="line">    producer_process.join()  </span><br><span class="line">    queue.put(<span class="literal">None</span>)  </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 等待消费者进程结束  </span></span><br><span class="line">    consumer_process.join()</span><br></pre></td></tr></table></figure><ul><li>Pipe - 管道</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sender</span>(<span class="params">conn</span>):  </span><br><span class="line">    conn.send(<span class="string">&quot;Hello, receiver!&quot;</span>)  </span><br><span class="line">    conn.close()  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">receiver</span>(<span class="params">conn</span>):  </span><br><span class="line">    msg = conn.recv()  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Received message: <span class="subst">&#123;msg&#125;</span>&quot;</span>)  </span><br><span class="line">    conn.close()  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    <span class="comment"># 创建管道  </span></span><br><span class="line">    parent_conn, child_conn = multiprocessing.Pipe()  </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建发送者进程和接收者进程  </span></span><br><span class="line">    sender_process = multiprocessing.Process(target=sender, args=(parent_conn,))  </span><br><span class="line">    receiver_process = multiprocessing.Process(target=receiver, args=(child_conn,))  </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 启动进程  </span></span><br><span class="line">    sender_process.start()  </span><br><span class="line">    receiver_process.start()  </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 等待进程结束  </span></span><br><span class="line">    sender_process.join()  </span><br><span class="line">    receiver_process.join()</span><br></pre></td></tr></table></figure><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>多任务可以由多进程完成，也可以由一个进程内的多线程完成</p><p>进程是由若干线程组成的，一个进程至少有一个线程</p><p>由于线程是操作系统直接支持的执行单元，因此，高级语言通常都内置多线程的支持</p><p><strong>threading</strong></p><p>Python的标准库提供了两个模块：<code>_thread</code>和<code>threading</code>，<code>_thread</code>是低级模块，<code>threading</code>是高级模块，对<code>_thread</code>进行了封装。绝大多数情况下，我们只需要使用<code>threading</code>这个高级模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading  </span><br><span class="line"><span class="keyword">import</span> time  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数作为线程的执行体  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">thread_task</span>(<span class="params">name</span>):  </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;Thread <span class="subst">&#123;name&#125;</span>: <span class="subst">&#123;i&#125;</span>&#x27;</span>)  </span><br><span class="line">        time.sleep(<span class="number">1</span>)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建两个线程并启动它们  </span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:  </span><br><span class="line">    t1 = threading.Thread(target=thread_task, args=(<span class="string">&#x27;A&#x27;</span>,))  </span><br><span class="line">    t2 = threading.Thread(target=thread_task, args=(<span class="string">&#x27;B&#x27;</span>,))  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 启动线程  </span></span><br><span class="line">    t1.start()  </span><br><span class="line">    t2.start()  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等待两个线程结束  </span></span><br><span class="line">    t1.join()  </span><br><span class="line">    t2.join()</span><br></pre></td></tr></table></figure><p>注意项：</p><ul><li>全局变量共享问题：多个线程可以访问和修改相同的全局变量，因此需要确保对共享数据的访问是安全的。</li><li>线程同步：使用锁或者其他同步机制来避免多个线程同时修改共享资源。</li><li>GIL（全局解释器锁）：Python语言的GIL限制了同一时间只能有一个线程执行Python字节码。因此在CPU密集型任务中，并发性能可能无法得到提升。</li></ul><p><strong>Lock</strong></p><p>多线程和多进程最大的不同在于，多进程中，同一个变量，各自有一份拷贝存在于每个进程中，互不影响，而多线程中，所有变量都由所有线程共享，所以，任何一个变量都可以被任何一个线程修改，因此，线程之间共享数据最大的危险在于多个线程同时改一个变量，把内容给改乱了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time, threading</span><br><span class="line"></span><br><span class="line"><span class="comment"># 假定这是你的银行存款:  </span></span><br><span class="line">balance = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数用于改变账户余额（模拟存取款操作）  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_it</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">global</span> balance</span><br><span class="line">    <span class="comment"># 先存后取，结果应该为0:  </span></span><br><span class="line">    balance = balance + n</span><br><span class="line">    balance = balance - n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 线程执行体，对账户进行多次存取款操作  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_thread</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000000</span>):</span><br><span class="line">        change_it(n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并启动两个线程来同时对账户进行存取款操作，两个线程同时一存一取，就可能导致余额不对</span></span><br><span class="line">t1 = threading.Thread(target=run_thread, args=(<span class="number">5</span>,))</span><br><span class="line">t2 = threading.Thread(target=run_thread, args=(<span class="number">8</span>,))</span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(balance)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果我们要确保<code>balance</code>计算正确，就要给<code>change_it()</code>上一把锁，当某个线程开始执行<code>change_it()</code>时，该线程因为获得了锁，因此其他线程不能同时执行<code>change_it()</code>，只能等待，直到锁被释放后，获得该锁以后才能改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time, threading  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 假定这是你的银行存款:  </span></span><br><span class="line">balance = <span class="number">0</span>  </span><br><span class="line">lock = threading.Lock()  <span class="comment"># 创建一个锁对象  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_it</span>(<span class="params">n</span>):  </span><br><span class="line">    <span class="keyword">global</span> balance  </span><br><span class="line">    balance += n  </span><br><span class="line">    balance -= n  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_thread</span>(<span class="params">n</span>):  </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000000</span>):  </span><br><span class="line">        lock.acquire()  <span class="comment"># 获取锁  </span></span><br><span class="line">        <span class="keyword">try</span>:  </span><br><span class="line">            change_it(n)  </span><br><span class="line">        <span class="keyword">finally</span>:  </span><br><span class="line">            lock.release()  <span class="comment"># 释放锁  </span></span><br><span class="line"></span><br><span class="line">t1 = threading.Thread(target=run_thread, args=(<span class="number">5</span>,))  </span><br><span class="line">t2 = threading.Thread(target=run_thread, args=(<span class="number">8</span>,))  </span><br><span class="line">t1.start()  </span><br><span class="line">t2.start()  </span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(balance)</span><br></pre></td></tr></table></figure><h3 id="计算密集型-vs-IO密集型"><a href="#计算密集型-vs-IO密集型" class="headerlink" title="计算密集型 vs. IO密集型"></a>计算密集型 vs. IO密集型</h3><p>是否采用多任务的第二个考虑是任务的类型。我们可以把任务分为计算密集型和IO密集型。</p><ul><li><p>计算密集型</p><p>计算密集型任务的特点是要进行大量的计算，消耗CPU资源。这种计算密集型任务虽然也可以用多任务完成，但是任务越多，花在任务切换的时间就越多，CPU执行任务的效率就越低</p></li><li><p>IO密集型</p><p>IO密集型，涉及到网络、磁盘IO的任务都是IO密集型任务，这类任务的特点是CPU消耗很少，任务的大部分时间都在等待IO操作完成。对于IO密集型任务，任务越多，CPU效率越高</p></li></ul><h3 id="异步IO"><a href="#异步IO" class="headerlink" title="异步IO"></a>异步IO</h3><p>CPU和IO之间巨大的速度差异，一个任务在执行的过程中大部分时间都在等待IO操作，单进程单线程模型会导致别的任务无法并行执行，因此，我们才需要多进程模型或者多线程模型来支持多任务并发执行。</p><p>现代操作系统对IO操作就是支持异步IO。充分利用操作系统提供的异步IO支持，就可以用单进程单线程模型来执行多任务，这种全新的模型称为事件驱动模型</p><h3 id="分布式进程"><a href="#分布式进程" class="headerlink" title="分布式进程"></a>分布式进程</h3><p>Python的<code>multiprocessing</code>模块不但支持多进程，其中<code>managers</code>子模块还支持把多进程分布到多台机器上。一个服务进程可以作为调度者，将任务分布到其他多个进程中，依靠网络通信。</p><p>案例：假设我们有两台机器：Machine A 和 Machine B。原先的多进程程序在 Machine A 上运行，包括发送任务的进程和处理任务的进程。现在我们希望将发送任务的进程迁移到 Machine B 上，与处理任务的进程分开运行。</p><p><strong>重点难点</strong></p><ol><li><strong>通信机制更新</strong>：需要更新原先基于 Queue 的通信机制，以适应跨机器通信。</li><li><strong>网络配置</strong>：确保两台机器能够相互通信，可以考虑使用网络协议如TCP&#x2F;IP。</li><li><strong>错误处理</strong>：处理跨机器通信可能会引入新的错误类型，需要考虑如何处理这些错误情况。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 Machine A 上运行的发送任务的进程  </span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue  </span><br><span class="line"><span class="keyword">import</span> time  </span><br><span class="line"><span class="keyword">import</span> random  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_task</span>(<span class="params">queue</span>):  </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:  </span><br><span class="line">        <span class="comment"># 生成一个随机任务  </span></span><br><span class="line">        task = random.randint(<span class="number">1</span>, <span class="number">100</span>)  </span><br><span class="line">        <span class="comment"># 将任务放入队列  </span></span><br><span class="line">        queue.put(task)  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Sent task: <span class="subst">&#123;task&#125;</span>&quot;</span>)  </span><br><span class="line">        <span class="comment"># 等待一段时间再发送下一个任务  </span></span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>, <span class="number">5</span>))  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    <span class="comment"># 创建一个队列  </span></span><br><span class="line">    queue = Queue()  </span><br><span class="line">    <span class="comment"># 创建一个发送任务的进程  </span></span><br><span class="line">    send_process = Process(target=send_task, args=(queue,))  </span><br><span class="line">    <span class="comment"># 启动发送任务的进程  </span></span><br><span class="line">    send_process.start()  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 Machine B 上运行的处理任务的进程  </span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue  </span><br><span class="line"><span class="keyword">import</span> time  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_task</span>(<span class="params">queue</span>):  </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:  </span><br><span class="line">        <span class="comment"># 从队列中获取任务  </span></span><br><span class="line">        task = queue.get()  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Processing task: <span class="subst">&#123;task&#125;</span>&quot;</span>)  </span><br><span class="line">        <span class="comment"># 模拟处理任务的时间  </span></span><br><span class="line">        time.sleep(<span class="number">5</span>)  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    <span class="comment"># 创建一个队列  </span></span><br><span class="line">    queue = Queue()  </span><br><span class="line">    <span class="comment"># 创建一个处理任务的进程  </span></span><br><span class="line">    process_process = Process(target=process_task, args=(queue,))  </span><br><span class="line">    <span class="comment"># 启动处理任务的进程  </span></span><br><span class="line">    process_process.start()</span><br></pre></td></tr></table></figure><p>注意Queue的作用是用来传递任务和接收结果，每个任务的描述数据量要尽量小。比如发送一个处理日志文件的任务，就不要发送几百兆的日志文件本身，而是发送日志文件存放的完整路径，由Worker进程再去共享的磁盘上读取文件。</p><h2 id="异步IO-1"><a href="#异步IO-1" class="headerlink" title="异步IO"></a>异步IO</h2><h3 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h3><p>协程，又称微线程</p><p>协程是一种轻量级的并发编程方式，它可以在一个线程中实现多个任务的切换和调度。Python中的协程通过使用<code>asyncio</code>库来实现。</p><ol><li>异步IO操作：协程通常用于处理IO密集型任务，例如网络请求或文件读写。了解如何使用协程来执行异步IO操作，并通过<code>asyncio</code>库中提供的异步IO函数来实现非阻塞的IO操作。</li><li>协程的调度和并发：了解如何使用<code>asyncio</code>库来调度和并发执行多个协程任务。这包括使用<code>asyncio</code>提供的事件循环（event loop）来调度协程的执行顺序，以及使用<code>asyncio</code>中的<code>asyncio.gather()</code>函数来并发执行多个协程任务。</li><li>错误处理和异常处理：了解如何处理协程中可能出现的错误和异常情况。包括使用<code>try-except</code>语句来捕获和处理异常，以及使用<code>asyncio</code>库中提供的错误处理机制来处理协程中的异常情况。</li></ol><h3 id="asyncio"><a href="#asyncio" class="headerlink" title="asyncio"></a>asyncio</h3><p><code>asyncio</code>是Python 3.4版本引入的标准库，直接内置了对异步IO的支持。</p><p><code>asyncio</code>的编程模型就是一个消息循环。<code>asyncio</code>模块内部实现了<code>EventLoop</code>，把需要执行的协程扔到<code>EventLoop</code>中执行，就实现了异步IO。</p><p>用<code>asyncio</code>提供的<code>@asyncio.coroutine</code>可以把一个<code>generator</code>标记为<code>coroutine</code>类型，然后在<code>coroutine</code>内部用<code>yield from</code>调用另一个<code>coroutine</code>实现异步操作。</p><p>为了简化并更好地标识异步IO，从Python 3.5开始引入了新的语法<code>async</code>和<code>await</code>，可以让<code>coroutine</code>的代码更简洁易读。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">fetch_url</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> response:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">await</span> response.text()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    urls = [</span><br><span class="line">        <span class="string">&#x27;https://www.baidu.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https://www.taobao.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https://www.jd.com&#x27;</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    tasks = [fetch_url(url) <span class="keyword">for</span> url <span class="keyword">in</span> urls]</span><br><span class="line"></span><br><span class="line">    results = <span class="keyword">await</span> asyncio.gather(*tasks)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    loop.run_until_complete(main())</span><br></pre></td></tr></table></figure><h3 id="aiohttp"><a href="#aiohttp" class="headerlink" title="aiohttp"></a>aiohttp</h3><p>pass</p><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><h3 id="SQLite"><a href="#SQLite" class="headerlink" title="SQLite"></a>SQLite</h3><p>SQLite是一种嵌入式数据库，它的数据库就是一个文件。由于SQLite本身是C写的，而且体积很小，所以，经常被集成到各种应用程序中，甚至在iOS和Android的App中都可以集成。</p><p>Python就内置了SQLite3，所以，在Python中使用SQLite，不需要安装任何东西，直接使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SQLiteConnection</span>:  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):  </span><br><span class="line">        <span class="comment"># 连接到SQLite数据库  </span></span><br><span class="line">        <span class="comment"># 数据库文件是test.db  </span></span><br><span class="line">        <span class="comment"># 如果文件不存在，会自动在当前目录创建  </span></span><br><span class="line">        self.conn = sqlite3.connect(<span class="string">&#x27;test.db&#x27;</span>)  </span><br><span class="line">        <span class="comment"># 创建一个Cursor  </span></span><br><span class="line">        self.cursor = self.conn.cursor()  </span><br><span class="line">        <span class="keyword">return</span> self.cursor  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):  </span><br><span class="line">        <span class="comment"># 关闭Cursor  </span></span><br><span class="line">        <span class="keyword">if</span> self.cursor:  </span><br><span class="line">            self.cursor.close()  </span><br><span class="line">        <span class="comment"># 提交事务并关闭连接  </span></span><br><span class="line">        <span class="keyword">if</span> self.conn:  </span><br><span class="line">            self.conn.commit()  </span><br><span class="line">            self.conn.close()  </span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> SQLiteConnection() <span class="keyword">as</span> cursor:  </span><br><span class="line">    <span class="comment"># 插入一条记录  </span></span><br><span class="line">    cursor.execute(<span class="string">&#x27;insert into user (id, name) values (?, ?)&#x27;</span>, (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;Alice&#x27;</span>))  </span><br><span class="line">    <span class="built_in">print</span>(cursor.rowcount)  </span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> SQLiteConnection() <span class="keyword">as</span> cursor:  </span><br><span class="line">    <span class="comment"># 更新记录  </span></span><br><span class="line">    cursor.execute(<span class="string">&#x27;update user set name = ? where id = ?&#x27;</span>, (<span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;2&#x27;</span>))  </span><br><span class="line">    <span class="built_in">print</span>(cursor.rowcount)  </span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> SQLiteConnection() <span class="keyword">as</span> cursor:  </span><br><span class="line">    <span class="comment"># 删除记录  </span></span><br><span class="line">    cursor.execute(<span class="string">&#x27;delete from user where id = ?&#x27;</span>, (<span class="string">&#x27;2&#x27;</span>,))  </span><br><span class="line">    <span class="built_in">print</span>(cursor.rowcount)</span><br></pre></td></tr></table></figure><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><p><strong>安装mysql驱动</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mysql-connector-python </span><br></pre></td></tr></table></figure><p><strong>使用案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mysql.connector  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySQLConnection</span>:  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):  </span><br><span class="line">        <span class="comment"># 建立数据库连接  </span></span><br><span class="line">        self.conn = mysql.connector.connect(user=<span class="string">&#x27;root&#x27;</span>, password=<span class="string">&#x27;password&#x27;</span>, database=<span class="string">&#x27;test&#x27;</span>)  </span><br><span class="line">        <span class="comment"># 创建游标对象  </span></span><br><span class="line">        self.cursor = self.conn.cursor()  </span><br><span class="line">        <span class="keyword">return</span> self.cursor  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):  </span><br><span class="line">        <span class="comment"># 关闭游标  </span></span><br><span class="line">        <span class="keyword">if</span> self.cursor:  </span><br><span class="line">            self.cursor.close()  </span><br><span class="line">        <span class="comment"># 提交事务并关闭连接  </span></span><br><span class="line">        <span class="keyword">if</span> self.conn:  </span><br><span class="line">            self.conn.commit()  </span><br><span class="line">            self.conn.close()  </span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> MySQLConnection() <span class="keyword">as</span> cursor:  </span><br><span class="line">    <span class="comment"># 创建user表  </span></span><br><span class="line">    cursor.execute(<span class="string">&#x27;create table user (id varchar(20) primary key, name varchar(20))&#x27;</span>)  </span><br><span class="line">    <span class="comment"># 插入一行记录  </span></span><br><span class="line">    cursor.execute(<span class="string">&#x27;insert into user (id, name) values (%s, %s)&#x27;</span>, [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;Michael&#x27;</span>])  </span><br><span class="line">    <span class="built_in">print</span>(cursor.rowcount)  </span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> MySQLConnection() <span class="keyword">as</span> cursor:  </span><br><span class="line">    <span class="comment"># 查询记录  </span></span><br><span class="line">    cursor.execute(<span class="string">&#x27;select * from user where id = %s&#x27;</span>, (<span class="string">&#x27;1&#x27;</span>,))  </span><br><span class="line">    values = cursor.fetchall()  </span><br><span class="line">    <span class="built_in">print</span>(values)</span><br></pre></td></tr></table></figure><h3 id="SQLAlchemy"><a href="#SQLAlchemy" class="headerlink" title="SQLAlchemy"></a>SQLAlchemy</h3><ul><li><p>连接已有数据库</p><p>连接mysql需要额外安装mysql驱动 mysql-connector-python , 才能成功连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mysql-connector-python  </span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, String, create_engine, DateTime, Integer</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> declarative_base</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建对象的基类:</span></span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义User对象:</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;t_user&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据库表结构  可以在mysql中DESCRIBE t_user; 查看表结构</span></span><br><span class="line">    <span class="built_in">id</span> = Column(String(<span class="number">20</span>), primary_key=<span class="literal">True</span>)</span><br><span class="line">    avatar = Column(String(<span class="number">255</span>))</span><br><span class="line">    create_time = Column(DateTime)</span><br><span class="line">    email = Column(String(<span class="number">255</span>))</span><br><span class="line">    nickname = Column(String(<span class="number">255</span>))</span><br><span class="line">    password = Column(String(<span class="number">255</span>))</span><br><span class="line">    <span class="built_in">type</span> = Column(Integer)</span><br><span class="line">    update_time = Column(DateTime)</span><br><span class="line">    username = Column(String(<span class="number">255</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化数据库连接:</span></span><br><span class="line">engine = create_engine(<span class="string">&#x27;mysql+mysqlconnector://root:root@localhost:3306/blog&#x27;</span>)</span><br><span class="line"><span class="comment"># 创建DBSession类型:</span></span><br><span class="line">DBSession = sessionmaker(bind=engine)</span><br></pre></td></tr></table></figure><ul><li><p>查找数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 所有查找 等同于 select * from t_user;</span></span><br><span class="line"><span class="comment"># 创建会话</span></span><br><span class="line">session = DBSession()</span><br><span class="line"><span class="comment"># 查询所有用户数据</span></span><br><span class="line">users = session.query(User).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment"># 打印用户数据</span></span><br><span class="line"><span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line">    <span class="built_in">print</span>(user.<span class="built_in">id</span>, user.username)  <span class="comment"># 根据实际列名打印相应的数据</span></span><br><span class="line"><span class="comment"># 关闭会话</span></span><br><span class="line">session.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">## 过滤查找 等同于 select * from t_user where id=&#x27;admin&#x27;;</span></span><br><span class="line"><span class="comment"># 创建会话  </span></span><br><span class="line">session = DBSession()  </span><br><span class="line"><span class="comment"># 查询用户名为 &quot;admin&quot; 的用户  </span></span><br><span class="line">user = session.query(User).filter_by(username=<span class="string">&quot;admin&quot;</span>).first()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">.first() 是 SQLAlchemy 查询的方法，用于获取查询结果中的第一个对象。如果查询返回多个结果，则只返回第一个匹配的对象；如果查询没有找到匹配项，则返回 None。</span></span><br><span class="line"><span class="string">如果要匹配多个结果，你可以使用 .all() 方法来获取查询返回的所有对象。</span></span><br><span class="line"><span class="string">users = session.query(User).filter_by(username=&quot;example_username&quot;).all()  </span></span><br><span class="line"><span class="string">for user in users:  </span></span><br><span class="line"><span class="string">    print(user.id, user.avatar, user.email)  </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> user:  </span><br><span class="line">    <span class="built_in">print</span>(user.<span class="built_in">id</span>, user.avatar, user.email)  </span><br><span class="line"><span class="comment"># 关闭会话  </span></span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure></li><li><p>更新数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建会话  </span></span><br><span class="line">session = DBSession()  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询需要更新的用户  </span></span><br><span class="line">user = session.query(User).filter_by(username=<span class="string">&quot;admin&quot;</span>).first()  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> user:  </span><br><span class="line">    user.nickname = <span class="string">&quot;admin123&quot;</span>  <span class="comment"># 更新昵称  </span></span><br><span class="line">    session.commit()  <span class="comment"># 提交更改  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭会话  </span></span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure></li><li><p>新增数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建会话</span></span><br><span class="line">session = DBSession()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个新用户对象并填充所有字段</span></span><br><span class="line">new_user = User(</span><br><span class="line">    avatar=<span class="string">&#x27;https://example.com/avatar.jpg&#x27;</span>,</span><br><span class="line">    create_time=datetime.utcnow(),</span><br><span class="line">    email=<span class="string">&#x27;new_email@example.com&#x27;</span>,</span><br><span class="line">    nickname=<span class="string">&#x27;New User&#x27;</span>,</span><br><span class="line">    password=<span class="string">&#x27;new_password123&#x27;</span>,</span><br><span class="line">    <span class="built_in">type</span>=<span class="number">2</span>,</span><br><span class="line">    update_time=datetime.utcnow(),</span><br><span class="line">    username=<span class="string">&#x27;new_username&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将新用户对象添加到会话中</span></span><br><span class="line">session.add(new_user)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交更改至数据库</span></span><br><span class="line">session.commit()</span><br></pre></td></tr></table></figure></li><li><p>删除数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建会话  </span></span><br><span class="line">session = DBSession()  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询需要删除的用户  </span></span><br><span class="line">user = session.query(User).filter_by(username=<span class="string">&quot;admin&quot;</span>).first()  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> user:  </span><br><span class="line">    session.delete(user)  <span class="comment"># 删除用户  </span></span><br><span class="line">    session.commit()  <span class="comment"># 提交更改  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭会话  </span></span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure></li><li><p>多表查询</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接 User, UserPost, 和 Post 表  </span></span><br><span class="line">query = session.query(User).join(User.posts).join(Post)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加查询条件  </span></span><br><span class="line">query = query.<span class="built_in">filter</span>(User.username == <span class="string">&#x27;admin&#x27;</span>)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取查询结果  </span></span><br><span class="line">results = query.<span class="built_in">all</span>()  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历结果并访问属性  </span></span><br><span class="line"><span class="keyword">for</span> user, post <span class="keyword">in</span> results:  </span><br><span class="line">    <span class="built_in">print</span>(user.username, post.title, post.content)</span><br></pre></td></tr></table></figure></li><li><p>匹配以特定字符串开头的值：</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">query <span class="operator">=</span> session.query(<span class="keyword">User</span>).<span class="keyword">filter</span>(User.username.like(<span class="string">&#x27;prefix%&#x27;</span>))  </span><br><span class="line"># 这将返回所有用户名以 &quot;prefix&quot; 开头的用户。</span><br></pre></td></tr></table></figure><ul><li>匹配以特定字符串结尾的值：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">query <span class="operator">=</span> session.query(<span class="keyword">User</span>).<span class="keyword">filter</span>(User.username.like(<span class="string">&#x27;%suffix&#x27;</span>)) </span><br><span class="line"># 这将返回所有用户名以 &quot;suffix&quot; 结尾的用户。</span><br></pre></td></tr></table></figure><ul><li>匹配包含特定字符串的值：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">query <span class="operator">=</span> session.query(<span class="keyword">User</span>).<span class="keyword">filter</span>(User.username.like(<span class="string">&#x27;%keyword%&#x27;</span>))  </span><br><span class="line"># 这将返回所有用户名中包含 &quot;keyword&quot; 的用户。</span><br></pre></td></tr></table></figure><ul><li>匹配特定长度的字符串：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">query <span class="operator">=</span> session.query(<span class="keyword">User</span>).<span class="keyword">filter</span>(User.username.like(<span class="string">&#x27;___&#x27;</span>))  </span><br><span class="line"># 这将返回用户名长度为 <span class="number">3</span> 的用户。</span><br></pre></td></tr></table></figure><ul><li>区间查询：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">query <span class="operator">=</span> session.query(<span class="keyword">User</span>).<span class="keyword">filter</span>(User.age.between(<span class="number">18</span>, <span class="number">30</span>))  </span><br><span class="line"># 这将返回所有年龄在 <span class="number">18</span> 到 <span class="number">30</span> 岁之间的用户。</span><br></pre></td></tr></table></figure><ul><li>区间排序：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">query <span class="operator">=</span> session.query(<span class="keyword">User</span>).order_by(User.age.asc())    </span><br><span class="line"># 这将返回按年龄升序排列的所有用户。</span><br><span class="line"></span><br><span class="line">query <span class="operator">=</span> session.query(<span class="keyword">User</span>).order_by(User.age.desc())</span><br><span class="line"># 这将返回按年龄降序排列的所有用户。</span><br></pre></td></tr></table></figure><ul><li>回滚操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 回滚操作示例  </span></span><br><span class="line"><span class="keyword">try</span>:  </span><br><span class="line">    <span class="comment"># 执行一些数据库操作  </span></span><br><span class="line">    session.commit()  </span><br><span class="line"><span class="keyword">except</span>:  </span><br><span class="line">    <span class="comment"># 如果出现异常，执行回滚操作  </span></span><br><span class="line">    session.rollback()  </span><br></pre></td></tr></table></figure><ul><li>函数操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 函数操作示例  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_user_by_id</span>(<span class="params">user_id</span>):  </span><br><span class="line">    <span class="keyword">return</span> session.query(User).<span class="built_in">filter</span>(User.<span class="built_in">id</span> == user_id).first()  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用函数获取用户对象  </span></span><br><span class="line">user = get_user_by_id(<span class="number">3</span>)  </span><br><span class="line"><span class="built_in">print</span>(user.username)</span><br></pre></td></tr></table></figure><ul><li><p>缓存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, String, create_engine, DateTime, Integer, Index  </span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker  </span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> declarative_base  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建对象的基类:  </span></span><br><span class="line">Base = declarative_base()  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义User对象:  </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">Base</span>):  </span><br><span class="line">    __tablename__ = <span class="string">&#x27;t_user&#x27;</span>  </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 数据库表结构  </span></span><br><span class="line">    <span class="built_in">id</span> = Column(String(<span class="number">20</span>), primary_key=<span class="literal">True</span>)  </span><br><span class="line">    avatar = Column(String(<span class="number">255</span>))  </span><br><span class="line">    create_time = Column(DateTime)  </span><br><span class="line">    email = Column(String(<span class="number">255</span>))  </span><br><span class="line">    nickname = Column(String(<span class="number">255</span>))  </span><br><span class="line">    password = Column(String(<span class="number">255</span>))  </span><br><span class="line">    <span class="built_in">type</span> = Column(Integer)  </span><br><span class="line">    update_time = Column(DateTime)  </span><br><span class="line">    username = Column(String(<span class="number">255</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化数据库连接:  </span></span><br><span class="line">engine = create_engine(<span class="string">&#x27;mysql+mysqlconnector://root:root@localhost:3306/blog&#x27;</span>)  </span><br><span class="line"><span class="comment"># 创建DBSession类型:  </span></span><br><span class="line">DBSession = sessionmaker(bind=engine)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 缓存操作示例（需要第三方库支持）：  </span></span><br><span class="line"><span class="keyword">from</span> flask_caching <span class="keyword">import</span> Cache  </span><br><span class="line"></span><br><span class="line">cache = Cache()  </span><br><span class="line"></span><br><span class="line"><span class="meta">@cache.memoize(<span class="params">timeout=<span class="number">60</span></span>)  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_user_by_id</span>(<span class="params">user_id</span>):  </span><br><span class="line">    <span class="keyword">return</span> DBSession().query(User).<span class="built_in">filter</span>(User.<span class="built_in">id</span> == user_id).first()  </span><br><span class="line"></span><br><span class="line">user1 = get_user_by_id(<span class="number">1</span>)  <span class="comment"># 第一次查询会被缓存  </span></span><br><span class="line">user2 = get_user_by_id(<span class="number">1</span>)  <span class="comment"># 第二次不会请求数据库，直接取缓存</span></span><br></pre></td></tr></table></figure></li><li><p>缓存更新策略</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 缓存更新策略示例：  </span></span><br><span class="line"><span class="comment"># 1. 缓存失效策略：在数据更新后使缓存失效  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_user</span>(<span class="params">user_id</span>):  </span><br><span class="line">    <span class="comment"># 更新用户信息的操作  </span></span><br><span class="line">    <span class="comment"># 在更新完成后，使缓存失效  </span></span><br><span class="line">    cache.delete_memoized(get_user_by_id, user_id)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 定时刷新策略：定期刷新缓存  </span></span><br><span class="line"><span class="keyword">from</span> apscheduler.schedulers.background <span class="keyword">import</span> BackgroundScheduler  </span><br><span class="line"></span><br><span class="line">scheduler = BackgroundScheduler()  </span><br><span class="line">scheduler.add_job(update_cache, <span class="string">&#x27;interval&#x27;</span>, minutes=<span class="number">30</span>)  <span class="comment"># 每30分钟刷新一次缓存  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 事件驱动更新：使用事件机制通知缓存更新  </span></span><br><span class="line"><span class="comment"># 假设有一个事件触发器在用户信息更新时触发事件  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_user_update</span>(<span class="params">user_id</span>):  </span><br><span class="line">    <span class="comment"># 更新用户信息后，触发事件通知缓存更新  </span></span><br><span class="line">    cache.delete_memoized(get_user_by_id, user_id)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象字面量代替Switch</title>
      <link href="/2023/06/08/%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F%E4%BB%A3%E6%9B%BFswitch/"/>
      <url>/2023/06/08/%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F%E4%BB%A3%E6%9B%BFswitch/</url>
      
        <content type="html"><![CDATA[<p>当我们需要根据一个变量的不同取值执行不同的逻辑时，通常会使用 <code>switch</code> 语句。但是在某些情况下，可以使用对象字面量（即普通的 JavaScript 对象）来代替 <code>switch</code> 语句，使代码更加简洁和易于维护。</p><p>以下是一个使用对象字面量代替 <code>switch</code> 的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 switch 语句  </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getFruitColor</span>(<span class="params">fruit</span>) &#123;  </span><br><span class="line">  <span class="keyword">let</span> color;  </span><br><span class="line">  <span class="keyword">switch</span> (fruit) &#123;  </span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;apple&#x27;</span>:  </span><br><span class="line">      color = <span class="string">&#x27;red&#x27;</span>;  </span><br><span class="line">      <span class="keyword">break</span>;  </span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;banana&#x27;</span>:  </span><br><span class="line">      color = <span class="string">&#x27;yellow&#x27;</span>;  </span><br><span class="line">      <span class="keyword">break</span>;  </span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;grape&#x27;</span>:  </span><br><span class="line">      color = <span class="string">&#x27;purple&#x27;</span>;  </span><br><span class="line">      <span class="keyword">break</span>;  </span><br><span class="line">    <span class="attr">default</span>:  </span><br><span class="line">      color = <span class="string">&#x27;unknown&#x27;</span>;  </span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="keyword">return</span> color;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用对象字面量代替 switch  </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getFruitColor</span>(<span class="params">fruit</span>) &#123;  </span><br><span class="line">  <span class="keyword">const</span> fruitColors = &#123;  </span><br><span class="line">    <span class="attr">apple</span>: <span class="string">&#x27;red&#x27;</span>,  </span><br><span class="line">    <span class="attr">banana</span>: <span class="string">&#x27;yellow&#x27;</span>,  </span><br><span class="line">    <span class="attr">grape</span>: <span class="string">&#x27;purple&#x27;</span>,  </span><br><span class="line">    <span class="attr">unknown</span>: <span class="string">&#x27;unknown&#x27;</span>  </span><br><span class="line">  &#125;;  </span><br><span class="line">  </span><br><span class="line">   <span class="keyword">return</span> fruitColors[fruit] || fruitColors[<span class="string">&#x27;unknown&#x27;</span>];  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getFruitColor</span>(<span class="string">&#x27;apple&#x27;</span>)); <span class="comment">// 输出：&quot;red&quot;  </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getFruitColor</span>(<span class="string">&#x27;watermelon&#x27;</span>)); <span class="comment">// 输出：&quot;unknown&quot;  </span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js继承</title>
      <link href="/2023/06/07/js%E7%BB%A7%E6%89%BF/"/>
      <url>/2023/06/07/js%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h4 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a><strong>原型链继承</strong></h4><p>​原型链继承是一种实现对象之间继承关系的方法，通过让一个对象的原型指向另一个对象，从而使得子对象可以继承父对象的属性和方法</p><p>​步骤：</p><ol><li><strong>创建父对象</strong>：首先创建一个父对象，可以是一个普通对象或者一个构造函数。</li><li><strong>创建子对象</strong>：然后创建一个子对象，通过将子对象的原型指向父对象来实现继承。</li><li><strong>继承属性和方法</strong>：子对象通过原型链继承了父对象的属性和方法，可以访问和使用它们</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建了一个父对象parent，其中包含一个sayHello方法。然后我们创建了一个子对象child，通过Object.create()方法将子对象的原型指向父对象</span></span><br><span class="line"><span class="keyword">let</span> parent = &#123;</span><br><span class="line">    <span class="attr">sayHello</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello from parent!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 创建一个子对象，并将其原型指向父对象</span></span><br><span class="line"><span class="keyword">let</span> child = <span class="title class_">Object</span>.<span class="title function_">create</span>(parent);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子对象继承父对象的方法</span></span><br><span class="line">child.<span class="title function_">sayHello</span>(); <span class="comment">// Output: Hello from parent!</span></span><br></pre></td></tr></table></figure><p>其他：</p><ol><li><strong>原型链继承的问题</strong>：原型链继承有一个问题，就是所有子对象共享父对象的属性和方法。这意味着<strong>如果一个子对象修改了继承的属性或方法，会影响到所有其他子对象。</strong>可以思考如何解决这个问题。</li><li><strong>多层继承</strong>：可以尝试创建多层继承关系，即子对象的原型指向另一个子对象，从而实现多层继承。</li><li><strong>构造函数和原型链结合</strong>：可以结合构造函数和原型链继承来实现更灵活的继承方式，即使用构造函数定义对象的特定属性，使用原型链继承共享的属性和方法</li></ol><h4 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a><strong>构造函数继承</strong></h4><p>​构造函数继承是一种实现对象之间继承关系的方法，通过在子构造函数中调用父构造函数来实现属性的继承。这种继承方式也被称为经典继承或伪经典继承。</p><p>​步骤：</p><ol><li><strong>定义父构造函数</strong>：首先定义一个父构造函数，该构造函数包含要被继承的属性和方法。</li><li><strong>定义子构造函数</strong>：然后定义一个子构造函数，通过在子构造函数中调用父构造函数来继承父构造函数的属性。</li><li><strong>继承属性</strong>：子对象通过构造函数继承父对象的属性，每个子对象都有自己的一份属性副本。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义了一个父构造函数Animal和一个子构造函数Dog。在子构造函数中，通过Animal.call(this, name)调用父构造函数来继承父对象的属性。这样子对象就可以拥有父对象的属性和方法。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在父构造函数的原型上添加方法</span></span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;My name is &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义子构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dog</span>(<span class="params">name, breed</span>) &#123;</span><br><span class="line">    <span class="comment">// 继承父构造函数的属性</span></span><br><span class="line">    <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">breed</span> = breed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个子对象</span></span><br><span class="line"><span class="keyword">let</span> myDog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;Buddy&#x27;</span>, <span class="string">&#x27;Labrador&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子对象继承父对象的方法</span></span><br><span class="line">myDog.<span class="title function_">sayName</span>(); <span class="comment">// Output: My name is Buddy</span></span><br></pre></td></tr></table></figure><p>其他：</p><ol><li><strong>原型链与构造函数继承结合</strong>：可以结合原型链和构造函数继承来实现更灵活的继承方式，即使用构造函数继承属性，使用原型链继承共享的方法。</li><li><strong>继承多个构造函数</strong>：可以尝试在子构造函数中调用多个父构造函数来继承多个对象的属性。</li><li><strong>继承方法</strong>：除了继承属性，还可以尝试在子构造函数中继承父对象的方法，而不仅仅是属性。</li></ol><h4 id="组合式继承"><a href="#组合式继承" class="headerlink" title="组合式继承"></a><strong>组合式继承</strong></h4><p>​组合式继承（Combination Inheritance）是一种结合了构造函数继承和原型链继承的继承方式，可以解决构造函数继承和原型链继承各自的缺点，实现属性和方法的有效继承</p><p>​步骤：</p><ol><li><strong>构造函数继承</strong>：通过在子构造函数中调用父构造函数来继承属性。</li><li><strong>原型链继承</strong>：通过将子构造函数的原型指向一个父构造函数的实例来继承方法。</li><li><strong>优点</strong>：组合式继承结合了构造函数继承和原型链继承的优点，避免了它们各自的缺点，实现了属性和方法的有效继承</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义了一个父构造函数Animal和一个子构造函数Dog。在子构造函数中，通过Animal.call(this, name)调用父构造函数来继承父对象的属性，然后通过Dog.prototype = Object.create(Animal.prototype)来继承父对象的方法。这样子对象就可以拥有父对象的属性和方法。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在父构造函数的原型上添加方法</span></span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;My name is &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义子构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dog</span>(<span class="params">name, breed</span>) &#123;</span><br><span class="line">    <span class="comment">// 继承父构造函数的属性</span></span><br><span class="line">    <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">breed</span> = breed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承父构造函数的方法</span></span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Dog</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个子对象</span></span><br><span class="line"><span class="keyword">let</span> myDog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;Buddy&#x27;</span>, <span class="string">&#x27;Labrador&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子对象继承父对象的属性和方法</span></span><br><span class="line">myDog.<span class="title function_">sayName</span>(); <span class="comment">// Output: My name is Buddy</span></span><br></pre></td></tr></table></figure><ol><li><strong>优化组合式继承</strong>：可以进一步优化组合式继承，避免调用两次父构造函数，以提高性能。</li><li><strong>ES6类继承</strong>：可以尝试使用ES6中的类继承语法来实现继承，更加简洁和易读。</li><li><strong>混合继承</strong>：可以结合多种继承方式，如构造函数继承、原型链继承、组合式继承等，来满足不同的继承需求。</li></ol><h4 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a><strong>寄生组合式继承</strong></h4><p>​寄生组合式继承（Parasitic Combination Inheritance）是对组合式继承的一种优化，通过使用寄生式继承来减少调用父构造函数的次数，提高性能。</p><p>​优缺点：</p><ol><li><strong>组合式继承的缺点</strong>：组合式继承会调用两次父构造函数，一次是在子构造函数中继承属性时，另一次是在设置子构造函数的原型时。这样会导致父构造函数被调用两次，影响性能。</li><li><strong>寄生组合式继承的优化</strong>：寄生组合式继承通过使用一个空函数作为中介，来减少对父构造函数的不必要调用，提高性能。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义了一个寄生函数inheritPrototype，它通过创建父构造函数原型的副本，并将其赋值给子构造函数的原型，来实现寄生组合式继承。这样就避免了多次调用父构造函数，提高了性能。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在父构造函数的原型上添加方法</span></span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;My name is &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义寄生函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">inheritPrototype</span>(<span class="params">subType, superType</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> prototype = <span class="title class_">Object</span>.<span class="title function_">create</span>(superType.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// 创建父构造函数原型的副本</span></span><br><span class="line">    prototype.<span class="property">constructor</span> = subType; <span class="comment">// 修正constructor属性</span></span><br><span class="line">    subType.<span class="property"><span class="keyword">prototype</span></span> = prototype; <span class="comment">// 设置子构造函数的原型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义子构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dog</span>(<span class="params">name, breed</span>) &#123;</span><br><span class="line">    <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name); <span class="comment">// 继承父构造函数的属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">breed</span> = breed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用寄生式继承</span></span><br><span class="line"><span class="title function_">inheritPrototype</span>(<span class="title class_">Dog</span>, <span class="title class_">Animal</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个子对象</span></span><br><span class="line"><span class="keyword">let</span> myDog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;Buddy&#x27;</span>, <span class="string">&#x27;Labrador&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子对象继承父对象的属性和方法</span></span><br><span class="line">myDog.<span class="title function_">sayName</span>(); <span class="comment">// Output: My name is Buddy</span></span><br></pre></td></tr></table></figure><p>其他：</p><ol><li><strong>继承多个父对象</strong>：可以尝试在寄生函数中实现继承多个父对象的属性和方法。</li><li><strong>优化寄生式继承</strong>：可以进一步优化寄生式继承的实现方式，提高代码的可读性和性能。</li><li><strong>使用工厂模式</strong>：可以结合工厂模式来改进继承的实现方式，实现更灵活的继承方式</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typeof和instanceof判断对象类型</title>
      <link href="/2023/05/29/typeof%E5%92%8Cinstanceof%E5%88%A4%E6%96%AD%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B/"/>
      <url>/2023/05/29/typeof%E5%92%8Cinstanceof%E5%88%A4%E6%96%AD%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="typeof-和-instanceof-判断类型对象"><a href="#typeof-和-instanceof-判断类型对象" class="headerlink" title="typeof 和 instanceof 判断类型对象"></a>typeof 和 instanceof 判断类型对象</h4><ul><li>typeof : 适用于判断基本类型、方法对象等。判断所有对象，都返回对象[Object, Object]</li><li>instanceof : 适用于判断对象(Object)。判断对象比较详细</li></ul><ol><li><code>typeof</code> 操作符：</li></ol><ul><li>优点：<ul><li><code>typeof</code> 可以用来判断基本数据类型和函数类型。</li><li>使用简单，对于基本数据类型和函数，都可以直接使用 <code>typeof</code> 进行判断。</li></ul></li><li>缺点：<ul><li>对于引用数据类型（如数组、对象等），使用 <code>typeof</code> 则无法准确区分其具体的子类型。</li><li>对于 null 类型，使用 typeof 返回的是 “object”，这可能会导致混淆。</li></ul></li></ul><p>示例使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">console.log(typeof 42); // 输出: &quot;number&quot;  </span><br><span class="line">console.log(typeof &quot;hello&quot;); // 输出: &quot;string&quot;  </span><br><span class="line">console.log(typeof true); // 输出: &quot;boolean&quot;  </span><br><span class="line">console.log(typeof undefined); // 输出: &quot;undefined&quot;  </span><br><span class="line">console.log(typeof null); // 注意：输出为&quot;object&quot;，这是 typeof 的一个缺陷  </span><br><span class="line">console.log(typeof &#123;&#125;); // 输出: &quot;object&quot;  </span><br><span class="line">console.log(typeof []); // 输出: &quot;object&quot;（数组也被判断为 object）  </span><br></pre></td></tr></table></figure><ol start="2"><li><code>instanceof</code> 操作符：</li></ol><ul><li>优点：<ul><li>可以准确地判断对象的具体子类型。</li><li>对自定义构造函数创建的实例进行检查时非常有用。</li></ul></li><li>缺点：<ul><li>如果在多个框架或窗口间传递对象，则可能出现问题。因为每个窗口&#x2F;框架都有自己独立的全局执行环境和相应的构造函数。</li></ul></li></ul><p>示例使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function Car(make, model) &#123;  </span><br><span class="line">  this.make = make;  </span><br><span class="line">  this.model = model;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">let car = new Car(&#x27;Toyota&#x27;, &#x27;Corolla&#x27;);  </span><br><span class="line">console.log(car instanceof Car) ;// true  </span><br><span class="line"></span><br><span class="line">let myString = new String(&#x27;Hello&#x27;);  </span><br><span class="line">console.log(myString instanceof String);// true  </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Js重点难点</title>
      <link href="/2023/05/17/js%E9%87%8D%E7%82%B9%E9%9A%BE%E7%82%B9/"/>
      <url>/2023/05/17/js%E9%87%8D%E7%82%B9%E9%9A%BE%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h4 id="const-let-var"><a href="#const-let-var" class="headerlink" title="const let var"></a>const let var</h4><p>var 存在声明提升，值为undefined；可以重复声明，声明后被覆盖</p><p>let 不存在声明提升，所以会存在暂时性死区；在同一个作用域内不能重复声明，声明的变量在所在的代码块内有效</p><p>const 定义常量，所以一旦声明就需要立即初始化,声明的变量在所在的代码块内有效，在同一个作用域内不能重复声明</p><h4 id="js数据类型"><a href="#js数据类型" class="headerlink" title="js数据类型"></a>js数据类型</h4><ul><li><p>基本数据类型</p><ol><li>Number</li><li>String</li><li>Boolean</li><li>Undefined</li><li>null</li><li>symbol</li></ol></li><li><p>引用类型（object）</p><p>复杂数据类型统称为Object  es6新添加有 Set  Map</p></li></ul><p>基本数据类型存储在栈中；引用类型的对象存储在堆中</p><p>当变量赋值，解析器首先要确认引用类型还是基本类型</p><ul><li>声明变量时不同的内存地址分配：<ul><li>简单类型的值存放在栈中，在栈中存放的是对应的值</li><li>引用类型对应的值存储在堆中，在栈中存放的是指向堆内存的地址</li></ul></li><li>不同的类型数据导致赋值变量时的不同：<ul><li>简单类型赋值，是生成相同的值，两个对象对应不同的地址</li><li>复杂类型赋值，是将保存对象的内存地址赋值给另一个变量。也就是两个变量指向堆内存中同一个对象</li></ul></li></ul><p>!!! es6新增基本数据类型Symbol</p><p>​因为对象属性的数据类型都是字符串，会导致属性名重复；symbol就是解决对象属性名重复，导致属性值被覆盖的问题</p><ul><li><p>唯一性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>() === <span class="title class_">Symbol</span>() )<span class="comment">//false</span></span><br><span class="line"><span class="comment">//类似于NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span>() === <span class="title class_">NaN</span>() )<span class="comment">//false</span></span><br></pre></td></tr></table></figure></li><li><p>不具备迭代器接口( !Symbo.iterator ) 不能用for in  或 for of 循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">12</span>,</span><br><span class="line">    [<span class="title class_">Symbol</span>(<span class="string">&#x27;level&#x27;</span>)]: <span class="string">&#x27;A&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//需要用Reflect.ownKeys() 才能获取到所有的key</span></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(person)</span><br></pre></td></tr></table></figure></li><li><p>Symbol.for()  与 Symbol.keyFor()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">s1 == s2 <span class="comment">//true   创建Symbol.for(&#x27;foo&#x27;)会全局寻找是否之前创建过Symbol.for(&#x27;foo&#x27;)，如果有则直接使用以创建的没有则创建</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="数组常用方法"><a href="#数组常用方法" class="headerlink" title="数组常用方法"></a>数组常用方法</h4><ul><li>增<ul><li>push() unshift()splice()concat()</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//push()  接收任意数量参数，并添加到末尾，返回数组最新长度</span></span><br><span class="line"><span class="keyword">let</span> colors = []</span><br><span class="line"><span class="keyword">let</span> count = colors.<span class="title function_">push</span>(<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count) <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//unshift()  在数组开头添加任意多个值，然后返回新的数组长度</span></span><br><span class="line"><span class="keyword">let</span> colors = <span class="keyword">new</span> <span class="title class_">Array</span></span><br><span class="line"><span class="keyword">let</span> count = colors.<span class="title function_">unshift</span>(<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count) <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// splice() 传入3个参数，分别是(开始位置, 要删除的元素数量, 插入的元素...) ， 返回空数组 </span></span><br><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> removed = colors.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;orange&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors)<span class="comment">// [&quot;red&quot;, &quot;yellow&quot;, &quot;orange&quot;, &quot;blue&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(removed)  <span class="comment">//  []</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//concat()  会先创建当前数组的副本， 然后把参数添加到副本末尾，最后返回新构建的数组，不会影响原始数组</span></span><br><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> removed = colors.<span class="title function_">concat</span>(<span class="string">&quot;yellow&quot;</span>, [<span class="string">&quot;orange&quot;</span>, <span class="string">&quot;blue&quot;</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors)<span class="comment">//  [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;] </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(removed)  <span class="comment">//  [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;orange&quot;, &quot;blue&quot;]</span></span><br></pre></td></tr></table></figure><ul><li>删<ul><li>pop()shift()splice()slice()</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//pop() 用于删除数组的最后一项，返回被删除项</span></span><br><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> item = colors.<span class="title function_">pop</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item)  <span class="comment">//&quot;green&quot;</span></span><br><span class="line"><span class="variable language_">console</span>,<span class="title function_">log</span>(colors, colors.<span class="property">length</span>) <span class="comment">// [&quot;red&quot;] 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//shift() 用于删除数组第一项，同时返回删除项</span></span><br><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> item = colors.<span class="title function_">shift</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item)  <span class="comment">//&quot;red&quot;</span></span><br><span class="line"><span class="variable language_">console</span>,<span class="title function_">log</span>(colors, colors.<span class="property">length</span>) <span class="comment">// [&quot;green&quot;] 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//spice() 传入两个参数，不传第三个参数，只删减不添加,返回空数组</span></span><br><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> removed = colors.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors)<span class="comment">// [&quot;red&quot;, &quot;blue&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(removed)  <span class="comment">//  []</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//slice()用于创建一个原数组中包含的数组，生成系数组，不影响原数组</span></span><br><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;purple&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> colors2 = colors.<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> colors3 = colors.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">let</span> colors4 = colors.<span class="title function_">slice</span>(-<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> colors5 = colors.<span class="title function_">slice</span>(-<span class="number">2</span>);</span><br><span class="line"><span class="keyword">let</span> colors6 = colors.<span class="title function_">slice</span>(<span class="number">1</span>，-<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors)   <span class="comment">// [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;purple&quot;]</span></span><br><span class="line">concole.<span class="title function_">log</span>(colors2); <span class="comment">// [&quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;purple&quot;]</span></span><br><span class="line">concole.<span class="title function_">log</span>(colors3); <span class="comment">// [&quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;]</span></span><br><span class="line">concole.<span class="title function_">log</span>(colors4); <span class="comment">// [&quot;purple&quot;]</span></span><br><span class="line">concole.<span class="title function_">log</span>(colors5); <span class="comment">// [&quot;yellow&quot;, &quot;purple&quot;]</span></span><br><span class="line">concole.<span class="title function_">log</span>(colors6); <span class="comment">// [&quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;]</span></span><br></pre></td></tr></table></figure><ul><li>改<ul><li>splice()删一个加一个，相当于改</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下标</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">10</span>; <span class="comment">// 将数组中索引为2的元素修改为10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [1, 2, 10, 4, 5]</span></span><br><span class="line"><span class="comment">// splice()</span></span><br><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> removed = colors.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;red&quot;</span>, <span class="string">&quot;purple&quot;</span>); <span class="comment">// 插入两个值，删除一个元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors); <span class="comment">// red,red,purple,blue</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(removed); <span class="comment">// green，只有一个元素的数组</span></span><br></pre></td></tr></table></figure><ul><li>查<ul><li>indexOf()includes()find()</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// indexOf() 返回查找元素位置，找到返回index，找不到返回 -1</span></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line">numbers.<span class="title function_">indexOf</span>(<span class="number">4</span>) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//includes() 返回查找元素位置，找到返回true， 找不到返回 false</span></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line">numbers.<span class="title function_">includes</span>(<span class="number">4</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">find(callback[, thisArg])</span></span><br><span class="line"><span class="comment">第一个参数是函数类似一个for循环 (item, index, array) =&gt; item &gt; 10</span></span><br><span class="line"><span class="comment">element:数组中当前正在处理的元素</span></span><br><span class="line"><span class="comment">index:正在处理的元素在数组中的索引</span></span><br><span class="line"><span class="comment">array: 调用该方法的数组</span></span><br><span class="line"><span class="comment">将在调用 callbackFn 时用作 this 值*/</span></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line">numbers.<span class="title function_">find</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item &gt; <span class="number">3</span>) <span class="comment">// 当callback返回true时,会返回当前元素item，后结束循环;如果提供 thisArg 參數予 find，其將會被當作 callback 每次被呼叫的 this。若是沒提供，則會使用 undefined (en-US)。</span></span><br><span class="line"><span class="keyword">var</span> inventory = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;apples&quot;</span>, <span class="attr">quantity</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;bananas&quot;</span>, <span class="attr">quantity</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;cherries&quot;</span>, <span class="attr">quantity</span>: <span class="number">5</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isCherries</span>(<span class="params">fruit</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> fruit.<span class="property">name</span> === <span class="string">&quot;cherries&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(inventory.<span class="title function_">find</span>(isCherries));</span><br><span class="line"><span class="comment">// &#123; name: &#x27;cherries&#x27;, quantity: 5 &#125;</span></span><br></pre></td></tr></table></figure><ul><li>排序<ul><li>reverse() 反转 sort() 传入一个比较函数</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">compare</span>(<span class="params">value1, value2</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value1 &lt; value2) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;   <span class="comment">// value1 在前</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value1 &gt; value2) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//value2 在前</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//保持不变</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> values = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>];</span><br><span class="line">values.<span class="title function_">sort</span>(compare);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(values.<span class="title function_">sort</span>())<span class="comment">//[0,1,10,15,5]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(values); <span class="comment">// [0,1,5,10,15]</span></span><br></pre></td></tr></table></figure><ul><li><p>转换方法</p><ul><li>join() 方法接收一个参数，即字符串分隔符，返回包含所有项的字符串</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">12</span>,<span class="number">23</span>,<span class="number">34</span>]</span><br><span class="line"><span class="keyword">let</span> arr = array.<span class="title function_">join</span>(<span class="string">&quot;+&quot;</span>) <span class="comment">// &quot;12+23+34&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>迭代方法</p><ul><li>some()[ES6]every()[ES6]forEach()filter()map()</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//some()对数组每一项都运行传入的测试函数，如果至少有1个元素返回 true ，则这个方法返回 true</span></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> someResult = numbers.<span class="title function_">some</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item &gt; <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(someResult) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//every()对数组每一项都运行传入的测试函数，如果所有元素都返回 true ，则这个方法返回 true</span></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> everyResult = numbers.<span class="title function_">every</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item &gt; <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(everyResult) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//forEach()对数组每一项都运行传入的函数，没有返回值</span></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line">numbers.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 执行某些操作</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//filter()对数组每一项都运行传入的函数，函数返回 true 的项会组成数组之后返回</span></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> filterResult = numbers.<span class="title function_">filter</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item &gt; <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filterResult); <span class="comment">// [3,4,5,4,3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//map() 对数组每一项都运行传入的函数，返回由每次函数调用的结果构成的数组</span></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> mapResult = numbers.<span class="title function_">map</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item * <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mapResult) <span class="comment">// [2,4,6,8,10,8,6,4,2]</span></span><br></pre></td></tr></table></figure><ul><li><p>ES6新增数组方法 </p><ul><li>Array构造函数新增方法：扩展运算符Array.from()Array.of()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//扩展运算符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])<span class="comment">// 1 2 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>, ...[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>)<span class="comment">// 1 2 3 4 5</span></span><br><span class="line">[...<span class="string">&#x27;hello&#x27;</span>]<span class="comment">// [ &quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot; ]</span></span><br><span class="line">[...<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>)]<span class="comment">// [&lt;div&gt;, &lt;div&gt;, &lt;div&gt;]   伪数组转成真数组</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">伪数组：伪数组没有Array.prototype，它只是一个对象；伪数组的索引，就是那些键值对的key，没有真正的顺序可言；长度是手动设置的</span></span><br><span class="line"><span class="comment">数组：数组有Array.prototype，他是对象的同时，也是数组；数组的索引和长度是内置属性</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Array.from()将两类对象转为真正的数组：类似数组的对象和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）</span></span><br><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="attr">length</span>: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="title class_">Array</span>.<span class="title function_">from</span>(arrayLike); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br><span class="line"><span class="comment">//还可以接受第二个参数，用来对每个元素进行处理</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function">(<span class="params">x</span>) =&gt;</span> x * x)<span class="comment">// [1, 4, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Array.of()</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">没有参数的时候，返回一个空数组;</span></span><br><span class="line"><span class="comment">将一组值，转换为数组*/</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">of</span>()         <span class="comment">// []</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">3</span>)<span class="comment">// [3]</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">3</span>, <span class="number">11</span>, <span class="number">8</span>) <span class="comment">// [3,11,8]</span></span><br></pre></td></tr></table></figure><ul><li>实例对象新增方法：copyWithin()    find()、findIndex()      fill()        entries()，keys()，values()          includes()         flat()，flatMap()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fill() 使用给定值，填充一个数组</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">3</span>).<span class="title function_">fill</span>(<span class="number">7</span>)<span class="comment">// [7, 7, 7]</span></span><br><span class="line"><span class="comment">//还可以带上参数，填充到指定位置</span></span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>].<span class="title function_">fill</span>(<span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>)<span class="comment">// [&#x27;a&#x27;, 7, &#x27;c&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//entries()，keys()，values()</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">entries()是对键值对的遍历</span></span><br><span class="line"><span class="comment">keys()是对键名的遍历</span></span><br><span class="line"><span class="comment">values()是对键值的遍历*/</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [index, item] <span class="keyword">of</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].<span class="title function_">entries</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(index, item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0 &quot;a&quot;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].<span class="title function_">keys</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].<span class="title function_">values</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#x27;a&#x27;</span></span><br><span class="line"><span class="comment">// &#x27;b&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//flat()数组扁平化处理</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]].<span class="title function_">flat</span>(<span class="number">2</span>)<span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="comment">// flatMap()相当于 [[2, 4], [3, 6], [4, 8]].flat()  </span></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].<span class="title function_">flatMap</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> [x, x * <span class="number">2</span>]) <span class="comment">//[2, 4, 3, 6, 4, 8]</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="数组incloudes方法"><a href="#数组incloudes方法" class="headerlink" title="数组incloudes方法"></a>数组incloudes方法</h4><p>可以简便实现同一个属性的多种判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正常判断用法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printAnimals</span>(<span class="params">animal</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(animal === <span class="string">&#x27;dog&#x27;</span> || animal === <span class="string">&#x27;cat&#x27;</span> || animal === <span class="string">&#x27;hamster&#x27;</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`has a animal <span class="subst">$&#123;anomal&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用incloudes方法,也能实现上面的功能</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printAnimals</span>(<span class="params">animal</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> animals = [<span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;hamster&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span>(animals.<span class="title function_">includes</span>(animal))&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(animal)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">printAnimals</span>(<span class="string">&#x27;dog&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="字符串常用方法"><a href="#字符串常用方法" class="headerlink" title="字符串常用方法"></a>字符串常用方法</h4><ul><li>增concat</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//concat 用于将一个或多个字符串拼接成新字符串,不会改变原字符串</span></span><br><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello &quot;</span></span><br><span class="line"><span class="keyword">let</span> result = stringValue.<span class="title function_">concat</span>(<span class="string">&quot;work&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">//&quot;hello work&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue)  <span class="comment">//&quot;hello &quot;</span></span><br></pre></td></tr></table></figure><ul><li>删slice()substr()substring()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello word&quot;</span></span><br><span class="line"><span class="comment">//slice() 传入一个参数，或两个参数；开始截取位置，与结束位置</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">slice</span>(<span class="number">3</span>)); <span class="comment">// &quot;lo world&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">slice</span>(<span class="number">3</span>, <span class="number">7</span>)); <span class="comment">// &quot;lo w&quot;</span></span><br><span class="line"><span class="comment">//substring()传入一个参数，或两个参数；开始截取位置，与结束位置</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">substring</span>(<span class="number">3</span>)); <span class="comment">// &quot;lo world&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">substring</span>(<span class="number">3</span>,<span class="number">7</span>)); <span class="comment">// &quot;lo w&quot;</span></span><br><span class="line"><span class="comment">//substr() 传入一个参数，或两个参数；开始截取位置，与切取数量</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">substr</span>(<span class="number">3</span>)); <span class="comment">// &quot;lo world&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">substr</span>(<span class="number">3</span>, <span class="number">7</span>)); <span class="comment">// &quot;lo worl&quot;</span></span><br></pre></td></tr></table></figure><ul><li><p>改</p><ul><li>trim()trimLeft()trimRight()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;  hello world  &quot;</span></span><br><span class="line"><span class="comment">//trim()删除前后打头的所有空格符，返回新字符串</span></span><br><span class="line"><span class="keyword">let</span> trimStringValue = stringValue.<span class="title function_">trim</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(trimStringValue)   <span class="comment">// &quot;hello word&quot;</span></span><br><span class="line"><span class="comment">//trimLeft()删除前面打头所有空格，返回新字符串</span></span><br><span class="line"><span class="keyword">let</span> trimLeftStringValue = stringValue.<span class="title function_">trimLeft</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(trimLeftStringValue)<span class="comment">//“hello word  ”</span></span><br><span class="line"><span class="comment">//trimRight()删除后面打头所有空格，返回新字符串</span></span><br><span class="line"><span class="keyword">let</span> trimRightStringValue = stringValue.<span class="title function_">trimRight</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(trimRightStringValue)<span class="comment">//&quot;  hello word&quot;</span></span><br></pre></td></tr></table></figure><ul><li>repeat()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//repeat()接收一个整数参数，表示要将字符串复制多少，然后返回拼接所有副本后的结果</span></span><br><span class="line"><span class="keyword">let</span> strintValue = <span class="string">&quot;nana &quot;</span></span><br><span class="line"><span class="keyword">let</span> copyResult = stringValue.<span class="title function_">repeat</span>(<span class="number">2</span>) <span class="comment">//&quot;nana nana &quot;</span></span><br></pre></td></tr></table></figure><ul><li>padStart()    podEnd()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;foo&quot;</span></span><br><span class="line"><span class="comment">//padStart()复制字符串，如果小于指定长度，则在前面填充字符，直到长度满足,默认填充空格</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">padStart</span>(<span class="number">6</span>))<span class="comment">// &quot;   foo&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">padStart</span>(<span class="number">6</span>，<span class="string">&quot;a&quot;</span>))<span class="comment">// &quot;aaafoo&quot;</span></span><br><span class="line"><span class="comment">//padEnd()复制字符串，如果小于指定长度，则在后面填充字符，直到长度满足,默认填充空格</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">padEnd</span>(<span class="number">6</span>))<span class="comment">// &quot;foo   &quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">padEnd</span>(<span class="number">6</span>，<span class="string">&quot;a&quot;</span>))<span class="comment">// &quot;fooaaa&quot;</span></span><br></pre></td></tr></table></figure><ul><li>toLowerCase()      toUpperCase()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello word&quot;</span></span><br><span class="line"><span class="comment">// toLowerCase()  将字符串转成小写</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">toUpperCase</span>())<span class="comment">//&quot;&quot;hello word&quot;&quot;</span></span><br><span class="line"><span class="comment">// toUpperCase()  将字符串转成大写</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">toLowerCase</span>())<span class="comment">//&quot;HELLO WORD&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>查</p><ul><li>chatAt()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//chatAt()返回给定索引位置的字符</span></span><br><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello word&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">charAt</span>(<span class="number">2</span>))<span class="comment">//&quot;l&quot;</span></span><br></pre></td></tr></table></figure><ul><li>indexOf()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//indexOf()从字符串开头去搜索传入的字符串，并返回索引位置（没有找到，则返回-1）</span></span><br><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello word&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">indexOf</span>(<span class="string">&quot;o&quot;</span>))<span class="comment">//4</span></span><br></pre></td></tr></table></figure><ul><li>startsWith()includes()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从字符串中搜索传入字符串，并返回一个表示是否包含的返回布尔值</span></span><br><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello word&quot;</span></span><br><span class="line"><span class="comment">//startWith()</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">startsWith</span>(llo))<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">startsWith</span>(oll))<span class="comment">//false</span></span><br><span class="line"><span class="comment">//includes()</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">includes</span>(oll))<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">includes</span>(llo))<span class="comment">//true</span></span><br></pre></td></tr></table></figure></li><li><p>转换成数组</p><ul><li>splic() <a href="#%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95">跟 数组方法 join() 相反</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;12+13+14&quot;</span></span><br><span class="line"><span class="keyword">let</span> arr = str.<span class="title function_">split</span>(<span class="string">&quot;+&quot;</span>)<span class="comment">//[12, 23, 34]</span></span><br></pre></td></tr></table></figure></li><li><p>模板匹配</p><ul><li>match()search()replace()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;cat, bat, sat, fat&quot;</span></span><br><span class="line"><span class="comment">//match()接收一个参数，可以是正则表达式，也可以是RexExp对象，返回数组</span></span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/.at/</span>;</span><br><span class="line"><span class="keyword">let</span> matches = text.<span class="title function_">match</span>(pattern)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(matches[<span class="number">0</span>])<span class="comment">//&quot;cat&quot;只要遇到匹配的后续不会再进行匹配</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//search()接收一个参数，可以是一个正则表达式字符串，也可以是一个RegExp对象，找到则返回匹配索引，否则返回 -1</span></span><br><span class="line"><span class="keyword">let</span> pos = text.<span class="title function_">search</span>(<span class="regexp">/at/</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pos)<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//replace()接收两个参数，第一个参数为匹配的内容，第二个参数为替换的元素(可用函数),返回替换后的字符串，只会更换第一个匹配的字符串</span></span><br><span class="line"><span class="keyword">let</span> result = text.<span class="title function_">replace</span>(<span class="string">&quot;at&quot;</span>, <span class="string">&quot;omd&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)<span class="comment">//&quot;comd, bat, sat, fat&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>字符串反转（应用）</p></li></ul><ol><li>利用扩展运算符变成数组(或字符串的split() 方法)，对数组进行反转，在合并成字符串</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;123456&quot;</span></span><br><span class="line"><span class="keyword">let</span> unstr = [...str].<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);<span class="comment">//&quot;654321&quot;</span></span><br><span class="line"><span class="keyword">let</span> unstr = str.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);<span class="comment">//&quot;654321&quot;</span></span><br><span class="line"><span class="keyword">let</span> unstr = <span class="title class_">Array</span>.<span class="title function_">from</span>(str).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);<span class="comment">//&quot;654321&quot;</span></span><br><span class="line"><span class="comment">//附加什么样的数据结构能够使用扩展运算符</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>利用循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> res = [];</span><br><span class="line"><span class="keyword">for</span>(i = str.<span class="property">length</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">    res.<span class="title function_">push</span>(i+<span class="number">1</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> unstr = res.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>) <span class="comment">//&quot;654321&quot;;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><h5 id="对象便利-对象不具备迭代器数据结构，不能使用for-of-遍历"><a href="#对象便利-对象不具备迭代器数据结构，不能使用for-of-遍历" class="headerlink" title="对象便利 (对象不具备迭代器数据结构，不能使用for of 遍历)"></a>对象便利 (对象不具备迭代器数据结构，不能使用for of 遍历)</h5><ul><li>对象 for in 遍历</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">UID</span>: <span class="string">&#x27;561525&#x27;</span>,</span><br><span class="line">    <span class="attr">nickName</span>: <span class="string">&#x27;昵称&#x27;</span>,</span><br><span class="line">    <span class="attr">acatar</span>: <span class="string">&#x27;https://a.jpg&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历key</span></span><br><span class="line"><span class="keyword">for</span>(key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key)</span><br><span class="line">&#125;<span class="comment">//UIDnickNameacatat</span></span><br><span class="line"><span class="comment">//通过key遍历value</span></span><br><span class="line"><span class="keyword">for</span>(key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[key])</span><br><span class="line">&#125;<span class="comment">//561525昵称https://a.jpg</span></span><br></pre></td></tr></table></figure><ul><li>对象keys遍历</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">UID</span>: <span class="string">&#x27;561525&#x27;</span>,</span><br><span class="line">    <span class="attr">nickName</span>: <span class="string">&#x27;昵称&#x27;</span>,</span><br><span class="line">    <span class="attr">acatar</span>: <span class="string">&#x27;https://a.jpg&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)</span><br><span class="line"><span class="comment">//返回的是一个数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(keys)<span class="comment">//[&quot;UID&quot;, &quot;nickName&quot;, &quot;acatat&quot;]</span></span><br><span class="line"><span class="comment">//获取对象值,通过forEach()</span></span><br><span class="line">keys.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;item&#125;</span>:<span class="subst">$&#123;obj[item]&#125;</span>`</span>)</span><br><span class="line">&#125;)<span class="comment">//UID:561525nickName:昵称acatat:https://a.jpg</span></span><br></pre></td></tr></table></figure><ul><li>对象value遍历</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">UID</span>: <span class="string">&#x27;561525&#x27;</span>,</span><br><span class="line">    <span class="attr">nickName</span>: <span class="string">&#x27;昵称&#x27;</span>,</span><br><span class="line">    <span class="attr">acatar</span>: <span class="string">&#x27;https://a.jpg&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">values</span>(obj).<span class="title function_">forEach</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;)<span class="comment">//561525昵称https://a.jpg</span></span><br></pre></td></tr></table></figure><ul><li>对象getOwnPropertyNames 遍历</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">UID</span>: <span class="string">&#x27;561525&#x27;</span>,</span><br><span class="line">    <span class="attr">nickName</span>: <span class="string">&#x27;昵称&#x27;</span>,</span><br><span class="line">    <span class="attr">acatar</span>: <span class="string">&#x27;https://a.jpg&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(obj).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key)</span><br><span class="line">&#125;)<span class="comment">//UIDnickNameacatat</span></span><br></pre></td></tr></table></figure><ul><li>使用Reflect.ownKeys(obj) 遍历</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">UID</span>: <span class="string">&#x27;561525&#x27;</span>,</span><br><span class="line">    <span class="attr">nickName</span>: <span class="string">&#x27;昵称&#x27;</span>,</span><br><span class="line">    <span class="attr">acatar</span>: <span class="string">&#x27;https://a.jpg&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key)</span><br><span class="line">&#125;)<span class="comment">//UIDnickNameacatat</span></span><br></pre></td></tr></table></figure><ul><li>属性简写</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> onj = &#123;</span><br><span class="line">    foo,<span class="comment">//value跟key一致时可以简写</span></span><br><span class="line">    <span class="title function_">method</span>(<span class="params"></span>) &#123;<span class="comment">// 方法也可以省略 function()</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello!&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//简写的对象方法不能用作构造函数，否则会报错</span></span><br><span class="line"><span class="keyword">new</span> obj.<span class="title function_">method</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以通过函数return &#123;&#125; 返回一个对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getPoint</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> x = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> y = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;x, y&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>属性名表达式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sysbol  ES6 允许字面量定义对象时，将表达式放在括号内</span></span><br><span class="line"><span class="comment">//属性名表达式与简洁表示法，不能同时使用，会报错</span></span><br><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">  <span class="string">&#x27;first word&#x27;</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">  [lastWord]: <span class="string">&#x27;world&#x27;</span>,</span><br><span class="line">  [<span class="string">&#x27;h&#x27;</span> + <span class="string">&#x27;ello&#x27;</span>]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hi&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">a[<span class="string">&#x27;first word&#x27;</span>] <span class="comment">// &quot;hello&quot;</span></span><br><span class="line">a[lastWord] <span class="comment">// &quot;world&quot;</span></span><br><span class="line">a.<span class="title function_">hello</span>() <span class="comment">// hi</span></span><br></pre></td></tr></table></figure><ul><li>super关键字</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//this关键字总是指向函数所在的当前对象，ES6 又新增了另一个类似的关键字super，指向当前对象的原型对象</span></span><br><span class="line"><span class="keyword">const</span> proto = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="string">&#x27;world&#x27;</span>,</span><br><span class="line">  <span class="title function_">find</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="property">foo</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(obj, proto); <span class="comment">// 为obj设置原型对象</span></span><br><span class="line">obj.<span class="title function_">find</span>() <span class="comment">// &quot;hello&quot;</span></span><br></pre></td></tr></table></figure><ul><li>扩展运算符的应用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; x, y, ...z &#125; = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> &#125;;</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 2</span></span><br><span class="line">z <span class="comment">// &#123; a: 3, b: 4 &#125;</span></span><br><span class="line"><span class="comment">//解构赋值是浅拷贝</span></span><br><span class="line"><span class="comment">//对象的扩展运算符等同于使用Object.assign()方法</span></span><br></pre></td></tr></table></figure><ul><li>ES6对象新增的方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>() <span class="comment">//严格判断两个值是否相等，与 === 行为基本一致。</span></span><br><span class="line"><span class="comment">//不同点1. +0不等于-02.NaN等于自身 (这两点与 === 相反)</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>()</span><br><span class="line"><span class="comment">//Object.assign()方法用于对象的合并，将源对象source的所有可枚举属性，复制到目标对象target</span></span><br><span class="line"><span class="keyword">const</span> target = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> source1 = &#123; <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(target, source1);</span><br><span class="line">target <span class="comment">// &#123;a:1, b:2, c:3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptors</span>()<span class="comment">//返回指定对象所有自身属性（非继承属性）的描述对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Object.setPrototypeOf方法用来设置一个对象的原型对象</span></span><br><span class="line"><span class="comment">//Object.getPrototypeOf用于读取一个对象的原型对象</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>()，<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>()，<span class="title class_">Object</span>.<span class="title function_">values</span>()，<span class="title class_">Object</span>.<span class="title function_">entries</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于将一个键值对数组转为对象</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">fromEntries</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象解构</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;fafafa&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">23</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;name, age, play&#125; = person</span><br><span class="line"><span class="comment">// name = &#x27;fafafa&#x27;   age = 23  play = undefined</span></span><br></pre></td></tr></table></figure><h4 id="map数据类型使用实例"><a href="#map数据类型使用实例" class="headerlink" title="map数据类型使用实例"></a>map数据类型使用实例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj3 = &#123;</span><br><span class="line">    [obj1]: <span class="string">&#x27;11&#x27;</span>,</span><br><span class="line">    [obj2]: <span class="string">&#x27;22&#x27;</span></span><br><span class="line">    <span class="comment">// 对象key默认为字符串，如果传入的不是字符串而是对象，会将对象隐式转换为toString方法值也就是字符串，值为[Object Object] ,所以[obj2]: &#x27;22&#x27; 会覆盖[obj1]: &#x27;11&#x27; ，obj3打印只会打印&#123;[Object Object]: &#x27;22&#x27;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//而Map 数据类型就能够解决这个问题</span></span><br><span class="line"><span class="keyword">var</span> b =<span class="keyword">new</span> <span class="title class_">Map</span>().<span class="title function_">set</span>(obj1, <span class="string">&#x27;123&#x27;</span>).<span class="title function_">set</span>(obj2, <span class="string">&#x27;456&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Map(2) &#123;</span></span><br><span class="line"><span class="comment">  &#123; name: &#x27;张三&#x27; &#125; =&gt; &#x27;123&#x27;,</span></span><br><span class="line"><span class="comment">  &#123; name: &#x27;李四&#x27; &#125; =&gt; &#x27;456&#x27;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="对象解构赋值"><a href="#对象解构赋值" class="headerlink" title="对象解构赋值"></a>对象解构赋值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//解构后的变量为解构后的变量名</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">name</span>: name1, <span class="attr">age</span>: age1, hobby : hobby1&#125; = person</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">name</span>: name2, age : age2, hobby : hobby2 = <span class="string">&#x27;刷剧&#x27;</span>&#125; = person</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name1, age1, hobby1)<span class="comment">//张三 20 undefined</span></span><br><span class="line"><span class="comment">//当属性值为undefined， 我们就可以用 = 给默认值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name2, age2, hobby2) <span class="comment">//张三 20 刷剧</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象解构当遇到&#123;&#125;打头的参数前面已经声明过了需要加()或者开头打;</span></span><br><span class="line"><span class="keyword">let</span> x;</span><br><span class="line">(&#123;x&#125; = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;)</span><br><span class="line">;&#123;x&#125; = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="comment">//盲区   需要加;</span></span><br><span class="line">(&#123;&#125; = &#123;<span class="literal">true</span>， <span class="literal">false</span>&#125;);</span><br><span class="line">(&#123;&#125; = <span class="number">123</span>)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">拓展</span></span><br><span class="line"><span class="comment">JavaScript什么时候必须加分号;</span></span><br><span class="line"><span class="comment">①当一行代码是以 ( 开头的时候，则在前面补上一个分号用以避免一些语法解析错误。</span></span><br><span class="line"><span class="comment">②当一行代码是以 [ 开头的时候，则在前面补上一个分号用以避免一些语法解析错误</span></span><br><span class="line"><span class="comment">③当一行代码是以 ` 开头的时候，则在前面补上一个分号用以避免一些语法解析错误</span></span><br><span class="line"><span class="comment">JavaScript结尾时候必须加分号;</span></span><br><span class="line"><span class="comment">var name = 3</span></span><br><span class="line"><span class="comment">(function () &#123;&#125;)()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// 由于没有分号，上面的会被解析为下面的语句，导致出现报错</span></span><br><span class="line"><span class="comment">var name = 3(function () &#123;&#125;)()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><h5 id="ES6新增方法"><a href="#ES6新增方法" class="headerlink" title="ES6新增方法"></a>ES6新增方法</h5><ul><li>默认参数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">&#123;x, y = <span class="number">5</span>&#125; = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// undefined 5</span></span><br></pre></td></tr></table></figure><ul><li>函数的length属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.length将返回没有指定默认值的参数个数</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params">a</span>) &#123;&#125;).<span class="property">length</span> <span class="comment">// 1</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params">a = <span class="number">5</span></span>) &#123;&#125;).<span class="property">length</span> <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.rest 参数也不会计入length属性</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params">...args</span>) &#123;&#125;).<span class="property">length</span> <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.设置了默认值的参数不是尾参数，那么length属性也不再计入后面的参数了(只数默认参数前的参数数量)</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params">a = <span class="number">0</span>, b, c</span>) &#123;&#125;).<span class="property">length</span> <span class="comment">// 0</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params">a, b = <span class="number">1</span>, c</span>) &#123;&#125;).<span class="property">length</span> <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><ul><li>name属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回该函数的函数名</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line">f.<span class="property">name</span> <span class="comment">// &quot;&quot;</span></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line">f.<span class="property">name</span> <span class="comment">// &quot;f&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将一个具名函数赋值给一个变量，则 name属性都返回这个具名函数原本的名字</span></span><br><span class="line"><span class="keyword">const</span> bar = <span class="keyword">function</span> <span class="title function_">baz</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line">bar.<span class="property">name</span> <span class="comment">// &quot;baz&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Function构造函数返回的函数实例，name属性的值为anonymous</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">Function</span>).<span class="property">name</span> <span class="comment">// &quot;anonymous&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//bind返回的函数，name属性值会加上bound前缀</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line">foo.<span class="title function_">bind</span>(&#123;&#125;).<span class="property">name</span> <span class="comment">// &quot;bound foo&quot;</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;).<span class="title function_">bind</span>(&#123;&#125;).<span class="property">name</span> <span class="comment">// &quot;bound &quot;</span></span><br></pre></td></tr></table></figure><h4 id="ES6新增"><a href="#ES6新增" class="headerlink" title="ES6新增"></a>ES6新增</h4><h5 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h5><p>Set是es6新增的数据结构，类似于数组，但是成员的值都是唯一的，没有重复的值，我们一般称为集合  </p><ul><li>增添加某个值，返回 <code>Set</code> 结构本身</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"><span class="comment">//add()</span></span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">1</span>).<span class="title function_">add</span>(<span class="number">2</span>).<span class="title function_">add</span>(<span class="number">2</span>); <span class="comment">// 2只被添加了一次</span></span><br></pre></td></tr></table></figure><ul><li>删删除某个值，返回一个布尔值，表示删除是否成功</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"><span class="comment">//delete()</span></span><br><span class="line">s.<span class="title function_">delete</span>(<span class="number">1</span>) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><ul><li>查          判断值是否存在</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">s.<span class="title function_">has</span>(<span class="number">2</span>) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><ul><li>clear()  清除所有成员，没有返回值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">s.<span class="title function_">clear</span>()</span><br></pre></td></tr></table></figure><ul><li>遍历</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]);</span><br><span class="line"><span class="comment">//keys()：返回键名的遍历器</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.<span class="title function_">keys</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//values()：返回键值的遍历器</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.<span class="title function_">values</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//entries()：返回键值对的遍历器</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//forEach()：使用回调函数遍历每个成员</span></span><br><span class="line">set.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, key</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&#x27; : &#x27;</span> + value))</span><br></pre></td></tr></table></figure><h5 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h5><p><code>Map</code>类型是键值对的有序列表，而键和值都可以是任意类型</p><ul><li>增设置键名<code>key</code>对应的键值为<code>value</code>，然后返回整个 Map 结构;可采用链式写法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">m.<span class="title function_">set</span>(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>).<span class="title function_">set</span>(<span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>).<span class="title function_">set</span>(<span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>) <span class="comment">// 链式操作</span></span><br></pre></td></tr></table></figure><ul><li>删delete<code>方法删除某个键，返回</code>true<code>。如果删除失败，返回</code>false</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">m.<span class="title function_">delete</span>(<span class="literal">undefined</span>)</span><br></pre></td></tr></table></figure><ul><li>改<code>key</code>已经有值，则键值会被更新，否则就新生成该键</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">m.<span class="title function_">set</span>(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">m.<span class="title function_">set</span>(<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">m.<span class="title function_">get</span>(<span class="number">1</span>) <span class="comment">// &#x27;b&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>查<code>has</code>方法返回一个布尔值，表示某个键是否在当前 Map 对象之中</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;edition&#x27;</span>, <span class="number">6</span>);</span><br><span class="line">m.<span class="title function_">has</span>(<span class="string">&#x27;edition&#x27;</span>)     <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>getget<code>方法读取</code>key<code>对应的键值，如果找不到</code>key<code>，返回</code>undefined</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">m.<span class="title function_">set</span>(hello, <span class="string">&#x27;Hello ES6!&#x27;</span>) <span class="comment">// 键是函数</span></span><br><span class="line">m.<span class="title function_">get</span>(hello)  <span class="comment">// Hello ES6!</span></span><br></pre></td></tr></table></figure><ul><li>size属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;bar&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">map.<span class="property">size</span> <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><ul><li>clear <code>clear</code>方法清除所有成员，没有返回值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;bar&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line">map.<span class="title function_">clear</span>()</span><br><span class="line">map.<span class="property">size</span> <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><ul><li>遍历</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;no&#x27;</span>],[<span class="string">&#x27;T&#x27;</span>,  <span class="string">&#x27;yes&#x27;</span>]]);</span><br><span class="line"><span class="comment">//keys()：返回键名的遍历器</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> map.<span class="title function_">keys</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;F&quot;</span></span><br><span class="line"><span class="comment">// &quot;T&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//values()：返回键值的遍历器</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> map.<span class="title function_">values</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;no&quot;</span></span><br><span class="line"><span class="comment">// &quot;yes&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//entries()：返回所有成员的遍历器</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> map.<span class="title function_">entries</span>()) &#123; </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item[<span class="number">0</span>], item[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;F&quot; &quot;no&quot;</span></span><br><span class="line"><span class="comment">// &quot;T&quot; &quot;yes&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//forEach()：遍历 Map 的所有成员</span></span><br><span class="line">map.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">value, key, map</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Key: %s, Value: %s&quot;</span>, key, value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>ES6 之前， 如果对象属性是对象，则后面会覆盖前面的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;aa&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;bb&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj3 = &#123;</span><br><span class="line">    [obj1]: <span class="string">&#x27;11&#x27;</span>,</span><br><span class="line">    [obj2]: <span class="string">&#x27;22&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当属性用key存储时，如果key不是str,则会调用toString()方法把他变成str,就会变成[object Object]，两个[object Object]一样就会覆盖前面的属性</span></span><br><span class="line"><span class="comment">// 可以用Map代替对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj3) <span class="comment">// &#123;[object Object]:22&#125;</span></span><br></pre></td></tr></table></figure><h5 id="WeakSet-和-WeakMap"><a href="#WeakSet-和-WeakMap" class="headerlink" title="WeakSet 和 WeakMap"></a>WeakSet 和 WeakMap</h5><ul><li><p>WeakSet</p><ul><li><p><code>WeakSet</code>可以接受一个具有 <code>Iterable</code>接口的对象作为参数</p></li><li><p>没有遍历操作的<code>API</code></p></li><li><p>没有<code>size</code>属性</p></li><li><p><code>WeakSet</code>只能成员只能是引用类型，而不能是其他类型的值；<code>WeakSet</code>里面的引用只要在外部消失，它在 <code>WeakSet</code>里面的引用就会自动消失</p></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ws=<span class="keyword">new</span> <span class="title class_">WeakSet</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 成员不是引用类型</span></span><br><span class="line"><span class="keyword">let</span> weakSet=<span class="keyword">new</span> <span class="title class_">WeakSet</span>([<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(weakSet) <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 成员为引用类型</span></span><br><span class="line"><span class="keyword">let</span> obj1=&#123;<span class="attr">name</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">let</span> obj2=&#123;<span class="attr">name</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">let</span> ws=<span class="keyword">new</span> <span class="title class_">WeakSet</span>([obj1,obj2]); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ws) <span class="comment">//WeakSet &#123;&#123;…&#125;, &#123;…&#125;&#125;</span></span><br></pre></td></tr></table></figure><ul><li><p>WeakMap</p><ul><li><code>WeakMap</code>结构与<code>Map</code>结构类似，也是用于生成键值对的集合；在<code>API</code>中<code>WeakMap</code>与<code>Map</code>有两个区别:<ul><li>没有遍历操作的<code>API</code></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// WeakMap 可以使用 set 方法添加成员</span></span><br><span class="line"><span class="keyword">const</span> wm1 = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line"><span class="keyword">const</span> key = &#123;<span class="attr">foo</span>: <span class="number">1</span>&#125;;</span><br><span class="line">wm1.<span class="title function_">set</span>(key, <span class="number">2</span>);</span><br><span class="line">wm1.<span class="title function_">get</span>(key) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// WeakMap 也可以接受一个数组，</span></span><br><span class="line"><span class="comment">// 作为构造函数的参数</span></span><br><span class="line"><span class="keyword">const</span> k1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> k2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> wm2 = <span class="keyword">new</span> <span class="title class_">WeakMap</span>([[k1, <span class="string">&#x27;foo&#x27;</span>], [k2, <span class="string">&#x27;bar&#x27;</span>]]);</span><br><span class="line">wm2.<span class="title function_">get</span>(k2) <span class="comment">// &quot;bar&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>WeakMap</code>只接受对象作为键名（<code>null</code>除外），不接受其他类型的值作为键名；<code>WeakMap</code>的键名所指向的对象，一旦不再需要，里面的键名对象和所对应的键值对会自动消失</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// TypeError: 1 is not an object!</span></span><br><span class="line">map.<span class="title function_">set</span>(<span class="title class_">Symbol</span>(), <span class="number">2</span>)</span><br><span class="line"><span class="comment">// TypeError: Invalid value used as weak map key</span></span><br><span class="line">map.<span class="title function_">set</span>(<span class="literal">null</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// TypeError: Invalid value used as weak map key</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><ul><li><p>箭头函数this指向</p></li><li><p>箭头函数不能当做构造函数</p></li><li><p>箭头函数不可以当做迭代器</p></li></ul><h4 id="this指向-谁调用我我指向谁"><a href="#this指向-谁调用我我指向谁" class="headerlink" title="this指向(谁调用我我指向谁)"></a>this指向(谁调用我我指向谁)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">content</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(content)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//两种调用是一样，get()可以看作get.call()语法糖</span></span><br><span class="line"><span class="title function_">get</span>(<span class="string">&#x27;调用函数get&#x27;</span>)</span><br><span class="line">get.<span class="title function_">call</span>(<span class="variable language_">window</span>, <span class="string">&#x27;调用函数get&#x27;</span>)  <span class="comment">// 浏览器为window，node环境中为global</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">run</span>: <span class="keyword">function</span>(<span class="params">time</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>+“在跑步，”+time+“分钟了”)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="title function_">run</span>(<span class="number">30</span>)</span><br><span class="line">person.<span class="property">run</span>.<span class="title function_">call</span>(person, <span class="number">30</span> )</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="number">222</span>;</span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="number">111</span>,</span><br><span class="line">    <span class="attr">say</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fun = a.<span class="property">say</span> <span class="comment">//赋值了a.say的方法地址给fun</span></span><br><span class="line"><span class="title function_">fun</span>()   <span class="comment">//可以看作fun.call(window) window是全局作用域 所以时222  在node运行环境下，值为undefined</span></span><br><span class="line">a.<span class="title function_">say</span>()   <span class="comment">//a.say.call(a)   所以时111</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vat b = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="number">333</span>,</span><br><span class="line">    <span class="attr">say</span>: <span class="keyword">function</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">        <span class="title function_">fn</span>()  <span class="comment">//调用可以看作 fn.call(window)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">b.<span class="title function_">say</span>(a.<span class="property">say</span>)  <span class="comment">//222  在node运行环境下，值为undefined</span></span><br><span class="line">b.<span class="property">say</span> = a.<span class="property">say</span>  <span class="comment">//将a的say方法指向地址覆盖到b的say方法</span></span><br><span class="line">b.<span class="title function_">say</span>()  <span class="comment">//b.say.call(b) //333</span></span><br></pre></td></tr></table></figure><h4 id="改变this指向"><a href="#改变this指向" class="headerlink" title="改变this指向"></a>改变this指向</h4><p>箭头函数没有自己的this，this是外层代码块的this，this是在定义函数时绑定的。不能够使用做构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="number">11</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="number">22</span>,</span><br><span class="line">    <span class="attr">say</span>: <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">say</span>()  <span class="comment">//不适用obj.say.call(obj),箭头函数this将指向它的外层     //11  //如果外层没有name，则为undefined</span></span><br></pre></td></tr></table></figure><p>手写call、apply</p><p>作用：改变this指向 </p><p>场景:  js的继承(原型链继承；构造函数继承(使用call实现) )</p><ul><li><p>call</p><p>可以用作</p><ol><li>继承</li><li>判断复杂数据类型</li></ol><p><img src="/2023/05/17/js%E9%87%8D%E7%82%B9%E9%9A%BE%E7%82%B9/Users\发发发宝贝\AppData\Roaming\Typora\typora-user-images\image-20231115000045019.png" alt="image-20231115000045019"></p><ol start="3"><li><p>伪数组转换成数组</p><p><img src="/2023/05/17/js%E9%87%8D%E7%82%B9%E9%9A%BE%E7%82%B9/Users\发发发宝贝\AppData\Roaming\Typora\typora-user-images\image-20231115000349050.png" alt="image-20231115000349050"></p></li><li><p>手写call方法</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">getName</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//以函数的形式调用对象方法则指向window(浏览器环境)|global(nodejs环境)，以方法的形式调用时，this指向调用方法的对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: ”张三“</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为call方法是对象直接调用，有点类似是类的静态变量，每个对象方法都能调用，实现方法是直接挂在到Function构造函数的原型上。</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span>(<span class="params">context</span>) &#123;</span><br><span class="line">    <span class="comment">//这里面的this是调用该myCall方法的对象方法function</span></span><br><span class="line">    <span class="comment">//所以传入的参数第一个参数必须是function类型,不是function返回错误</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果参数为空则直接this指向window</span></span><br><span class="line">    context = context || <span class="variable language_">window</span></span><br><span class="line">    <span class="comment">//获取除第一个参数的其余参数</span></span><br><span class="line">    <span class="keyword">var</span> args = [...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">//这里直接使用this，则直接指向getName,以函数的方式调用，所以getName的this指向window，获取到的name是全局变量。但是我们可以用context传入的参数来改变getName的this</span></span><br><span class="line">    <span class="comment">//首先是确定context传入的参数对象有getName方法，直接赋予getName方法</span></span><br><span class="line">    context.<span class="property">fn</span> = <span class="variable language_">this</span></span><br><span class="line">    <span class="comment">//最后返回传入对象参数context.fn,也就是context.getName</span></span><br><span class="line">    <span class="keyword">let</span> result = contest.<span class="title function_">fn</span>(...args)<span class="comment">//对数组args解构  </span></span><br><span class="line">    <span class="keyword">delete</span> context.<span class="property">fn</span></span><br><span class="line">    <span class="keyword">return</span> result </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实际实现方法就是将传入的对象赋予该对象调用的函数，然后再用传入进去的对象调用该函数，从而达到改变this指向</span></span><br><span class="line">person.<span class="property">getName</span>.<span class="title function_">myCall</span>(person1, <span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure></li><li><p>apply</p></li></ul><p>​手写apply(其实与call方法一致，只是传入参数方式不同)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">getName</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//以函数的形式调用对象方法则指向window(浏览器环境)|global(nodejs环境)，以方法的形式调用时，this指向调用方法的对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: ”张三“</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为call方法是对象直接调用，有点类似是类的静态变量，每个对象方法都能调用，实现方法是直接挂在到Function构造函数的原型上。</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span>(<span class="params">context</span>) &#123;</span><br><span class="line">    <span class="comment">//这里面的this是调用该myCall方法的对象方法function</span></span><br><span class="line">    <span class="comment">//所以传入的参数第一个参数必须是function类型,不是function返回错误</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果参数为空则直接this指向window</span></span><br><span class="line">    context = context || <span class="variable language_">window</span></span><br><span class="line">    <span class="comment">//这里直接使用this，则直接指向getName,以函数的方式调用，所以getName的this指向window，获取到的name是全局变量。但是我们可以用context传入的参数来改变getName的this</span></span><br><span class="line">    <span class="comment">//首先是确定context传入的参数对象有getName方法，直接赋予getName方法</span></span><br><span class="line">    context.<span class="property">fn</span> = <span class="variable language_">this</span></span><br><span class="line">    <span class="comment">//判断是否传入了数组</span></span><br><span class="line">    <span class="keyword">let</span> result</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">arguments</span>[<span class="number">1</span>])&#123;</span><br><span class="line">        result = contest.<span class="title function_">fn</span>(...<span class="variable language_">arguments</span>[<span class="number">1</span>])</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        result = contest.<span class="title function_">fn</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> context.<span class="property">fn</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实际实现方法就是将传入的对象赋予该对象调用的函数，然后再用传入进去的对象调用该函数，从而达到改变this指向</span></span><br><span class="line">person.<span class="property">getName</span>.<span class="title function_">myApply</span>(person1, [<span class="number">1</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure><h4 id="js事件循环机制；宏任务与微任务-事件队列"><a href="#js事件循环机制；宏任务与微任务-事件队列" class="headerlink" title="js事件循环机制；宏任务与微任务 事件队列"></a>js事件循环机制；宏任务与微任务 事件队列</h4><ul><li><p>js语言特点 </p><ul><li>单线程</li><li>解释性语言(解释一行执行一行)</li></ul></li><li><p>event-loop</p><ul><li><p>事件循环机制 由三部分组成</p><p>调用栈、微任务队列、消息队列</p><ul><li>event-loop开始时，会从全局一行一行执行，遇到函数调用，会压入到栈中，被压入的函数称为帧，函数调用返回后从调用栈中弹出</li><li>js中的异步操作比如fetch setTimeout setInterval 压入到调用栈中的时候里面的消息会进去到消息队列中去 ，消息队列会等到调用栈清空后再执行</li><li>像promise async await 的异步操作的时候会加入到微任务中去，调用栈中加入的微任务会立马执行</li></ul></li></ul></li></ul><p><img src="/2023/05/17/js%E9%87%8D%E7%82%B9%E9%9A%BE%E7%82%B9/.%5Cjs%E9%87%8D%E7%82%B9%E9%9A%BE%E7%82%B9%5C%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6.png" alt="事件循环机制"></p><ul><li><p>异步实战</p><ul><li><p>先把异步promise化</p></li><li><p>梳理清楚逻辑上的操作顺序</p></li><li><p>组织为队列，按顺序执行</p></li></ul></li></ul><h4 id="回调地狱优化"><a href="#回调地狱优化" class="headerlink" title="回调地狱优化"></a>回调地狱优化</h4><ul><li>利用es11 的可选链式操作符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">Animal</span> = (<span class="params">&#123;type, name, gender&#125;</span>)=&gt;&#123;</span><br><span class="line">    <span class="comment">//!animal 判断animal是否为假值（包括undefined、null、false、0、&#x27;&#x27;等），如果是，则返回&#x27;no animal&#x27;。</span></span><br><span class="line">    <span class="comment">//: !type ? &#x27;type&#x27; 如果animal存在，判断type是否为假值，如果是，则返回&#x27;type&#x27;。</span></span><br><span class="line">    <span class="comment">//: !name ? &#x27;name&#x27; 如果type存在，判断name是否为假值，如果是，则返回&#x27;name&#x27;。</span></span><br><span class="line">    <span class="keyword">return</span> !animal ? <span class="string">&#x27;no animal&#x27;</span> : !type ? <span class="string">&#x27;type&#x27;</span> : !name ? <span class="string">&#x27;name&#x27;</span> : gerder ?  <span class="string">`<span class="subst">$&#123;name&#125;</span>is  a<span class="subst">$&#123;gender&#125;</span>-<span class="subst">$&#123;type&#125;</span>`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>利用提前退出和提前返回</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">Animal</span> = (<span class="params">&#123;type, name, gender&#125;</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(!type) <span class="keyword">return</span> <span class="string">&#x27;no type&#x27;</span></span><br><span class="line">    <span class="keyword">if</span>(!name) <span class="keyword">return</span> <span class="string">&#x27;no name&#x27;</span></span><br><span class="line">    <span class="keyword">if</span>(!gender) <span class="keyword">return</span> <span class="string">&#x27;no gender&#x27;</span></span><br><span class="line">    <span class="comment">//因为js解释性语言, 能往下执行便是没有报错,当上面条件都通过时返回数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span>is  a<span class="subst">$&#123;gender&#125;</span>-<span class="subst">$&#123;type&#125;</span>`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>* </p><h4 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h4><ul><li><p>[…arr]</p></li><li><p>支持展开运算符是要有Symbol.iterator</p><p>arr[Symbol.iterator]</p></li></ul><p>面试题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我们能否以某种方式为下面的语句使用展开运算而不导致类型错误 ？</span></span><br><span class="line"><span class="comment">//错误代码示例</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">z</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...obj])<span class="comment">//报错 根本原因是因为对象是不具备迭代器属性的数据结构</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//正确代码</span></span><br><span class="line">obj[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">next</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> objArr = <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj)</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">index</span> &lt; objArr.<span class="property">length</span> -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">let</span> key = objArr[<span class="variable language_">this</span>.<span class="property">index</span>]</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">index</span>++</span><br><span class="line">                <span class="keyword">return</span>&#123;</span><br><span class="line">                    <span class="attr">value</span>: obj[key]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="attr">done</span>: <span class="literal">true</span>&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">index</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...obj])  <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以在Object 构造函数的原型上添加，为所有对象提供迭代器</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES7 也提出了新的写法</span></span><br><span class="line"><span class="comment">//console.log(&#123;...objj&#125;) 会涉及到对象的拷贝操作,相当于对obj进行了浅拷贝</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;...obj&#125;) <span class="comment">// &#123;x: 1, y: 2, z: 3&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>对象转数组案例</li></ul><ol><li>使用 Object.keys() 方法获取对象的所有键，然后使用 map() 方法将每个键对应的值存入新数组中。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="title function_">map</span>(<span class="function"><span class="params">key</span> =&gt;</span> obj[key]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用 Object.values() 方法获取对象的所有值，直接将值存入新数组中。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Object</span>.<span class="title function_">values</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><ol start="3"><li>使用 Object.entries() 方法获取对象的键值对数组，然后对每个键值对进行处理。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Object</span>.<span class="title function_">entries</span>(obj).<span class="title function_">map</span>(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> value);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">#### 高效运算符  &#x27;?.&#x27; 和 &#x27;??&#x27; 和 &#x27;??=&#x27;  的区别</span><br><span class="line"></span><br><span class="line">* 可选链运算符(?.)</span><br><span class="line"></span><br><span class="line">可选链运算符, 允许读取位于连接对象深处的属性值，而不必明确验证链式中的每个引用是否有效。</span><br><span class="line"></span><br><span class="line">使用场景：当我们不确定一个对象是否存在时，调用对象属性，可以使用该操作符</span><br><span class="line"></span><br><span class="line">* 空值合并运算符(??)</span><br><span class="line"></span><br><span class="line">空值合并运算符，是一个逻辑运算符，当左侧的操作为null或undefined时，返回其右侧操作数，否则返回左侧操作数</span><br><span class="line"></span><br><span class="line">有点类似于 ||(逻辑或) ，与 || 区别在于 ??. 对0和 &quot; 会判断为真</span><br><span class="line"></span><br><span class="line">* 逻辑空赋值(??=)</span><br><span class="line"></span><br><span class="line">逻辑空赋值运算符(X ?? = Y) 仅在X是空值(null 或undefined) 时对其赋值。</span><br><span class="line"></span><br><span class="line">使用场景：当你需要通过if判断某个变量不存在时，才需要为该变量赋值时使用</span><br><span class="line"></span><br><span class="line">#### 原型和原型链</span><br><span class="line"></span><br><span class="line">1. **原型（Prototype）**：每个对象都有一个原型对象，可以通过`__proto__`属性来访问。原型对象可以包含共享的属性和方法，可以被对象实例共享。</span><br><span class="line">2. **原型链（Prototype Chain）**：当访问对象的属性或方法时，如果对象本身没有该属性或方法，JavaScript引擎会顺着原型链向上查找，直到找到对应的属性或方法或者到达原型链的顶端。</span><br><span class="line"></span><br><span class="line">~~~ js</span><br><span class="line">// 定义了一个构造函数Person，并在其原型对象上定义了一个方法greet。创建了一个Person对象实例person1，并演示了访问属性和方法以及原型链的关系</span><br><span class="line">function Person(name, age) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 在Person的原型对象上定义一个方法</span><br><span class="line">Person.prototype.greet = function() &#123;</span><br><span class="line">    console.log(`Hello, my name is $&#123;this.name&#125; and I am $&#123;this.age&#125; years old.`);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 创建一个Person对象实例</span><br><span class="line">let person1 = new Person(&#x27;Alice&#x27;, 30);</span><br><span class="line"></span><br><span class="line">// 访问实例对象的属性和方法</span><br><span class="line">console.log(person1.name); // Output: Alice</span><br><span class="line">person1.greet(); // Output: Hello, my name is Alice and I am 30 years old.</span><br><span class="line"></span><br><span class="line">// 演示原型链 实例的__proto__ === 其构造函数的prototype</span><br><span class="line">console.log(person1.__proto__ === Person.prototype); // Output: true</span><br><span class="line">// 构造函数的原型Object</span><br><span class="line">console.log(Person.prototype.__proto__ === Object.prototype); // Output: true</span><br><span class="line">// Object的原型为null</span><br><span class="line">console.log(Object.prototype.__proto__); // Output: null</span><br></pre></td></tr></table></figure><ul><li><p>其他</p><ul><li><strong>继承</strong>：通过原型链，我们可以实现对象之间的继承关系，子对象可以继承父对象的属性和方法。可以尝试创建一个新的构造函数，让它继承自<code>Person</code>构造函数，并添加新的属性或方法。</li><li><strong>原型修改</strong>：可以尝试修改<code>Person</code>构造函数的原型对象上的方法，然后看看实例对象是否能够访问到修改后的方法。</li><li><strong>原型链终止</strong>：在原型链的顶端是<code>Object.prototype</code>，它的原型是<code>null</code>。可以思考一下为什么原型链的顶端是<code>Object.prototype</code>，而不是其他对象。</li></ul></li></ul><h3 id="ES6-ES11"><a href="#ES6-ES11" class="headerlink" title="ES6 - ES11"></a>ES6 - ES11</h3><h4 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h4><h5 id="怎么理解ES6-中的Promise；使用场景"><a href="#怎么理解ES6-中的Promise；使用场景" class="headerlink" title="怎么理解ES6 中的Promise；使用场景"></a><strong>怎么理解ES6 中的Promise；使用场景</strong></h5><ul><li>介绍</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">promise解决异步操作的优点：</span></span><br><span class="line"><span class="comment">1.链式操作减低了编码难度</span></span><br><span class="line"><span class="comment">2.代码可读性明显增强   */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//未使用promise</span></span><br><span class="line"><span class="title function_">doSomething</span>(<span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line">  <span class="title function_">doSomethingElse</span>(result, <span class="keyword">function</span>(<span class="params">newResult</span>) &#123;</span><br><span class="line">    <span class="title function_">doThirdThing</span>(newResult, <span class="keyword">function</span>(<span class="params">finalResult</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;得到最终结果: &#x27;</span> + finalResult);</span><br><span class="line">    &#125;, failureCallback);</span><br><span class="line">  &#125;, failureCallback);</span><br><span class="line">&#125;, failureCallback);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用promise</span></span><br><span class="line"><span class="title function_">doSomething</span>()</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">doSomethingElse</span>(result);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">newResult</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">doThirdThing</span>(newResult);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">finalResult</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;得到最终结果: &#x27;</span> + finalResult);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(failureCallback);</span><br></pre></td></tr></table></figure><ul><li>状态</li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">promise 有3种状态</span><br><span class="line">1.pending (进行中)</span><br><span class="line">2.fulfilled (已成功)</span><br><span class="line">3.rejected(已失败)</span><br></pre></td></tr></table></figure><ul><li>特点</li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.对象的状态不受外界影响，只有异步操作的结果，可以决定当前是哪一种状态</span><br><span class="line">2.一旦状态改变（从pending变为fulfilled和从pending变为rejected），就不会再变，任何时候都可以得到这个结果</span><br></pre></td></tr></table></figure><ul><li>流程</li></ul><p><img src="/2023/05/17/js%E9%87%8D%E7%82%B9%E9%9A%BE%E7%82%B9/Users\发发发宝贝\AppData\Roaming\Typora\typora-user-images\image-20231126211227519.png" alt="image-20231126211227519"></p><ul><li>用法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject</span></span><br><span class="line"><span class="comment">resolve函数的作用是，将Promise对象的状态从“未完成”变为“成功”</span></span><br><span class="line"><span class="comment">reject函数的作用是，将Promise对象的状态从“未完成”变为“失败” */</span></span><br></pre></td></tr></table></figure><ul><li><p>实例方法</p><ul><li><p><code>Promise</code>构建出来的实例存在以下方法：</p><ul><li>then()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">then()是实例状态发生改变时的回调函数，第一个参数是resolved状态的回调函数，第二个参数是rejected状态的回调函数</span></span><br><span class="line"><span class="comment">then方法返回的是一个新的Promise实例，也就是promise能链式书写的原因*/</span></span><br><span class="line"><span class="title function_">getJSON</span>(<span class="string">&quot;/posts.json&quot;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">json</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> json.<span class="property">post</span>;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">post</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>catch()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">catch()方法是.then(null, rejection)或.then(undefined, rejection)的别名，用于指定发生错误时的回调函数*/</span></span><br><span class="line"><span class="title function_">getJSON</span>(<span class="string">&#x27;/posts.json&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">posts</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// 处理 getJSON 和 前一个回调函数运行时发生的错误</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发生错误！&#x27;</span>, error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Promise对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止</span></span><br><span class="line"><span class="title function_">getJSON</span>(<span class="string">&#x27;/post/1.json&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">post</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">getJSON</span>(post.<span class="property">commentURL</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">comments</span>) &#123;</span><br><span class="line">  <span class="comment">// some code</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// 处理前面三个Promise产生的错误</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">一般来说，使用catch方法代替then()第二个参数</span></span><br><span class="line"><span class="comment">Promise对象抛出的错误不会传递到外层代码，即不会有任何反应*/</span></span><br></pre></td></tr></table></figure><ul><li>finally()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//finally()方法用于指定不管 Promise 对象最后状态如何，都会执行的操作</span></span><br><span class="line">promise</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;···&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;···&#125;)</span><br><span class="line">.<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;···&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>构造函数方法</p><ul><li>all()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Promise.all()方法用于将多个 Promise实例，包装成一个新的 Promise实例</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> result)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> e);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;报错了&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> result)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> e);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2])</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e));</span><br><span class="line"><span class="comment">//如果p2没有自己的catch方法，就会调用Promise.all()的catch方法</span></span><br></pre></td></tr></table></figure><ul><li>race()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将多个 Promise 实例，包装成一个新的 Promise 实例;只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">race</span>([</span><br><span class="line">  <span class="title function_">fetch</span>(<span class="string">&#x27;/resource-that-may-take-a-while&#x27;</span>),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;request timeout&#x27;</span>)), <span class="number">5000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">p</span><br><span class="line">.<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="variable language_">console</span>.<span class="property">error</span>);</span><br></pre></td></tr></table></figure><ul><li>allSettled()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Promise.allSettled()方法接受一组 Promise 实例作为参数，包装成一个新的 Promise 实例</span></span><br><span class="line"><span class="comment">//只有等到所有这些参数实例都返回结果，不管是fulfilled还是rejected，包装实例才会结束</span></span><br></pre></td></tr></table></figure><ul><li>resolve()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将现有对象转为 Promise对象</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&#x27;foo&#x27;</span>))</span><br></pre></td></tr></table></figure><ul><li>reject()</li><li>try()</li></ul></li><li><p>使用场景</p><ol><li>将图片的加载写成一个<code>Promise</code>，一旦加载完成，<code>Promise</code>的状态就发生变化</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> preloadImage = <span class="keyword">function</span> (<span class="params">path</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> image = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">    image.<span class="property">onload</span>  = resolve;</span><br><span class="line">    image.<span class="property">onerror</span> = reject;</span><br><span class="line">    image.<span class="property">src</span> = path;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>通过链式操作，将多个渲染数据分别给个<code>then</code>，让其各司其职。或当下个异步请求依赖上个请求结果的时候，我们也能够通过链式操作友好解决问题</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/ 各司其职</span><br><span class="line"><span class="title function_">getInfo</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; bannerList &#125; = res</span><br><span class="line">    <span class="comment">//渲染轮播图</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(bannerList)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> &#123; storeList &#125; = res</span><br><span class="line">    <span class="comment">//渲染店铺列表</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(storeList)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; categoryList &#125; = res</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(categoryList)</span><br><span class="line">    <span class="comment">//渲染分类列表</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li>通过<code>all()</code>实现多个请求合并在一起，汇总所有请求结果，只需设置一个<code>loading</code>即可</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">initLoad</span>(<span class="params"></span>)&#123;</span><br><span class="line">    loading.<span class="title function_">show</span>() <span class="comment">//加载loading</span></span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title function_">getBannerList</span>(),<span class="title function_">getStoreList</span>(),<span class="title function_">getCategoryList</span>()]).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">        loading.<span class="title function_">hide</span>() <span class="comment">//关闭loading</span></span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">        loading.<span class="title function_">hide</span>()<span class="comment">//关闭loading</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//数据初始化    </span></span><br><span class="line"><span class="title function_">initLoad</span>()</span><br></pre></td></tr></table></figure><ol start="4"><li>通过<code>race</code>可以设置图片请求超时</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//请求某个图片资源</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">requestImg</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">        img.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">           <span class="title function_">resolve</span>(img);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//img.src = &quot;https://b-gold-cdn.xitu.io/v3/static/img/logo.a7995ad.svg&quot;; 正确的</span></span><br><span class="line">        img.<span class="property">src</span> = <span class="string">&quot;https://b-gold-cdn.xitu.io/v3/static/img/logo.a7995ad.svg1&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//延时函数，用于给请求计时</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">timeout</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&#x27;图片请求超时&#x27;</span>);</span><br><span class="line">        &#125;, <span class="number">5000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span></span><br><span class="line">.<span class="title function_">race</span>([<span class="title function_">requestImg</span>(), <span class="title function_">timeout</span>()])</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">results</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h5 id="如何理解ES6中的Porxy-使用场景"><a href="#如何理解ES6中的Porxy-使用场景" class="headerlink" title="如何理解ES6中的Porxy; 使用场景"></a>如何理解ES6中的Porxy; 使用场景</h5><ul><li>介绍</li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Proxy 亦是如此，用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）</span><br></pre></td></tr></table></figure><ul><li><p>用法</p><ol><li><code>Proxy</code>为 构造函数，用来生成 <code>Proxy</code>实例</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">参数</span></span><br><span class="line"><span class="comment">target表示所要拦截的目标对象（任何类型的对象，包括原生数组，函数，甚至另一个代理））</span></span><br><span class="line"><span class="comment">handler通常以函数作为属性的对象，各属性中的函数分别定义了在执行各种操作时代理 p 的行为</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ol start="2"><li>参数 handler 解析</li></ol><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">关于handler拦截属性，有如下：</span><br><span class="line"></span><br><span class="line">get(target,propKey,receiver)：拦截对象属性的读取</span><br><span class="line">set(target,propKey,value,receiver)：拦截对象属性的设置</span><br><span class="line">has(target,propKey)：拦截propKey in proxy的操作，返回一个布尔值</span><br><span class="line">deleteProperty(target,propKey)：拦截delete proxy[propKey]的操作，返回一个布尔值</span><br><span class="line">ownKeys(target)：拦截Object.keys(proxy)、for...in等循环，返回一个数组</span><br><span class="line">getOwnPropertyDescriptor(target, propKey)：拦截Object.getOwnPropertyDescriptor(proxy, propKey)，返回属性的描述对象</span><br><span class="line">defineProperty(target, propKey, propDesc)：拦截Object.defineProperty(proxy, propKey, propDesc），返回一个布尔值</span><br><span class="line">preventExtensions(target)：拦截Object.preventExtensions(proxy)，返回一个布尔值</span><br><span class="line">getPrototypeOf(target)：拦截Object.getPrototypeOf(proxy)，返回一个对象</span><br><span class="line">isExtensible(target)：拦截Object.isExtensible(proxy)，返回一个布尔值</span><br><span class="line">setPrototypeOf(target, proto)：拦截Object.setPrototypeOf(proxy, proto)，返回一个布尔值</span><br><span class="line">apply(target, object, args)：拦截 Proxy 实例作为函数调用的操作</span><br><span class="line">construct(target, args)：拦截 Proxy 实例作为构造函数调用的操作</span><br></pre></td></tr></table></figure><ol start="3"><li>Reflect</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">若需要在<span class="title class_">Proxy</span>内部调用对象的默认行为，建议使用<span class="title class_">Reflect</span>，其是<span class="title class_">ES6</span>中操作对象而提供的新 <span class="variable constant_">API</span></span><br><span class="line"></span><br><span class="line">基本特点：</span><br><span class="line">只要<span class="title class_">Proxy</span>对象具有的代理方法，<span class="title class_">Reflect</span>对象全部具有，以静态方法的形式存在</span><br><span class="line">修改某些<span class="title class_">Object</span>方法的返回结果，让其变得更合理（定义不存在属性行为的时候不报错而是返回<span class="literal">false</span>）</span><br><span class="line">让<span class="title class_">Object</span>操作都变成函数行为</span><br></pre></td></tr></table></figure><ol start="4"><li><p>一些参数用法</p><ul><li>get()get接受三个参数，依次为目标对象、属性名和 proxy 实例本身，最后一个参数可选</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(person, &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params">target, propKey</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target,propKey)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">proxy.<span class="property">name</span> <span class="comment">// &quot;张三&quot;</span></span><br><span class="line"><span class="comment">//get能够对数组增删改查进行拦截，下面是试下你数组读取负数的索引</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createArray</span>(<span class="params">...elements</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> handler = &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, propKey, receiver</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> index = <span class="title class_">Number</span>(propKey);</span><br><span class="line">      <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        propKey = <span class="title class_">String</span>(target.<span class="property">length</span> + index);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, propKey, receiver);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> target = [];</span><br><span class="line">  target.<span class="title function_">push</span>(...elements);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = <span class="title function_">createArray</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">arr[-<span class="number">1</span>] <span class="comment">// c</span></span><br><span class="line"><span class="comment">//如果一个属性不可配置（configurable）且不可写（writable），则 Proxy 不能修改该属性，否则会报错</span></span><br><span class="line"><span class="keyword">const</span> target = <span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(&#123;&#125;, &#123;</span><br><span class="line">  <span class="attr">foo</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">123</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">target, propKey</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler);</span><br><span class="line"></span><br><span class="line">proxy.<span class="property">foo</span></span><br><span class="line"><span class="comment">// TypeError: Invariant check failed</span></span><br></pre></td></tr></table></figure><ul><li>set()拦截某个属性的赋值操作，可以接受四个参数，依次为目标对象、属性名、属性值和 <code>Proxy</code> 实例本身</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> validator = &#123;</span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">obj, prop, value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (prop === <span class="string">&#x27;age&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="title class_">Number</span>.<span class="title function_">isInteger</span>(value)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;The age is not an integer&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (value &gt; <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RangeError</span>(<span class="string">&#x27;The age seems invalid&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对于满足条件的 age 属性以及其他属性，直接保存</span></span><br><span class="line">    obj[prop] = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, validator);</span><br><span class="line">person.<span class="property">age</span> = <span class="number">100</span>;</span><br><span class="line">person.<span class="property">age</span> <span class="comment">// 100</span></span><br><span class="line">person.<span class="property">age</span> = <span class="string">&#x27;young&#x27;</span> <span class="comment">// 报错</span></span><br><span class="line">person.<span class="property">age</span> = <span class="number">300</span> <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果目标对象自身的某个属性，不可写且不可配置，那么set方法将不起作用</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;foo&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">obj, prop, value, receiver</span>) &#123;</span><br><span class="line">    obj[prop] = <span class="string">&#x27;baz&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, handler);</span><br><span class="line">proxy.<span class="property">foo</span> = <span class="string">&#x27;baz&#x27;</span>;</span><br><span class="line">proxy.<span class="property">foo</span> <span class="comment">// &quot;bar&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//严格模式下，set代理如果没有返回true，就会报错</span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">obj, prop, value, receiver</span>) &#123;</span><br><span class="line">    obj[prop] = receiver;</span><br><span class="line">    <span class="comment">// 无论有没有下面这一行，都会报错</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, handler);</span><br><span class="line">proxy.<span class="property">foo</span> = <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"><span class="comment">// TypeError: &#x27;set&#x27; on proxy: trap returned falsish for property &#x27;foo&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>deleteProperty()<code>deleteProperty</code>方法用于拦截<code>delete</code>操作，如果这个方法抛出错误或者返回<code>false</code>，当前属性就无法被<code>delete</code>命令删除</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  deleteProperty (target, key) &#123;</span><br><span class="line">    <span class="title function_">invariant</span>(key, <span class="string">&#x27;delete&#x27;</span>);</span><br><span class="line">    <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target,key)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">invariant</span> (key, action) &#123;</span><br><span class="line">  <span class="keyword">if</span> (key[<span class="number">0</span>] === <span class="string">&#x27;_&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`无法删除私有属性`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> target = &#123; <span class="attr">_prop</span>: <span class="string">&#x27;foo&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler);</span><br><span class="line"><span class="keyword">delete</span> proxy.<span class="property">_prop</span></span><br><span class="line"><span class="comment">// Error: 无法删除私有属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//目标对象自身的不可配置（configurable）的属性，不能被deleteProperty方法删除，否则报错</span></span><br></pre></td></tr></table></figure><ul><li>取消代理</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Proxy</span>.<span class="title function_">revocable</span>(target, handler);</span><br></pre></td></tr></table></figure></li></ol></li><li><p>使用场景</p><p><code>Proxy</code>其功能非常类似于设计模式中的代理模式，常用功能如下：</p><ul><li>拦截和监视外部对对象的访问</li><li>降低函数或类的复杂度</li><li>在复杂操作前对操作进行校验或对所需资源进行管理</li></ul><ol><li>使用 <code>Proxy</code> 保障数据类型的准确性</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numericDataStore = &#123; <span class="attr">count</span>: <span class="number">0</span>, <span class="attr">amount</span>: <span class="number">1234</span>, <span class="attr">total</span>: <span class="number">14</span> &#125;;</span><br><span class="line">numericDataStore = <span class="keyword">new</span> <span class="title class_">Proxy</span>(numericDataStore, &#123;</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, key, value, proxy</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> value !== <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">&quot;属性只能是number类型&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value, proxy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">numericDataStore.<span class="property">count</span> = <span class="string">&quot;foo&quot;</span></span><br><span class="line"><span class="comment">// Error: 属性只能是number类型</span></span><br><span class="line"></span><br><span class="line">numericDataStore.<span class="property">count</span> = <span class="number">333</span></span><br><span class="line"><span class="comment">// 赋值成功</span></span><br></pre></td></tr></table></figure><ol start="2"><li>声明了一个私有的 <code>apiKey</code>，便于 <code>api</code> 这个对象内部的方法调用，但不希望从外部也能够访问 <code>api._apiKey</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> api = &#123;</span><br><span class="line">    <span class="attr">_apiKey</span>: <span class="string">&#x27;123abc456def&#x27;</span>,</span><br><span class="line">    <span class="attr">getUsers</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123; &#125;,</span><br><span class="line">    <span class="attr">getUser</span>: <span class="keyword">function</span>(<span class="params">userId</span>)&#123; &#125;,</span><br><span class="line">    <span class="attr">setUser</span>: <span class="keyword">function</span>(<span class="params">userId, config</span>)&#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">RESTRICTED</span> = [<span class="string">&#x27;_apiKey&#x27;</span>];</span><br><span class="line">api = <span class="keyword">new</span> <span class="title class_">Proxy</span>(api, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, key, proxy</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable constant_">RESTRICTED</span>.<span class="title function_">indexOf</span>(key) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span> 不可访问.`</span>);</span><br><span class="line">        &#125; <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, proxy);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, key, value, proxy</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable constant_">RESTRICTED</span>.<span class="title function_">indexOf</span>(key) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span> 不可修改`</span>);</span><br><span class="line">        &#125; <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, value, proxy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(api.<span class="property">_apiKey</span>)</span><br><span class="line">api.<span class="property">_apiKey</span> = <span class="string">&#x27;987654321&#x27;</span></span><br><span class="line"><span class="comment">// 上述都抛出错误</span></span><br></pre></td></tr></table></figure><ol start="3"><li>观察者模式（Observer mode）指的是函数自动观察数据对象，一旦对象有变化，函数就会自动执行； observable函数返回一个原始对象的 Proxy 代理，拦截赋值操作，触发充当观察者的各个函数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> queuedObservers = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">observe</span> = fn =&gt; queuedObservers.<span class="title function_">add</span>(fn);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">observable</span> = obj =&gt; <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;set&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">set</span>(<span class="params">target, key, value, receiver</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value, receiver);</span><br><span class="line">  queuedObservers.<span class="title function_">forEach</span>(<span class="function"><span class="params">observer</span> =&gt;</span> <span class="title function_">observer</span>());</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//观察者函数都放进Set集合，当修改obj的值，在会set函数中拦截，自动执行Set所有的观察者</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="怎么理解ES6中Generator；使用场景"><a href="#怎么理解ES6中Generator；使用场景" class="headerlink" title="怎么理解ES6中Generator；使用场景"></a><strong>怎么理解ES6中Generator；使用场景</strong></h5><ul><li><p>介绍</p><ul><li><p>执行 <code>Generator</code> 函数会返回一个遍历器对象，可以依次遍历 <code>Generator</code> 函数内部的每一个状态</p><p>形式上，<code>Generator</code>函数是一个普通函数，但是有两个特征：</p><ul><li><code>function</code>关键字与函数名之间有一个星号</li><li>函数体内部使用<code>yield</code>表达式，定义不同的内部状态</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">helloWorldGenerator</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;ending&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用</p><ul><li><code>Generator</code> 函数会返回一个遍历器对象，即具有<code>Symbol.iterator</code>属性，并且返回给自己</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// some code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = <span class="title function_">gen</span>();</span><br><span class="line"></span><br><span class="line">g[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() === g</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>通过<code>yield</code>关键字可以暂停<code>generator</code>函数返回的遍历器对象的状态</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">helloWorldGenerator</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;ending&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> hw = <span class="title function_">helloWorldGenerator</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">上述存在三个状态：hello、world、return</span></span><br><span class="line"><span class="comment">通过next方法才会遍历到下一个内部状态，其运行逻辑如下：</span></span><br><span class="line"><span class="comment">1.遇到yield表达式，就暂停执行后面的操作，并将紧跟在yield后面的那个表达式的值，作为返回的对象的value属性值。</span></span><br><span class="line"><span class="comment">2.下一次调用next方法时，再继续往下执行，直到遇到下一个yield表达式</span></span><br><span class="line"><span class="comment">3.如果没有再遇到新的yield表达式，就一直运行到函数结束，直到return语句为止，并将return语句后面的表达式的值，作为返回的对象的value属性值。</span></span><br><span class="line"><span class="comment">4.如果该函数没有return语句，则返回的对象的value属性值为undefined</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">hw.<span class="title function_">next</span>()</span><br><span class="line"><span class="comment">// &#123; value: &#x27;hello&#x27;, done: false &#125;</span></span><br><span class="line">hw.<span class="title function_">next</span>()</span><br><span class="line"><span class="comment">// &#123; value: &#x27;world&#x27;, done: false &#125;</span></span><br><span class="line">hw.<span class="title function_">next</span>()</span><br><span class="line"><span class="comment">// &#123; value: &#x27;ending&#x27;, done: true &#125;</span></span><br><span class="line">hw.<span class="title function_">next</span>()</span><br><span class="line"><span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">done用来判断是否存在下个状态，value对应状态值</span></span><br><span class="line"><span class="comment">yield表达式本身没有返回值，或者说总是返回undefined</span></span><br><span class="line"><span class="comment">通过调用next方法可以带一个参数，该参数就会被当作上一个yield表达式的返回值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> y = <span class="number">2</span> * (<span class="keyword">yield</span> (x + <span class="number">1</span>));</span><br><span class="line">  <span class="keyword">var</span> z = <span class="keyword">yield</span> (y / <span class="number">3</span>);</span><br><span class="line">  <span class="keyword">return</span> (x + y + z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="title function_">foo</span>(<span class="number">5</span>);</span><br><span class="line">a.<span class="title function_">next</span>() <span class="comment">// Object&#123;value:6, done:false&#125;</span></span><br><span class="line">a.<span class="title function_">next</span>() <span class="comment">// Object&#123;value:NaN, done:false&#125;</span></span><br><span class="line">a.<span class="title function_">next</span>() <span class="comment">// Object&#123;value:NaN, done:true&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="title function_">foo</span>(<span class="number">5</span>);</span><br><span class="line">b.<span class="title function_">next</span>() <span class="comment">// &#123; value:6, done:false &#125;</span></span><br><span class="line">b.<span class="title function_">next</span>(<span class="number">12</span>) <span class="comment">// &#123; value:8, done:false &#125;</span></span><br><span class="line">b.<span class="title function_">next</span>(<span class="number">13</span>) <span class="comment">// &#123; value:42, done:true &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//正因为Generator函数返回Iterator对象，因此我们还可以通过for...of进行遍历</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> <span class="title function_">foo</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 2 3 4 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//原生对象没有遍历接口，通过Generator函数为它加上这个接口，就能使用for...of进行遍历了</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">objectEntries</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> propKeys = <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> propKey <span class="keyword">of</span> propKeys) &#123;</span><br><span class="line">    <span class="keyword">yield</span> [propKey, obj[propKey]];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jane = &#123; <span class="attr">first</span>: <span class="string">&#x27;Jane&#x27;</span>, <span class="attr">last</span>: <span class="string">&#x27;Doe&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> <span class="title function_">objectEntries</span>(jane)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// first: Jane</span></span><br><span class="line"><span class="comment">// last: Doe</span></span><br></pre></td></tr></table></figure></li><li><p>异步解决方案</p><ul><li>回调函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//回调函数，就是把任务的第二段单独写在一个函数里面，等到重新执行这个任务的时候，再调用这个函数</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;/etc/fstab&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  fs.<span class="title function_">readFile</span>(<span class="string">&#x27;/etc/shells&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//readFile函数的第三个参数，就是回调函数，等到操作系统返回了/etc/passwd这个文件以后，回调函数才会执行</span></span><br></pre></td></tr></table></figure><ul><li>Promise 对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Promise就是为了解决回调地狱而产生的，将回调函数的嵌套，改成链式调用</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readFile = <span class="keyword">function</span> (<span class="params">fileName</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(fileName, <span class="keyword">function</span>(<span class="params">error, data</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (error) <span class="keyword">return</span> <span class="title function_">reject</span>(error);</span><br><span class="line">      <span class="title function_">resolve</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">readFile</span>(<span class="string">&#x27;/etc/fstab&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">readFile</span>(<span class="string">&#x27;/etc/shells&#x27;</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//这种链式操作形式，使异步任务的两段执行更清楚了，但是也存在了很明显的问题，代码变得冗杂了，语义化并不强</span></span><br></pre></td></tr></table></figure><ul><li>generator 函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//yield表达式可以暂停函数执行，next方法用于恢复函数执行，这使得Generator函数非常适合将异步任务同步化</span></span><br><span class="line"><span class="keyword">const</span> gen = <span class="keyword">function</span>* () &#123;</span><br><span class="line">  <span class="keyword">const</span> f1 = <span class="keyword">yield</span> <span class="title function_">readFile</span>(<span class="string">&#x27;/etc/fstab&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> f2 = <span class="keyword">yield</span> <span class="title function_">readFile</span>(<span class="string">&#x27;/etc/shells&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(f1.<span class="title function_">toString</span>());</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(f2.<span class="title function_">toString</span>());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>async&#x2F;await</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将上面Generator函数改成async/await形式，更为简洁，语义化更强了</span></span><br><span class="line"><span class="keyword">const</span> asyncReadFile = <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> f1 = <span class="keyword">await</span> <span class="title function_">readFile</span>(<span class="string">&#x27;/etc/fstab&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> f2 = <span class="keyword">await</span> <span class="title function_">readFile</span>(<span class="string">&#x27;/etc/shells&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(f1.<span class="title function_">toString</span>());</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(f2.<span class="title function_">toString</span>());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>区别：</p></li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">通过上述代码进行分析，将promise、Generator、async/await进行比较：</span><br><span class="line">1.promise和async/await是专门用于处理异步操作的</span><br><span class="line">2.Generator并不是为异步而设计出来的，它还有其他功能（对象迭代、控制输出、部署Interator接口...）</span><br><span class="line">3.promise编写代码相比Generator、async更为复杂化，且可读性也稍差</span><br><span class="line">4.Generator、async需要与promise对象搭配处理异步情况</span><br><span class="line">5.async实质是Generator的语法糖，相当于会自动执行Generator函数</span><br><span class="line">6.async使用上更为简洁，将异步代码以同步的形式进行编写，是处理异步编程的最终方案</span><br></pre></td></tr></table></figure><ul><li><p>使用场景</p><ol><li><code>Generator</code>是异步解决的一种方案，最大特点则是将异步操作同步化表达出来</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">loadUI</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">showLoadingScreen</span>();</span><br><span class="line">  <span class="keyword">yield</span> <span class="title function_">loadUIDataAsynchronously</span>();</span><br><span class="line">  <span class="title function_">hideLoadingScreen</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> loader = <span class="title function_">loadUI</span>();</span><br><span class="line"><span class="comment">// 加载UI</span></span><br><span class="line">loader.<span class="title function_">next</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 卸载UI</span></span><br><span class="line">loader.<span class="title function_">next</span>()</span><br></pre></td></tr></table></figure><ol start="2"><li>包括<code>redux-saga</code>中间件也充分利用了<code>Generator</code>特性</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; call, put, takeEvery, takeLatest &#125; <span class="keyword">from</span> <span class="string">&#x27;redux-saga/effects&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Api</span> <span class="keyword">from</span> <span class="string">&#x27;...&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">fetchUser</span>(<span class="params">action</span>) &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> user = <span class="keyword">yield</span> <span class="title function_">call</span>(<span class="title class_">Api</span>.<span class="property">fetchUser</span>, action.<span class="property">payload</span>.<span class="property">userId</span>);</span><br><span class="line">      <span class="keyword">yield</span> <span class="title function_">put</span>(&#123;<span class="attr">type</span>: <span class="string">&quot;USER_FETCH_SUCCEEDED&quot;</span>, <span class="attr">user</span>: user&#125;);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">yield</span> <span class="title function_">put</span>(&#123;<span class="attr">type</span>: <span class="string">&quot;USER_FETCH_FAILED&quot;</span>, <span class="attr">message</span>: e.<span class="property">message</span>&#125;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">mySaga</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="title function_">takeEvery</span>(<span class="string">&quot;USER_FETCH_REQUESTED&quot;</span>, fetchUser);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">mySaga</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="title function_">takeLatest</span>(<span class="string">&quot;USER_FETCH_REQUESTED&quot;</span>, fetchUser);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> mySaga;</span><br></pre></td></tr></table></figure><ol start="3"><li>还能利用<code>Generator</code>函数，在对象上实现<code>Iterator</code>接口</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">iterEntries</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i &lt; keys.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> key = keys[i];</span><br><span class="line">    <span class="keyword">yield</span> [key, obj[key]];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myObj = &#123; <span class="attr">foo</span>: <span class="number">3</span>, <span class="attr">bar</span>: <span class="number">7</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> <span class="title function_">iterEntries</span>(myObj)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// foo 3</span></span><br><span class="line"><span class="comment">// bar 7</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="怎么理解ES6中Module-使用场景"><a href="#怎么理解ES6中Module-使用场景" class="headerlink" title="怎么理解ES6中Module; 使用场景"></a>怎么理解ES6中Module; 使用场景</h5><ul><li><p>介绍</p><p>模块，（Module），是能够单独命名并独立地完成一定功能的程序语句的<strong>集合（即程序代码和数据结构的集合体）</strong>。</p><p>两个基本的特征：外部特征和内部特征</p><ul><li>外部特征是指模块跟外部环境联系的接口（即其他模块或程序调用该模块的方式，包括有输入输出参数、引用的全局变量）和模块的功能</li><li>内部特征是指模块的内部环境具有的特点（即该模块的局部数据和程序代码</li></ul><p><strong>为什么需要模块化</strong></p><ul><li>代码抽象</li><li>代码封装</li><li>代码复用</li><li>依赖管理</li></ul></li><li><p>使用</p><p><code>ES6</code>模块内部自动采用了严格模式，这里就不展开严格模式的限制，毕竟这是<code>ES5</code>之前就已经规定好</p><p>模块功能主要由两个命令构成：</p><ul><li><code>export</code>：用于规定模块的对外接口</li><li><code>import</code>：用于输入其他模块提供的功能</li></ul><ol><li>export</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// profile.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> firstName = <span class="string">&#x27;Michael&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> lastName = <span class="string">&#x27;Jackson&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> year = <span class="number">1958</span>;</span><br><span class="line"><span class="comment">//或 </span></span><br><span class="line"><span class="comment">// 建议使用下面写法，这样能瞬间确定输出了哪些变量</span></span><br><span class="line"><span class="keyword">var</span> firstName = <span class="string">&#x27;Michael&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> lastName = <span class="string">&#x27;Jackson&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> year = <span class="number">1958</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; firstName, lastName, year &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出函数或类</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过as可以进行输出变量的重命名</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">v1</span>(<span class="params"></span>) &#123; ... &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">v2</span>(<span class="params"></span>) &#123; ... &#125;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  v1 <span class="keyword">as</span> streamV1,</span><br><span class="line">  v2 <span class="keyword">as</span> streamV2,</span><br><span class="line">  v2 <span class="keyword">as</span> streamLatestVersion</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>import</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用export命令定义了模块的对外接口以后，其他 JS 文件就可以通过import命令加载这个模块</span></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; firstName, lastName, year &#125; <span class="keyword">from</span> <span class="string">&#x27;./profile.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setName</span>(<span class="params">element</span>) &#123;</span><br><span class="line">  element.<span class="property">textContent</span> = firstName + <span class="string">&#x27; &#x27;</span> + lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//同样如果想要输入变量起别名，通过as关键字</span></span><br><span class="line"><span class="keyword">import</span> &#123; lastName <span class="keyword">as</span> surname &#125; <span class="keyword">from</span> <span class="string">&#x27;./profile.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//当加载整个模块的时候，需要用到星号*</span></span><br><span class="line"><span class="comment">// circle.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">area</span>(<span class="params">radius</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">PI</span> * radius * radius;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">circumference</span>(<span class="params">radius</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span> * radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> circle <span class="keyword">from</span> <span class="string">&#x27;./circle&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(circle)   <span class="comment">// &#123;area:area,circumference:circumference&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输入的变量都是只读的，不允许修改，但是如果是对象，允许修改属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果不需要知道变量名或函数就完成加载，就要用到export default命令，为模块指定默认输出</span></span><br><span class="line"><span class="comment">//加载该模块的时候，import命令可以为该函数指定任意名字</span></span><br><span class="line"><span class="comment">// export-default.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// import-default.js</span></span><br><span class="line"><span class="keyword">import</span> customName <span class="keyword">from</span> <span class="string">&#x27;./export-default&#x27;</span>;</span><br><span class="line"><span class="title function_">customName</span>(); <span class="comment">// &#x27;foo&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>动态加载</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">允许您仅在需要时动态加载模块，而不必预先加载所有模块，这存在明显的性能优势</span></span><br><span class="line"><span class="comment">这个新功能允许您将import()作为函数调用，将其作为参数传递给模块的路径。 它返回一个 promise，它用一个模块对象来实现，让你可以访问该对象的导出</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span>(<span class="string">&#x27;/modules/myModule.mjs&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params"><span class="variable language_">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Do something with the module.</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//复合写法</span></span><br><span class="line"><span class="comment">//如果在一个模块之中，先输入后输出同一个模块，import语句可以与export语句写在一起</span></span><br><span class="line"><span class="keyword">export</span> &#123; foo, bar &#125; <span class="keyword">from</span> <span class="string">&#x27;my_module&#x27;</span>;</span><br><span class="line"><span class="comment">// 可以简单理解为</span></span><br><span class="line"><span class="keyword">import</span> &#123; foo, bar &#125; <span class="keyword">from</span> <span class="string">&#x27;my_module&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; foo, bar &#125;;</span><br></pre></td></tr></table></figure><h5 id="怎么理解Decorator-装饰器-；-使用场景"><a href="#怎么理解Decorator-装饰器-；-使用场景" class="headerlink" title="怎么理解Decorator (装饰器)； 使用场景"></a><strong>怎么理解Decorator (装饰器)； 使用场景</strong></h5><ul><li><p>介绍</p><p>即装饰器，在不改变原类和使用继承的情况下，动态地扩展对象功能</p><p>优点：</p><ol><li>代码可读性变强了，装饰器命名相当于一个注释</li><li>在不改变原有代码情况下，对原来功能进行扩展</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个类，什么属性值，方法也没有</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">soldier</span>&#123; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个方法，作为装饰器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">strong</span>(<span class="params">target</span>)&#123;</span><br><span class="line">    target.<span class="property">AK</span> = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将装饰器装饰在类上</span></span><br><span class="line">@strong</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">soldier</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用类的AK属性</span></span><br><span class="line">soldier.<span class="property">AK</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>用法</p><p><code>Docorator</code>修饰对象为下面两种：</p><ul><li>类的装饰</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">类的装饰</span></span><br><span class="line"><span class="comment">当对类本身进行装饰的时候，能够接受一个参数，即类本身</span></span><br><span class="line"><span class="comment">将装饰器行为进行分解，大家能够有个更深入的了解</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">@decorator</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line">A = <span class="title function_">decorator</span>(A) || A;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//下面@testable就是一个装饰器，target就是传入的类，即MyTestableClass，实现了为类添加静态属性</span></span><br><span class="line">@testable</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyTestableClass</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">testable</span>(<span class="params">target</span>) &#123;</span><br><span class="line">  target.<span class="property">isTestable</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">MyTestableClass</span>.<span class="property">isTestable</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果想要传递参数，可以在装饰器外层再封装一层函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">testable</span>(<span class="params">isTestable</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">target</span>) &#123;</span><br><span class="line">    target.<span class="property">isTestable</span> = isTestable;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="title function_">testable</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyTestableClass</span> &#123;&#125;</span><br><span class="line"><span class="title class_">MyTestableClass</span>.<span class="property">isTestable</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">@<span class="title function_">testable</span>(<span class="literal">false</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;&#125;</span><br><span class="line"><span class="title class_">MyClass</span>.<span class="property">isTestable</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li>类属性的装饰</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">类属性的装饰</span></span><br><span class="line"><span class="comment">当对类属性进行装饰的时候，能够接受三个参数：</span></span><br><span class="line"><span class="comment">1.类的原型对象</span></span><br><span class="line"><span class="comment">2.需要装饰的属性名</span></span><br><span class="line"><span class="comment">3.装饰属性名的描述对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//首先定义一个readonly装饰器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readonly</span>(<span class="params">target, name, descriptor</span>)&#123;</span><br><span class="line">  descriptor.<span class="property">writable</span> = <span class="literal">false</span>; <span class="comment">// 将可写属性设为false</span></span><br><span class="line">  <span class="keyword">return</span> descriptor;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用readonly装饰类的name方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  @readonly</span><br><span class="line">  <span class="title function_">name</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.first&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.last&#125;</span>`</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//相当于以下调用</span></span><br><span class="line"><span class="title function_">readonly</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">&#x27;name&#x27;</span>, descriptor);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果一个方法有多个装饰器，就像洋葱一样，先从外到内进入，再由内到外执行</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dec</span>(<span class="params">id</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;evaluated&#x27;</span>, id);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">target, property, descriptor</span>) =&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;executed&#x27;</span>, id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">    @<span class="title function_">dec</span>(<span class="number">1</span>)</span><br><span class="line">    @<span class="title function_">dec</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="title function_">method</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// evaluated 1</span></span><br><span class="line"><span class="comment">// evaluated 2</span></span><br><span class="line"><span class="comment">// executed 2</span></span><br><span class="line"><span class="comment">// executed 1</span></span><br><span class="line"><span class="comment">//外层装饰器@dec(1)先进入，但是内层装饰器@dec(2)先执行</span></span><br></pre></td></tr></table></figure></li><li><p>注意项</p><p>装饰器不能用于修饰函数，因为函数存在变量声明情况</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> add = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  counter++;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">@add</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编译阶段，变成下面</span></span><br><span class="line"><span class="keyword">var</span> counter;</span><br><span class="line"><span class="keyword">var</span> add;</span><br><span class="line"></span><br><span class="line">@add</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">add = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  counter++;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//意图是执行后counter等于 1，但是实际上结果是counter等于 0</span></span><br></pre></td></tr></table></figure></li><li><p>使用场景</p><p>基于<code>Decorator</code>强大的作用，我们能够完成各种场景的需求，下面简单列举几种：</p><ol><li>使用<code>react-redux</code>的时候，如果写成下面这种形式，既不雅观也很麻烦</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyReactComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(mapStateToProps, mapDispatchToProps)(<span class="title class_">MyReactComponent</span>);</span><br><span class="line"><span class="comment">//通过装饰器就变得简洁多了</span></span><br><span class="line">@<span class="title function_">connect</span>(mapStateToProps, mapDispatchToProps)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">MyReactComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>将<code>mixins</code>，也可以写成装饰器，让使用更为简洁了</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mixins</span>(<span class="params">...list</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">target</span>) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">assign</span>(target.<span class="property"><span class="keyword">prototype</span></span>, ...list);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="title function_">foo</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo&#x27;</span>) &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">@<span class="title function_">mixins</span>(<span class="title class_">Foo</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">obj.<span class="title function_">foo</span>() <span class="comment">// &quot;foo&quot;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>讲讲<code>core-decorators.js</code>几个常见的装饰器</li></ol></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@antobind</span></span><br><span class="line"><span class="comment">//autobind装饰器使得方法中的this对象，绑定原始对象</span></span><br><span class="line"><span class="keyword">import</span> &#123; autobind &#125; <span class="keyword">from</span> <span class="string">&#x27;core-decorators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  @autobind</span><br><span class="line">  <span class="title function_">getPerson</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="keyword">let</span> getPerson = person.<span class="property">getPerson</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getPerson</span>() === person;</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//@readonly</span></span><br><span class="line"><span class="comment">//readonly装饰器使得属性或方法不可写</span></span><br><span class="line"><span class="keyword">import</span> &#123; readonly &#125; <span class="keyword">from</span> <span class="string">&#x27;core-decorators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Meal</span> &#123;</span><br><span class="line">  @readonly</span><br><span class="line">  entree = <span class="string">&#x27;steak&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dinner = <span class="keyword">new</span> <span class="title class_">Meal</span>();</span><br><span class="line">dinner.<span class="property">entree</span> = <span class="string">&#x27;salmon&#x27;</span>;</span><br><span class="line"><span class="comment">// Cannot assign to read only property &#x27;entree&#x27; of [object Object]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//@deprecate</span></span><br><span class="line"><span class="comment">//deprecate或deprecated装饰器在控制台显示一条警告，表示该方法将废除</span></span><br><span class="line"><span class="keyword">import</span> &#123; deprecate &#125; <span class="keyword">from</span> <span class="string">&#x27;core-decorators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  @deprecate</span><br><span class="line">  <span class="title function_">facepalm</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  @<span class="title function_">deprecate</span>(<span class="string">&#x27;功能废除了&#x27;</span>)</span><br><span class="line">  <span class="title function_">facepalmHard</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line">person.<span class="title function_">facepalm</span>();</span><br><span class="line"><span class="comment">// DEPRECATION Person#facepalm: This function will be removed in future versions.</span></span><br><span class="line"></span><br><span class="line">person.<span class="title function_">facepalmHard</span>();</span><br><span class="line"><span class="comment">// DEPRECATION Person#facepalmHard: 功能废除了</span></span><br></pre></td></tr></table></figure><h5 id="ES6-class"><a href="#ES6-class" class="headerlink" title="ES6 class"></a>ES6 class</h5><p>​class 没有声明提升</p><h6 id="类方法-constructor"><a href="#类方法-constructor" class="headerlink" title="类方法 constructor"></a>类方法 constructor</h6><p>​这个方法类似于其他语言，类的init方法，每次new实例时都会调用</p><h6 id="关键字-extends-继承"><a href="#关键字-extends-继承" class="headerlink" title="关键字 extends (继承)"></a>关键字 extends (继承)</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Son_of_Bullshit</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Bullshit</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h6 id="关键字-super"><a href="#关键字-super" class="headerlink" title="关键字 super"></a>关键字 super</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当我们获取父类属性时，需要用到super进行获取</span></span><br><span class="line"><span class="comment">// 例如子类写了constructor ， 父类的属性就需要super进行获取</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bullshit</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span> (text, color)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">text</span> = text;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son_of_Bullshit</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Bullshit</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span> (text, color, fontSize) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(text, color)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">fontSize</span> = fontSize</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="关键字-static"><a href="#关键字-static" class="headerlink" title="关键字 static"></a>关键字 static</h6><p>​在类里，静态属性、方法是属于类自身的，当调用时直接使用类调用即可</p><p>​静态方法里的this是类而非实例对象，所以静态方法里面可以调用另外一个静态方法</p><h5 id="关键字setter-getter-设置属性和获取属性"><a href="#关键字setter-getter-设置属性和获取属性" class="headerlink" title="关键字setter getter (设置属性和获取属性)"></a>关键字setter getter (设置属性和获取属性)</h5><h5 id="class实现单例模式"><a href="#class实现单例模式" class="headerlink" title="class实现单例模式"></a>class实现单例模式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingletonApple</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, creator, products</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">creator</span> = creator;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">products</span> = prodcts;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">getInstance</span>(<span class="params">name, creator, products</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">instance</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">instance</span> = <span class="keyword">new</span> <span class="title class_">SingletonApple</span>(name, creator,products);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">instance</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> appleComany = <span class="title class_">SingletonApple</span>()</span><br><span class="line"><span class="keyword">let</span> copyApple = <span class="title class_">SingletonApple</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(appleComany === copyApple)  <span class="comment">//true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3</title>
      <link href="/2023/04/11/vue3/"/>
      <url>/2023/04/11/vue3/</url>
      
        <content type="html"><![CDATA[<p>Vue3</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
          <category> Vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2</title>
      <link href="/2022/12/07/vue2/"/>
      <url>/2022/12/07/vue2/</url>
      
        <content type="html"><![CDATA[<h3 id="Vue2"><a href="#Vue2" class="headerlink" title="Vue2"></a>Vue2</h3><h4 id="脚手架安装和使用-VueCli"><a href="#脚手架安装和使用-VueCli" class="headerlink" title="脚手架安装和使用 - VueCli"></a>脚手架安装和使用 - VueCli</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/vli</span><br><span class="line"><span class="comment"># or </span></span><br><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></table></figure><h4 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vue create &lt;my-project&gt;</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">vue ui</span><br></pre></td></tr></table></figure><h4 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h4><p><img src="/2022/12/07/vue2/%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%841.png"></p><p><img src="/2022/12/07/vue2/%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%841.png"></p><p><img src="/2022/12/07/vue2/%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%842.png"></p><p><img src="/2022/12/07/vue2/%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%843.png"></p><h4 id="vue-MVVM架构模式"><a href="#vue-MVVM架构模式" class="headerlink" title="vue MVVM架构模式"></a>vue MVVM架构模式</h4><ul><li>M ： model  数据模型  模型代表应用程序的数据层。在 Vue 中，模型通常是通过 Vue 实例的数据属性（data）来表示。</li><li>V： view   视图   视图是用户界面的结构和外观。在 Vue 中，视图是由模板（template）编写的</li><li>VM： viewModel    视图模型     视图模型是连接视图和模型的桥梁，负责处理视图的逻辑和状态。在 Vue 中，视图模型主要由 Vue 实例的选项和方法组成，包括计算属性、监听属性变化、方法等。</li></ul><p>​在 Vue 中，数据流动的方向是单向的</p><ul><li><strong>视图 -&gt; 模型</strong>：用户通过视图操作，例如输入框输入文字，会更新模型中的数据。</li><li><strong>模型 -&gt; 视图</strong>：模型中的数据变化会自动更新到视图中，实现了响应式的视图更新。</li></ul><p>​Vue 的 MVVM 架构模式使得前端开发者可以更加高效地管理和维护应用程序的状态和逻辑，同时提升了代码的可读性和可维护性。</p><h4 id="vue-config-js-配置"><a href="#vue-config-js-配置" class="headerlink" title="vue.config.js 配置"></a>vue.config.js 配置</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;defineConfig&#125; = <span class="built_in">require</span>(<span class="string">&#x27;@vue/cli-service&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    <span class="attr">transpileDependencies</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">lineOnSave</span>: <span class="literal">false</span>, <span class="comment">// 关闭ESlint校验</span></span><br><span class="line">    <span class="comment">// 打包的静态资源路径加上 /dist/ 作为根目录</span></span><br><span class="line">    <span class="attr">publicPath</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;/dist/&#x27;</span> : <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="comment">// 配置开发服务器</span></span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">// 自动打开浏览器</span></span><br><span class="line">        <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">        <span class="attr">port</span>: <span class="number">3000</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="vue-组件-的-scoped和template-标签"><a href="#vue-组件-的-scoped和template-标签" class="headerlink" title="vue 组件 &lt;style&gt;的 scoped和template 标签"></a>vue 组件 <code>&lt;style&gt;</code>的 scoped和template 标签</h4><p>​在vue单文件里面可以给样式添加scoped，可以将选择器<img src="/2022/12/07/vue2/scoped%E6%A0%87%E7%AD%BE.png">变成属性选择器，解决css样式冲突问题，保证唯一性。</p><p>​vue2 <code>&lt;template&gt; </code>标签只能允许存在一个根节点</p><h4 id="vue-插值表达式"><a href="#vue-插值表达式" class="headerlink" title="vue 插值表达式"></a>vue 插值表达式</h4><ul><li><code>&#123;&#123; number + 1 &#125;&#125;</code></li><li><code>&#123;&#123; number > 10 ? '数值大于10' : '数值小于10' &#125;&#125;</code></li></ul><p>​使用双花括号，这些表达式会在所属的vue实例的数据作用下作为javascript被解析</p><h4 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h4><ul><li><p>v-bind       简写为 :</p><p>v-bing 可以灵活的给标签属性通过vue变量去定义，可以动态地绑定多个 attribute</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;img v-bing:src=&quot;imgSrc&quot;&gt;</span><br><span class="line">&lt;img :src=&quot;imgSrc&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">        name: &#x27;App&#x27;,</span><br><span class="line">        data()&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                imgSrc: require(&#x27;../images/logo.png&#x27;),</span><br><span class="line">                /*</span><br><span class="line">                !!! 在require使用变量赋值图片时需要注意事项</span><br><span class="line">                当直接在src属性使用路径，webpack会将小图片处理成base64格式，以减少http请求</span><br><span class="line">                当使用变量赋值时，会导致图片存放在public，并不是base64格式，导致图片渲染失败，可以使用require语法可以避免</span><br><span class="line">                如果大图片webpack打包就不会经过base64编码，会打包编码成后缀名带8位哈希值的图片路径，放在img/根目录下</span><br><span class="line">                如果不用require，则根目录是在public/ 静态资源下</span><br><span class="line">                */</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;!-- 缩写 --&gt;</span><br><span class="line">&lt;img :src=&quot;imageSrc&quot;&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!-- 动态attribute 名缩写 --&gt;</span><br><span class="line">&lt;img :[key]=&quot;imageSrc&quot;&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!-- 字符串拼接 --&gt;</span><br><span class="line">&lt;img :src=&quot;&#x27;/path/image&#x27;+fileName&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- class绑定 --&gt;</span><br><span class="line">    &lt;img :class=&quot;&#123;classA: isA &#125;&quot;&gt;</span><br><span class="line">    &lt;img :class=&quot;[classA, classB]&quot;&gt;</span><br><span class="line">&lt;img :class=&quot;[classA, &#123;classB: isB, classC: isC&#125;]&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- style绑定 --&gt;</span><br><span class="line">&lt;img :style=&quot;&#123;color: red, fontSize: size + &#x27;px&#x27;&#125;&quot;&gt;</span><br><span class="line">&lt;img :style=&quot;[styleA， styleB]&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li><p>v-on   简写 @</p><ul><li><p>点击事件    @click</p><ul><li>参数event</li><li>修饰符<ul><li>.stop     调用 event.stopPropagation()      阻止事件冒泡</li><li>.prevent     调用event.preventDefault()     阻止事件默认行为</li><li>.capture      添加事件侦听器时使用capture模式</li><li>.self        只当事件是从侦听器绑定的元素本身触发时才触发回调</li><li>.{keyCode| keyAlias}    只当事件是从特定键触发时才触发回调</li><li>.native   监听组件根元素的原生事件</li><li>.once     只触发一次回调</li><li>.left        (2.2.0) 只点击鼠标左键时触发</li><li>.right      (2.2.0) 只点击鼠标右键时触发</li><li>.middle     (2.2.0) 只点击鼠标中键时触发</li><li>.passive    (2.3.0) 以 {passive: true} 模式添加侦听器</li></ul></li></ul></li><li><p>鼠标事件     @</p></li><li><p>键盘事件    @keyup</p><ul><li>.enter</li><li>.tab</li><li>.delete    ( 删除和退格)</li><li>.esc</li><li>.space</li><li>.up</li><li>.down</li><li>.left</li><li>right</li></ul></li><li><p>页面滚动</p></li><li><p>动态事件绑定    (2.6.0+)</p><ul><li><p>v-on:[event] &#x3D; “fn”</p><p>通过vue变量event ，绑定事件；可以通过切换event，从而切换不同事件类型</p></li></ul></li></ul></li><li><p>v-model       双向数据绑定</p><ul><li>修饰符<ul><li>.lazy     v-model 是在每次input 事件触发后将值与数据进行同步，lazy则是在change事件之后进行同步(失焦)</li><li>.unmber      将用户输入的值转为数值类型</li><li>.trim           过滤首尾空白字符串</li></ul></li></ul></li><li><p>v-show    元素显示隐藏</p></li><li><p>v-text </p></li><li><p>v-html</p></li><li><p>v-if  &amp; v-else &amp; v-else-if</p></li><li><p>v-for     建议绑定的key为数据的id而不是数组下标index，数组下标为key会导致插入新数据，数据对不上的问题；原理：就地更新-默认原地址修改元素内容而不是移动它们，</p></li></ul><h4 id="数组的更新检测"><a href="#数组的更新检测" class="headerlink" title="数组的更新检测"></a>数组的更新检测</h4><ul><li><p>变更方法   -  会改变原数组  ( 会触发页面更新)</p><ul><li>push()</li><li>pop()</li><li>shift()</li><li>unshift()</li><li>splice()</li><li>sort()</li><li>reverse()</li></ul></li><li><p>非变更方法   -  不会改变原数组,返回新数组 ( 不会触发页面更新)</p><ul><li><p>filter()</p></li><li><p>concat()</p></li><li><p>slice()</p></li><li><p>修改数组数据  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">update</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 解决方法使用this.$set()</span></span><br><span class="line">    <span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">list</span>, <span class="number">0</span>, <span class="string">&#x27;新数据&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><p>​可用于一些常见的文本格式化</p><ul><li><p>双花括号形式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; message | filterFn &#125;</span><br></pre></td></tr></table></figure></li><li><p>在v-bind中绑定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-bind:id=&quot;message | filterFn&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>定义过滤器</p><ul><li>vue单文件组件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export defalut &#123;</span><br><span class="line">        name: &#x27;filterModel&#x27;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        filters: &#123;</span><br><span class="line">            filterFn: function(value)&#123;</span><br><span class="line">                if(!value) return &#x27;&#x27;;</span><br><span class="line">                value = value,toString();</span><br><span class="line">                return value.charAt(0).tiUpperCase()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>全局中定义</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTop</span> = <span class="literal">false</span></span><br><span class="line"><span class="comment">// 定义全局过滤器</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">filter</span>( <span class="string">&#x27;filterFn&#x27;</span>, <span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!value) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    value = value,<span class="title function_">toString</span>();</span><br><span class="line">    <span class="keyword">return</span> value.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">tiUpperCase</span>()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 初始化Vue实例</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="comment">// 在id为app的div盒子上渲染App.vue组件</span></span><br><span class="line">    <span class="attr">render</span>:<span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">    </span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>) <span class="comment">// 挂载容器，将vue实例插入到id为app的div盒子</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h4><p>​一个数据需要依赖另外一些数据计算得到的结果;</p><ul><li><p>定义计算属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &#123;&#123; reversedMessage &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export defalut &#123;</span><br><span class="line">        name: &#x27;filterModel&#x27;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                message: &quot;Hello&quot;,</span><br><span class="line">                mes: &quot;word&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line">            reversedMessage: function ()&#123;</span><br><span class="line">                return this.message + &#x27; &#x27; + this.mes</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>计算属性 &amp; 方法</p><p>计算属性是有缓存的；基于它们的响应式依赖进行缓存</p></li><li><p>计算属性细节</p><p>计算属性默认只有getter， 不过在需要时也可以提供setter</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &#123;&#123; reversedMessage &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export defalut &#123;</span><br><span class="line">        name: &#x27;filterModel&#x27;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                message: &quot;Hello&quot;,</span><br><span class="line">                mes: &quot;word&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line">            reversedMessage: &#123;</span><br><span class="line">                get: function()&#123;</span><br><span class="line">                    return this.message + &#x27; &#x27; + this.mes</span><br><span class="line">                &#125;</span><br><span class="line">                set: function(value)&#123;</span><br><span class="line">                    let _names = value.split(&#x27; &#x27;)</span><br><span class="line">                    this.mes = _names[names.length - 1]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h4><p>​vue通过watch来响应数据变化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &#123;&#123; reversedMessage &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export defalut &#123;</span><br><span class="line">        name: &#x27;filterModel&#x27;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                user:&#123;</span><br><span class="line">                    name:&#x27;&#x27;,</span><br><span class="line">                    age: &#x27;&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        watch: &#123;</span><br><span class="line">            uesr: &#123;</span><br><span class="line">                handler (newVal, oldVal)&#123;</span><br><span class="line">                    console.log(newVal, oldVal)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            // 引用类型需要开启深度监听    </span><br><span class="line">            deep:true,</span><br><span class="line">            // 立刻监听，初始化也会被获取到</span><br><span class="line">            immediate: true</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h4><p>​一个页面可以拆分成多个组件组成一个完整页面，将组件封装可以实现组件的复用，代码冗余问题，易维护</p><ul><li><p>组件&amp; 模块化；</p><ul><li><p>模块化</p><p>模块化封装的是js功能</p></li><li><p>组件</p><p>组件除了js功能外还含有页面结构，样式，交互</p></li></ul></li><li><p>组件使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// son.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &#123;&#123;Son组件&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"> export default &#123;</span><br><span class="line">     name : &#x27;Son&#x27;，</span><br><span class="line">     data() &#123;</span><br><span class="line">     return</span><br><span class="line"> &#125;,</span><br><span class="line"> &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// parent.vue</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &#123;&#123;parent&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;Son&gt;&lt;/Son&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 引入组件</span><br><span class="line">    import Son from &#x27;./Son.vue&#x27;</span><br><span class="line">    </span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &#x27;Parent&#x27;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        // 组件使用</span><br><span class="line">        components:&#123;</span><br><span class="line">            // Son : Son 简写</span><br><span class="line">            Son</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>全局注册组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Son</span> <span class="keyword">from</span> <span class="string">&#x27;./Son.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">Config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局注册组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;Son&#x27;</span>, <span class="title class_">Son</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span>=&gt;</span><span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="props-传值-单向数据流"><a href="#props-传值-单向数据流" class="headerlink" title="props 传值 ( 单向数据流)"></a>props 传值 ( 单向数据流)</h4><p>​props可以将数据从父组件传递给子组件</p><p>​在子组件，props的数据是只读的不能修改的；如果要修改可以使用emit 通知父组件去修改，或者用计算属性来中转</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// parent.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;Son :title=&quot;Son title&quot; :showActive=&quot;false&quot;&gt;&lt;/Son&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Son from &#x27;./Son.vue&#x27;</span><br><span class="line">    </span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;parent&#x27;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Son,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// Son.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div v-show=&#x27;showActive&#x27;&gt;</span><br><span class="line">        &#123;&#123;title&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;Son&#x27;,</span><br><span class="line">    // 子组件通过props接收</span><br><span class="line">    props: [&#x27;title&#x27;, &#x27;showActive&#x27;]</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>props 定义 默认值，数据类型，是否一定要传该属性</p><p><img src="/2022/12/07/vue2/porp%E4%BC%A0%E5%80%BC%E5%B1%9E%E6%80%A7.png"></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// Son.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div v-show=&#x27;showActive&#x27;&gt;</span><br><span class="line">        &#123;&#123;title&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;Son&#x27;,</span><br><span class="line">    // 子组件接受props可以使用对象的形式</span><br><span class="line">    // props: [&#x27;title&#x27;, &#x27;showActive&#x27;]</span><br><span class="line">    props: &#123;</span><br><span class="line">        title:&#123;</span><br><span class="line">            type: String,</span><br><span class="line">            defalut: &#x27;首页&#x27;,</span><br><span class="line">            required: true</span><br><span class="line">        &#125;，</span><br><span class="line">        showActive: &#123;</span><br><span class="line">            type: Boolean,</span><br><span class="line">            defalut: false,</span><br><span class="line">            required: false</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="emit"><a href="#emit" class="headerlink" title="$emit()"></a>$emit()</h4><p>​在子组件中触发自定义事件，将参数回传给父组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// parent.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&#123;&#123; number &#125;&#125;</span><br><span class="line">&lt;Son @handelEmit=&#x27;emitFn(value)&#x27;&gt;&lt;/Son&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Son from &#x27;./Son.vue&#x27;</span><br><span class="line">    </span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;parent&#x27;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            number: 1000</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Son,</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        emitFn(value)&#123;</span><br><span class="line">            this.number -= value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// Son.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;button @click=&quot;changeNumber&quot;&gt;</span><br><span class="line">        -100</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;Son&#x27;,</span><br><span class="line">    // 子组件通过props接收</span><br><span class="line">    props: [&#x27;title&#x27;, &#x27;showActive&#x27;]</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        // 点击子组件button触发事件</span><br><span class="line">        changeNumber()&#123;</span><br><span class="line">            // 通过$emit 触发父组件事件</span><br><span class="line">            this.$emit(&#x27;changeNumber&#x27;,100)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="发布订阅者模式-on-emit"><a href="#发布订阅者模式-on-emit" class="headerlink" title="发布订阅者模式- $on $emit"></a>发布订阅者模式- $on $emit<img src="/2022/12/07/vue2/%E5%8F%91%E5%B8%83%E8%80%85%E8%AE%A2%E9%98%85%E8%80%85%E6%A8%A1%E5%BC%8F.png"></h4><ul><li>在Vue实例对象中，prototype原型对象中，存在$emit (发布者[ 触发 ]) 和 $on (订阅者[ 监听 ]) 方法 ( Vue 3弃用了$emit  和 $on 方法，引入了Composition API ，使用<code>provide</code>和<code>inject</code>来实现基于组合的发布订阅模式。)</li></ul><h4 id="eventBus-事件总线-兄弟组件通信"><a href="#eventBus-事件总线-兄弟组件通信" class="headerlink" title="eventBus 事件总线( 兄弟组件通信)"></a>eventBus 事件总线( 兄弟组件通信)</h4><p>​通过订阅发布者模式，通过同一个vue实例的$emit 和$on 就可以获取到信息；兄弟两个组件分别为两个不同的vue实例；为了保证实例的一致性。需要额外新建一个文件 eventBus 创建vue实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./EventBus/index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>; </span><br><span class="line"><span class="comment">// 导出创建的vue实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vue</span>();</span><br></pre></td></tr></table></figure><ul><li><p>全局引入 (或局部引入)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">EventBus</span> <span class="keyword">from</span> <span class="string">&#x27;./EventBus/index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 全局引入eventBus-事件总线</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$eventBus</span> = <span class="title class_">EventBus</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span>=&gt;</span><span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>brother1 组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;templage&gt;&lt;/templage&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;brother1&#x27;,</span><br><span class="line">    // 在created生命周期钩子函数中监听(订阅),监听到后执行回调</span><br><span class="line">    created()&#123;</span><br><span class="line">        this.$eventBus.$on(&#x27;send&#x27;,(value)=&gt;&#123;</span><br><span class="line">            console.log(&#x27;$on-send:&#x27;+value)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>brother2 组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;templage&gt;&lt;/templage&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;brother2&#x27;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        subFn()&#123;</span><br><span class="line">            // 触发(发布)</span><br><span class="line">            this.$eventBus.$emit(&#x27;send&#x27;,&#x27;触发事件&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="vue-生命周期"><a href="#vue-生命周期" class="headerlink" title="vue 生命周期"></a>vue 生命周期</h4><h5 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h5><ul><li>beforeCreate<ul><li>访问不到实例数据，还没有被创建出来data和methods中的数据还没有初始化</li></ul></li><li>created<ul><li>数据初始化完成，可以访问实例数据；</li><li>发起请求，或者准备数据等  — <code>created</code>是在组件实例一旦创建完成的时候立刻调用，这时候页面<code>dom</code>节点并未生成；<code>mounted</code>是在页面<code>dom</code>节点渲染完毕之后就立刻执行的;  <code>mounted</code>中的请求有可能导致页面闪动; 因为页面<code>dom</code>结构已经生成，所以放在created中更合适</li></ul></li></ul><h5 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h5><ul><li>beforeMount<ul><li>在 Vue 实例挂载开始之前被调用的生命周期钩子函数。</li><li>获取不到真实Dom；在 <code>beforeMount</code> 钩子函数中，可以访问到 Vue 实例的 <code>$el</code> 属性，它是虚拟 DOM 的根节点。此时，虚拟 DOM 已经被 Vue 编译器处理过，但尚未挂载到真实的 DOM 上</li><li>该钩子函数中执行一些需要在挂载前操作的任务，例如访问和修改虚拟 DOM 的结构</li></ul></li><li>mounted<ul><li>可以获取到真实Dom，在 <code>mounted</code> 钩子函数中，Vue 实例已经被挂载到 DOM 上，此时可以访问和操作真实的 DOM 元素。</li><li>需要依赖于已渲染的真实 DOM 元素进行操作，通常建议在 <code>mounted</code> 钩子函数中进行</li></ul></li></ul><h5 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h5><p>​不要更新钩子函数中修改数据，会触发死循环</p><ul><li>beforeUpdate<ul><li>获取的值还是旧的值 — 数据已经更新，但还没有渲染</li></ul></li><li>updated<ul><li>能够获取到更新后的值</li></ul></li></ul><h5 id="Keepalive"><a href="#Keepalive" class="headerlink" title="Keepalive"></a>Keepalive</h5><ul><li>activated</li><li>deactivated</li></ul><h5 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h5><ul><li>beforeDestroy<ul><li>实例销毁前调用，实例还完全可用</li></ul></li><li>destoryed<ul><li>实例已经被销毁，所有指令被解绑，所有事件监听器被移除，子实例也被移除</li></ul></li></ul><h5 id="组件异常捕获"><a href="#组件异常捕获" class="headerlink" title="组件异常捕获"></a>组件异常捕获</h5><ul><li>errorCaptured<ul><li>捕获后代组件的错误</li><li>钩子会接受3各参数；错误对象，发生错误的组件实例，包含错误来源信息的祖父穿；可以return 一个boolean来是否将该错误向上传递</li></ul></li></ul><h4 id="嵌套组件生命周期"><a href="#嵌套组件生命周期" class="headerlink" title="嵌套组件生命周期"></a>嵌套组件生命周期</h4><ul><li>初始化 — 创建 挂载阶段</li></ul><p>​父组件 beforeCreated  — 父组件 created — 父组件 beforeMount — 子组件beforeCreate — 子组件 created —子组件 beforeMount — 子组件 Mounted — 父组件 Mounted</p><ul><li><p>更新</p><ul><li><p>父组件更新只执行父组件的更新钩子函数</p><p>父组件 beforeUpdate  — 父组件 Updated</p></li><li><p>子组件更新只执行子组件的更新钩子函数</p><p>子组件 beforeUpdate  — 子组件 Updated</p></li></ul></li><li><p>销毁子组件</p></li></ul><p>​父组件 beforeUpdate — 子组件 beforeDestroy — 子组件 destroyed — 父组件 updated</p><h4 id="全局错误捕获-—-config-errorHandler"><a href="#全局错误捕获-—-config-errorHandler" class="headerlink" title="全局错误捕获 — config.errorHandler"></a>全局错误捕获 — config.errorHandler</h4><ul><li>使用方法与生命周期异常捕获钩子函数一致</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js </span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"><span class="comment">// 定义全局错误捕获</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">errorHandler</span> = <span class="keyword">function</span> (<span class="params">err, vm, info</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">stack</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    render h=&gt;<span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h4><ul><li>可以获取真实Dom元素; 如果是一个vue组件，则获取的是vue组件实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;templage&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;h3 ref=&#x27;h3Element&#x27;&gt;&lt;/h3&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/templage&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    mounted()&#123;</span><br><span class="line">        // 在挂载之后获取真实Dom</span><br><span class="line">        // 原生js</span><br><span class="line">        console.log(document.querySelector(&#x27;h3Element&#x27;))</span><br><span class="line">        //ref 获取</span><br><span class="line">        console.log(this.$refs.h3Element)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="nextTick-callback"><a href="#nextTick-callback" class="headerlink" title="nextTick([callback])"></a>nextTick([callback])</h4><p>​vue中更新Dom是异步的；会导致 数据更新延迟</p><p>​nextTick 可以等待Dom更新之后再执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;span ref=&#x27;spanNumber&#x27;&gt;&#123;&#123;num&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;button @click=&#x27;add&#x27;&gt;+1&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            num:1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        add()&#123;</span><br><span class="line">            this.num += 1;</span><br><span class="line">            // 打印的值总会是之前的值</span><br><span class="line">            console.log(this.$refs.spanNumber.innerHTML)</span><br><span class="line">            // 使用nextTick就可以避免这种问题</span><br><span class="line">            this.$nextTick(()=&gt;&#123;</span><br><span class="line">                console.log(this.$refs.spanNumber.innerHTML)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="内置组件Component"><a href="#内置组件Component" class="headerlink" title="内置组件Component"></a>内置组件Component</h4><p>​在 Vue 应用中实现动态组件渲染、按需加载组件、条件渲染等功能，从而使应用更加灵活和高效</p><ul><li><p>props</p><ul><li>is</li><li>inline-template</li></ul></li><li><p>用法</p><p>渲染一个元组件为动态组件。通过is，来决定渲染那个组件</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;current = &#x27;component1&#x27;&quot;&gt;切换组件1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;current = &#x27;component2&#x27;&quot;&gt;切换组件2&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">    &lt;component :is=&quot;current&quot;&gt;&lt;/component&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import component1 from &#x27;./component1.vue&#x27;</span><br><span class="line">import component2 from &#x27;./component2.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            current: &#x27;component1&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        component1,</span><br><span class="line">        component2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="keep-alive内置组件"><a href="#keep-alive内置组件" class="headerlink" title="keep-alive内置组件"></a>keep-alive内置组件</h4><p>​可以缓存组件，每次切换组件的时候不会重复创建挂载，只会出发首次的挂载生命周期，后续只会触发keep-alive的activated和deactivated的生命周期</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;current = &#x27;component1&#x27;&quot;&gt;切换组件1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;current = &#x27;component2&#x27;&quot;&gt;切换组件2&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">    &lt;keep-alive&gt;</span><br><span class="line">                &lt;component :is=&quot;current&quot;&gt;&lt;/component&gt;</span><br><span class="line">    &lt;/keep-alive&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import component1 from &#x27;./component1.vue&#x27;</span><br><span class="line">import component2 from &#x27;./component2.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            current: &#x27;component1&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        component1,</span><br><span class="line">        component2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h4><h5 id="默认插槽"><a href="#默认插槽" class="headerlink" title="默认插槽"></a>默认插槽</h5><p>​通过调用组件的方式，使用双标签写法，将包裹的元素传递给组件，组件使用<slot> 标签占位显示</slot></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// Son.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;div&gt;Son组件&lt;/div&gt;</span><br><span class="line">        &lt;!-- 不传默认显示default --&gt;</span><br><span class="line">        &lt;solt&gt;default&lt;/solt&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// parent.vue</span><br><span class="line">// Son.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;div&gt;Parent组件&lt;/div&gt;</span><br><span class="line">        &lt;Son&gt;</span><br><span class="line">    &lt;div&gt;默认插槽&lt;/div&gt;</span><br><span class="line">    &lt;/Son&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Son from &#x27;./Son.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;parent&#x27;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        Son</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h5><p>​将多个元素利用命名来分别占位到子组件的不同的<slot>标签</slot></p><p>​子组件命名使用 name属性； 父组件使用v-slot:<name>, 简写 #<name>; 传入插槽标签使用<template></template></name></name></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// Son.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;slot name=&quot;title&quot;&gt;&lt;/slot&gt;</span><br><span class="line">        &lt;div&gt;标题&lt;/div&gt;</span><br><span class="line">        &lt;div&gt;页脚&lt;/div&gt;</span><br><span class="line">        &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//parent.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;div&gt;Parent组件&lt;/div&gt;</span><br><span class="line">        &lt;Son&gt;</span><br><span class="line">    &lt;template v-slot:title&gt;标题之前&lt;/template&gt;</span><br><span class="line">&lt;template #footer&gt;页脚之后&lt;/template&gt;</span><br><span class="line">    &lt;/Son&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Son from &#x27;./Son.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;parent&#x27;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        Son</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h5><p>​让父组件使用插槽时可以访问子组件内部的数据 ， 子组件使用 :row 属性将数据暴露，row并非固定命名；父组件使用v-slot&#x3D;”scope”,接收 使用scope. 就能使用，scope并非固定命名</p><p>​#title&#x3D;”scope”  是具名插槽加作用域的写法，同一标签中不能使用多个v-slot指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// Son.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;slot name=&quot;title&quot; :row=&quot;title&quot;&gt;&lt;/slot&gt;</span><br><span class="line">        &lt;div&gt;标题&lt;/div&gt;</span><br><span class="line">        &lt;div&gt;页脚&lt;/div&gt;</span><br><span class="line">        &lt;slot name=&quot;footer&quot; :row=&quot;footer&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">    name: &#x27;Son&#x27;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            title: &quot;Son组件：title&quot;,</span><br><span class="line">            footer: &quot;Son组件：footer&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// Son.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;div&gt;Parent组件&lt;/div&gt;</span><br><span class="line">        &lt;Son&gt;</span><br><span class="line">    &lt;template #title=&quot;scope&quot;&gt;标题之前, 子组件title数据-&#123;&#123;scopt.title&#125;&#125;&lt;/template&gt;</span><br><span class="line">&lt;template #footer=&quot;scope&quot;&gt;页脚之后 子组件footer数据-&#123;&#123;scopt.footer&#125;&#125;&lt;/template&gt;</span><br><span class="line">    &lt;/Son&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Son from &#x27;./Son.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;parent&#x27;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        Son </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h4><p>​除了可以用封装组件的形式来代码复用和抽象，也可以使用自定义指令。</p><ul><li>全局指令创建</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTop</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局注册自定义指令 - v-has</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;has&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">inserted</span>(<span class="params">el</span>)&#123;</span><br><span class="line">        <span class="comment">// 逻辑操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 初始化Vue实例</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="comment">// 在id为app的div盒子上渲染App.vue组件</span></span><br><span class="line">    <span class="attr">render</span>:<span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">    </span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>) <span class="comment">// 挂载容器，将vue实例插入到id为app的div盒子</span></span><br></pre></td></tr></table></figure><ul><li>局部指令创建</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &quot;App&quot;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 局部注册自定义指令</span><br><span class="line">    directives:&#123;</span><br><span class="line">        has:&#123;</span><br><span class="line">            inserted: function(el)&#123;</span><br><span class="line">                // 逻辑操作</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>案例- 访问当前页面时，input自动聚焦 - v-focus</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-focus&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &quot;App&quot;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 局部注册自定义指令</span><br><span class="line">    directives:&#123;</span><br><span class="line">        focus:&#123;</span><br><span class="line">            inserted: function(el)&#123;</span><br><span class="line">                el.focus();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>案例 - 按钮级权限( 显示或隐藏判断) - v-has</p><p>pass</p></li></ul><h4 id="自定义指令传参"><a href="#自定义指令传参" class="headerlink" title="自定义指令传参"></a>自定义指令传参</h4><p>pass</p><h4 id="路由VueRouter-3"><a href="#路由VueRouter-3" class="headerlink" title="路由VueRouter 3"></a>路由VueRouter 3</h4><h5 id="vue-router使用"><a href="#vue-router使用" class="headerlink" title="vue-router使用"></a>vue-router使用</h5><ul><li>封装路由规则</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /router/index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-rotuer&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义路由规则</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 路由响应路径</span></span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/users/:id&#x27;</span>, </span><br><span class="line">        <span class="comment">// 命名路由</span></span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;profile&#x27;</span>, </span><br><span class="line">        <span class="comment">// 响应模板(路由懒加载)</span></span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./views/UserDetails.vue&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由实例对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    routes,</span><br><span class="line">    <span class="comment">// 路由模式</span></span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> rotuer;</span><br></pre></td></tr></table></figure><ul><li>挂载封装好的router</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&#x27;@/router/index.js&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="comment">// 在id为app的div盒子上渲染App.vue组件</span></span><br><span class="line">    <span class="attr">render</span>:<span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">    <span class="comment">// 挂载路由</span></span><br><span class="line">    <span class="title class_">Router</span></span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>) <span class="comment">// 挂载容器，将vue实例插入到id为app的div盒子</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">或使用Vue.use(Router)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>App.vue中使用内置路由占位组件 - RouteView (router-view)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// ./src/App.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;RouterView /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h5 id="RouteLink-内置组件"><a href="#RouteLink-内置组件" class="headerlink" title="RouteLink 内置组件"></a>RouteLink 内置组件</h5><p>​页面导航，最终会被翻译为a标签，to属性翻译成herf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// ./src/App.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;router-link to=&quot;/home&quot;&gt;首页&lt;/router-link&gt;</span><br><span class="line">        &lt;router-link to=&quot;/user&quot;&gt;用户&lt;/router-link&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;RouterView /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li>与a标签区别</li></ul><h5 id="动态路由匹配-路由传参"><a href="#动态路由匹配-路由传参" class="headerlink" title="动态路由匹配 - 路由传参"></a>动态路由匹配 - 路由传参</h5><h6 id="params"><a href="#params" class="headerlink" title="params"></a>params</h6><table><thead><tr><th>模式</th><th>匹配路径</th><th>$route.params</th></tr></thead><tbody><tr><td>&#x2F;user&#x2F;:username</td><td>&#x2F;user&#x2F;evan</td><td><code>&#123; username: &#39;evan&#39; &#125;</code></td></tr><tr><td>&#x2F;user&#x2F;:username&#x2F;post&#x2F;:post_id</td><td>&#x2F;user&#x2F;evan&#x2F;post&#x2F;123</td><td><code>&#123; username: &#39;evan&#39;, post_id: &#39;123&#39; &#125;</code></td></tr></tbody></table><ul><li><p>路由规则为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">User</span> <span class="keyword">from</span> <span class="string">&#x27;@/view/userList.vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    <span class="comment">// 动态路径参数 以冒号开头</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在模板中匹配 ( 使用 $route.params 获取参数)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// App.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;router-link to=&quot;/user/100&quot;&gt;用户&lt;/router-link&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;RouterView /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// userList.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt; 传递参数 &#123;&#123; $route.params.id&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li></ul><h6 id="query"><a href="#query" class="headerlink" title="query"></a>query</h6><ul><li><p>路由规则为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">User</span> <span class="keyword">from</span> <span class="string">&#x27;@/view/userList.vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    <span class="comment">// 动态路径参数 以冒号开头</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在模板中匹配 ( 使用 $route.query 获取参数)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// App.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;router-link to=&quot;/user?username=&#x27;张三&#x27;&amp;age=&#x27;23&#x27;&quot;&gt;用户&lt;/router-link&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;RouterView /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// userList.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt; 传递参数 &#123;&#123; $route.query.username&#125;&#125; - &#123;&#123; $route.query.age&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li></ul><h5 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h5><ul><li><p>路由规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">User</span> <span class="keyword">from</span> <span class="string">&#x27;@/view/userList.vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    <span class="comment">// 动态路径参数 以冒号开头</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>, <span class="attr">component</span>: <span class="title class_">User</span>, <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span> &#125;,</span><br><span class="line">    <span class="comment">// 利用path</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/userList&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/user&#x27;</span>&#125;,</span><br><span class="line">    <span class="comment">// 利用命名</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/userList&#x27;</span>, <span class="attr">redirect</span>: &#123;<span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h5 id="404-页面"><a href="#404-页面" class="headerlink" title="404 页面"></a>404 页面</h5><p>​路由规则是从上到下检索的，所以404需要放在最下面。</p><ul><li><p>路由规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">User</span> <span class="keyword">from</span> <span class="string">&#x27;@/view/userList.vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    <span class="comment">// 动态路径参数 以冒号开头</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>, <span class="attr">component</span>: <span class="title class_">User</span>, <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span> &#125;,</span><br><span class="line">    <span class="comment">// 利用path</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/userList&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/user&#x27;</span>&#125;,</span><br><span class="line">    <span class="comment">// 或利用命名</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/userList&#x27;</span>, <span class="attr">redirect</span>: &#123;<span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>&#125;，</span><br><span class="line">    <span class="comment">// 上面的路由没有匹配到，剩下的所有 * 多会进入404页面</span></span><br><span class="line">    &#123; path： <span class="string">&#x27;*&#x27;</span>, <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./views/404.vue&#x27;</span>)&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h5 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h5><h6 id="router-push"><a href="#router-push" class="headerlink" title="router.push()"></a>router.push()</h6><table><thead><tr><th>声明式</th><th>编程式</th></tr></thead><tbody><tr><td><code>&lt;router-link :to=&quot;...&quot;&gt;</code></td><td><code>router.push(...)</code></td></tr></tbody></table><ul><li><p>使用方法</p><p><strong>在 Vue 2，你可以通过 <code>$router</code> 访问路由实例。因此你可以调用 <code>this.$router.push</code>。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串</span></span><br><span class="line">router.<span class="title function_">push</span>(<span class="string">&#x27;home&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;home&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名的路由</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>, <span class="attr">params</span>: &#123; <span class="attr">userId</span>: <span class="string">&#x27;123&#x27;</span> &#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带查询参数，变成 /register?plan=private</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;register&#x27;</span>, <span class="attr">query</span>: &#123; <span class="attr">plan</span>: <span class="string">&#x27;private&#x27;</span> &#125;&#125;)</span><br></pre></td></tr></table></figure></li></ul><h6 id="router-replace"><a href="#router-replace" class="headerlink" title="router.replace"></a>router.replace</h6><p>​跟 <code>router.push</code> 很像，唯一的不同就是，它不会向 history 添加新记录, 而是会替换掉当前的 history 记录。</p><table><thead><tr><th>声明式</th><th>编程式</th></tr></thead><tbody><tr><td><code>&lt;router-link :to=&quot;...&quot; replace&gt;</code></td><td><code>router.replace(...)</code></td></tr></tbody></table><h6 id="router-go-n"><a href="#router-go-n" class="headerlink" title="router.go(n)"></a>router.go(n)</h6><p>这个方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步，类似 <code>window.history.go(n)</code>。</p><ul><li><p>使用方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在浏览器记录中前进一步，等同于 history.forward()</span></span><br><span class="line">router.<span class="title function_">go</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后退一步记录，等同于 history.back()</span></span><br><span class="line">router.<span class="title function_">go</span>(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前进 3 步记录</span></span><br><span class="line">router.<span class="title function_">go</span>(<span class="number">3</span>)</span><br></pre></td></tr></table></figure></li></ul><h5 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h5><p>​在一个路由里面嵌套其他子路由，在路由规则中使用children定义子路由</p><ul><li><p>路由规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">User</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">// 当 /user/profile 匹配成功，</span></span><br><span class="line">          <span class="comment">// UserProfile 会被渲染在 User 的 &lt;router-view&gt; 中</span></span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;profile&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="title class_">UserProfile</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">// 当 /user/posts 匹配成功</span></span><br><span class="line">          <span class="comment">// UserPosts 会被渲染在 User 的 &lt;router-view&gt; 中</span></span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;posts&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="title class_">UserPosts</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h5 id="Router实例属性"><a href="#Router实例属性" class="headerlink" title="Router实例属性"></a>Router实例属性</h5><ul><li>导航守卫 - router.beforeEach()</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flex弹性盒子布局</title>
      <link href="/2022/10/23/Flex%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90%E5%B8%83%E5%B1%80/"/>
      <url>/2022/10/23/Flex%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h2><p>​Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性</p><h3 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>​利用Flex 布局的元素，称为Flex，简称“容器”，旗下所有子元素自动成为容器成员</p><h4 id="容器属性-1"><a href="#容器属性-1" class="headerlink" title="容器属性"></a>容器属性</h4><h5 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a><strong>flex-direction</strong></h5><p><code>flex-direction</code>属性决定主轴的方向（项目的排列方向）</p><p><img src="/2022/10/23/Flex%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90%E5%B8%83%E5%B1%80/flex-direction.png" alt="flex-direction"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">row（默认值）：主轴为水平方向，起点在左端</span></span><br><span class="line"><span class="comment">row-reverse : 主轴为水平方向，起点在右端</span></span><br><span class="line"><span class="comment">column ：主轴为垂直方向，起点在上沿</span></span><br><span class="line"><span class="comment">column-reverse ：主轴为垂直方向，起点在下沿</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="flex-warp"><a href="#flex-warp" class="headerlink" title="flex-warp"></a><strong>flex-warp</strong></h5><p><code>flex-wrap</code>属性定义，如果一条轴线排不下，如何换行。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">nowrap（默认） ：不换行</span></span><br><span class="line"><span class="comment">warp ：换行，第一行在上方</span></span><br><span class="line"><span class="comment">warp-reverse ：换行，第一行在下方</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a><strong>flex-flow</strong></h5><p><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a><strong>justify-content</strong></h5><p><img src="/2022/10/23/Flex%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90%E5%B8%83%E5%B1%80/justify-content.png" alt="justify-content"></p><p><code>justify-content</code>属性定义了项目在主轴上的对齐方式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">flex-start（默认值）：左对齐</span></span><br><span class="line"><span class="comment">flex-end ：右对齐</span></span><br><span class="line"><span class="comment">center ： 居中对齐</span></span><br><span class="line"><span class="comment">space-between ：两端对齐。间隔相等</span></span><br><span class="line"><span class="comment">space-around ：每个项目两侧的间隔相等</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a><strong>align-items</strong></h5><p><img src="/2022/10/23/Flex%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90%E5%B8%83%E5%B1%80/align-items.png" alt="align-items"></p><p><code>align-items</code>属性定义项目在交叉轴上如何对齐</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">streth（默认值） ：如果项目未设置高度值或设置为auto，将占满震整个容器高度</span></span><br><span class="line"><span class="comment">flex-start ： 顶格对齐</span></span><br><span class="line"><span class="comment">flex-end ：底部对齐</span></span><br><span class="line"><span class="comment">center ： 居中对齐</span></span><br><span class="line"><span class="comment">baseline ： 项目的第一行文字基线对齐</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a><strong>align-content</strong></h5><p><code>align-content</code>属性定义了多根轴线的对齐方式。<code>如果项目只有一根轴线，该属性不起作用</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">stretch（默认值） ：轴线占满整个高度</span></span><br><span class="line"><span class="comment">flex-start ：靠顶部对齐</span></span><br><span class="line"><span class="comment">flex-end ：靠底部对齐</span></span><br><span class="line"><span class="comment">center ：居中对齐</span></span><br><span class="line"><span class="comment">soace-between ：两端对齐</span></span><br><span class="line"><span class="comment">space-around ：每根轴线两侧间隔相等</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="子元素属性"><a href="#子元素属性" class="headerlink" title="子元素属性"></a>子元素属性</h4><h5 id="order"><a href="#order" class="headerlink" title="order"></a><strong>order</strong></h5><p><img src="/2022/10/23/Flex%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90%E5%B8%83%E5%B1%80/order.png" alt="order"></p><p><code>order</code>属性定义项目的排列顺序。数值越小，排列越靠前，默认为0</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: &lt;integer&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a><strong>flex-grow</strong></h5><p><img src="/2022/10/23/Flex%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90%E5%B8%83%E5%B1%80/flex-grow.png" alt="flex-grow"></p><p><code>flex-grow</code>属性定义项目的放大比例，默认为<code>0</code>，即如果存在剩余空间，也不放大</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: &lt;number&gt;; <span class="comment">/* default 0 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a><strong>flex-shrink</strong></h5><p><img src="/2022/10/23/Flex%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90%E5%B8%83%E5%B1%80/flex-shrink.png" alt="flex-shrink"></p><p><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: &lt;number&gt;; <span class="comment">/* default 1 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小;负值对该属性无效</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h5><p><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间,它的默认值为<code>auto</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: &lt;length&gt; | auto; <span class="comment">/* default auto */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="flex"><a href="#flex" class="headerlink" title="flex"></a><strong>flex</strong></h5><p><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: none | [ &lt;<span class="string">&#x27;flex-grow&#x27;</span>&gt; &lt;<span class="string">&#x27;flex-shrink&#x27;</span>&gt;? || &lt;<span class="string">&#x27;flex-basis&#x27;</span>&gt; ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。</span></span><br><span class="line"><span class="comment">建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a><strong>align-self</strong></h5><p><img src="/2022/10/23/Flex%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90%E5%B8%83%E5%B1%80/align-self.png" alt="align-self"></p><p><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式,可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="案例-nav"><a href="#案例-nav" class="headerlink" title="案例 - nav"></a>案例 - nav</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span>,<span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">list-style</span>:none;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu_con</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">960px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:<span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">50px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>:flex;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.logo</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span>&#123;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">flex-grow</span>:<span class="number">1</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css"><span class="attribute">align-items</span>:center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">overflow</span>:hidden;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">flex-grow</span>:<span class="number">1</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-right</span>:<span class="number">1px</span> solid <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-right</span>:-<span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-decoration</span>:none;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:<span class="number">#666</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="keyword">@media</span> (<span class="attribute">max-width</span>:<span class="number">960px</span>)&#123;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu_con</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu_con&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;menu&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>公司简介<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>公司新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>行业动态<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>联系我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/10/23/Flex%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90%E5%B8%83%E5%B1%80/nav.gif" alt="nav案例"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> css </category>
          
          <category> flex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
            <tag> flex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaScript第一章</title>
      <link href="/2022/09/07/javaScript%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
      <url>/2022/09/07/javaScript%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="js嵌入页面的方式"><a href="#js嵌入页面的方式" class="headerlink" title="js嵌入页面的方式"></a>js嵌入页面的方式</h3><ul><li><p><strong>内联脚本（Inline Script）</strong>：将JavaScript代码直接写在HTML文件中的<code>&lt;script&gt;</code>标签内。这种方式简单直接，适用于少量代码的情况。优点是方便快捷，缺点是可维护性较差，不利于代码的复用和分离。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// JavaScript code here</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>外部脚本（Internal Script）</strong>：将JavaScript代码写在HTML文件的<code>&lt;script&gt;</code>标签内，但是通过src属性引入外部JavaScript文件。这种方式适用于较大的JavaScript代码或多个页面共用的代码。优点是可以将JavaScript代码单独存放在外部文件中，方便维护和复用，缺点是需要额外的HTTP请求来加载外部文件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;hello.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>行间事件</strong>,onclick、onmouseover等。这种方式可以在HTML标签中直接定义事件处理函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;弹框&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;hello!&#x27;)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="js注释"><a href="#js注释" class="headerlink" title="js注释"></a>js注释</h3><ul><li><p>单行文本注释</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure></li><li><p>多行文本注释</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="js基础语法及dom操作"><a href="#js基础语法及dom操作" class="headerlink" title="js基础语法及dom操作"></a>js基础语法及dom操作</h3><h4 id="变量声明-const-let-var"><a href="#变量声明-const-let-var" class="headerlink" title="变量声明-const let var"></a>变量声明-const let var</h4><ol><li><p>var</p><ul><li><p><strong>区别</strong>：使用var声明的变量是函数作用域（function-scoped），在函数内部声明的变量在函数外部不可访问。</p></li><li><p><strong>优点</strong>：在ES5及之前的版本中是唯一的声明变量的方式，兼容性较好。</p></li><li><p><strong>缺点</strong>：存在变量提升（hoisting）的问题，可能会导致意外的行为；没有块级作用域，可能会造成变量污染。</p></li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br></pre></td></tr></table></figure><ol start="2"><li><p>let</p><ul><li><p><strong>区别</strong>：使用let声明的变量是块级作用域（block-scoped），在块级作用域内声明的变量只在该块内部有效。</p></li><li><p><strong>优点</strong>：解决了var存在的变量提升和缺乏块级作用域的问题，更安全和可靠。</p></li><li><p><strong>缺点</strong>：在ES6之前的浏览器可能不支持。</p></li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> y = <span class="number">20</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y);</span><br></pre></td></tr></table></figure><ol start="3"><li><p>const</p><ul><li><p><strong>区别</strong>：使用const声明的变量是常量，一旦赋值就不能再修改。</p></li><li><p><strong>优点</strong>：可以确保变量的值不会被意外修改，提高代码的可靠性。</p></li><li><p><strong>缺点</strong>：必须在声明时初始化，且不能再次赋值，不适用于需要动态改变值的情况。</p></li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span>;</span><br><span class="line"><span class="variable constant_">PI</span> = <span class="number">3.14159</span>; </span><br></pre></td></tr></table></figure><h4 id="js-基本数据类型"><a href="#js-基本数据类型" class="headerlink" title="js 基本数据类型"></a>js 基本数据类型</h4><ul><li><p>基本数据类型</p><ol><li>Number</li><li>String</li><li>Boolean</li><li>Undefined</li><li>null</li><li>symbol</li></ol></li><li><p>引用类型（object）</p><p>复杂数据类型统称为Object  es6新添加有 Set  Map</p></li></ul><p>基本数据类型存储在栈中；引用类型的对象存储在堆中; 当变量赋值，解析器首先要确认引用类型还是基本类型</p><ul><li>声明变量时不同的内存地址分配：<ul><li>简单类型的值存放在栈中，在栈中存放的是对应的值</li><li>引用类型对应的值存储在堆中，在栈中存放的是指向堆内存的地址</li></ul></li><li>不同的类型数据导致赋值变量时的不同：<ul><li>简单类型赋值，是生成相同的值，两个对象对应不同的地址</li><li>复杂类型赋值，是将保存对象的内存地址赋值给另一个变量。也就是两个变量指向堆内存中同一个对象</li></ul></li></ul><h4 id="js-操作属性"><a href="#js-操作属性" class="headerlink" title="js 操作属性"></a>js 操作属性</h4><ul><li>js通过document.getElementById获取DOM元素，</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>js 基本语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">onload是window窗口对象的事件属性， 语句是把“匿名函数”赋值给window的onload事件属性， 当window加载完成时会触发onload事件，也就触发了“匿名函数”，执行函数体内的语句。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">*/</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 获取DOM元素</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> oA = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;link1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 修改元素href属性</span></span></span><br><span class="line"><span class="language-javascript">oA.<span class="property">href</span> = <span class="string">&quot;http://www.baidu.com&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 修改元素title属性</span></span></span><br><span class="line"><span class="language-javascript">oA.<span class="property">title</span> = <span class="string">&quot;go baidu.com&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 浏览器弹窗</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(oA.<span class="property">id</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span> <span class="attr">title</span>=<span class="string">&quot;这是div元素，看到了吗？&quot;</span>&gt;</span>div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">id</span>=<span class="string">&quot;link1&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>css的属性 - 的，在js中可以用大写表示； 例如 font-size &#x3D;&gt; fintSize,</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;div1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// style属性中的样式属性，没有“-”的，写法相同</span></span></span><br><span class="line"><span class="language-javascript">oDiv.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">oDiv.<span class="property">style</span>.<span class="property">background</span> = <span class="string">&quot;gold&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// style属性中的样式属性，带有“-”的，写成驼峰式</span></span></span><br><span class="line"><span class="language-javascript">oDiv.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="string">&quot;30px&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="js操作class-className"><a href="#js操作class-className" class="headerlink" title="js操作class - className"></a>js操作class - className</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box01</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box02</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;div1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 通过className修改元素的class</span></span></span><br><span class="line"><span class="language-javascript">oDiv.<span class="property">className</span> = <span class="string">&#x27;box02&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box01&quot;</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="通过-的方式修改元素属性"><a href="#通过-的方式修改元素属性" class="headerlink" title="通过 [ ] 的方式修改元素属性"></a>通过 [ ] 的方式修改元素属性</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;div1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">/* 通过 [] 操作属性可以写变量*/</span></span></span><br><span class="line"><span class="language-javascript">oDiv[<span class="string">&#x27;style&#x27;</span>][<span class="string">&#x27;color&#x27;</span>] = <span class="string">&#x27;red&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/* 通过 innerHTML可以读写元素的内容*/</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(oDiv.<span class="property">innerHTML</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> oDiv2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;div2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">/*oDiv2.innerHTML = &#x27;已修改后的内容&#x27;;*/</span></span></span><br><span class="line"><span class="language-javascript">oDiv2.<span class="property">innerHTML</span> = <span class="string">&quot;&lt;a href=&#x27;http://www.baidu.com&#x27;&gt;百度&lt;/a&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="函数，onclick事件"><a href="#函数，onclick事件" class="headerlink" title="函数，onclick事件"></a>函数，onclick事件</h4><ul><li><p>js函数由 function 声明</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">aa</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 逻辑操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>onclick() 事件</p></li></ul><p>  给元素添加点击事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>javascript 函数<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">inputAlert</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;hello!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;弹框&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;inputAlert()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="案例-点击给元素换色"><a href="#案例-点击给元素换色" class="headerlink" title="案例 - 点击给元素换色"></a>案例 - 点击给元素换色</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>换肤<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;1.css&quot;</span> <span class="attr">id</span>=<span class="string">&quot;link1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> oBtn01 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn01&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> oBtn02 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn02&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">oBtn01.<span class="property">onclick</span> = skin01;</span></span><br><span class="line"><span class="language-javascript">oBtn02.<span class="property">onclick</span> = skin02;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 通过修改link标签属性，修改不同的css文件，达到换肤效果</span></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">function</span> <span class="title function_">skin01</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">var</span> oLink = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;link1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"> oLink.<span class="property">href</span> = <span class="string">&#x27;1.css&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"> &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">function</span> <span class="title function_">skin02</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">var</span> oLink = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;link1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"> oLink.<span class="property">href</span> = <span class="string">&#x27;2.css&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"> &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;皮肤01&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn01&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;皮肤02&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn02&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box01&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box02&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="通过js给元素添加onclick事件"><a href="#通过js给元素添加onclick事件" class="headerlink" title="通过js给元素添加onclick事件"></a>通过js给元素添加onclick事件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;div1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 给元素添加点击事件，执行匿名函数</span></span></span><br><span class="line"><span class="language-javascript">oDiv.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(<span class="string">&#x27;hello!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="函数传参"><a href="#函数传参" class="headerlink" title="函数传参"></a>函数传参</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;div1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">changestyle</span>(<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;gold&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">changestyle</span>(<span class="string">&#x27;background&#x27;</span>,<span class="string">&#x27;red&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">changestyle</span>(<span class="string">&#x27;width&#x27;</span>,<span class="string">&#x27;300px&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">changestyle</span>(<span class="string">&#x27;height&#x27;</span>,<span class="string">&#x27;300px&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">changestyle</span>(<span class="string">&#x27;fontSize&#x27;</span>,<span class="string">&#x27;30px&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">changestyle</span>(<span class="params">styl,val</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">oDiv.<span class="property">style</span>[styl] = val;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="函数-return-关键字"><a href="#函数-return-关键字" class="headerlink" title="函数 return 关键字"></a>函数 return 关键字</h4><ul><li>在函数内部使用<code>return</code>关键字可以将一个值返回给调用该函数的地方。</li><li><code>return</code>后面可以跟着一个表达式、变量、常量或者函数调用。</li><li>如果函数没有明确使用<code>return</code>语句，默认会返回<code>undefined</code>。</li><li>一个函数可以有多个<code>return</code>语句，但一旦执行到其中一个<code>return</code>语句，函数就会结束。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> a !== <span class="string">&#x27;number&#x27;</span> || <span class="keyword">typeof</span> b !== <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Please provide valid numbers&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 正常计算乘积并返回</span></span><br><span class="line">  <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkNumber</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (num &gt; ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Positive&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num &lt; ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Negative&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 没有明确返回值，默认返回undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">multiply</span>(<span class="number">5</span>, <span class="number">3</span>)); <span class="comment">// 输出：15</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">multiply</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="number">3</span>)); <span class="comment">// 输出：Please provide valid numbers</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">checkNumber</span>(<span class="number">10</span>)); <span class="comment">// 输出：Positive</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">checkNumber</span>(-<span class="number">5</span>)); <span class="comment">// 输出：Negative</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">checkNumber</span>()); <span class="comment">// 输出：undefined</span></span><br></pre></td></tr></table></figure><h4 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h4><ul><li><p>if</p><ul><li><code>if</code>语句允许根据条件执行代码块。</li><li>语法：<code>if (condition) &#123; // code to be executed &#125;</code></li></ul></li><li><p>if … else …</p><ul><li><code>if</code>语句允许根据条件执行代码块。</li><li>语法：<code>if (condition) &#123; // code to be executed &#125;</code></li></ul></li><li><p>switch</p><ul><li><p><code>switch</code>语句用于根据不同的情况执行不同的代码块。</p></li><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="attr">value1</span>:</span><br><span class="line">    <span class="comment">// code block 1</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="attr">value2</span>:</span><br><span class="line">    <span class="comment">// code block 2</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    <span class="comment">// default code block</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>三元运算符</p><ul><li><p>三元运算符是一种简洁的条件语句，可以代替简单的<code>if ... else ...</code>语句。</p></li><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果条件为真，则返回`expression1`；否则返回`expression2`。</span></span><br><span class="line">condition ? expression1 : expression2</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html5+css3</title>
      <link href="/2022/08/25/html5-css3/"/>
      <url>/2022/08/25/html5-css3/</url>
      
        <content type="html"><![CDATA[<p>&#96;</p><h2 id="html5"><a href="#html5" class="headerlink" title="html5"></a>html5</h2><h3 id="新标签"><a href="#新标签" class="headerlink" title="新标签"></a>新标签</h3><p>​HTML5引入了一些新的语义化标签，这些标签旨在更好地描述网页的结构和内容，提供更好的可读性和可访问性。</p><p>​这些新标签的引入有助于更好地组织和描述网页内容，提高可读性和可访问性。使用这些标签可以使网页结构更清晰，并为搜索引擎和辅助技术提供更多信息</p><ol><li><code>&lt;header&gt;</code>：定义文档或节的页眉，通常包含网站的标题、导航栏等内容。</li><li><code>&lt;nav&gt;</code>：定义导航链接的容器，用于包含网站的导航菜单。</li><li><code>&lt;section&gt;</code>：定义文档中的一个节或区块，通常包含一组相关的内容。</li><li><code>&lt;article&gt;</code>：定义独立的、完整的文章内容，如博客文章、新闻报道等。</li><li><code>&lt;aside&gt;</code>：定义页面的侧边栏内容，通常包含与主要内容相关但可以独立存在的内容。</li><li><code>&lt;footer&gt;</code>：定义文档或节的页脚，通常包含版权信息、联系方式等内容。</li><li><code>&lt;main&gt;</code>：定义文档的主要内容，每个文档中只能包含一个<code>&lt;main&gt;</code>标签。</li><li><code>&lt;figure&gt;</code>：定义一组媒体内容（如图像、图表、音频、视频等）及其标题。</li><li><code>&lt;figcaption&gt;</code>：定义<code>&lt;figure&gt;</code>元素的标题，用于描述与<code>&lt;figure&gt;</code>相关的媒体内容。</li><li><code>&lt;time&gt;</code>：定义日期或时间，可以用于表示发布日期、事件时间等。</li></ol><h3 id="表单控件"><a href="#表单控件" class="headerlink" title="表单控件"></a>表单控件</h3><p>​HTML5引入了一些新的表单控件，使得在网页中创建表单更加灵活和功能丰富。</p><ol><li><code>&lt;input type=&quot;date</code>：日期选择器，允许用户选择日期。</li><li><code>&lt;input=&quot;time&quot;&gt;</code>：时间输入框，允许用户选择时间。</li><li><code>&lt;input type=&quot;&quot;&gt;</code>：用于输入电子邮件地址，并提供浏览器端验证。</li><li><code>&lt;input type=&quot;url&quot;&gt;</code>：用于输入URL地址，并提供浏览器端验证。</li><li><code>&lt;input type=&quot;number&quot;&gt;</code>：数字输入框，允许用户输入数字，并可以设置小值、最大值等属性。</li><li><code>&lt;input type=&quot;range&quot;&gt;</code>：范围滑块，允许用户通过拖动块来选择一个值范围。</li><li><code>&lt;input type=&quot;color&quot;&gt;</code>颜色选择器，允许用户选择颜色。<br> 除了上述的新类型外，在 HTML 5还引入了对 <code>placeholder</code>, <code>autofocus</code>, <code>required</code>, 和 <code>pattern</code>(使用正则表达式进行简单格式验证) 属性的支持。</li></ol><ul><li>placeholder 设置默认提示文字</li><li>autofocus  设置自动获取焦点</li><li>autocomplete 设置是否有联想下拉，一般设置为“off”，将它关掉</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>网址:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">required</span> <span class="attr">placeholder</span>=<span class="string">&quot;http://xxx&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>邮箱:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">required</span> <span class="attr">placeholder</span>=<span class="string">&quot;123xxx@xxx.com&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>日期:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>时间:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;time&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>星期:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;week&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>数量:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>范围:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>电话:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;tel&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>颜色:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>搜索:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/25/html5-css3/%E8%A1%A8%E5%8D%95%E6%8E%A7%E4%BB%B6.png"></p><h3 id="音频视频"><a href="#音频视频" class="headerlink" title="音频视频"></a>音频视频</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>h5 音频 视频<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span>  <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">loop</span> <span class="attr">preload</span> <span class="attr">muted</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;source src=&quot;source/audio.mp3&quot; type=&quot;&quot;&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;source/audio02.wav&quot;</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span>  <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">loop</span> <span class="attr">preload</span> <span class="attr">width</span>=<span class="string">&quot;600&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;source/mov.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;source/mov.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/25/html5-css3/%E9%9F%B3%E9%A2%91%E8%A7%86%E9%A2%91.png"></p><h2 id="css3"><a href="#css3" class="headerlink" title="css3"></a>css3</h2><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><ul><li><p>id选择器（#box），选择id为box的元素</p></li><li><p>类选择器（.one），选择类名为one的所有元素</p></li><li><p>标签选择器（div），选择标签为div的所有元素</p></li><li><p>后代选择器（#box div），选择id为box元素内部所有的div元素</p></li><li><p>子选择器（.one&gt;one_1），选择父元素为.one的所有.one_1的元素</p></li><li><p>相邻同胞选择器（.one+.two），选择紧接在.one之后的所有.two元素</p></li><li><p>群组选择器（div,p），选择div、p的所有元素</p></li><li><p>伪类选择器</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">:first-of-type 表示一组同级元素中其类型的第一个元素</span><br><span class="line">:last-of-type 表示一组同级元素中其类型的最后一个元素</span><br><span class="line">:only-of-type 表示没有同类型兄弟元素的元素</span><br><span class="line">:only-child 表示没有任何兄弟的元素</span><br><span class="line">:nth-child(n) 根据元素在一组同级中的位置匹配元素</span><br><span class="line">:nth-last-of-type(n) 匹配给定类型的元素，基于它们在一组兄弟元素中的位置，从末尾开始计数</span><br><span class="line">:last-child 表示一组兄弟元素中的最后一个元素</span><br><span class="line">:root 设置HTML文档</span><br><span class="line">:empty 指定空的元素</span><br><span class="line">:enabled 选择可用元素</span><br><span class="line">:disabled 选择被禁用元素</span><br><span class="line">:checked 选择选中的元素</span><br><span class="line">:not(selector) 选择与 &lt;selector&gt; 不匹配的所有元素</span><br></pre></td></tr></table></figure></li><li><p>伪元素选择器</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:first-letter ：用于选取指定选择器的首字母</span><br><span class="line">:first-line ：选取指定选择器的首行</span><br><span class="line">:before : 选择器在被选元素的内容前面插入内容</span><br><span class="line">:after : 选择器在被选元素的内容后面插入内容</span><br></pre></td></tr></table></figure></li><li><p>属性选择器</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[attribute] 选择带有attribute属性的元素</span><br><span class="line">[attribute=value] 选择所有使用attribute=value的元素</span><br><span class="line">[attribute~=value] 选择attribute属性包含value的元素</span><br><span class="line">[attribute|=value]：选择attribute属性以value开头的元素</span><br><span class="line">[attribute*=value]：选择attribute属性值包含value的所有元素</span><br><span class="line">[attribute^=value]：选择attribute属性开头为value的所有元素</span><br><span class="line">[attribute$=value]：选择attribute属性结尾为value的所有元素</span><br></pre></td></tr></table></figure></li><li><p>层次选择器（p~ul），选择前面有p元素的每个ul元素</p></li></ul><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>​内联 &gt; ID选择器 &gt; 类选择器 &gt; 标签选择器</p><p>​经过上面的优先级计算规则，我们知道内联样式的优先级最高，如果外部样式需要覆盖内联样式，就需要使用<code>!important</code></p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h4 id="继承属性"><a href="#继承属性" class="headerlink" title="继承属性"></a>继承属性</h4><ul><li><p>字体系列属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font</span>:组合字体</span><br><span class="line">font-family:规定元素的字体系列</span><br><span class="line">font-weight:设置字体的粗细</span><br><span class="line">font-size:设置字体的尺寸</span><br><span class="line">font-style:定义字体的风格</span><br><span class="line">font-variant:偏大或偏小的字体</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>文本系列属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-indent</span>：文本缩进</span><br><span class="line"><span class="attribute">text-align</span>：文本水平对刘</span><br><span class="line"><span class="attribute">line-height</span>：行高</span><br><span class="line"><span class="attribute">word-spacing</span>：增加或减少单词间的空白</span><br><span class="line"><span class="attribute">letter-spacing</span>：增加或减少字符间的空白</span><br><span class="line"><span class="attribute">text-transform</span>：控制文本大小写</span><br><span class="line"><span class="attribute">direction</span>：规定文本的书写方向</span><br><span class="line"><span class="attribute">color</span>：文本颜色</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>元素可见性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">visibility</span></span><br></pre></td></tr></table></figure></li><li><p>表格布局属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">caption-side</span>：定位表格标题位置</span><br><span class="line"><span class="attribute">border-collapse</span>：合并表格边框</span><br><span class="line"><span class="attribute">border-spacing</span>：设置相邻单元格的边框间的距离</span><br><span class="line"><span class="attribute">empty-cells</span>：单元格的边框的出现与消失</span><br><span class="line"><span class="attribute">table-layout</span>：表格的宽度由什么决定</span><br></pre></td></tr></table></figure></li><li><p>列表属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">list-style-type</span>：文字前面的小点点样式</span><br><span class="line"><span class="attribute">list-style-position</span>：小点点位置</span><br><span class="line"><span class="attribute">list-style</span>：以上的属性可通过这属性集合</span><br></pre></td></tr></table></figure></li><li><p>引用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">quotes</span>：设置嵌套引用的引号类型</span><br></pre></td></tr></table></figure></li><li><p>光标属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cursor</span>：箭头可以变成需要的形状</span><br></pre></td></tr></table></figure></li></ul><p>继承中比较特殊的几点：</p><ul><li>a 标签的字体颜色不能被继承</li><li>h1-h6标签字体的大下也是不能被继承的</li></ul><h4 id="无继承的属性"><a href="#无继承的属性" class="headerlink" title="无继承的属性"></a>无继承的属性</h4><ul><li>display</li><li>文本属性：vertical-align、text-decoration</li><li>盒子模型的属性：宽度、高度、内外边距、边框等</li><li>背景属性：背景图片、颜色、位置等</li><li>定位属性：浮动、清除浮动、定位position等</li><li>生成内容属性：content、counter-reset、counter-increment</li><li>轮廓样式属性：outline-style、outline-width、outline-color、outline</li><li>页面样式属性：size、page-break-before、page-break-after</li></ul><h3 id="em-px-rem-vh-vw"><a href="#em-px-rem-vh-vw" class="headerlink" title="em&#x2F;px&#x2F;rem&#x2F;vh&#x2F;vw"></a>em&#x2F;px&#x2F;rem&#x2F;vh&#x2F;vw</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>​传统的项目开发中，我们只会用到<code>px</code>、<code>%</code>、<code>em</code>这几个单位，它可以适用于大部分的项目开发，且拥有比较良好的兼容性；从<code>CSS3</code>开始，浏览器对计量单位的支持又提升到了另外一个境界，新增了<code>rem</code>、<code>vh</code>、<code>vw</code>、<code>vm</code>等一些新的计量单位</p><h4 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h4><table><thead><tr><th>CSS单位</th><th></th></tr></thead><tbody><tr><td>相对长度单位</td><td>em、ex、ch、rem、vw、vh、vmin、vmax、%</td></tr><tr><td>绝对长度单位</td><td>cm、mm、in、px、pt、pc</td></tr></tbody></table><ul><li><p>px</p><p><code>px</code>为绝对单位，在于<code>px</code>的大小和元素的其他属性无关</p></li><li><p>em</p><p>em是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸（<code>1em = 16px</code>）</p><ul><li>em 的值并不是固定的</li><li>em 会继承父级元素的字体大小</li><li>em 是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸</li><li>任意浏览器的默认字体高都是 16px</li></ul></li><li><p>rem</p><p>rem，相对单位，相对的只是HTML根元素<code>font-size</code>的值</p><p>特点：</p><ul><li>rem单位可谓集相对大小和绝对大小的优点于一身</li><li>和em不同的是rem总是相对于根元素，而不像em一样使用级联的方式来计算尺寸</li></ul></li><li><p>vh、vw</p><p>vw ，就是根据窗口的宽度，分成100等份，100vw就表示满宽，50vw就表示一半宽。（vw 始终是针对窗口的宽），同理，<code>vh</code>则为窗口的高度</p><ul><li>对于普通定位元素就是我们理解的父元素</li><li>对于position: absolute;的元素是相对于已定位的父元素</li><li>对于position: fixed;的元素是相对于 ViewPort（可视窗口）</li></ul></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>​<strong>px</strong>：绝对单位，页面按精确像素展示</p><p>​<strong>em</strong>：相对单位，基准点为父节点字体的大小，如果自身定义了<code>font-size</code>按自身来计算，整个页面内<code>1em</code>不是一个固定的值</p><p>​<strong>rem</strong>：相对单位，可理解为<code>root em</code>, 相对根节点<code>html</code>的字体大小来计算</p><p>​<strong>vh、vw</strong>：主要用于页面视口大小布局，在页面布局上更加方便简单</p><h3 id="圆角-border-radius"><a href="#圆角-border-radius" class="headerlink" title="圆角 (border-radius)"></a>圆角 (border-radius)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>css3 圆角<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">2px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">50px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* border-top-left-radius:100px 50px; */</span></span></span><br><span class="line"><span class="language-css"><span class="comment">/* border-top-left-radius:100px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">border-top-right-radius:100px; */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* border-radius:40px; */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* border-radius:20%; */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">border-radius</span>:<span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/25/html5-css3/%E5%9C%86%E8%A7%92.png"></p><h3 id="阴影-box-shadow"><a href="#阴影-box-shadow" class="headerlink" title="阴影 (box-shadow)"></a>阴影 (box-shadow)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>css3 阴影<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">100px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">box-shadow</span>:<span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> <span class="number">0px</span> pink;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">100px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">box-shadow</span>:<span class="number">0px</span> <span class="number">0px</span> <span class="number">20px</span> <span class="number">2px</span> red inset;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/25/html5-css3/%E9%98%B4%E5%BD%B1.png"></p><h3 id="透明度"><a href="#透明度" class="headerlink" title="透明度"></a>透明度</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>css 透明度<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:<span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* background:url(images/location_bg.jpg); */</span></span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">50px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">2px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-radius</span>:<span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">opacity</span>:<span class="number">0.3</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">filter</span>:<span class="built_in">alpha</span>(opacity=<span class="number">30</span>);</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">line-height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">50px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">2px</span> solid <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>);</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-radius</span>:<span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">line-height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:<span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">215</span>,<span class="number">0</span>,<span class="number">0.3</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>床前明月光<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>床前明月光<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/25/html5-css3/%E9%80%8F%E6%98%8E%E5%BA%A6.png"></p><h3 id="过渡动画"><a href="#过渡动画" class="headerlink" title="过渡动画"></a>过渡动画</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* transition:border-radius 500ms ease,width 500ms ease 500ms,height 500ms ease 1s,background-color 500ms ease 1.5s; */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">transition</span>:all <span class="number">500ms</span> ease;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:red;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-radius</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/25/html5-css3/%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB.gif"></p><h3 id="运动曲线"><a href="#运动曲线" class="headerlink" title="运动曲线"></a>运动曲线</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-bottom</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transition</span>:all <span class="number">1s</span> linear;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>)&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transition</span>:all <span class="number">1s</span> ease;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>)&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transition</span>:all <span class="number">1s</span> ease-in;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>)&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transition</span>:all <span class="number">1s</span> ease-out;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>)&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transition</span>:all <span class="number">1s</span> ease-in-out;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">6</span>)&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transition</span>:all <span class="number">1s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.750</span>, -<span class="number">0.425</span>, <span class="number">0.055</span>, <span class="number">1.480</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">1000px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>linear<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>ease<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>ease-in<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>ease-out<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>ease-in-out<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>bezier<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/25/html5-css3/%E8%BF%90%E5%8A%A8%E6%9B%B2%E7%BA%BF.gif"></p><h3 id="动画案例-文字遮罩"><a href="#动画案例-文字遮罩" class="headerlink" title="动画案例( 文字遮罩)"></a>动画案例( 文字遮罩)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">50px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>:relative;</span></span><br><span class="line"><span class="language-css"><span class="attribute">overflow</span>:hidden;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span>  <span class="selector-class">.pic_info</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>);</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:<span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>:absolute;</span></span><br><span class="line"><span class="language-css"><span class="attribute">left</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">top</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transition</span>:all <span class="number">500ms</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.750</span>, -<span class="number">0.425</span>, <span class="number">0.055</span>, <span class="number">1.480</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span>  <span class="selector-class">.pic_info</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">line-height</span>:<span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.pic_info</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">top</span>:<span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/location_bg.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pic_info&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>图片说明：这是一个风景图图片说明：这是一个风景图图片说明：这是一个风景图<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/25/html5-css3/%E6%96%87%E5%AD%97%E9%81%AE%E7%BD%A9.gif"></p><h3 id="元素旋转"><a href="#元素旋转" class="headerlink" title="元素旋转"></a>元素旋转</h3><ul><li>倾斜</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/*  旋转方向判断</span></span></span><br><span class="line"><span class="comment"><span class="language-css"></span></span></span><br><span class="line"><span class="comment"><span class="language-css">1、x轴向右、y轴向下、z轴向屏幕外</span></span></span><br><span class="line"><span class="comment"><span class="language-css"></span></span></span><br><span class="line"><span class="comment"><span class="language-css">2、让轴向对着自己，顺时针方向就是该轴向的旋转方向</span></span></span><br><span class="line"><span class="comment"><span class="language-css"></span></span></span><br><span class="line"><span class="comment"><span class="language-css"></span></span></span><br><span class="line"><span class="comment"><span class="language-css">   */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">50px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transition</span>:all <span class="number">500ms</span> ease;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">transform-style</span>:preserve-<span class="number">3</span>d;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transform</span>:<span class="built_in">perspective</span>(<span class="number">800px</span>) <span class="built_in">rotateX</span>(<span class="number">0deg</span>);</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-css">Z 轴旋转</span></span></span><br><span class="line"><span class="comment"><span class="language-css">transform:rotate(45deg); </span></span></span><br><span class="line"><span class="comment"><span class="language-css"></span></span></span><br><span class="line"><span class="comment"><span class="language-css">*/</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">transform</span>:<span class="built_in">perspective</span>(<span class="number">800px</span>) <span class="built_in">rotateX</span>(-<span class="number">30deg</span>);</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/25/html5-css3/%E5%85%83%E7%B4%A0%E6%97%8B%E8%BD%AC1.gif"></p><ul><li>旋转</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>图片翻面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.con</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">272px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">100px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>:relative;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transform-style</span>:preserve-<span class="number">3</span>d;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transform</span>:<span class="built_in">perspective</span>(<span class="number">800px</span>) <span class="built_in">rotateY</span>(<span class="number">0deg</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.pic</span>,<span class="selector-class">.info</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">272px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>:absolute;</span></span><br><span class="line"><span class="language-css"><span class="attribute">left</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">top</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">backface-visibility</span>:hidden;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transform</span>:<span class="built_in">perspective</span>(<span class="number">800px</span>) <span class="built_in">rotateY</span>(<span class="number">0deg</span>);</span></span><br><span class="line"><span class="language-css"><span class="attribute">transition</span>:all <span class="number">2000ms</span> ease;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.info</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">line-height</span>:<span class="number">272px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transform</span>:<span class="built_in">translateZ</span>(<span class="number">2px</span>) <span class="built_in">rotateY</span>(<span class="number">180deg</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.con</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.pic</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transform</span>:<span class="built_in">perspective</span>(<span class="number">800px</span>) <span class="built_in">rotateY</span>(<span class="number">180deg</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.con</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.info</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transform</span>:<span class="built_in">perspective</span>(<span class="number">800px</span>) <span class="built_in">rotateY</span>(<span class="number">0deg</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;con&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/location_bg.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span>图片文字说明<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/25/html5-css3/%E5%85%83%E7%B4%A0%E6%97%8B%E8%BD%AC2.gif"></p><h3 id="案例风车动画"><a href="#案例风车动画" class="headerlink" title="案例风车动画"></a>案例风车动画</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>animation 动画<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">50px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">images/fengche.png</span>) no-repeat;</span></span><br><span class="line"><span class="language-css"><span class="attribute">animation</span>:moving <span class="number">1s</span> linear <span class="number">0s</span> infinite;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="keyword">@keyframes</span> moving&#123;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">from</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">0deg</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">to</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">360deg</span>);</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/25/html5-css3/%E9%A3%8E%E8%BD%A6%E5%8A%A8%E7%94%BB.gif"></p><h3 id="案例loading动画"><a href="#案例loading动画" class="headerlink" title="案例loading动画"></a>案例loading动画</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">125px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">200px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">70px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-radius</span>:<span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:red;</span></span><br><span class="line"><span class="language-css"><span class="attribute">animation</span>:loading <span class="number">500ms</span> ease <span class="number">0s</span> infinite alternate;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>)&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:green;</span></span><br><span class="line"><span class="language-css"><span class="attribute">animation</span>:loading <span class="number">500ms</span> ease <span class="number">100ms</span> infinite alternate;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>)&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:pink;</span></span><br><span class="line"><span class="language-css"><span class="attribute">animation</span>:loading <span class="number">500ms</span> ease <span class="number">200ms</span> infinite alternate;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>)&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:greenyellow;</span></span><br><span class="line"><span class="language-css"><span class="attribute">animation</span>:loading <span class="number">500ms</span> ease <span class="number">300ms</span> infinite alternate;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>)&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:cyan;</span></span><br><span class="line"><span class="language-css"><span class="attribute">animation</span>:loading <span class="number">500ms</span> ease <span class="number">400ms</span> infinite alternate;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="keyword">@keyframes</span> loading&#123;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">from</span>&#123;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">transform</span>:<span class="built_in">scaleY</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">to</span>&#123;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">transform</span>:<span class="built_in">scaleY</span>(<span class="number">0.5</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>loading...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/25/html5-css3/loading.gif"></p><h3 id="background-size"><a href="#background-size" class="headerlink" title="background-size"></a>background-size</h3><p>​<code>background-size</code>属性用于指定背景图片的尺寸大小。通过设置<code>background-size</code>属性，你可以控制背景图片的显示方式，使其适应元素的大小或呈现特定效果</p><ul><li><p>语法：<code>background-size: value;</code></p><p>可以是以下几种取值：</p><ul><li><code>auto</code>: 默认值，保持背景图片原始大小。</li><li><code>&lt;length&gt;</code>: 使用具体的长度值来定义背景图片的大小。</li><li><code>&lt;percentage&gt;</code>: 使用百分比来定义背景图片的大小，相对于包含块的大小。</li><li><code>cover</code>: 背景图片等比例放大或缩小，以完全覆盖元素。</li><li><code>contain</code>: 背景图片等比例放大或缩小，以完全包含在元素内。</li></ul></li></ul><h3 id="流式布局"><a href="#流式布局" class="headerlink" title="流式布局"></a>流式布局</h3><p>​流式布局（Fluid Layout）是一种网页布局设计方法，其特点是元素的宽度不固定的像素值而是根据浏览器窗口大小或设备屏幕大小进行自适应调整。</p><ul><li>流式布局使用对单位（如百分比）来定义元素的宽度，使得页面可以根据浏览器窗口大小自动调整布局。</li><li>元素的宽度会随着浏览器窗口大小的变化而自动调整，从而适应不同分辨率的设备。</li><li>流式布局通常会结合媒体查询（Media Queries）来实现响应式设计，以适配不同设备的屏幕大小。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>流体布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span>,<span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>:<span class="number">0</span></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">list-style</span>:none;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-css">第一种解决宽度超过的方法：</span></span></span><br><span class="line"><span class="comment"><span class="language-css">width:calc(25% - 4px); </span></span></span><br><span class="line"><span class="comment"><span class="language-css"></span></span></span><br><span class="line"><span class="comment"><span class="language-css">*/</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">25%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">line-height</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">2px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">box-sizing</span>:border-box;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;menu&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>菜单文字<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>菜单文字<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>菜单文字<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>菜单文字<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/25/html5-css3/%E6%B5%81%E5%BC%8F%E5%B8%83%E5%B1%80.gif"></p><h3 id="响应式布局-媒体查询"><a href="#响应式布局-媒体查询" class="headerlink" title="响应式布局 (媒体查询)"></a>响应式布局 (媒体查询)</h3><p>​响应式布局是一种网页设计方法，旨在使网站在不同设备上（如桌面脑、平板电脑、手机等）都能呈现出最佳视觉和功能体验。</p><ul><li>响应式布局通过使用流式网格、弹性图片大小以及媒体查询等技术，使得页面能根据用户设备的屏幕大小动态调整布局和内容排列。</li><li>响应式设计需要考虑用户界面元的尺寸、排列方式和交互方式，并确保它们适不同设备，提供一致的用户体验。</li><li>对于不同屏尺寸，可以通过CSS中的媒体查询来设置不同样式规则，或者通过JavaScript实现功能上的适配。</li></ul><p><strong>使用优点：</strong></p><ol><li><strong>多设备兼容</strong>：响应式布局可以确保网站在各种移动设备和桌面端浏览器上都能良好展示，提高了跨平台兼容性。</li><li><strong>良好用户体验</strong>：无论用户用何种设备访问网站，响应式设计都可以为其提供舒适且一致的浏览体验。</li><li><strong>SEO友好</strong>：谷歌对移动友好度有利于搜索结果排序,而采用了响应布局就符合这个要求</li></ol><p><strong>使用缺点：</strong></p><ol start="6"><li><strong>复杂设计与开发成本较高</strong>：实施响应式设计需要更多精力让页面适各种情况,因此可能会增加项目成本</li><li><strong>加载速度变慢</strong>: 在某些情况下,加载相对大量图片会导致加载速度减慢</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>响应式布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span>,<span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">list-style</span>:none;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.con</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">overflow</span>:hidden;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.con</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">23%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">30px</span> <span class="number">1%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="keyword">@media</span> (<span class="attribute">max-width</span>:<span class="number">800px</span>)&#123;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.con</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">46%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">30px</span> <span class="number">2%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="keyword">@media</span> (<span class="attribute">max-width</span>:<span class="number">500px</span>)&#123;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.con</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">90%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">30px</span> <span class="number">5%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;con&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/25/html5-css3/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80.gif"></p><p>响应式布局还可以利用以下技术来实现：</p><ol><li><strong>Viewport单位</strong>：Viewport单位（如vw、vh、vmin、vmax）可以根据视口（浏览器窗口）的大小来设置元素的尺寸，从而实现响应式设计。</li><li><strong>Flexbox布局</strong>：使用CSS3中的Flexbox布局来实现灵活的盒子模型，可以更方便地实现响应式布局。</li><li><strong>CSS Grid布局</strong>：CSS Grid布局是一种二维网格布局系统，可以更灵活地控制元素的排列和布局，适用于响应式设计。</li><li><strong>图片响应式设计</strong>：通过设置图片的max-width属性为100%来使图片在不同设备上自适应调整大小，保持比例不变。</li><li><strong>字体响应式设计</strong>：使用相对单位（如em、rem）来设置字体大小，使得字体可以根据设备屏幕大小自适应调整。</li><li><strong>响应式框架</strong>：使用响应式框架（如Bootstrap、Foundation等）来快速构建响应式网站，这些框架提供了一系列的CSS和JavaScript组件，可以帮助开发者快速实现响应式设计。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Css第二章</title>
      <link href="/2022/08/19/css%E7%AC%AC%E4%BA%8C%E7%AB%A0/"/>
      <url>/2022/08/19/css%E7%AC%AC%E4%BA%8C%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><h4 id="相对定位（Relative-Positioning）"><a href="#相对定位（Relative-Positioning）" class="headerlink" title="相对定位（Relative Positioning）"></a>相对定位（Relative Positioning）</h4><ul><li>优点：相对定位不会脱离文档流，元素在页面中的位置仍然占据原先的空间，并且可以通过设置 <code>top</code>、<code>right</code>、<code>bottom</code>、<code>left</code> 属性来进行微调位置。</li><li>缺点：相对定位对其他元素的定位影响较小，无法实现脱离文档流的效果。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>相对定位<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.con</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">100px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.con</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">line-height</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> <span class="selector-class">.box01</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>:relative;</span></span><br><span class="line"><span class="language-css"><span class="attribute">left</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">top</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:green;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;con&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box01&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box02&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box03&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/19/css%E7%AC%AC%E4%BA%8C%E7%AB%A0/%E7%9B%B8%E5%AF%B9%E5%AE%9A%E4%BD%8D.png"></p><h4 id="绝对定位（Relative-Positioning）"><a href="#绝对定位（Relative-Positioning）" class="headerlink" title="绝对定位（Relative Positioning）"></a>绝对定位（Relative Positioning）</h4><ul><li>优点：绝对定位可以脱离文档流，相对于最近的具有定位属性（非 <code>static</code>）的父元素或者根据文档进行定位，可以精确控制元素的位置。</li><li>缺点：如果没有合适的参考对象或设置不当，可能导致布局混乱，需要谨慎使用。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>绝对定位<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.con</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">100px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>:relative;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.con</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">line-height</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> <span class="selector-class">.box01</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>:absolute;</span></span><br><span class="line"><span class="language-css"><span class="attribute">left</span>:-<span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">top</span>:-<span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:green;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;con&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box01&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box02&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box03&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/19/css%E7%AC%AC%E4%BA%8C%E7%AB%A0/%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D.png"></p><h4 id="固定定位（Fixed-Positioning）"><a href="#固定定位（Fixed-Positioning）" class="headerlink" title="固定定位（Fixed Positioning）"></a>固定定位（Fixed Positioning）</h4><ul><li>优点：固定定位会相对于浏览器窗口进行定位，即使页面滚动时也会保持在固定位置，常用于创建固定的导航栏或工具条。</li><li>缺点：在移动设备上可能存在兼容性问题，因为固定定位的元素会固定在屏幕上不动。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>固定定位<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.con</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">100px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>:relative;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.con</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">line-height</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> <span class="selector-class">.box01</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>:fixed;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* left:0; */</span></span></span><br><span class="line"><span class="language-css"><span class="attribute">right</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* top:0; */</span></span></span><br><span class="line"><span class="language-css"><span class="attribute">bottom</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:green;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box4</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:pink;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>:absolute;</span></span><br><span class="line"><span class="language-css"><span class="attribute">left</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">top</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;con&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box01&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box02&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box03&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box4&quot;</span>&gt;</span>第四个盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/19/css%E7%AC%AC%E4%BA%8C%E7%AB%A0/%E5%9B%BA%E5%AE%9A%E5%AE%9A%E4%BD%8D.png"></p><h3 id="元素层级"><a href="#元素层级" class="headerlink" title="元素层级"></a>元素层级</h3><p>​元素的层级关系指的是元素在页面上的覆盖顺序。通过设置 z-index 属性，可以控制元素在层级上的表现，使得某些元素可以覆盖其他元素或者位于其他元素之下,合理设置元素的层级关系可以让页面呈现出更加丰富的效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>元素层级<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.con</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">100px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>:relative;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.con</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">line-height</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>:absolute;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> <span class="selector-class">.box01</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:green;</span></span><br><span class="line"><span class="language-css"><span class="attribute">z-index</span>:<span class="number">10</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> <span class="selector-class">.box02</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:pink;</span></span><br><span class="line"><span class="language-css"><span class="attribute">left</span>:<span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">top</span>:<span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> <span class="selector-class">.box03</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">left</span>:<span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">top</span>:<span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">z-index</span>:<span class="number">11</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;con&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box01&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box02&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box03&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/19/css%E7%AC%AC%E4%BA%8C%E7%AB%A0/%E5%85%83%E7%B4%A0%E5%B1%82%E7%BA%A7.png"></p><h3 id="CSS背景"><a href="#CSS背景" class="headerlink" title="CSS背景"></a>CSS背景</h3><h4 id="背景-background-image"><a href="#背景-background-image" class="headerlink" title="背景 (background-image)"></a>背景 (background-image)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>背景<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">320px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">160px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">5px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-bottom</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">images/bg.jpg</span>);</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">320px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">160px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">5px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-bottom</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box3</span>&#123;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">320px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">160px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">5px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-bottom</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* background-color:gold;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">background-image:url(images/bg.jpg); */</span></span></span><br><span class="line"><span class="language-css"><span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-css">repeat:重复平铺;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">repeat-x：横向重复平铺</span></span></span><br><span class="line"><span class="comment"><span class="language-css">repeat-y：纵向重复平铺</span></span></span><br><span class="line"><span class="comment"><span class="language-css">no-repeat:不重复;</span></span></span><br><span class="line"><span class="comment"><span class="language-css"></span></span></span><br><span class="line"><span class="comment"><span class="language-css"> */</span></span></span><br><span class="line"><span class="language-css"><span class="comment">/* background-repeat:no-repeat; */</span></span></span><br><span class="line"><span class="language-css"><span class="comment">/* background-position:center; */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* background-position:-20px -20px; */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">images/bg.jpg</span>) -<span class="number">20px</span> -<span class="number">20px</span> gold no-repeat;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box4</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">5px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* background-image:url(images/location_bg.jpg);</span></span></span><br><span class="line"><span class="comment"><span class="language-css">background-repeat:no-repeat;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">background-position:-110px -150px; */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">images/location_bg.jpg</span>) -<span class="number">110px</span> -<span class="number">150px</span> no-repeat;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>背景图片<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/bg.jpg&quot;</span>&gt;</span>背景图片<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box4&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/19/css%E7%AC%AC%E4%BA%8C%E7%AB%A0/%E8%83%8C%E6%99%AF.png"></p><h4 id="背景滚动-background-attachment"><a href="#背景滚动-background-attachment" class="headerlink" title="背景滚动 (background-attachment)"></a>背景滚动 (background-attachment)</h4><ul><li><code>background-attachment: scroll;</code>: 这是默认值，背景图片会随着元素内容滚动，即整个页面滚动时，背景图片也会随之滚动。</li><li><code>background-attachment: fixed;</code>: 背景图片固定在视口中的位置，当页面滚动时，背景图片不会跟随滚动，保持固定位置。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>背景滚动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">images/location_bg.jpg</span>);</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">1000px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-attachment</span>:fixed;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">实际应用中，我们可以用background属性将上面所有的设置项放在一起，而且也建议这么做，这样做性能更高，而且兼容性更好，比如：“background: #00FF00 url(bgimage.gif) no-repeat left center fixed”，这里面的“#00ff00”是设置background-color；“url(bgimage.gif)”是设置background-image；“no-repeat”是设置background-repeat；“left center”是设置background-position；“fixed”是设置background-attachment，各个设置项用空格隔开，有的设置项不写也是可以的，它会使用默认值。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">实际应用中，我们可以用background属性将上面所有的设置项放在一起，而且也建议这么做，这样做性能更高，而且兼容性更好，比如：“background: #00FF00 url(bgimage.gif) no-repeat left center fixed”，这里面的“#00ff00”是设置background-color；“url(bgimage.gif)”是设置background-image；“no-repeat”是设置background-repeat；“left center”是设置background-position；“fixed”是设置background-attachment，各个设置项用空格隔开，有的设置项不写也是可以的，它会使用默认值。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="css权重"><a href="#css权重" class="headerlink" title="css权重"></a>css权重</h3><p>权重的计算规则如下：</p><ul><li>每个选择器都有一个特定的权重值，权重值由四个部分组成：行内样式（1000）、ID选择器（100）、类选择器、伪类和属性选择器（10）、元素和伪元素选择器（1）。</li><li>通配符（*）、关系选择器（+、&gt;、~、’ ‘）和通用选择器（div、p、span等）的权重值为0。</li><li>权重值越高的规则优先级越高，当多个规则的权重相同时，后定义的规则会覆前面的规则。</li></ul><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="布局案例1-hd-ft"><a href="#布局案例1-hd-ft" class="headerlink" title="布局案例1 - hd+ft"></a>布局案例1 - hd+ft</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>布局实例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.pagenation</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">958px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">50px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.pagenation</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>:inline-block;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>:<span class="number">5px</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>:<span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-family</span>:<span class="string">&#x27;Microsoft Yahei&#x27;</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-decoration</span>:none;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">8px</span> <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:<span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.pagenation</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:red;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:<span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.pagenation</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>:inline-block;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>:<span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">958px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">50px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">list-style</span>:none;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">line-height</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>:inline-block;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>:<span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span> <span class="selector-class">.line</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:<span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">0</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-family</span>:<span class="string">&#x27;Microsoft Yahei&#x27;</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:<span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-decoration</span>:none;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;menu&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>首 页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>网站建设<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>网站建设<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>网站建设<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>网站建设<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>网站建设<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>网站建设<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pagenation&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>17<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>18<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>19<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>20<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/19/css%E7%AC%AC%E4%BA%8C%E7%AB%A0/%E5%B8%83%E5%B1%801.png"></p><h4 id="布局案例2-nav"><a href="#布局案例2-nav" class="headerlink" title="布局案例2 - nav"></a>布局案例2 - nav</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>布局实例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">list-style</span>:none;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:<span class="number">#55a8ea</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">960px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">50px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>:relative;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">line-height</span>:<span class="number">40px</span>; </span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* font-size:14px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">font-family:&#x27;Microsoft Yahei&#x27;;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">color:#fff; */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">font</span>:<span class="number">14px</span>/<span class="number">40px</span> <span class="string">&#x27;Microsoft Yahei&#x27;</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:<span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-decoration</span>:none;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:<span class="number">#00619f</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span> <span class="selector-class">.active</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:<span class="number">#00619f</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span> <span class="selector-class">.new</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">33px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">images/new.png</span>) no-repeat;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>:absolute;</span></span><br><span class="line"><span class="language-css"><span class="attribute">left</span>:<span class="number">433px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">top</span>:-<span class="number">9px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span> <span class="selector-class">.new</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">images/new.png</span>) no-repeat;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;menu&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>首 页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>网站建设<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>网站建设<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>网站建设<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>网站建设<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>网站建设<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>网站建设<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;new&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/19/css%E7%AC%AC%E4%BA%8C%E7%AB%A0/%E5%B8%83%E5%B1%802.png"></p><h4 id="布局案例3"><a href="#布局案例3" class="headerlink" title="布局案例3"></a>布局案例3</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>特征布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.news_list_con</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">290px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">50px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">overflow</span>:hidden;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.news_list_con</span> <span class="selector-tag">h3</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">560px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-bottom</span>:<span class="number">1px</span> solid <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">0px</span> auto;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.news_list_con</span> <span class="selector-tag">h3</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-bottom</span>:<span class="number">2px</span> solid red;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font</span>:<span class="number">18px</span>/<span class="number">50px</span> <span class="string">&#x27;Microsoft Yahei&#x27;</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:<span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>:<span class="number">0</span> <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>:relative;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.news_list_con</span> <span class="selector-tag">h3</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span><span class="selector-pseudo">:right</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font</span>:<span class="number">14px</span>/<span class="number">14px</span> <span class="string">&#x27;Microsoft Yahei&#x27;</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:<span class="number">#666</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-decoration</span>:none;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-top</span>:<span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.news_list_con</span> <span class="selector-tag">h3</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.news_list_con</span> <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">list-style</span>:none;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">560px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">238px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">7px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.news_list_con</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">38px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-bottom</span>:<span class="number">1px</span> solid <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">images/dot.gif</span>) left center no-repeat;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.news_list_con</span> <span class="selector-tag">ul</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">38px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font</span>:<span class="number">14px</span>/<span class="number">38px</span> <span class="string">&#x27;Microsoft Yahei&#x27;</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-decoration</span>:none;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:<span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-indent</span>:<span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">images/icon.jpg</span>) <span class="number">5px</span> center no-repeat;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.news_list_con</span> <span class="selector-tag">ul</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.news_list_con</span> <span class="selector-tag">ul</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span><span class="selector-pseudo">:right</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">38px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font</span>:<span class="number">14px</span>/<span class="number">38px</span> <span class="string">&#x27;Microsoft Yahei&#x27;</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:<span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;news_list_con&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>新闻列表<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>更多<span class="symbol">&amp;gt;</span><span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>特征布局：新闻列表所需知识点：盒模型、浮动<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2016-11-25<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>特征布局：新闻列表所需知识点：盒模型、浮动<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2016-11-25<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>特征布局：新闻列表所需知识点：盒模型、浮动<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2016-11-25<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>特征布局：新闻列表所需知识点：盒模型、浮动<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2016-11-25<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>特征布局：新闻列表所需知识点：盒模型、浮动<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2016-11-25<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>特征布局：新闻列表所需知识点：盒模型、浮动<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2016-11-25<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/19/css%E7%AC%AC%E4%BA%8C%E7%AB%A0/%E5%B8%83%E5%B1%803.png"></p><h4 id="布局案例4"><a href="#布局案例4" class="headerlink" title="布局案例4"></a>布局案例4</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>布局复习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">li</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">list-style</span>:none;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.goods_list_con</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">498px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">343px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">50px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.goods_list_con</span> <span class="selector-tag">h3</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">436px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font</span>:<span class="number">20px</span>/<span class="number">20px</span> <span class="string">&#x27;Microsoft Yahei&#x27;</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:<span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">30px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-left</span>:<span class="number">4px</span> solid red;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-indent</span>:<span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.pic</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">212px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">239px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:pink;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">17px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">29px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.goods_list</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">211px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">239px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span><span class="selector-pseudo">:right</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">17px</span> <span class="number">29px</span> <span class="number">0</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.pic_list</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">105px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">142px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.pic_list</span> <span class="selector-class">.picshow</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>:block;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">70px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">90px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:green;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.pic_list</span> <span class="selector-tag">h4</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font</span>:<span class="number">16px</span>/<span class="number">40px</span> <span class="string">&#x27;Microsoft Yahei&#x27;</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:<span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.goods_list</span> <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">211px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">97px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.goods_list</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">104px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">47px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">1px</span> dashed <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-right</span>:-<span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-bottom</span>:-<span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.goods_list</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>:inline-block;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">104px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">47px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-decoration</span>:none;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font</span>:<span class="number">14px</span>/<span class="number">47px</span> <span class="string">&#x27;Microsoft Yahei&#x27;</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:<span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.goods_list</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>:pink;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;goods_list_con&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>淘宝女装<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;goods_list&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pic_list&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;picshow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>时尚包包<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pic_list&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;picshow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>潮流美鞋<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>新品上市<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>女装<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>欧美风<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>美搭<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/19/css%E7%AC%AC%E4%BA%8C%E7%AB%A0/%E5%B8%83%E5%B1%804.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Css第一章</title>
      <link href="/2022/08/17/css%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
      <url>/2022/08/17/css%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="CSS样式引用"><a href="#CSS样式引用" class="headerlink" title="CSS样式引用"></a>CSS样式引用</h3><p>​css样式写法分为：内联样式 ，内嵌样式，外联样式；其中内联优先级最高，外部样式表的优先级最低</p><p>​!important 规则可以增加样式的权重，覆盖任何其他声明</p><div class="tabs" id="unique-name"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="unique-name-1">内联样式</button><button type="button" class="tab " data-href="unique-name-2">内嵌样式</button><button type="button" class="tab " data-href="unique-name-3">外联样式</button></ul><div class="tab-contents"><div class="tab-item-content active" id="unique-name-1"><p>内联样式，直接在html标签加上style属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>这是一段带有内联样式的文本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="unique-name-2"><p>和html元素放在同一个html文件下，用<code>&lt;style&gt; </code>标签包裹</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="unique-name-3"><p>单独创建.css 文件，在需要用到的html文件内使用link导入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="css选择器"><a href="#css选择器" class="headerlink" title="css选择器"></a>css选择器</h3><p>​选择器用于指定要样式化的HTML元素。选择器可以根据元素的标签名、类名、ID等属性来选择元素。</p><h4 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h4><p>​元素选择器（Element Selector）：根据元素的标签名选择元素。例如，选择所有段落元素可以使用 <code>p</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p &#123;</span><br><span class="line">  color: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类名选择器"><a href="#类名选择器" class="headerlink" title="类名选择器"></a>类名选择器</h4><p>​类选择器（Class Selector）：根据元素的类名选择元素。类选择器以<code>.</code>开头，后面跟类名。例如，选择类名为 <code>highlight</code> 的元素可以使用 <code>.highlight</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.highlight &#123;</span><br><span class="line">  background-color: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h4><p>​ID选择器（ID Selector）：根据元素的ID选择元素。ID选择器以<code>#</code>开头，后面跟ID名。每个页面中的ID应该是唯一的。例如，选择ID为 <code>header</code> 的元素可以使用 <code>#header</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#header &#123;</span><br><span class="line">  font-size: 24px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h4><p>​后代选择器（Descendant Selector）：选择指定元素的后代元素。后代选择器使用空格分隔不同的选择器。例如，选择 <code>.content</code> 元素内的所有 <code>p</code> 元素：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.content p &#123;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h4><p>​子元素选择器（Child Selector）：选择指定元素的直接子元素。子元素选择器使用 <code>&gt;</code> 分隔不同的选择器。例如，选择 <code>.menu</code> 元素的直接子元素 <code>li</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.menu &gt; li &#123;</span><br><span class="line">  list-style-type: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通用选择器"><a href="#通用选择器" class="headerlink" title="通用选择器"></a>通用选择器</h4><p>​通用选择器（Universal Selector）：选择所有元素。通用选择器使用 <code>*</code> 表示。例如，为所有元素设置默认边框：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  border: 1px solid black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>​通过css就可以将html表格进行优化</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>表格样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.goods_list</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-collapse</span>:collapse;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-family</span>: <span class="string">&#x27;Microsoft Yahei&#x27;</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.goods_list</span> <span class="selector-tag">th</span>,<span class="selector-class">.goods_list</span> <span class="selector-tag">td</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.goods_list</span> <span class="selector-tag">th</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:<span class="number">#3366cc</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:<span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;goods_list&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>价格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>备注<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>¥ 5.00<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>销售中<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>¥ 5.00<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>销售中<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>¥ 5.00<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>销售中<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/17/css%E7%AC%AC%E4%B8%80%E7%AB%A0/table1.png"></p><h3 id="CSS-盒子模型"><a href="#CSS-盒子模型" class="headerlink" title="CSS 盒子模型"></a>CSS 盒子模型</h3><p>​CSS盒模型是指在网页布局时，每个元素被看作一个矩形的盒子，这个盒子包括内容区域、内边距（padding）、边框（border）和外边距（margin）。</p><ul><li><p>内容区域（Content）：内容区域包含元素的实际内容，例如文本、图片等。内容区域的宽度和高度可以通过设置元素的 <code>width</code> 和 <code>height</code> 属性来控制。</p></li><li><p>内边距（Padding）：内边距是内容区域与边框之间的空白区域，用于控制元素内容与边框之间的距离。内边距的大小可以通过设置元素的 <code>padding-top</code>、<code>padding-right</code>、<code>padding-bottom</code> 和 <code>padding-left</code> 属性来指定，也可以使用 <code>padding</code> 属性简写设置所有方向的内边距。</p></li><li><p>边框（Border）：边框包围在内边距的外侧，用于围绕元素内容和内边距创建可见的边界。边框的样式、宽度和颜色可以通过设置元素的 <code>border-style</code>、<code>border-width</code> 和 <code>border-color</code> 属性来指定。</p></li><li><p>外边距（Margin）：外边距是边框与相邻元素之间的空白区域，用于控制元素与其他元素之间的距离。外边距的大小可以通过设置元素的 <code>margin-top</code>、<code>margin-right</code>、<code>margin-bottom</code> 和 <code>margin-left</code> 属性来指定，也可以使用 <code>margin</code> 属性简写设置所有方向的外边距。</p><p>在CSS中，元素的宽度（width）和高度（height）指的是内容区域的宽度和高度，而元素的总宽度和总高度还要加上内边距、边框和外边距的宽度。这个概念称为“盒模型”。</p></li></ul><p><img src="/2022/08/17/css%E7%AC%AC%E4%B8%80%E7%AB%A0/%E7%9B%92%E6%A8%A1%E5%9E%8B.png"></p><h3 id="盒子尺寸"><a href="#盒子尺寸" class="headerlink" title="盒子尺寸"></a>盒子尺寸</h3><h4 id="标准盒模型-vs-IE-盒模型"><a href="#标准盒模型-vs-IE-盒模型" class="headerlink" title="标准盒模型 vs. IE 盒模型"></a>标准盒模型 vs. IE 盒模型</h4><ul><li>标准盒模型（content-box）：元素的宽度和高度只包括内容区域，不包括内边距（padding）、边框（border）和外边距（margin）。</li><li>IE 盒模型（border-box）：元素的宽度和高度包括内容区域、内边距和边框，但不包括外边距。</li></ul><h4 id="盒子尺寸计算公式"><a href="#盒子尺寸计算公式" class="headerlink" title="盒子尺寸计算公式"></a>盒子尺寸计算公式</h4><ul><li>对于标准盒模型：总宽度 &#x3D; 内容宽度 + 左内边距 + 右内边距 + 左边框 + 右边框 + 左外边距 + 右外边距</li><li>对于 IE 盒模型：总宽度 &#x3D; 内容宽度 + 左边框 + 右边框 + 左外边距 + 右外边距</li></ul><h4 id="盒模型的设置"><a href="#盒模型的设置" class="headerlink" title="盒模型的设置"></a>盒模型的设置</h4><ul><li>可以通过设置 CSS 的 <code>box-sizing</code> 属性来指定盒模型的类型，取值可以是 <code>content-box</code> 或 <code>border-box</code>。</li><li>在保证兼容性的前提下，可以使用以下代码设置盒模型： <code>box-sizing: border-box;</code>（部分浏览器支持）</li></ul><h4 id="兼容性问题"><a href="#兼容性问题" class="headerlink" title="兼容性问题"></a>兼容性问题</h4><ul><li>在编写 CSS 样式时，应该尽量考虑跨浏览器的兼容性问题。特别是在处理盒子尺寸时，需要谨慎选择盒模型，以确保页面在不同浏览器下显示一致。</li><li>在处理盒子尺寸和布局时，可以使用现代的布局技术（如 Flexbox 和 Grid）来简化代码并提高兼容性。</li></ul><h3 id="垂直margin合并问题"><a href="#垂直margin合并问题" class="headerlink" title="垂直margin合并问题"></a>垂直margin合并问题</h3><p>​两个相邻块级元素的上下 margin 相遇时，它们的 margin 会合并成一个 margin 的现象</p><ol><li>同一方向相邻元素的 margin 会合并：<ul><li>当两个相邻的块级元素中的 margin 相遇时，它们的 margin 会合并为一个 margin，取两者中较大的那个值作为最终的 margin。</li></ul></li><li>没有边框、padding、inline内容或 clearance 分隔的父子元素 margin 也会合并：<ul><li>如果一个父元素没有 border、padding、inline 内容或 clearance 分隔，且其第一个或最后一个子元素的 margin 会和父元素的 margin 合并。</li></ul></li><li>为了避免垂直 margin 合并带来的意外结果，可以考虑以下方法来解决或减少合并问题<ul><li>设置一个元素的 border、padding 或 overflow 属性可以防止其 margin 和其子元素的 margin 合并。</li><li>在两个相邻元素之间插入一个空的内联元素，可以阻止它们的 margin 合并。</li><li>为一个块级元素添加一个 <code>display: inline-block;</code> 可以阻止其 margin 与相邻元素的 margin 合并。</li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>垂直margin合并<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">50px</span> auto;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">text-indent</span>:<span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* margin-left:20px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">margin-right:20px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">margin-top:30px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">margin-bottom:30px; */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">30px</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。解决方法如下：</span><br><span class="line"></span><br><span class="line">1、使用这种特性</span><br><span class="line">2、设置一边的外边距，一般设置margin-top</span><br><span class="line">3、将元素浮动或者定位</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。解决方法如下：</span><br><span class="line"></span><br><span class="line">1、使用这种特性</span><br><span class="line">2、设置一边的外边距，一般设置margin-top</span><br><span class="line">3、将元素浮动或者定位</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。解决方法如下：</span><br><span class="line"></span><br><span class="line">1、使用这种特性</span><br><span class="line">2、设置一边的外边距，一般设置margin-top</span><br><span class="line">3、将元素浮动或者定位</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。解决方法如下：</span><br><span class="line"></span><br><span class="line">1、使用这种特性</span><br><span class="line">2、设置一边的外边距，一般设置margin-top</span><br><span class="line">3、将元素浮动或者定位</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。解决方法如下：</span><br><span class="line"></span><br><span class="line">1、使用这种特性</span><br><span class="line">2、设置一边的外边距，一般设置margin-top</span><br><span class="line">3、将元素浮动或者定位</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="margin-top-塌陷问题"><a href="#margin-top-塌陷问题" class="headerlink" title="margin-top 塌陷问题"></a>margin-top 塌陷问题</h3><p>​margin-top 塌陷问题通常发生在块级元素上，当一个块级元素的第一个子元素设置了 margin-top 时，其自身的 margin-top会塌陷到父元素上。这可能导致页面布局出意外的间距和位置。</p><p>解决这个问题的方法有几种：</p><ol><li>将父容器设置为 overflow: auto; 或 overflow: hidden; 可以清除塌陷。</li><li>使用-top 替代 margin-top。</li><li>使用 border-top 替代 margin-top。 . 设置父级容器为 display: flex; 或 display: grid; 可能也会解决这个问题。</li></ol><h3 id="css布局"><a href="#css布局" class="headerlink" title="css布局"></a>css布局</h3><h4 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h4><ul><li>特点：<ul><li>默认情下，块级元素会独占一行，从上至下排。</li><li>块级元素可以设置 width、height、margin、padding 等属性控制其尺寸和布局。</li></ul></li><li>优点： -适合用于创建页面结构，比如<div>和<section>标签。<ul><li>可以通过设置属性来控制盒模型相关样式（width、height等）。</li></ul></section></div></li><li>缺点 - 默认情况下会独占一行，不适合在水平排内容时使用。</li></ul><h4 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h4><ul><li><p>特点：</p></li><li><p>行内元素在默认情况下不会换行，在同一行。</p><ul><li>行内元素无法直接设置 width 和 height 属性，并且垂直方向上的 margin 和 padding 不会产生效果（只有水平方向上有效）。</li><li>优点：<ul><li>适包裹文本或者小片段内容，比如 <code>&lt;span&gt;</code> 和 <code>&lt;a&gt;</code> 标签。</li><li>不会独占一行，在水排列内容时非常便利。 缺点： -宽高无效</li></ul></li><li>对外边距垂直方向不起作用</li></ul></li></ul><h4 id="行内元素-1"><a href="#行内元素-1" class="headerlink" title="行内元素"></a>行内元素</h4><p>​具备了同时拥有块级和行内特性 邻两个<code>inline-block</code>之间存在空格回车符缩进导致间现 （解决办法：将 HTML 文档写成一整行。当然这个体验定不好） 定义 inline-block 元素除了添加 display: inline-block 属性之外， 还需要修复于字符间距带来额外空白间隙问题</p><h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><h4 id="浮动-1"><a href="#浮动-1" class="headerlink" title="浮动"></a>浮动</h4><p>​浮动是一种常用的布局方式，可以让元素脱离正常的文档流，悬浮在其他元素的周围</p><ul><li>介绍<ul><li>通过 <code>float</code> 属性可以将元素向左或向右浮动，周围的内容会围绕着浮动元素排列。</li><li>可以使用 <code>left</code>、<code>right</code>、<code>none</code> 或 <code>inherit</code> 来定义元素的浮动方向。</li></ul></li><li>优点<ul><li>创造多栏布局：通过浮动可以实现多栏布局，例如实现文字环绕图片的效果。</li><li>响应式设计：在响应式网页设计中，浮动可以很好地适应不同屏幕尺寸。</li></ul></li><li>缺点<ul><li>清除浮动：浮动元素可能造成父元素塌陷，需要清除浮动以避免影响布局。</li><li>破坏文档流：浮动的元素脱离了文档流，有时会引起布局混乱。</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>浮动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box01</span>,<span class="selector-class">.box02</span>,<span class="selector-class">.box03</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font</span>:<span class="number">30px</span>/<span class="number">200px</span> <span class="string">&#x27;Microsoft Yahei&#x27;</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box01</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box02</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span><span class="selector-pseudo">:right</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box03</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box01&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box01&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box01&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box01&quot;</span>&gt;</span>a标签<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box02&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box03&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/17/css%E7%AC%AC%E4%B8%80%E7%AB%A0/%E6%B5%AE%E5%8A%A8-float.png"></p><h4 id="浮动制作文字缠绕效果"><a href="#浮动制作文字缠绕效果" class="headerlink" title="浮动制作文字缠绕效果"></a>浮动制作文字缠绕效果</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>浮动文字饶图<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.con</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">100px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.pic</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">0</span> <span class="number">10px</span> <span class="number">5px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.duanluo</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:green;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:<span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;con&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;duanluo&quot;</span>&gt;</span>1、浮动元素有左浮动(float:left)和右浮动(float:right)两种</span><br><span class="line"></span><br><span class="line">2、浮动的元素会向左或向右浮动，碰到父元素边界、浮动元素、未浮动的元素才停下来</span><br><span class="line"></span><br><span class="line">3、相邻浮动的块元素可以并在一行，超出父级宽度就换行</span><br><span class="line"></span><br><span class="line">4、浮动让行内元素或块元素自动转化为行内块元素</span><br><span class="line">2、浮动的元素会向左或向右浮动，碰到父元素边界、浮动元素、未浮动的元素才停下来</span><br><span class="line"></span><br><span class="line">3、相邻浮动的块元素可以并在一行，超出父级宽度就换行</span><br><span class="line"></span><br><span class="line">4、浮动让行内元素或块元素自动转化为行内块元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/17/css%E7%AC%AC%E4%B8%80%E7%AB%A0/%E6%B5%AE%E5%8A%A8-float2.png"></p><h4 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h4><p>原因：在使用CSS浮动布局时，需要清除浮动的主要原因是为了避免父元素塌陷。父元素塌陷是指当包含浮动元素的元素高度无法自适应子元素高度时所发的问题，导致布局混乱。</p><p>当父元素不给高度的时候，内部元素不浮动时会撑开，而浮动的时候，父元素变成一条线</p><ol><li>清除浮动的传统方式是在浮动元素后面添加一个空元素，并为其设置 <code>clear: both;</code> 的样式</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float-left&quot;</span>&gt;</span>浮动左侧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float-right&quot;</span>&gt;</span>浮动右侧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;clear: both;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用伪元素 <code>::after</code> 来清除浮动，这是一种比较常用且优雅的方法，代码如下：</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>父元素触发 BFC（块级格式化上下文）也可以清除浮动，可以给父元素添加 <code>overflow: hidden;</code> 或 <code>overflow: auto;</code> 触发 BFC，这样也能清除浮动效果。</p><p>缺点：内容增多的时候容易造成不会自动换行导致内容被隐藏掉，无法显示要溢出的元素</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html第二章</title>
      <link href="/2022/08/14/html%E7%AC%AC%E4%BA%8C%E7%AB%A0/"/>
      <url>/2022/08/14/html%E7%AC%AC%E4%BA%8C%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<div class="tabs" id="unique-name"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="unique-name-1">Solution 1</button><button type="button" class="tab " data-href="unique-name-2">Solution 2</button><button type="button" class="tab " data-href="unique-name-3">Solution 3</button></ul><div class="tab-contents"><div class="tab-item-content active" id="unique-name-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-item-content" id="unique-name-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-item-content" id="unique-name-3"><p><strong>This is Tab 3.</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 开始节点</span><br><span class="line">in=&gt;inputoutput: 输入</span><br><span class="line">e=&gt;end: 结束节点</span><br><span class="line">op=&gt;operation: 操作节点</span><br><span class="line">cond=&gt;condition: 条件节点</span><br><span class="line">sub=&gt;subroutine: 子例程</span><br><span class="line">out=&gt;inputoutput: 输出</span><br><span class="line">st(right)-&gt;in-&gt;op-&gt;cond</span><br><span class="line">cond(yes,right)-&gt;out-&gt;e</span><br><span class="line">cond(no)-&gt;sub</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html</title>
      <link href="/2022/08/12/html/"/>
      <url>/2022/08/12/html/</url>
      
        <content type="html"><![CDATA[<h3 id="文档类型"><a href="#文档类型" class="headerlink" title="文档类型"></a>文档类型</h3><p><img src="/2022/08/12/html/html_version.png"></p><h4 id="html-1-0"><a href="#html-1-0" class="headerlink" title="html 1.0"></a>html 1.0</h4><p>​HTML1.0：HTML1.0是最早的HTML标准，功能相对比较简单，主要用于创建基本的网页结构和文本排版。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="attr">xml:lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>xhtml 1.0 文档类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  1、标签建议全部小写  --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">BODY</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  2、属性用引号引起来  --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;aa&quot;</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  3、标签应该闭合 成对标签应该成对出现，单个标签在结尾加 “ /”  --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 4、img标签加上alt属性   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/00111.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;风景图&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">HTML</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="html5"><a href="#html5" class="headerlink" title="html5"></a>html5</h4><p>​HTML5：HTML5是一种更加强大和灵活的标记语言，引入了许多新的元素和API，能够更好地支持多媒体元素、图形、动画等功能。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>html5文档类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>html1 与 html5<ul><li><strong>语法</strong>：<ul><li>HTML1.0：HTML1.0比较简单，语法较为严格。</li><li>HTML5：HTML5引入了许多新的语法和元素，使得创建和设计网页更加灵活和便捷</li></ul></li><li><strong>多媒体支持</strong>：<ul><li>HTML1.0：HTML1.0对多媒体元素的支持较为有限。</li><li>HTML5：HTML5具有更强大的多媒体支持，包括视频、音频、canvas等元素，使得网页能够展示更丰富的内容。</li></ul></li><li><strong>跨平台兼容性</strong>：<ul><li>HTML1.0：HTML1.0在不同浏览器和设备上的兼容性相对较差。</li><li>HTML5：HTML5基本上能够在各种现代浏览器和设备上良好地运行，具有更好的跨平台兼容性。</li></ul></li></ul></li></ul><h3 id="标题-段落-换行"><a href="#标题-段落-换行" class="headerlink" title="标题 - 段落 - 换行"></a>标题 - 段落 - 换行</h3><ul><li><p>标题</p><p>html的标题一共有6个分别为：h1,h2,h3,h4,h5,h6;</p><p>不同的标题可以对应不同的文字大小，用于定义网页的标题或章节标题，具有不同的层级结构。这些标签不仅用于呈现文本的外观，还有利于搜索引擎优化（SEO），有助于页面内容的结构化和可读性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>html标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>四级标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>五级标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>段落</p><p>段落标签（</p><p>）用于定义段落，可以将文本分成适当的段落，从而提高页面的可读性。段落标签不仅定义了文本的布局和格式，还有助于将内容按照逻辑结构进行组织，使页面更易于理解和浏览。通常在段落标签中包含的文本段落之间会有一定的间距，使页面看起来更加清晰和整洁。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>html标题、段落<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span> 一个html文件就是一个<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>网页，html文件用编辑器打开显示的是文本，可以用文本的方<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    式编辑它，如果用浏览器打开，浏览器会按照标签描述内容将文件渲染成网页，显示的网<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    页可以从一个网页链接跳转到另外一个网页。一个html文件就是一个网页，html文件用编辑器打开显示的是文本，可以用文本的方</span><br><span class="line">    式编辑它，如果用浏览器打开，浏览器会按照标签描述内容将文件渲染成网页，显示的网</span><br><span class="line">    页可以从一个网页链接跳转到另外一个网页。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>&lt;br&gt;</code> 标签插入单行换行符。</p></li></ul><h3 id="图像及路径"><a href="#图像及路径" class="headerlink" title="图像及路径"></a>图像及路径</h3><ul><li><p>图像标签为 <img> 属性有 src, alt </p><ul><li>src嵌入的图片的路径</li><li>alt     属性包含一条对图像的文本描述, 对无障碍而言, 屏幕阅读器会将这些描述读给需要使用阅读器的使用者听，让他们知道图像的含义。如果无法加载图像，普通浏览器也会在页面上显示 <code>alt</code> 属性中的备用文本</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>html图像及路径<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/002-022.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;水果&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>​锚元素：<a> , 通过 href 属性创建通向其他网页，文件，电子邮件地址；或统一页面内的位置</a></p><ul><li><p>href   跳转链接</p></li><li><p>title    链接注释</p></li><li><p>target    指定在何处显示链接</p><ul><li><code>_self</code>：当前页面加载。（默认）</li><li><code>_blank</code>：通常在新标签页打开，但用户可以通过配置选择在新窗口打开。</li><li><code>_parent</code>：当前浏览环境的父级浏览上下文。如果没有父级框架，行为与 <code>_self</code> 相同。</li><li><code>_top</code>：最顶级的浏览上下文（当前浏览上下文中最“高”的祖先）。如果没有祖先，行为与 <code>_self</code> 相同。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>链接<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">title</span>=<span class="string">&quot;跳转到百度&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 不做任何操作   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>缺省值<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>页面内跳转<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;biaoti01&quot;</span>&gt;</span>标题一<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#biaoti01&quot;</span>&gt;</span>标题一<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#biaoti02&quot;</span>&gt;</span>标题二<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#biaoti03&quot;</span>&gt;</span>标题三<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#biaoti04&quot;</span>&gt;</span>标题四<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span> </span><br></pre></td></tr></table></figure></li></ul><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><div class="tabs" id="unique-name"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="unique-name-1">有序列表(ol)</button><button type="button" class="tab " data-href="unique-name-2">无序列表(ul)</button><button type="button" class="tab " data-href="unique-name-3">列表标签(dl)</button></ul><div class="tab-contents"><div class="tab-item-content active" id="unique-name-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>html<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>css<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>javascript<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="unique-name-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="unique-name-3"><p><strong>dl, dt, dd含义</strong></p><ul><li>dl：定义列表（Definition List）</li><li>dt：定义术语（Definition Term）</li><li>dd：定义描述（Definition Description）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>html<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>负责页面的结构<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>css<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>样式<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>行为<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>产品列表<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span> <span class="attr">valign</span>=<span class="string">&quot;middle&quot;</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>产品名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>产品价格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>产品数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>¥5.00<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>橘子<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>¥4.00<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>2000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/12/html/table1.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>个人简历表<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;5&quot;</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span>&gt;</span>基本情况<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;18%&quot;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;18%&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;18%&quot;</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;18%&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>名族<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>政治面貌<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>籍贯<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>电子邮箱<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/12/html/table2.png"></p><ul><li>简历案例</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>简历<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span> <span class="attr">height</span>=<span class="string">&quot;800&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;260&quot;</span> <span class="attr">valign</span>=<span class="string">&quot;top&quot;</span> <span class="attr">bgcolor</span>=<span class="string">&quot;#f2f2f2&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;260&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;230&quot;</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/pic1x.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;人物图片&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;30&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span>张某某<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span>1821089xxxx<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span>zhangxxx@126.com<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;30&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;480&quot;</span> <span class="attr">valign</span>=<span class="string">&quot;top&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;480&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;75&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/resume.png&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;480&quot;</span> <span class="attr">height</span>=<span class="string">&quot;180&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;30&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>个人基本情况<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span>&gt;</span>姓 名：张达山<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span>&gt;</span>籍 贯：北京昌平<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>性 别：男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>身 高：175cm<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>民 族：汉<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>体 重：70kg<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>出生日期：1992.03.28<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>电 话：1821089xxxx<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>专 业：工业设计<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>现居住地：昌平天通苑<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;30&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/12/html/table3.png"></p><ul><li>表单案例</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>表单<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://wwww.itcast.cn&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">id</span>=<span class="string">&quot;female&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>爱好：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like&quot;</span> <span class="attr">value</span>=<span class="string">&quot;game&quot;</span>&gt;</span> 打游戏</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like&quot;</span> <span class="attr">value</span>=<span class="string">&quot;shopping&quot;</span>&gt;</span> 逛街</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sleep&quot;</span>&gt;</span> 睡觉</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>个人照片<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>籍贯：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;site&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>个人描述：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- &lt;input type=&quot;image&quot; name=&quot;&quot; src=&quot;images/new.png&quot;&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/12/html/table4.png"></p><h3 id="内嵌框架-iframe"><a href="#内嵌框架-iframe" class="headerlink" title="内嵌框架- iframe"></a>内嵌框架- iframe</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>内嵌框架<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;myframe&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.qq.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;myframe&quot;</span>&gt;</span>腾讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">width</span>=<span class="string">&quot;900&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">name</span>=<span class="string">&quot;myframe&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;001列表.html&quot;</span> <span class="attr">width</span>=<span class="string">&quot;900&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/12/html/iframe.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防抖节流</title>
      <link href="/2022/07/24/%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81/"/>
      <url>/2022/07/24/%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h4 id="防抖节流-闭包的实际运用"><a href="#防抖节流-闭包的实际运用" class="headerlink" title="防抖节流(闭包的实际运用)"></a>防抖节流(闭包的实际运用)</h4><ul><li><p>防抖函数</p><p>当持续出发事件，一定时间没有再触发该事件，事件函数将执行一次</p><p>如果设定时间之前又触发了一次，则重新延时(定时器)；类似王者荣耀回城，再次点击回城重新计时  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timeout;</span><br><span class="line"><span class="comment">//利用闭包来延长timer 的声明周期和作用域</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="variable language_">this</span>; <span class="comment">// 保存this指向</span></span><br><span class="line">        <span class="keyword">let</span> args = <span class="variable language_">arguments</span>; <span class="comment">// 拿到event对象</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">clearTimeout</span>(timeout) <span class="comment">// 清除上一次的函数</span></span><br><span class="line">        timeout = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;  <span class="comment">// 创建新的事件，并重新计时</span></span><br><span class="line">            func.<span class="title function_">apply</span>(context, args)</span><br><span class="line">        &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>节流函数</p><p>当持续触发一个事件的时候，保证一段事件内，只调用一次事件处理；类似王者荣耀技能，只有当CD结束时才能再次释放</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttled2</span>(<span class="params">fn, delay = <span class="number">500</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line"> <span class="comment">//利用闭包来延长timer 的声明周期和作用域</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">                timer = <span class="literal">null</span></span><br><span class="line">            &#125;, delay);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>相同点：</p><ul><li>都可以通过使用 <code>setTimeout</code> 实现</li><li>目的都是，降低回调执行频率。节省资源</li></ul><p>应用场景：</p><p>​防抖：</p><ul><li>搜索框搜索输入。只需用户最后一次输入完，再发送请求</li><li>手机号、邮箱验证输入检测</li><li>窗口大小<code>resize</code>。只需窗口调整完成后，计算窗口大小。防止重复渲染。</li></ul><p>​节流：</p><ul><li>滚动加载，加载更多或滚到底部监听</li><li>搜索框，搜索联想功能</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>firstBlog</title>
      <link href="/2022/07/03/firstBlog/"/>
      <url>/2022/07/03/firstBlog/</url>
      
        <content type="html"><![CDATA[<p>第一篇博客 test</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
